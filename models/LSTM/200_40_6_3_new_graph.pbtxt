node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "LSTM_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "LSTM_1/kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\247G\200=\364\266\213\275\341\375N=\221C\227=\265\265\316=)\235\331=\313iV=\0379\356\274\212\215\230\274\n\250\371\274\204\234W\2755A\231\275/\344;\275\374W\362\271p1H\275\306\262\311=\240\241\024\274sy\006=(~ \275R\226o\274\324\345\361\274\210G\020\275\352\033\r\276S\225\206\275\247\204<=\r\236\177\275$~\365\274\241\362\022>\r\257\321\274n\353\264=\337L\263=\373\347\250;\020\247\007<\326\360\276=\352\222o=\034\177\226\271\203-\206\274\tz\222\274\345\335\246<p\342\003\275\310\274x\275\355\326\220=\320\226Q\272\310ig\275\2334\023=]\2419\275u\244\000>\301\nv=`\263i=\335[\265\275N=\335\275e\365\371\274\3614m;z\303 =\035\224\240\275\254S\035=\216\313\322\272Sb\345<\004\360\216\273\245O\215\275\035\373\326=\204Q\202=\242\307v\275\234\3073=tb\301\275\202% <3s\376\275>[~=\351\261p=3\003\236=\"\334!=E\200$\276\344\316j\275\263G\242=\031\225:\2757W\226\274\222M\207=EB\330<@@ \274K\3050=u\362\275:e\370\215=[\010F\273%\023\267=vLD=\312\003?\275\240\211J\275\006\304-\275\202\223R\275k\255V\274\001\021\340=y\352\325\275\240\026\025=\271\373\357<\334\275\203=X\200\311\274y\277.=p\312\007\276G\355&\275m:0\276?\351\002;\342\253\202=\357\324\314<\346|}\275\243\273\340<\350O\351\274\211z\255\275\016\220\003>\\\377/<\302\207\030\274s\244\226=\032F\206\273S\211\374<\027\246\346<j`5<2\234\371\275q\350m\274\336l\331\274\"\276\243\275.V\315\274EN\201=\276\\\231=\205\251\030;\001\350\325\274uB\251<\356S\244<fz\001\274\265\317\\=\232\2463\275\177\261\353=d\010\201\275>\213\317=]sW\274\220\360\236=\317\311Q=\274\225\233= ]\207<K\0000\275\014\201\214=h45=\251Q\366\274D\250k\2758\255\254<\207o\370\274\257ol\2744X\237=\303\005A\275\302\\\\\275\223B\236\275\242\311X\274\025\251\030\276\305\274\244\274!HH\275\212\177\215\273c\314\205=\370h\372;\\)\323\274\304\022\263=\373\263H\275\373()\275\3314O\275\366\2464;jT\246\275\336\036\003\274\2456\352\274_Dj\275\343\007L=\243\0233=4\027d\274B^\250\274\246\020\216\275\r\300 \274I\267@=y\310\366<\013\256\031\275N5>=P^\304\273\373uv\275Cp\240=\031\3235\275j\343\203=\005\2710\275\221\3256<9\270\313=\233\210\000>\242\231\326=\355\024\203\275\312vE<\212\375\261<\010v\272;u+K\275ta\353;R}6\275\004\212p<\302\236,=\364R\035=\335\300\217\275\010H\221\274jO\301\275\375\356}\274\036X\256\273\030\0234\275\210\346\303=\023Qv\274\3011!\275\363\245\020\273\264J\337;\337\n\235\275\031\365\230\275\273Q\036=\313i\340\274\267\026\t>\t9B=\000\271\026;\352\257\241=F\237e=\365\327\206=b\251o\275\267\024\330\275{{\362\274\370\374\305=\343n\352\275\\\017S\274\233\300\240\275\360\022\022\276\177\377\016>\373\277N=\271\344\235=\302\245\204\275\3054\251\275\275\301\207=\022\317z\275\274\217\361=\2107\036\275\260\323a={!3=\342\330P\274\363\224\034\273(_)\275\215\362\316\274\222$\026\275}\302V\275\233\'\037\275\302|\252<\210G\331=\356\260\220\275\247\236\275\275\270K\272=\361\366>=E`\203=\266\337\027\275\260\277g\275\022\r\275\274<\346\005=U/C\275\361e\306\275\210\'\204\275\275x\362;\016\250A=\371D\226\275\352\255\217\275\212\tA\275\014\250\005=$\"\264\274\304\231\005\275\317\341\017\276\210\017\211\274\355\323\341;k6t=\304\320\222\275\030?<=\n\327;\275\316\316\303=\267Qf\275+]\331\275;\341]=\323\027b\275\034Q\270;Lv\226<\031`9\274Uv\223=w\032\332<vH\312\275\235\016\234=d\277\230\273[\035m\274K-/=/kJ=\303f6\275r;-\275\314B\245=v\377\005=\304#\323\274\342\356#\274\353\214\035=G\333,=\307\017\343;,\264|\274\332\215\373\273\003\024\247\275\242\301 >\214\211\206\275H\233\303\270\203\213b<?U7>\346k\000=F\260s<\375@\005\274\221\213\205=\351\276(=O\020\277\273\301\333\253=)H;\274\330\233\224\274QS\321\274\335b\264:s\371H=.\262\215;\034\266\306\274@\000\346\274\331\027\217=\037\024\332=\ru\342\274\261{M\274}.^<]\305\254\275\376u\240\274>\262\206<\265l&;R\222i=j\351\263=\217D\036=\347\026e\275\317(\026\273\3410\335\273#\355\270\274\274\364\027>\364W \275\300\361*\275\354\022\220\273=\357\261\275\037f\305\275\\\323\235\274\001\314}\274\021\n\321\274\200\0022<5\331\231=\327N\331\274d\355V\274)\020\206<\341{ :?i\332\273G,\310\275\003W\211\275@\210]=\225\026P\275\266\355\025\276\255\001^\275\231|?=r\207\243=\3367\327=\305Z\241=\255c\016\275gy7\275\246\334\217\275\276iG=a\2036\2753:\263\275\t\275P<\204\335\367\275+\315\374=\207\375\240\274\027\020y\275VZ\377<x\206\334=\273\327\274<\211\032\334\275r5\361\275N\314\302\274\270\216\336\273\355T\227<\212\272\206=\2335\261\273\372\224\336<\230*\215=R\025\023=e\365U\275\355\263\256<v\362\263\273?v\225=;\010\373=n\245I\275\267|\210=\254\200\375\274@x\n>\000&\274=\033#\\<\276c|=\0325\255=\273\342\207;\373\212y=\264u\330\275\303\346b<\007@\254=\264\275P\275\260\247c\275q\315c=\020\201\013<\273W\363\275oU\266\275\204\233\361\274\346\263\007>e\332\227\275\002\373\270\274\275\356i=\020N\353\274\241\313\325\274\272\257\r\275\2771}<\267\354\233=\345\302e<\224u\365=\371\274\375=VI\312=\374-]<\370\\\371\272\300,\223=\350?\324\275hw&\275\024\312G<\277\336\272=&7\367\274\010^t\275$\214\361\274k\361Y=L\231\275\275\205Y\355=K\274F=\255]\265\275\236\246S\275\274\317\211=x\216\340=\207\t)=s\273\337=\3775^\275\213\363\205<\372\253\247=\211\256\002<\272\"\242=Q\204\201=\323z\330<^\316B\275\250w\307<;A\336\275\200\256\326<\320\006\243\275AT\224\274\321Dn\275(\3726\275\362\352\272\275R\262\366;o-\340\275\273\"H\273>\316\004\275\032\317*\274w0\343=\260\243\205\275\037m:\275\220V\026\276F\261\212\274\210\017\221\274\260\264\026=*5\277\275\232\266z\275\0367P\274\316\230\016=;\001\321\274[\351\333=u\027\365\273\3330\003<RN6\275\257\210\326\274kP\305<0\342\372<\227\223j\273\316\321\207=\202\367\177=\341 \227</\265\203<\300\036\337\274\232^\251=M\220\325<3\014&=\327\270\307\275\266\262E=a!\035\275r\263\217<\361\006\265:\275\303\371;\336\374\230=[X`\275\316Ca\274V/\344=\217\245\322\275\035\245\035\275\260\332\271=\363S};D3\317\274\344\345\352\272\013\215\023\275\247vz\272\225\266\205\275\255f[=YF&\275\341\224\006>\353\341\253\274\023\261\302<Ni\213\274\223p\266\275\327\321\360\273<x \274\366\027\316\275\252\311\374\275\016\212\353;\372\201\037\276\020\355\321=\217>\307=\026\221\345\275\275e\364\274\\\000\022>\010\257[<\021\004g<|\330\010\275\354\224\327\275~\"\'=\332\256\017=r1\372;\340\312\355<t\230l=\221\003\247<1\245\252=r\366\302\275\371\222\275\274\014_#\275\"\332\032>\177\225\022\276\010\304\240;O\233\220\275\030\343\327=\201\336\236=\276\003\254\274v\t\260\274/\345~\275\2779\317:L\2255=\331\254-\275f\345\313<\266\231N\275Ys\257=\037 m=\n\207\217<C\243_=\266\241\t>\024\327\035=\354vr\275\037\371\277\275\311|\212\273\221\363\020\274\031\364\013\275A\211w\275\010_I=5\370\023\275#\2416=\271\204\217\275-b\345=\031/F=\366\247\352<e0Z<Ypb=\344\364\215<\232a\216\275\313\370\'\276#,\273\274.\223P=\253\252\262\274\352\277a=\242r\205\274b\316U\275\340\307\333;=\021\211=\037m\251\275\006\352\230=7\212\031\274\032%\257\275\002\"\302\274\364*\244=@y\312=\007-\214\275\221TL=\366\351\212\275\267\221x=\251\036\332\275\2544e={\272\273\274w\362u<-i\003\276\377\302*<\236/\220=\227\220\243<S\3672\275\023\255D\275g@P\275<\217\035\275B8\335<\321\273\n<\234LC;\306\223\340<\341oG\273u\3060\276\027t\231\274\200\233k=$\317\261\275\360R\265\274\340}\275\274\334<3\274\277`M\275\246\205\035=\205sP\274\025o0=\n\014\021>\3640\302\275\271E\237\275\356\375g=\373<\213\275\331K =\217\353\242<<(L=W\233\255\275}\017\027\275\215\000\233\275\362\211\026\2751\261\274<eK\317<\326\206\302:\344\311b\275A\222_=\323\201X<\200\240\273<\005C\343<@\314\210;YJy=\370\377t\275\222u\345\275\251\022.=`\217B\275\227\035\272\272o2\324<\244 \315;\246wN=\263\346\027;)I\277=B\244}\275\177m\203=\277\003O\275~]H<cI\017\275\256\235\303\275\265l\215=V\3078;\326:\r\275\036\235\014\275\325V\252\274\225=\227\275\256\025?=\335\003\233:\231\251\325\275\251J\236=\351\021\230=\271\340\201\275\320\301l=`\005\361\274+\005\236\275e \250\2757\231\375\273\336l\001\272\244N\202\275C\314\322\274\231r\022=\317\326\200=iD\006>\325\306\266=\222ew=\020\335*=\245SG=\354\205\237\275qH\355<-b\234\274\240\354\237\275\361\322\022\275\371\341\234<at\306=z\026\227\274\341\2001\275\023q7=+\317\257\272D<\250\273b\317\016<\201\377\213=G\344\315\274p9X=s\020\214=\221\302\333\274\272\357\344<SV\200=\210\253\356=\361\314W=\264ZX\275\270\024\274;?\"7\275R\222\211\274;\365S<\001\207\\\2757\215`\275\223\022\2478\004\365A=\021s\007=\277\320%=\325\033{;\213NC\274\007\366\'\276(\003\206\274\252\2605=\376\\\320<WD\267=L\026e\275\217\214\347\275\212G\210\275\246-\013\275\212\035\262=H\357\200<su\201\275qD\311\272\222G/<!i\344=\200fG\274v\002\360;W\211\030\275\327\006\310=\035\016\304\2754\245\260=\255\222\353\274\300&\243\275c\014B\275\210C)\275\374\r\351\274V\306Q=na@\275\263d\351=\033\007\304<\213\352\326;\3728\002\275\345\377;\275\255\366\026;6`\302<\033\322o\274r\002\001\276\235\362}<\311\250\217=W\351H=\2401f\275\346\"\023\275\035\203\245\275\365A\274=\254\366w=L\341\t=\224d\260<\335\253\036\275\315\245\375\274\002(\236<=\031\330<H\202m=Q\374\026;fU\376\274-P\305\275F\347\251:6\221\246=\371\324Q=\225\213)\275\252\354y\275\270j\202\275F\203\352=Xc4\275\010\346U\274\303\365\220\274\230\225D\275\253\303\273\275N\231\223\275,O\224\275l\301\346<o\003\r<1\322&\276,\270\345;q\223\254\274\332\274\036=\027\335\236\275\254\034\t<\262v\030>@\300$\275\210\342\311<\337F,\275\244nP=\027\363\316\274+\016]\275E\325\217\274\237\274I<\035\001i=n\3056\274H\271.\275Q\263\022\276\270#q\275\203\222\307\275\330\3065=\265O\353=\232\262\357\275\251B\202\275\274\342\033=z\306\002=6R(=\372\316\356\275n|\201=\201$\217=W\366\324\275\034\327\337\274\340\031c=O\352\250=\242\325q=w\256\344\273i\227(=\231f\256\271\r\376#<\277\303\200=(\320\"=\207\272y\275\215\325\252\2755\266Y=J)\310;\202\r\351\274\332\227\213\275\305\263\017>\253\207o<j*\025\274\001\243\206=\311\376+<O;J\273\212]l=\313i\315\275k\234/\275\242\327>\275\n\321\237\275\272\000\267<X\3033=\210?\303\275\205\200\220=\371\333\312=Y\201\246<%\313\200\275\217q\232<\022\222\026=_\376e=\240\335\216\274\204\001\220\273\301\337\244\273\243\317\274<W\373\216=DO\006\276\027$%=\364\270x\275\373P\'=\331\250\304=_#\311\275\212\256\345<\304\354\360\275u\360\365\274}\367@:,\006\206<\325\315\";\036\204\242\274\024\220;=\250!\n=]\373\300;\257.+>yj\035\275K\017t\275\275\3566=\362\352\326<\330\344\021;\t\203\005\275\2041\010\276\361\372\227\275T8\267\275Gz\230\272\026K\265\275\256\313\344\275eA\273\275\325Z\313=\267\366\325<e\341Q=\305\360\211<\352\013B\273?\352\246=\030\322\240\272\365\260\251\274\316\020\354=\3724 <\227\234\017\276su\250=\261\211V\275\276\010p=\223\300\004\276!d\221<a`\350=\265\376\221\274\313\371n=>\334]\275/\364\264\274\367<3=\004\315\302\275\360\314\346\274\rr\014\276\230\213\267\274+u\253:\003o\267=)X\365;\277y\351<7K\240;z\372\n=\022^\250<b\323\000\275^4d=\n\216\246\275\332\270\200<\323\240Z\275!\276y<\234\367=\275R\227\033\274\002Z\235\275\007j\324=\335\006\336\274\270\233J\275\355\275\343<\007\333G<\201\261\274=\r\013\033<\201\300\362\275\206\023\216\275\231\374U<P\233\304\275\333H\002=\216\"\006=BoK=\014\314p\275I\356\002\2757@a\275\034\005q;\331R\365\274\267>p\274&\022B\274~\010\340\2750l\225=W.\205\2752\230\205\275\207\271\354\274\220D\223\275\377\230\277<\311\220\265=\031/\362<\205\203Q=f\377\027\275\344\317+;A\262\207\274/Q\t=\257s\002\276\373\302\255\274\300J\305\273\025$M\275\271\001\334\274]E\025=\354K\201=\364Q\014>\213]\314\275,G\235\274\2038\217\275C q\275\370\034&=\231\231P=\311\257\010\275\023\276\341=\373\007\331=\243e=\2752\352Z=\327\014\210=\250fb<\342\251m9\213\216\235\274+\341\263\274\275\331\247\274\rs\007=\307\374A=\331\335\303<\321\212^\274Q\021\254\274\267\267\327<\330\345p<\2450I=\026\353\314=\241\312w<E\366\033=5\231\202\275\rz\262\275\335\t\320\274\202dy=\377s\036\274%\021\227=\344#\340=0\274s=}\201\030<\347\221\327\274U\255\331=k\277\035=\274J7=\337-\232\275\261;\335\275\224\371\312<C\000\266=/\371\237\275\221\333\210<\3617\263\273\264 y\274\327\312\261<\032\362\256<\222d\246=\255l\231<\024&\301\273\360\334\004\276\307n\323\2737D\273<\333K\303=\031\373\221\274\261\214\221<\367\343U=\276f\252\275\017\374\003\274sP\212=36\233\275\006\321\363\274\r\024\036>=\031==p\203\240\273mg\242=\305\303 <\363E\222\275\271\315\221=ja\207=EI\355=@J\342\274\335y\300<\373cP\275l\026\314<\306%\030\273\034\004r\2752\217\023\275\273\030\224<\017Y\270\275@\026\322=\251I`=\224\355\264=\362\311Q=\322\365\341<\360eV<\033!\364=\300A\201<\003j\255=j\250q>\013\375B=\3342&\275\330\031_\275(\274\204\275Qg\003\275g \217\275\335\233\005<4/K\274\360\026\001\274\212\201\337=\376\261\272\275z\372\236\273\003\212\251=\353\377\323\2746\300\217;\303\374Z\274ax\225<\330\336\325\274\n0\203\275\206j5=\037\\\n\275\204d\333\274w\300D=2\3304=8i\370:\324\323\245=\007\253%;\333\272T\274\314\024\272\275D\232q\272f\231\372=\370x\334=\236\377\035\275\004 \323\273B</\276\221\350\361<\003%\206=\025\247~;z\352\255\274CI\234\275x\313\223=\363\232\001\276\322?\355;0\275\307;\264uJ=\351\367\023<\370\375\247\2756\374\322=,\263^=i\263\010\275C)(=\271\3077=\023\351\241\274\020\344*\275\210\304M=\351\244\232:j\216\304\274\310\207[=\245\261\216=\257!\303\275*\214\202\275\323\352.=\274\256\241<Dg\t\275\243\374\222\275\222\345\\=\272\241\260\274\023\234}\275z\251\223\275\002h\251=\246\013\336\275\263\034\227\275\266ML=\\\272\034>\224.\305=u~\272\275\027\311\030>!\202Q\275\"6\320\273\200\230\257\274\211\201\246\275\244\307\254\274\262\344&\274\211\217%\274\205\305\364\270 \\\212\275\223\331\207\275\370n\036=V\177O:a\033\210=\250\302f\275\275\241\340\275\322\377i=\347L\r=\300\341U\275\247\237 =JC\211\275X\273\227\274s\360\037\275\224\226\334<\r\277-\275\200\037\256<5\254|\274J\3407=.j\375<\324\203\341<\336U7;\307\346\033=\363\353\266\274\261\375&=\014`m\274\002\034\220=\'\250\242<\211n\016<Q\332\222\275~O\324\274\2354-\275\255\312m=\215\325\027\274P\240\333\274\230(\246\275\251\3161=\330 \033\275\222\3435\275\224\203X=\273\013~<\341}\327=\333\277\203\274\2774M\275\270\243\206<2s+\275\246\363\305\275 [\323<\372\372\275\274~\274\234=\255\361\261=+\224\202;\n\333\036\275\233:\252=\240\006\226=\277\354\243\275.O\313<\207\245\345=\360\227d\275+\213\034\276p\260\022=\202\241\207\274\324C\325=sM\377<\030\225\241=\247\3519;\222\217\210<\023.%\275\023G\201\275\231\266\225=\2357\324\273\020\374\314=\372X\230<\223J\303\275\\1\006<\374,b\274\314a\212\274\324\234\263\275\312lC=\2628\211\274.\364n\275U\325\206\273\316\3746\275y~\234;D\224\273=\326\375\037=m{\347=\226\001\232<\237\265w=\347\256\230=\000\272\230=\274\007\260\275\252\270\276=A\251\315\274\3479\216\275\214X\363<\017\211\323=x\200\305=\025\245q=\345\317B\275\372\005\304=\205\004\334\274Y\201\026=!<L\275o\271\223;\340@;\275O\351\005\275h\373\321=\314\3376=\310\017\324<\237\021s=\210\037\004;\025\314\271\275\367\354\202=\225h\301\274\274]T\275\":\247;\243|\272<\010\274\235<y\3079=0\203<><G\235<\2511\222\275\340\023\335\275z\027\034=\324\264\210\275p\335\336\275\326\352C\275r:\240=\037\305\210<\004\230\253\272\241\t>\275\244\216\343<\374!\360=\005\375\"=\335\302\366<\013\001\240<`\203t\274\356\'y=t2L=>5g=\200N\237<\210hv<\303\023!<J\343\211=+\313>=\254A\306;\n\266\255=\201\355\211\275\004\211\034=9yQ\275Tk\220;\330\016\003\274\2253^\275Z\237\271\275\304\323\225\274Z\234\274;0\364\274\2746\263\024=\212Y!\275m\203<\276\303\337\013\274\232&\321<\345\216\212<\0216\"\275\350\275\265\275\023\226\351\2750\315\263=\2564\247\275)>\243<\017G\350\274\323\177\314=\013\217p<-\246`\275\261[U\275\370y\220=\3732\211=\377\324%\274\232\256\224\275\253H\031<%\362\303<\234\026\217<\265\253p=\005>\002=\326\\1\273\325\262a=\306\"\t\276yg\376\274\345f\310=\335\241\010=\026fl\274\002-\220\275\177U\"\275\366\236\007=\333\007\252\272Vq\365=s\203\356\273\304\037K=\305BB\274Y6\005\274\332\221(=\343\377\221\2724o\320\275\231\330R\275\246\344Q=\251\035\243:zz\353\275h-\337<+\030\237\275\302\357\036\275,\250F<\264\265\016\275X&\365<p+\213\275U\356\020=(=\215\275\301~:=M\3510\275}\210D\2755\3670=\323?\345<\224/\002=\346\255\214\274U\326\212\274\310l\027<\027\315\007=F\276\007\2751h\202\275\014=\271\273\323|\372<\224M\304\274\035\372\333\274\331\226\344;\311\262\231;Yc\225\274\374\274\245=y\374\r=\256\006p9kKJ<@^\203\275\227\t\253\275\037\326\262\274\363M\226\274A\221\213\275\210U\304\273p&\021=j\261\243\275\233.n\273\037\211\036>&\377\237\275\306~\321\275\002Oc;\260\227\267\2745\376\210=\264\241\221\274\245\233\006=\271\032\263=\007j\026\275\332\313\264:\352\207$=\207e\003>\r\226\237\275\224\0361<\026t\004=\320N\025\273\300\255\345\271\307y.\274={\215=\226i\317<9Z\210=\312\370\370\275{\222\267<\213\323\362\275y\247\023=\245\225\261=u3d=\016\027,:i\027\256\275-\335\014\276A\302G\275\335*v=\261\345\001\275\242\316\000=\211\036\371\275\016\225\217\273\270\027\371=\227\210\345\275\376\033\356\273S\307+=]2\300\274\233s\033\275%\234\200=D\267?=\355\342!\275p\337\205<\277\202\251\274\352\302\217<H\212\345=Tx\212=\362=\210<\253\263\313\274\324\017\214=5\351)=#*7=\"\247\004=(\347\204\275\016\354i=\226\304\245\274o\030o=_\312\007\276\257\326\345<H\r\004=\341\375}=\361\365@\275\277\016\262\2752\"~\275D 7\275,X\035\273\340\204\260\275\352x\205\274A\306\232\275\\{&\275u\232P\275{\220\346=g-n\275N/\357\274\270K\305\274\025\241\212<\203\230\037\276\302\374M\275\247\201\245\275\214K\311\275\246\307_<c\267t\275\343\375\314\275\231\350\034\274\317j\222\274\030\035\005\276/\352U=\030\344\324\274\263\234\250\275\357\235\267=\031\317\343\275p\265\316\275\354\357d\275\313\224\005>\014\014\211<\227\027\225<F\016\240\275\007b\032\275\022o\203<\355Z\003\274\275+\252\275\245\344L>^)\322<\020\341\327\272\265V\273\275\314$\201\275\2679 \275\3446\371\275oB\300=\266\n\244\274\211u\355\274X\357j\271\373n\2749\373p\007\275\rh9;\315\203\027\275"
      }
    }
  }
}
node {
  name: "LSTM_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/kernel/Assign"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "LSTM_1/kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/kernel/read"
  op: "Identity"
  input: "LSTM_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Square"
  op: "Square"
  input: "LSTM_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer/mul"
  input: "LSTM_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer/add/x"
  input: "LSTM_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "$D\356\274q\314\233\275w\375$\275l\321N=\3033C<\216!\236<\353\353&>\264Mt\275\350\246\002\275\257\021`\274+\020B<\025\301\345;\017\233b=\007\255f\275\231L\276\274\242 \t=0\234*>\230\331i=)P\261=\242\231\235=\021\353\251=0\255\213\275\237\351\276\275\236o\006=J\306\366\274\364\036c\274FY\227<\273\3711=Q\342\355<\305\202\274=fb\216=E$W\2752\007`\275,\240\207=$\366\024\275\316\027\013=o\305\333\274\252z\276\273\205\016 \275u\003\032\274\014\240\233\274\"\323(=T7\244\275\275(U=VZZ=\'\023\225\275<\357\204=f\341\006=J\275M<\266#\213<\005U!=\034\210\266=\3748\253\275?fU=\010\340\004=\310\013\331\275\252`\340<LM\031\275\345\256Y\274a\231\304=\001#\006\275\006S\030>\353\377\372<\364F\242=\363:\000\274x\313\216\275<\315\355=|\347\325<\343|\315\273a\000\242\27523\264\274\365\250\377\275\372\302`;\241\004\323=\001\337(\274\352j$\275\363\025\026\274\335\032\275:\207\007\341<\257\007\256\275\276\022y<\032\326_\273\326\035k\275\322\271\230\274\271\'\270<0q\360=z\2228<\214\316]<H\236\330<\275\342.;\264L\215:PwE\275r&\022\275%\316\222=\231\250\256<\270\264-\274\240N\336\274\302\017w=E\330\\\275:\311\363\274\350vo\275\023\224n=)o\254\274\226\364\273:\001\320\260=\300\363\371<z_\335=\037\270c=\216\237k\275\005\207\312<\303\236\221\274s\321\211=?i\326\274\214\304\317\274/\272Y\275\350o\264\274%\323\351<\333\200\334\275\024S\335\273PI\350\275\313\004\265<n\251\315=\3732\205=\367\204\302\273\3561\365<\"\346\362=\241\337\3549^\003n\275bE\\\275l}\265\274\224\203t=\260\276\\=\177\220\255\275\243+s=R\013@\275Z\023O\275\256Gb\273m\301\221=\001z(=\004e\021\275=e\324=y\315\243\274\244`\"=\317\271\240\275\366{\363==a\364;\331\365\233\275\261\323I\275\241\213\351=\264s\006\275\2532\242=\025\331\030\275\267\366\373<#\314\314\274\324x\202=V\270\230\275\rF\005>l\317d\274\224\310\236=\323I\341\275B*\177=\250E\303<D\322V=\344N\311\2747\316\215\275\214\320\242=\'DI\275\321\355w=\332\347\241\275\332\026\377=}\366\316<)\264#>\376\247\204<\r$5\273\337{\275=\371\330\211\2756\277\001=d\260\206\273:H\257=\'\317\027;\224\004\021\276s\223&\275\216\032\246\275\256\250\005\276\232\252\202\272\326\262\226\275\251]\302=A\303\367=\021Db=s\211q\274\377\316\305\275u\356\237<\206\022\264=\310\201\367\274\241O\342\274cq+<\026\366\212=v\205\317\275\241X\237=,\275\366<\023\210K<\2512\010\274\321\251\033>,\200\223\274\314LH<\202\343\201<DJ\020=\027Q\352=\220\371\312\274!\242E=\364re\275n\271\267=J7\247<#\313&\275\252\002\200<\376\313\260\274\261\t\'\275~)1=\250T\214\274\332@@=\213\303k;X\326\202\275\307\027\245;Q\017\036\275\353\227\303=\256\236\242\275\233\370f=\216\327\230;|_U\275T\301\272\275,\235\371:\220r\223\275AT\251\275\001Y+\275\207%\006\276S\316K\275\200\036\224\274\317I\265\275\027\367+=\010b\020=\005\220\030;\313\226]\274\004\034\254\275R\234\035=\237\233\225\275\027XP=\223\350\023\2756\010\211<\361*\244=b\304\261<\361\331\243=\2239\224< %\244\275:\212\267=E\371\216\273v\023\267=s4I\275\r\250\227\275\367\230\217\275\304D\245\275\003\033\311\274\336q\n\275\303uX=\210yD<\303\003/\275-\266\022=\366\027F=w\377/=\321\224i\275\315\265\245=j\213\321\274|\007\311\274\355\004\345;29C=\306\360E\275P_\342=oi/\275 H\330\275j\004\267<\220\226\261<\261\353 \275)\301\372\274\331\0003=\251\307K\275H\346E\274\021\016\237=Vy\014\2753\031J=H)\024=@\332\323\274\301\251\200\275\342\245\023>/i\370<\274\030~:\326T\204<\244\372\247\275#`\360=\236\261\362<\363\374[<I\236D=\255\021!\274]\007\r\275\r3\373=\277\201\237<\342\220g=}L8\274c\341\270\274\365]\260=\207u\207\275avT\275\352\222O=\207\r\022=7\007\014\275\351\315\255\275\345?\370=\022\023\264\275\255(t\275XCT=\005\222q\275\0249\303:\005\024\250=\022j\221<\336;\300\275\215\036\332=\t(\273=0\212~\275\203&M\275-\267\200<\330\013\206=R\373\300=1\326\275=\340g\350\274\277t\377<o:\001<\260O\264\275&+\303;q\252\372=\316\023\306=c(\214=\316\346\034\275\275.\367\275\240|\'\274\034!P\275\265f\210;\266\361\272\274|&\022\275tL\207\274\024`_\274\203\343\251;M$H\275\2605{\275\352\230\317=\370\007\307\273iN\256<=\013X\275\037\211\242\275\2172Z\275]\000\232;\033\364\232<\001\267\363\275UH\313\273K\321\r<0>\222\275\344\312\230\275\323\322\351=m\266\317\273c\270\262<\364\341\332\275\260\'\000\273%\206\263=\272O\247\275\373P%=\314\2168\274\327\010\026<e\255==yu\242\274C\'\022\275\336*\336\275\320*G=\'\"*<#\022?\275\004\332n\275\370gs\275\237{\n>\346\340\342<\307\220\263\275\306%\242\271bq\364=U\345\267=\224\304+>}\273\"=\357T\230\275\024`\250\275 +\007>\022\331o=(\226s=@Z\355\273\310\005\026\274c\226n=V\222\323=\230\243\n\275\253\363\264=\3453\265<\230\020w\2753\346\277\274\345\216\223:\353\024\t>n[\000<48}<\326Cv\27518\007\275\361\316\317<\031\035\000<\233\007!=8^\311=O\275V<\201\213\376<\375\340H=\240\242\252=g\0033\275\307s\n\275q\307\222\275\206\327\202\274\274\323\027\274\356\302\262<\004\343\361;\360\241\364\274\327PM=\006x\331\275qE\227\275f\352\261\2757\225\225\274\313\260\211;\255m\020=\304^\216\275\367\020,=H\000\325=x4\357\275\310\312D\275)7\265\274\235z\226<\222\2677<\241\000\203\275=\253\006\275+\271\325\275W\246\225<GZ\201=WV\364\273H \241=Mj\260\275T9\323\275\253K\271\275[I\007\275\252\232\001=\351\001\277\275\244\370\376<\330\024\231=\354\346|=\255\321@\274\327\210\273;7\001:=:\244\271<\373/\216<\365M+\273+YO=\342g!\275\221\207\200\275f\321\243\275o\236\236<\313\240f=\313\020\206<\236\204\220<\005f\363\274\273h\315\274\377D\232<\361.\356;<=9=\255o\321=D\217C\2756$\246\274\262f\264=\220\027\034\275t\210\243<b\327\212<3\340\314\274\270\002\203=\234{\312\2751YC\275\364\000X=\024(\226=\300\220\324\275\036\372\241=l\253\236=y\245q\274\341G^\275Zd\r\275\303\0367<l B=|\316\372\275\234Sh=\375\307\021=\311\231\363\273\256G\027\275\n\317\254\275\345\355\371\273\2409\260=\005\356\240=\250\354\352=/\343\007>\033H\364=\177\231\260=y\202\177<\313\007\027;\035[`<\246\277\331=\352J\347\273\032\207a\274\342\256\317\274l\337\345=\033p\246=\353\347\244\275\264\333.\275\244e\220\275\360\2334\274z\3667\275NW\250\275\333\007=\275 d\024<}\302\315=\0352\372\275>[x=\335H\215\275\261\2371\274z\201\232=,\307S\275\r\262\026\275\016\005\004\274\331;\230\274\333\375\332\274XuX=\277\201\351\274\'\263\271\275\307\241:<z\276f\275=\247\245=9Q\211<\343&\034=\n\220\332=%\2204\275\202\032\353;\206\tE\273\340\326\030>e\210L=e\353/<(\320\221=\026\320\272=\204\025\206=\307;\321\272*g\263\275F\033\212\275\375U\023>iW\220\275\021\202\311=\244\031c=\315\320u\275\304\377k=\242N|<\267\243\364\273\024\025\227=\213\260\251<\371\265\215\273\254\006\272\274\314\260(<\013\016$\275C}\342<;\333\251\274\244\230\326\275\230Y\240=>\276Q=\360c\365<\307b\017=\014\274\r>\276L\207\273\264\220C=08|9\255\020v=V\344\304=\251\217\256\274\022>\322<ewD=\327\345\204;}\200\302\273\360a\253\274\353n\023\275\374o\221\275\330\221\362\274 \3175\275\021\366:=\3431\336\274\0305\236<\021\0046\275\0222#=862\275\007*\265\2741\2469;\271\n\261=\241\016\324\273\246\325\215<\031\334}=\021\344q\275\344\211c<\376\240\231\275\310e\232\274\335\004\373<9\177\241=\037\363w<\273\203\t\276\360\301\241=b\013\004\276\022\\\337\274m;t<\325\265\253\272\360M0\275\340\003\230\274\264\235\205=}\3467\275\313?\031\276x\224b\275~\220\210\275.\252\301\274\331\200\221\274n_\237\274\035\225\360=\"c\004=\333\342\203\275\023\377\202=jIU\275.W\034\275;[\034;r\244l\275H\3117=?T\020\275#\260\371=\\\225\275\275.\373M>rQ\244\275\177\222J<\260\354\321\275np\006\274>;\312\2734l\323\2759\025\354\274\264V\323=\231\0045:\017\352x\275\033\225\001=\314Y\007=\354.T\275:G\345<\210\252\245=wt\305<g\332\205\274\324(/\271m\213\t>\017{=;\253\n\006=\267\337=<\"\313\237\274?$?\274\233\315\261=\033\345\271<\374\347\002\274\360\342\265\275\3149\026\274?W\241:.\366\251<\026]\204\275\270\225S=\203v\n=\032w\206\274\254+\247=\023\320\326\274\261\365\350\274\302\213\000\276\351\333\021=\347-\227\275(\307\303\275`\235\350=\022\327\261=A\002\346=L\303\214\2756\347\214=\013N\257\273\2519\372;\300\244\255\275w\\f=\234@\274\274\2778\002\276rP\274<\034\272%\274\272\317\206\275\263\027\313\274c\204\254=\'\002H\275]\251\376;3/\000\275gsA=?d\334\274\264\343\207\275z\033\266<@\247;= \352\266<\216f\277\2734\367[=/\314\264\275\317L\225\274\001u\211=\270\3613=<]\036\275\'\210\340<\233\352\272=3.u\273\206\335\260=GL\243=\336a\312<\001\243\332<[j\336=\2643->\372\352\'\275-\243\331=\221\273@\275\'\251n=\247\000\237\275\212\"\303\275\304\005`\274\213\262J=\346iR=b|J<\3523\320=\033\301x=\324\020\217\274\213\343\332\275\244\342\303=p@:=\342d$\274sv\211\275\032\305\264\275\236\226L\274\317\261u\274|\337\327\274\335\341\223<\200gF=\r\353\210=\371\322\035=\0260\225\275\006\352\266\274f\tZ\275\360\310\033\274\2400y\2756,\362<S\266\334\275\024\362\343<h\233\266=\373\007\233=\t\375u\274\264\225\210=\'\002z<x>\204=\004?G\275\261\217\244<\362\272.\275\257A\337=_\353\004<\334h\271\274(\377\301\274\313\254|>Cbb=\244-&=;\232\312\274\217\025\207<\023^\200<\333\344\216\274ZE\020=\310\241E=\360Y\253=L\371z\275\220\210\341\274\355=\014>U\226q\275\030\207\357<\022\201u=\277\221\225=$\303\221=\025\376\267<\342\270r\275\244\004\264=\253z\017\275\376\271\214\275\245\2069\274\030\003G\275\307\034Y\275\030x\002<\036\202\332<\t\347\275=#S\251;\001I\377\274\344E\356:d_i\275xx\354=\"H\211\273\233\263\201=\351\246\177\275\213\005\245\275\037\240T\275\r\233\211<\361\315 =\3144B\274\205\370v=\335\342\212\274t\361\215<\271_~=\346\306\342\273\367\331\267\275cs\351=\024\326\037=\267Lt\275\307\304\000>1{k=<a2\274\"Lq\273\tC\203\274]\227V\275\001\260/\275\022\304\210<\275-\216\275I\253\177=\200\304<\275\241m\355\275>\227a=\'}\022=\215\220\356<r8\030=?X\345\274\224Z\207\274,\367\367<\234\032N=\313\302\331\274\306\315\310\275\272\273\020=\316^\203=\314\255\205\275\250\032\327;\001_w=+\216\262=M\341\334\2734)\302\275y\0162=_\357\276=\316x\034=\376*)\275!O\027<\221\001\367\274~\262\251\275\262\314\335\275\230\'\277<+\210\224\275\366\023\242\273\241\350\337<\3129+=_\245\211\275D\362}<gI$\274\314s\211=\225\221\307\275\363\214\207\275d\004l\275\217!=\274\337v+\273\363Q\341\275\274O\307=\273\341\340;\214\340;=\330\035@\274&\350\346\273L\217\350<-\214/\275\305\225V\275\036L\210\275qg\222=\244w\250\275CQ\035=0\027p=\273v4<\260\241\352=\353@\'\275b\"$\275\237\340\273=\377\211%\271\346\016\266=C\322\242\274\021\366\203\2741$\232\2739\350.\275CfW\275\271t8\274\264\026/\274\322W^\274.Y\302<q\270\372\274\207c5=\177ze=\311\033\336;QM\343\273Q\353U\273\335\331\201=\223\340\343:\324+\\=\007\034V=vR\223\274\215\221.\275\202 \024\275\312\355\317\273\215\311#\275W#\\\275\371\340\t\275\010\317\243<z\241|\275L\336\200=\025>\260\275\177J\206\275\032\315\017=I\272\227\27332-<\340\2229=\t\007\034>2\356\337<O~_=/1\247=\366\205\221<\374\253\316=\226\273A\274v(\241\275?H\307=c(\201=<dd=$e\200=\3505\014>A7\356\272\357R\240\275\362\354\022=1FE=\035\345\025\276\303a\227\274%:?\276\211\315\002=\335eH=\000\347\022=\233J\227=+_\210\273\013\245n=0\266\003\275\362#W=\030\202\021=\276y\377=h\277\310\275I\253o\275\227\373\220=\030]G\275\316V\336\274\'\366\213=\262&$=n\213\353=G\345\203=\314iE<\365\2252\275\361K\031\275L\213\250=\313\215$\276\356i,=\237Fd\275g\254\341\2749\304@\273\315\345\340<\303\345%\275a!\244=\333\326\201\275\010\314\366\274v\005#\274\200?(\275\360\352\373\273\256\210F\275\302\007\273\275\210\330\336\275\242MJ=\222=\264\274\311P\200\275\245\231\244\273\207\016\356\2745\345\306\275._4>$N\034\275\001\276\257=\\[v\275`J\376=\277-\322\274\237\374-\274\254V\355\2759\030t\275\260\210#=\352\376\223\274\233/\231<\211\nb\275\036\305;=\243hg=^\'\245<W\023\035\274S\271z<\310\016\r\275\221\345K9\351\233\273=\225^\217=0\004\261\275\304\357}=\244\272\267\275\312m\311\275\224<\010\272#p\267<\000\337\233;!a\004\271\010+\364<\320\211t\275\376\221\013\274o6\017\276\266B_<\024\0312\273\333\201\217\275}\250~\2756\016\242<j\256\236=\221\307\003\275\345y8\273\177\004?\275\010LV=XV\346<\212.1=\200\024\037\275\021\225\203\275\016\003\232=\324\027\266\275\275\370\235=\321\263\217\274=\351\013>G\235\255\275\005\273c=AH\237\275\177\324x\273g\360|=0\306\030:\030\n\246\275%}\200\275^\272\370\274\022\335\252=\026\013\032=\321n\256=\353\220)<G\'\350\274i\200e\275\033\213w<\376F\212\274jH\327=0\223p\274\262\365\366;\030\265\332\275I\264\351\275\317x\205<\203\2533=3\335\261<\005\364H\275\331\215h=\316\373\332<\332\010p<\023\251\366\274\310yA<\303l6=\260u\002\275\201\331\265=\343g\301=\320\303k<v\206$\275\253\236q=\rk\212=\374Z\234=\241\315\266\275_\350\'=ds3=S\322\333\274\246|\0069\250\354\035<\314\214z=\004\"(>\306\317\351=_|P=\325\2063>\251{\215\275I\3054\275\332\233w\274\203\016v=lc\003\274\311*\3339A\325\346=\354\2615=\"\214\245\274J\330\331\274p\222^\275g\307\342\274\310q\306=\317\261\375=\024\341\322=4+\332\275\361\250\323<\267\032\010\275\246\0217\273\214n\213<[\017#\275x\247\322;\370B\007\275\237\226x\275h\2322\274\251\214\037:\035\274%\275\\UB=\371;@\275\234\003j<\003C,=\331!S\274\024\257\r=\354K\353\273V<\006;4\367\201=\251z\270\275\256\350\327\274\210\020\300\274i9m\275\350\311\t=\234$N\275\203\022\274=^\376\237=I\245\t>V\034\267=\225O+=\332\317\007\274\323\234\023=\313i\335\2749\314,=\307\n\254=\241\013\021\275\260`\202=\363zL=f,\221<\010\3250=\275\301T\275\032\333\300<\275\263\234<\311\220\267=\003\226\010\276\321PQ<D\371\363<\263\276:=\326\000\037=m\310M\275C\372\242\275\373%\216\274M\265\027=\354\214\036\275[aX=\230e\251\275\033x\032\274@\250\005\274\307\362\256=E\026\027=w\374\344\275\257\273\202=\n\250\300\275a:.>V\263\337\273\237\305\020\275\254\214\323=\307\023\275\275\302 b\275\253B\202\275\235\310\355=L:\004\274\202\223O\275\266\256.=\337\366\005>\247-t\275\331\rK=\010\030\\=w$\276\275\025\337\270<\264\025\253\275\006\202*\275\220\010\226\275\363\317\t\275sR\210=\300\034\205<,\332u=\221\325G=\00217\275\227\201_\275h\200e=()S\273\364\3351\276\352\262\013\274\004f\010\274k\006\261\275\372\276\252\275\t+\237=\037c\032\276\030\214\004=?\220\212=\213l\246<\224\324\217<\tpL=c\215\031=\363\344\311\274\310\0026=\373y\236=\322\224\203=\373Hu=\025\247\013=&\317\223=.M\001\276\024\365\303\275\224&\232\274D\030\\\274\235\357&:\2104^=\326\315\302=}>\037=\255\252\335<u\232\357<;\246\177\275\003\313\210=\327\022\303;.W\257=\226T\345=\243\020=\275\243\226F=Z\020\331\273\265\216!\275x)\003\273\346W\213\275w\324\205\275)9g\275\241^v\275!g\320<\306=\223=d\n\312= \0320\275\"\255R=D\277F=9\342\370\273\330&\316\274\375\271\235\275\313Jk<\000\277\334<8\014&\275\2200\253<\313\326\003>\260k\206<\272\243!\274\327%\245\274\303\324\240<\244\235K\274\341C\216\274\211\235\305\2758yB\274\362l\212=\357j\024=E\344\275\275K\256\270<z&Z\275\014\203\r\276\003\345\317=\'\r`\274 \322\223\275\271\036S\275\377\340\227\274\014+\350\274}\324\010=\227\206\327\275\247\t\323<H\243\337\275)[\225\274_\235K=\033Y\242\275S\010X=\354\340\266=\001p\010\275_\244\251\274T\035\215\275}\222\235=\204\230\022>\231\273\017=:\354\257=n\240\225\275\217,f=$\366N\273Y\302\214\275\305\330\303;\251\307\316<\350k\304=\017K\355\274\317(c\275c(\237<\364\306.>\024\231-\275(\326\320;\002\013\363\275\324\317\246=\'Q\346:\027\273r<I\210\221<\231\001\372\272\374\247w=\376\373\341<\330\202\377=\274\341\005\276\004\027\367\274h\223\253\272b\r@\274\253\034+\275\300W=\275\350s\216<\330\'\234\275\366\027\035=\312\022b\275\332z\'\275\310\014>=\222\323b=\223\355\235<\203\305\253\275\377\357\241=\241c\325\275P\223\024\274q{q=6\033\375=~\263\243=\232\366u\272\326F(=?!\231\275\255.\231<xT\257=\006(\000>\273a\006=O\245\273\275^\r\237\2754T8\275\372\347\215<\340*T\275x\253q\275\217W*\275\315C =e-\316\274\274\246\227\273\342p\202\275\251PB<A\342\321<\312`\265<\370y\010=\230\364\276=\215\023\345<\274D\t>_\344\362=[S^=\266:\367<\000+\313<\231\250*=w*P\276_HA=\002X\316\274\201\010\025=v%\242<\307\320U\275\251o\370<\306]\270=j\370\263=\370\370\233\275\305\\\226;\344\n\276\275\003n\027\275\226\346{\274\313\347\021> \366\316\275i\304\206\274.\024\361<\351\371k\273w\312\3419\'\310\345\274Q/\266\274x\264!=\214\002$\275\325\272\245\275A{\267:\302\220r\275\031%\226\275\203\355)\275\260\014A=\016\215[<^\263\371\273\332\241\323\274\347\305\363\273F\353{\2758\002\273<\245\313\337\274\251\n+=]r\003=H\235n\274\001#<\275%\231\004;\0242\204\275\244\266\030\274r[\270\275M\342C\275x\3017<}@\000=\367e\215=\367!\275\275\360\001x\275\223\326\312<\000%\267<\333\366\256\275D\350\224<\345\366\032\275\304\000\003\275h\3105\275|C=\275-D-\274\r{`\275\364I\214\274\217\305F<\030\265\224\274\210w\310=\231!\220\275-\024\254\275N\023\306\274\206\227^\275\324\005q=g\301[;)\325\312=\010\256\212\2740\020t=m`\002\275v\366c=\371\316\262=\334\306P\275\220D\024<i\364*=\375$\240=>\344]=\353{\372\275\336\346\221<\214D\315\273p\264\216\274\213\216\215<\262\374\333\275d\005(<\351\n\356<\203\315G\274\347\002\347=v\212\201<\027\346m\275\316]\256<49\241=8.\000=\037\203[\275?.S\2757\343\002=\362}\251\275\231\315\252\275\2128\027\276@V\223=\371\373\205\275\265\"4=\356\330\224\275\232\213\341;\216B\375<\022g<\275W\252+\275\320\006(=U\010\211\275\356nT\274o\355\353=\336-=\275&2\264\275eB\004:\243\311/\274\005=V\274\t\240\"=\366\016\221\275Y#J\275\353h\217=\233T\r\275\321\366\022=\241\236\203\275[\303\263=\304\227Z\275\307\274W\274R\266\217\274\014\231(\276`=\262=\246\013\275<\365D\235\275\277\037!<\376!\233=\306@\216\275J\350\202=\376\241\353=\253\345$\275\225j:=\0078\"\275\343\371 =\352\001\317\274\311\317\331=\032A\2128\030%\237=\231\331\345\274*\371i=\272\364\244\274\372\357\313=\000(Z\2755}A=o\010\371<\005\207\022=S\004\035=\377mn=}yp\2755\241\230\275xX\263\274\267\377\001<\'d\227\273\332\363\213=\024\255\221=\305\314\'\275\316H\363\274\323Q\001\275\003\014+\276\361\255\240\275A\262\030\2757\313Y\274\377\371\206<,\250\336<\035IU\274\305\242\254<\013\345\373\274\231\t\221\275\373\243\204<\335|\361<\203\025X\275\265]\311<\300\004\207=v\356?\273_\3510=fOX\274\221\354\203\275\315?\310\274\270\246l\274^\320\265\274o\213J=S\rt=\203\376`<3d\035=\216\313\277\275\355\335\220\274T\\\224=C\375\242=3p{\275\200x\224\274b\n#\275I\000I\275\037\021\340=\223\r\270=\226c\346<\351G \274\351\255\241\275\243\206\223=\335`8<,\001\315\274\240\357\232=\020\306\\=\312\346>\274\256\363\007=\026n\243\275\014\020+<`R\350\275\375\036@\274\321\002\333<1JK=u\342\241<\375\325q\275\251\3214=\310\"K\275\271\025\363<j\333\332\273j\213\205<\217\t\267\275\355\2330\275`\264\265=\371\205^\275\367\350\323<\351\361\013\276t\006\363<\331C\321<-\203\271=\230\325\263\2757\323H=\265\315X<w\277n\275;\303*=\260\305\255<\313I\343\274J\301l\275\344\204\214\274x\006Y\275T\300\267<)6\315=\356CE=n\3462>\300\253P\275=y<\275\331F\035=\356\3025\275]\303o:\352y\232=/\021\317=\360w\244=\250\255#>\0265T<\024\226#=\353\251\307\274\371\365\030=_\2014\274\305\310c\275\005\350\211\274e\260\376=\353\235\004=/~s=\364\020\350\274\374\001\325\274\355Sg=o\262\017\275#|\332<j\323\006\275I\315=<\003k\355<3/\212:\337H]=SD\320\275\023N\233<`\255^=\036\312e\274\370\324\307\275\351\204\317;\344\235\203=\352\377\024\275\232W`\275\355[\242\275\372z\253\275\201\323\347\275:\317\255\275\001\343\031=.\232\335\274\323\313\304=\302\347?\274\217\223\277\275\304*\331\274\364\306\257\275\365\227[=\312\014a\274;b\321\275\245p\231=\343\213\001\27531\211=Y\332\204=\247\273\346\275\306\244\207\275\215\005\316\272 \236\260<a\023\222\274\277\252[=\265Z\014>\201\311\260=\311\261\027\275\347F2\274@\207\300\275\312`===,\001>\243\370\204\274\274\323\230=\231\324\242\2749V\017\2768|\324=\036\354\035=l\305\205\275\177\217 \2747\211{\275\317\3153\275t\302\374\2741U\225\2756\354\213=\351T\361\274\360\336\326=P\254U<\013,%=\230\304\\\275R\212\034\275\006\025\001=\367e\342=\276\265\001\275\204\215\215<\2076\002\274\373\352U<v\3669\276\001y\372\273X\"Z\275\0345\200=\\\376\354<}\216\376=oVJ\2753\241\256\275[\312\313=\346,.=\220\370\274\274\"\300\033=-\273\216;q\215\005=\345\020F=\203\251\000\274\231.\031=\261:\223;d\363\002\275\220\335\233\275\3326\275=(\345\234\274\022j\346\274\002\034\256<!\276\021=\230\353|\2745\243\215\274\221\024\325:\'\005d=>\316\262\274i^!\275\255\247\025>\217\371\253\275\214M\203=\371\336.>\350\334\221\275p\305\254=\351\034\353<Q\206\303\274\255o\245\275q\014\005\275\220\224p\275\325<_<\372\312\037<\231\352R\275n\275\206\275\204\300\223\275\236\373F=\364\316\211\275N\306\265\274\030\353\232\275\274=\314<5 \031\273\363\2703;f\351\003\2768\357k\275\302l\242=_\322Z=\330\307$\275r\374\017>\325\256\023\276\213\365\237\274\321\0007\275\tf0\274\316.\037<\236Tx=\213\317\354;\3140L\275\361\010\t=\347U\351<Q\336\235\274\022\237:\274^\007\331=\'\034~;\235\315\364<\363\300\r\275\010,\021\276\360\237\002=:\251\356<\241\3462=\220\223q\274\3302\205\272\373\240\355\272iZM<Gt\025<\260%\370\2747\360\330\275u\320w\275\374\023\310:=\336\271\275\014\033\202<\2137\221\272\002\242\370\274\363\373`\275\254\037b=N\214\212=\013@k=K\222\013=\213\255\253\275\314\326\215=\374(\327\274\240~\'\274\220\342(\275\332\314\204<\313\250N=\034}\035=\246\005\353\274\346\224g\275\250N\363\275~,\227\275b\355\r=)\223\036\275u^\375<%\024\351=\024\313\022<q\322\274\274q\332\205=\350\312e<\364\177v\275\236<\016\276]j+=l\213\264=\2320\212=v\t-\273\001\312\274=\250\326D\275\211\252\'\274\262c\201\275]\023\\=Z,.=rr\205=rY\343\274\010q\216\274L~\201<~\332-;}\254\227\275<\252\232\275\225I\275<]\275\010\275%H\361<40\003;q\266\267<LW[=b\2747=\240\t\253\275a\r\323<T\366\013>p\312\276\275a\003\217\275d\240\251=\344\273\320\275CAQ=\364\336\224=\310\321\005\275A\343>=\263^\004=\311\204E\275\014^\231=\337 \244\273bc<=\272\2709=\326\330\030\276\273z\031=\262c\303=\353R\223=\264\363\237\274/\332.\275Pr\207<al\305<\327O\351=#g\277\274\304C\342\274\302\344s=\342\002(=\366\204\213\275\377n?=\220\244\272\275\223c\316\274\030\200\340\274\020\373&\2756\216\267;\271\330\207\275\033W\207\275\233\247\256<\310\355\212\275\205\320\305<\226\235W\275\"D)\2765\3249;\323Y\031\275\224\013\025\276IY`\275mh\217\275\022\346\021\276\345iz;i_\216;*\n\311\274-#X=\303\276?>T\331\240=O\020\244=\t\331q\274L\255\254;`tl=\002\235a\275-\252\270=\022%q=\250\257\352\275\242\334\274\275\007;\271\275\267\016\022\273@\326\276\275\257F\271<\360\376\341<\\\271B\274\260\r\260\275\371\366\341\273\223\007\237<E\266\225<fyl\275\343\251A<w \242=\332\254]\274{\370\230=[\"\257\2734\t\277\275UB\376\274\n\363\003\275\025\005\245=\331\355~\274\002w\007<\030IN=\360\263)\275\317\306=\274l\245p\275LQ\010\274\367\001-\275\241\024\321\274\266\272\204\275\212\006\220<\320\020\236\274\0145J\275\360d&\275Y\234X=L\036\274\274\022\233\252\275\000\303K\275n\370O\275F\311\'=y\322\361<-\223\261<\221\376\243\273y\306!<\304\227\236\275?\225W\275\355\025\235\275\3445\353\275)l\204=)y7\275RA\331\271\367\272\016==\216\016=\371\260\261\275\t\315_\275<\340\322\274\375D\026>\010X\330\275\210\206:=\373\235\023\2754\302\205\275\003\010\312;)\362\214\2753\241\004<\264\3646=\210\032S\275\322\207\260;J\007\342\274\252\252`:\273\340\035=\r\310p\275]qz<\307\235\244\275\026\036\377\275<\2523<\360\256\324<\267];\274%qg>G\2601=Z\275\260=\201B\037\274\231\245\033;\033\255\276<<\240~\273\236\243\\\2754\313?\275yp\243=\257\257\n=v\n\032\276\036\370\023\273\276\211\035=\366\205\023;W\006C<\312az\275c\024o\275\005\262\036=\"\346\312=Q\233\340\275S\323\004\275o\001\333\274\207\231\232\275\217D\227\275\310\312\206\274\237\004\024\275\376I\264=\300\212\233<I\010\307\274Y\241\215\275+\371\300\275\345\342\242=c@:\275\344\266J=\255\355\013=\000\310\001\275\027\243\300=\227.\013>(\304\006=\345O\240\275\032\373\003>\376\260\203<^\261\376\274\305\373\335\275P\256\223\272\350\361~\274\300\315i;\230C\316\274\314j\235<c:\"=Y\373\337<\020\303\214\275P\n\245;\024\025\007\274\335\335\226=\024\227s=\200\204\010\275\274\331\004\276\2315\231<\302\216\037=z\006>\275X\005\255=\354\315\364;]\307\031\275ME\022=x\322\216\274\342\361%\275\222G\257\274\\\243\034<_\375\\\274\036Z\253\275\250\346\217=\216\306/>\336]f=6\220\267\272N\001\200=\022\224\247\275\001er;\341\325\026\275~\002U\275/]\007\275\220\347\211\275\274Q\225\275\2673\217\2756\337\225\275\223h\007\274a\314\340\275}\233\374;\274\300\314\274:{\340\275\025\203A>\315\372p:\312\270\347\273\343Y\331\274q\034\364<\252\274\320;o^ \274m\326$\272\266\265>=\3107\350=\324fB=Q\227$\275\321l\314=v+G=\317G\254<\222\0252=6\3137=\366\001\214=\326\231\005>.\374\032=@\250\254\275\232\216P\273f\215\207=r\250x\275[\0260\275\361\340\336\274\255\361\306\274\0026l\275Z\205]=-[+\27500\236;\351\242\225\275\361\027\344;E3^=\204\342\340\275=\260/=Zw\010=sF\241\275\020j\360\274/\3039\275\254\302\303<\333\347\030\275(\277\351<\241\230/;\342\272\231\274[l\202\2752[\224=l;\034=n\243\306\274\372\366\245\274\220_\226=\013Ol\275B#\307=\251b\302\2757\225\016\275\261\316\376\275\020\254\010=C\227M=\303tV<F^\245\275\364\013\377\275\025\324.\275\230\210\376;B\325\325\275\303\361\270=a\314\340;\247\220\232=\360\271@\275\202\347\013=\031\315\327=y&e\275\030\\\227\275\214i?\275\323\363\302\275\216\241\327=e\240\223=\373\313\245=X7\341\272!\324\246=@\227\261=\344\032\204\275d\275\277\275v\226\036\275\3668o\275\270U\341\274\035\345\264<Ya\320=\277\324:>\035\201g\275\"\270\005:9\202\202=\220\357\020\275\367bW\275\341 \261\275uV\314<&Wd=v^\346\274\321%\006\276\223\225d\275\336\037\355;\322K\341\2758X*\276\002\300\206=Qe\201<\377\220\241\273\016I\022=\r*I=IRx=,q\024\275\336ZR<\3071\353\275$r\265\275I\343c<z\375F\275\363\371M<x\227\004\275\366\306\317\274\222\2242=\331\273-\274\214\\\226;\262\227\323\275\377\231^=\204\n,\273\326\371\227=\036I\306\274w\304a<\247\275\321\275=Y\212\275\245\2765=\235l\364\275\375\217+\275\376\377\260\274\31004\275\231\250\223\275PDd\275\225X\313\274\334\ts=\272\322\"=\023S{\275p\013\210\275W\210\022=p\007F\275l\305%=/\211t\275c\374}<\205v\226<\031\217\347<\035=\254\275n\024\036\274\353\216<;;\016V>dK\333\274\202\216\"\274xv)\274\364Mk<\335yi=I\005\230<\342\002p\275\367\311U=\222qP\275\371\210\225\275\\\227\363;\337\300\213=\377\213\315<\210d\220=\205\214!<(\340\316\273T\031W=T\020\023\275\370\200\241=V\356\234=V\177$\275\027\031\267\274\220\220\275\274\346\333N=_S\023\275\246\256\372=\372wu\271\377\256\222=\320\025A\275^\030\007\274\306\245:<\013\177\216<\331\2509<3\372\017=\360\307[\274\372H\373=\246\355v\275Mh\347<\241K\000\275wp\010\275\213u|=\013\t\331\275\316;\351\27547\323<\361\211\271:\224\036\215\273\245\232\014\275\312\301\322=\345=\364<H`\014<\'\214\270\273\235\013\335\274I\311Y\275m\006\216\274\003\256\016\275D\262\305\273\206\200&\274\"8\254<\250p\022=6\262\177;\326\336\t=\242G\361\274\270\336\205\275[\217m=\210\272\235;\375\331\361\272!\370b=v/\026>\275y\220<\243\340P\275.^\256\275\307\317>=\341gR\274}F\250=\342\016\005=\373\254\033\275\026h\002\276\312\273\347=!\254\213=i\351\253=H\034\207=\374\223\215=3\376E=U\001;\274\347\306\210\275?9\205\274zC9\275\331\022\253\275\354\263H=\242\274\177=\264\2641\274\021Kr<\300Zq=p\300U=\"\272\021=r\226G\2739\313\274<\304n\323<\026\303\311;`\364\307\274@\033\001\276\nYL=>Cn=\347\242\330\274\010\327\026>O\371L\275\246b\227\275\026\210\251\274\322Bk<G\214\\\274J\361)\273\3340\226\275a\366\271\273\260\355v\275o\313\306=ngs\275.\210g\275\3340@\275\273\023\225=\025\221r<\263\251\204<3ey\274\3626\274=ZUO=@\335\227=\216\023\t\275\372\016x\275\212S\240;Z[\202=\370\205\374<\351\274\321;\005\304\240\275\260f\215\273\231\212f:9\256\247<\n+?\275>c*\275S\363\016\274\001\203:\275\270\202q=\014\023Y<`g \274\277\375\200=\311\263\036=u\205:<\030\273T\275Y\366\267=\233\013\303\275\023\2256\275\n\025\212\275\360\364\310\275\264\371M=U\255\255<1Z\265\275\005\225\246=\277a\222=&\254\036\275\036H\335<\243\366\203=\225\220B\274P%E=\004\303\214<Ib\230\274\021e\200\275b@\214\275n[\000\276}\024\301=w\240\212\275\343O\033>\364\333c=\032/2<\311\274\311;\271\026\333=.\351S\275\031U:\275\337u\246\275`\274\264\275t:\301\273\376\010\241=\220\270\214=@\203u\2747\023\357\274o\234|\273\321\214\233=\327\205\212<w\3014=h\347\202\275~e<=\300\272Y\273\341\361\256\273k\236b=\244\177\241<,\240\317;\265\350\232=\240\256J\275\254\312\224\275\221\344\013=j\244\235\275\301\335h<\316\233\250\275F\3721\275:\232\206\275P\'\212\273&g\305\273WI\213\275\265H\251<\247\002\231\275\244?\036>\367]\321\272m}J\275V\275\214\275\304\213\340\275\2209\273\274\311\365\241\275\334KE<\3021E\276A\310.\275\322\t\324<hd\001\276\245\034\010\275\372\362p=-\027\213=\263R\001>\353\311\206\274*Q\302\274\250\343/\275\005`N=\253\276\305\273\031\346?\275\2075@\275\330\223\253\275\177q[=4l\230\275\366\206\251=s\205\252=\242TG<\266\350\360\275\333\222\250<v\253\225;\345-\203\275-[\340<\332\231\002=\345\267\246<y?\303<\366\215\230\273\360\200p=\333\233\230=\027\206\316\274\241$\213=\027d\246=\343/G\275\310d\330\274)\356\303\2753\337\361\273]\372\227=\364\372\232:;G\244\274\206\270\262\274\365\270\203=\243\222\341\275n{b\274]\371[\274\245\314\003>\250\376f\275J\212\344\2745m\037\276+>{=\017Y!=aI9= \224j\274\272\250\021\276R\236\374<\230y\020\274\004^\236=Y\264I;\204<R;\2311 ;\331:Z\275\331\021\242\275;\337[=.\331\300\274Bu\225\275\222q\364\275\010u=\275d\226(;BY\357<\0340\007=\225a\247\275\232\250\256\275\023l\037\276\260\340\342=h\336\204=\225(U\275\034\223\330\275\303l\317;\202M\247\275\007\330\323\274cK\253<s\275\233\275\224Q\314\274S0\023>\321:\225=ck*\274\324\377\320\274zq\336=\253\200{\274R\307\330\273d\226\024<\307\307P\275\032l\371\274\013\221\225\274\334\263g\275\240\246\266\274\217\302\235\275~\332\202=v.\257=\213cH\274)mG\275\254n,\275j\206\320\274\000\377\005=\235\177#>\342\254\252\274\301\372\n\275\267&\n\276\256L\242\275\025\344\263=\332\354\313=09\215<\314\024\003\274\201&\356\274\247a\255\274a\262\236\275/\213\213=SZ\301<\3205\272\275\336>\212=\335N3\275Q\330-\273\204\240\315\271\345\201\265\2751\222\367\273\224t\201=\253\331\306<\215\247\262=\036\265\225<-\016Z=\222\240\205\273$\006\311\275\371\321^=\241*\313=\220Y\320\275\303t\221;]$\274<\t\375\262\275\374\340\363<T>\324=Q\023\343\275\t\312\246;|$\177\273\361\203\017=6OQ<\203\r\233=\007\016_\275\242\037\223=\360Rm=)\321\266=\352\323\335\275[$;<c\372|;\231\330\370\274\202\002c\275\251E\'<\210P+=-$\006<eC\220\275]t1\275Z3\217\275<\321\274\274\317\005V\275\'\270\241=\241\177\234=c\2159=\204\022\301\274\343|\347\275\300\311\311\273i\271\206<%\315\333\275a\000O\274\026\217\207\275:\312l=\354\240\001=)4\213=\245\272\016\275\\$^\275$\275\221<\357\272\357=\241\232\303<E|\\<\362\336\330=<\216\377<\350\017:<\302=\177=O\033\352\275\362\230\254=\215y(=\311\205r<\256\037\214=\314A\370\275K\330>=\256S)\275\364\221\223\274\256\264h\274\004\r$\274\312R\016\275\361\007\203\274C=^;V\327\365=\200\307\342\275p\324\207\274\006\375\177=\250fX\274\370i\324\274\354\336n\274\336\334\350\272g\024\235=\3313\240\274d\025\225=K\242\013<\371L\267=\'\206\231;\236\250\327\275\376\017\316\275F\201\002=^\314D=\t\000\036=\211\336\330\274(\200\026=[\336\342\275\357k\230\275?\216\367\275\023\250\367=\203\3104=\037s\272\274p[\274\275\344\214\n\276\003\320b<Ax\'=\223\004K\275(\222\013\276\256&\177=L\300\254\275~s]\274g]\022>\270\356\204\272G\247\260=W`\035\275\021Q\365\273\334:\310<\356\375g\2750\252k\275}\003\223\275=\204t\275>FT\272q$H=\303\303 =O,\263\274\211\377\217\275\323\231\253<c\336|<\363\251J<\322R\240\275\254\245\374=\356\010\363=\235+\272=\030:\025=\334XE=!\232\007\275tBk=v\267y=S\321\022\273Qc\022;\275v7\274\007\234U:z\371\216\275\201\256\256\273\322\026\177\273\245\"\230\274\330x\311\275A\220\227=W\264S\2747\323$\275}\327\207=\263\2517\274\372\366\037\275\375\364\\\2720>\"\2757\024G\275[\'j\274:8\201\274j\204\025\275\267\332B\276\023\033\331<o\260\"\275z\324b\275\205\305\021=&\313\032\273]\257\001\275\242\243\317=\320\025\252\275\200\213D;E\036\\;\206T/=E\t\355\274<\252\325=\016R\024\2764o\363=\000\200\336\274\266$p\275\240s\230<\370kK=B\304\017=,\037{\275&\214\203=\346\005\364<\325\022\025<|\205\\<\225WY=\333l\301\275E\323#\275\365SX\275\305$\200\273\351@\267\275\325o\255=}l\311\275Y\264J\274\007[\272=\243\373y<\033\233p<t\233\266=\357\333\025\274\225x\354;\342\266\204:\203\304P<\027\017\211\274\372\372\026>lg7\273\267\336s<A\226\022=\261\372\235\275\t\201^\275k\373\016=\202 g\275\245W1\274O\326\240\275\034\257\273;\030\020\201;,\371\333=\201\354\336\275\273\223\'\2750k\t\275\333\304.=\205I\242<\024\205b;\036\344\227\274\345)\023\275CL\231=r\252\201\275\264\037\005\276\\\357\331<\203.H\275Ad\243;\241\241M\275J.\261=]W\232=\324\000O\275w\226B<~\362\237<\207\372|<\021\274\212\275\003lj\275E\202!<\3678\242\275\220\035\'=\371\375 \273\240N\005\273r\345\341\274l\303\353<\"27\275\253\323\025\275\215\251\\\275\364\031\361\275\032\307\366<Q\343S=\"\030\252=\330N^<\031\227\265=\036\"\212=\036\305\361\274\313&\274\275|I\260=xI\315\275<\352\240=\016\261x=\225\266\353\274:H\036\275\246\202\340;j\347N<\277\207\206=1\301\336=\003\251\301\275\204b\235\275\021\352\'=\000\204\315\274x\\\251\275\270\020\021=1O\335<\004\365\235\275\220{\024=V\240X<\'\036Q=\370\237\276;Z }=;\253\244\275\376\\t=:\254\275\275\243d0<\020b!=~\350a\274_\001\363<\013ys=iW\314<(\016\037=\324\037a=\302C\261<\353\320\001<L\203\221;\323\215\230<I\226\252=v\362\214\274\022\262I\275/\333\267\275+\207\345=\\\343\210=\371\267\017={\r-=\313\334\236\275\353\313}=\03749\274\241\030}=\321k\331\275\343\0109\275\001\251B=Y\207[\274\020\245h<\336 \035\276\354\212\247\275\377\366\'=7\264\256\274\214U\273\273\\\032\267=;\307\027\2741\277`\275\027Uu\275\340d\214=Z \270\273\024\264(\275\255jt=+\252\'>K\257^=\251I\300\275\200\231x\275\351R\315<QW\362\275\201\325;=t\370C<\362>o\275:\221\367\274\025\026&=l|\213<\351j==\006\232Y\274\210\024b\275x35\275\206w\303\273\356\3370=i\261\247=t\\\336\274\342\336n\275{G\023=W\353\332=&\307\324\273;\2424\275\264\031\207\274L\033+\276]f1<\024\276T\274\353\013F\274\261:\343;\210\202\017>jG\203=)\330\353=}T\207\274:\226\307<0\340w\275\267{\222<\'\037\243\275\202\276\320<\222aS\274\360}N=V\357]\2744\253{=\350V\230=\022|\222\274\333\231\213\275a\372_\275\252D\242\274\342\222\253=\227+<\275\265\327@=\025d\257=\366/\261\275\356#\013;\305\304\265\274\255\333\352;\3116>>T~\017\276\255I\020\275z,\017\275\307\341\331=\033\037E\276qz\223\274\246\216\342<\222e3<\233\303c\274\351\"o\275\235,\035\272\2612\354\272K\275\r=\361\026\007;\372\264\014=\267\247\214=X\264\"\275)\231\306=\236}d\275\336\'\267<n\271\215=\006I\'\274\016\206|=CY\200\275\215\025\213\275k\2543\275\023\334\325\272\016\337\206\275\350\203l=\224\332\022\274\003\2400>\311\322\346\274\370>\210\274G\366\007<\030\363\232:\346\374#=\337\364\020>)o\277=\210\2564\275E\021$=\023\266E=1\351r=\273$\342<\214\224\006\2755\374+\275\234\212\366\274\206\355\301\274I\257A=\300m\266\274\241\022\250=\241A\225\275\223)\354;\362iX\275W\236\267=\013`2\275N\321\272=c\353!=6\246\317=\010\206\203\275\033\204\341<\356\245\007=\263 \256=^\326\207\274\337\2377\275\221$\252=&#q\275\216r\251\275\367_L=>9\203<\022\250\223\275z\324\246;O\005\257\275\376L\367<\305-\361\275\033\003j=\355\026\340;\013\243\223:\222\'S=\214)S=\365\216\026\272\261\321\231=n\336t\275<U\225\275\376\335\344\274\354\233o<\323\013\211\275\265\205\031\276\261\336D=\r\253\213<\360\310\224<\023o\032\275\351\340\203\275\365\006\201=V\330m=\356\315?\275\313C#\275\200,\013<\343B\247=@;\374\274\237i\260=<\304]\275\344\313\264\274\376\366\027=r\314_=~\331\222=\316E\261=2\007\206\275\236\232\236<\177#\360\274q\273,\276\257\247\024\276\016`\342;\357V\036:B#\031>\353\261\226\274h\301\233=O\377\235<\364\216\355\274*\303\233\275\256!f\275\370>\314\275\'\2275=}g\253\275\365\237\311=%\022\272<!C\241\273\327c|\274AU\204\275Bo\347<F\353\270<*\331\372\274\274\3248\274\375\313X=\030\3341\2743\037\001\276\222\236y\274\ry\376\275\364\275A:\032x\031=g\032\315\275\016Y\000=\200\323\250<\3150\\\274\271\255\246=\331M\253\275\355\224^\275J\374\t\275\027^v<\236u\001=\331}1<\322\264\366<\341\344\264=\371\002\245<7\"R\274\267W\264\275\301\352\177=\302\267}=\255H5=\332\207\r\275\316\345\270\275\373\273\316=\220X\010\275\347\327\251<\2079\241\274&\221\220<\034\314\214\275i\360\031\275j\375W\275mtK\275\001\233#\274\\w\357<b\325\\=\332\3072=\316\330\267\275S\304\355=\221y\000\275\030\242\t\275H\214\216\275\343z\035\275\200\217\016=\036Z\240\275\023h\r=V\213,\275\267\n|=\'s\200\275\361=\033=\276q\325\274\237\003\254=j\014\030=\245h\362<\203g\207=d\220\375=\343\245\036\275R\016d=\251\250\301\274\202\246\244\275\002\306\222\275\325\316\226\275\351\353\346=C|\324<\0261\243\275\323x\316=\220\253\023=\337\016\"<\311\034?=of\211\275\256\373y\275\220U\231=\377B\225=\310w\014\273\230\200E=\037|C\275\205\010\022<\251\264\225\2744\215\306=\005\224\252=\325I\036\275Q\235#<2f\236<c\034\317<\232Ub\275\231\253\375\274\317\363n=\320\3302\274\345\036v\2756\363C\275\214\343\311\274\260\267\033=\312\205\260=\257\205\232\275\304\301\177=\326\263a<\177:\216\275\317C\356\275\201\017\377\273\332\350o=\356\204\023=\242\311\246\275\316\321\306=\301\247\007\2755&\272=\201\255\351\275\263m,\275n5\312\273\0106\030\273\031\261\311=:\220z=\254\361^\275j\276\030\275n,\330<|\325^\275BGO\275=\343\240=\311\207\007\275\221\367\231\275\024\025^\272u\347\232\274\032\304\206=\321\334\001\274%^\215\275\305y\273<\215;\253\275\275\301\314\275\230\0162\275\314\237\220=\274q\251=JCI\274\373\026\300\275\371<\024\276_W\360<\377@\311\275\327wy\275\207\030\033\274\260x\354=\215\220 \274h\371s=\004^\026\275:\030|<~\034Y\275\266\237\275\274Z\267K\276\006c\214\2745\010H=\232\222I=q\244n\275:\236H\275\255\351\362\275\335\257\332<_\220\205=\250s\313;O\200\206=\313\355\300=\334\3260;A\360[=sF\300<\330,\326\274k\206 =\224\210\001>\274\262D==\347\314\275b,\033=\001\231S<\311\332\301\272\235\227\323\274PIT=e6\377=\t\257H\274\201\320\376\274\004r+\276\374V\023\275\r\226\030>t\261v\275\2254\224\274\341{\031=\"\253\302\275\262\3739\275\253\314\244=oHb\275\2103\260\273\213\325\031\275\005O\3269\303\243\323<\272\215\344\274\246Nn<\270\332B=\030A\271\273\272\002\036;IEj=\023K\\<}!x=\203L\217=\016\027#\2748~\206\274\207_l\274s\360\262\275g\276\223;\351\337\374\274w\330W<F,\304=O\351\3639\233sO=\200\021\031\275\025\200\004=\243{o\275\251I\303\274\2062\t=\020/\275\275\361\303~\271\233\"6<\007\361\273=nm\205\275\003f\200\275:\267\264\274Lo\036\275\307^\254\275O\210\r\2743N\201<\302\256(\274\360~@<\311\334\003\275\037\013/\275B\325w=D\205\336<^\376\025\273\226\214\215;\305\203\344=sa.=\001\240k=\037\202 >}0\020\276\006<\270;\221\246|\275\2554\304\2748\257\025\275\277\340\220=\343bo\275w\220P\275\351;\201=\275\211\212\272\003\034\303=\240c\007\276\005\245k=\033\300\347=)6\334\274\214u\205=\037\301\031\275\341\315I\274\023\211\272=\262\333 \2758?\215=\361\206r=v\377K=\211\\\003\276(,\023\275d\312\253=\245\020\254\273\316\354\206\275c>\247<\275T:\275\010kV\275\362\313\260\275\331\204\340<\310\307Y\275F\245&\274\022\203\031\275q\007\250\275g\245\302\271\324gc\275\247\227\003<\212\036\347\275`\252\377\274UHC=Qy\316;}g\221\275\246W\243=\023\237\264\275\023t\203=\266\327Q\2757#\"\275\003\241\336<\213e\325\270\326\025v=o~Q\275\255\271\343<+D\306<I\034;<\202p_\275\2309\305=\266-\206=\017v\210<x\032M=f\252\213\275p\304\271<\313\317\t\275\270@q\274\200\364\215\275\247\3639\275yE\n=c\356E=:\t <\312\322]=\255\177\3079Hz$=\360p\224\273\313\204U\275\263+\203\274\244\324\315\275\276)\352=,\252\023==\320\262=\253\221\261=e\334\257\275d2\313\275>lr\275&\336\341\274\367\312/=,C\315\275\312v\361:\032:\203\275\225\027\225=\210\361\356\275\273\335\024>\014\005,=\301\247\241\275\017\305f\275\206\317l\275\034xX\275\206\177\317<\314L\'\275\336\020Y\274\230\275\017\275\331\204\363\274\360\372\327=lZ\233=\007\017\215<\233]!=:+\254=\252R)\275\014>\252\275\367\007|\275_V\n\274\274Z\n\274\265\245\302<\004$(=\260\036\244=d\247\000=\222\375\305\275\247\313\033\275\204\261\'<w\020\030\275\203\3742\275/_\231\275\273\224\251\275\r08=2\361\017>\240\201\027\276\313\370\331=7\251\016\2740c\271=\355\357!=\210v\317\274b\014\261\275\016\224\263\275n\214 \275\243\005\252;\253\234\326=\223A\302=\264(\267\274_Rk\273J\"\246<\r\210F\275\010\242\352<\224\311\372\274\213\025l=~\261z=\224\001\376\274\"\325\315\272WtF\275LeE\275\220\310\230\274\327\375D\275\350\331\361<S,\213\273[\222\207\275\224<\312\274i\020X;\201\022\013\275\026\230\301\273\344\237\362<\036\207\020>\372\227\322\274;\241_=\027\274\021=\336\021*;\\\253\t>>$\034\275G~\225<\317\240!=\002\343\016>1\330e\275\"\010\235\273\263\237\2158D\346\202=\307\376\261=\330~M=n-\353=<\374 \275l\376t\275\316\220/\275\035\244\34792\203\251\273lx\357\275\330\016\260\274\260\374Y=p\226\037>\246\350s=\025:\252<s;!<\006\244O=\035\270\262\273pX\206=\224\226+<\177\017\211=\304y8\275\363\270\'\275n\312==\000\377\264\274\200qC\274}\021\262=L\351Y\274{\030\224=\317&-\275*j\n\275\262\252|\275>\2000=/\240\020\275U\037\310<\214\r\371<\024\311\267=!do\275\315\270\350\274\315B\324\275E\257k\275\224Q\221=VL\'=\210\335\t<\201G\213\275\371F\262\275\330\3102= \r`=O\024P=%\225\363=\351\345\213=\254j:<\200p\232\275\226\241\234\275z\310\006\276\266\311\276\275\345t\255\274K\225\303\275\023o~\274\032\017\223\275\232G\330<M\344\203=l\370v\275\2132\201\275\357<E\275\2704\261;4VF\276\201\034\221=u\361\322<\225%O\274P^0<\335\036,\275T\033\222<\t\237\"=\227\t\342=\247a\202\275si~\2759\002\275\274\000\335\031<\025V\244<\335K\\\273-\250\346\273\204Zp\275_\035\224=Z\371&\273FX\020\275h=\212<8\273@=\236\273\233=jo\014\273#\n\256\275p\302\204=)v\206\275]J\207\271\244\363\022=\375\204\007=\314\206\240\275\007\245\034\274\367P5=\177\344\345\274\342C\320;\304u1<\314\251\226\274p\271\270\275\243\271\340\275u\t\035\275\020tx\275\366\361[<\370jk\275_\272\333=|\016\344\274\234Eo\275\227\367\037<d\344F\275\310\323\033\276s\007\227\275]\264\234\273T\265 \274\3219\262\275\t\3534\273\022\307\300=V\357\234\274\314\301==\372Ax\275\016\301\226\275B\333\201=MuI;\375@\342=D=\243<\356Cm=2\001\335<\357`7\271b\371!=G\254\215\275\353n\202\275\206?\360\275\303\000<;\256\020w<\277U[=\213q\367\275\022Y\321<\277\266\254<\206R\321\275\340\034@\275?i\255\275<H\326\272\257\032[=\206.t=a\360\264\275\215\017\377\274\'\244S\275s\031&\275\017\243\210=\321\2505=k\302\264<\216M2\275\332n\364\275k@\022=\365\t\346=\340\337\273\275y\210)\276\267\324\260\275(O\234<f\232+=\022\332\223\273e\020\233=\274\260\022\275\230\003\235\275\220z\255=\204h1<+\271h=F@\217\275lX\004\275X\360 <e\2660\274\304\231E\273\030\302\220=\217\315y\275>\216\025\275B\244\263=\2404\370;\220\377\207\275\327F\274\274\276\217\r=\033\017L<>\313.\273q\242\307\275ZS\246<\007\323\264\275^u\336<\350\177)=\231}\223\275y2\361\274g{\263\275\341\004\315<\240\313\247\275\326_F=<\374\310=0\251\364\274p\004<\275\303&\324=V\307\247\274\372\033A<\207\005*\274$:O\274\210LN\274\361\366\272\275\373\252\245\275\303\002\260==\315\367\274\342\361\274\274\241}w=pB\035=\367\317_=\312\367\200\275\207\020\312<:\254\014>\031,#\275\257j\240\274\221\347H=-\371T\274\010o\213;\337\231\026=k!+=\003\200h\275\207\302\331\274t\265\014>\025;\274=\2624\333\274\nnF=\373\230\203\275\347E9\275\213\247\006<\302\373\025<\034\004o\272\342\356\030\2746\337\224\272O\246\374=\260E\'\274\300\034\006\275\343\203\312\275D\237\267\275\307\240\216=\005\273\322\275\375\225\207\274\016\344]\275\204\353\250\274\267\240\t=8\303\323=\037P;=\271\211\215<p9\316\275J\266+;\0311o\275.\030\346<|\351\276=\'\356\">\254\376O:\241\304\006=/\331\222\273\270sx=Be\016\274\353\245\250<\205N8>\245\236#\275C9\007\275#\353\303\275\274(\245=%]\364\274tV\327\274)]\372=\214\235\023;\374`\'\275:\233\227\274yLH\275\252\013\r\274\327\t\025\274\325\033\277\275\331\306\353=\034\205\344\272\006h|\275n\024\010<\346\020\266\275\3510\351\274\302\021\236=\303O\035=Q\235\005\276\375vc\275\365c\313=\211\205\245=!\233\207\275PA\336<\334\306\302\273\341\305\224\274\277\220><\310\325|=\002\260A=\353\262-=\372\273\t\274\311y\234\275I\241<\275M\342j\274E\306T\275b|\251\274\257\333\217=\313\211\320<\017%\'\275\n%\'=\317\252/\275\375\t\014\276\250\240\272=\376\177\031=M\363\025<\340\271\336:\234\337\"=\362\362\336=\334\304\245=\352Fh<l\351t\275\355\213\324<\260[\334\275\033fq\275M\313\314\273E\364\336\274\2272\006>\215%\243\273\010\305\023\275Y\316\034=:\2441=\220\230\200\272\032T\300\275W\343\254<\367\251\3678\237=o\274\213\314G<q\333\020=\201%\306<?\377\222=\365\035K=\013X\362<T\206N\275!!F\274\3315?\275\037j\202\273\310\363\242=\326\247K=bd\003=\033`\200\275K\360\010=\332/<=u\226\356\274N\227\275<\362_\234\275\345\246\030\274\254\3658\274\264\270\314\275\010\245\023<`& \275gv\363<\260\275\316\275w\315G=\204V \2768G\271\2749S\312=|x>\276$\211;=Ic1>-\353\n\276dI5\275V58<\344+\255\274\030E\262\275\343\205@=\037}\031\275\013\301\246=\352^\'<..\204\275M\n\330\275nq\310=Ut\324<\222HJ\275%\375\027>\332n0\275\363\352\251<\346\367\031=\2658\213\274\006w\244\275!+\332\275B#\n=\244C\344<\357\255\n\275\314\007\225=\237\203\234\274\343\211\026;UA\205\275\340m\360=\301\252 =d\262\320<\000)6\275\n\000\267\274\353c\253\274P\315\270=\275\235\271=\277Cy\275\346G\342=\245\026O=/\256\334\273\\{\205=\037\005\304\275\225v\225\27436\016\275U\215\n\275\370\227\356\275O\335/=&KR\274\273s\224\274fr,=\006\332\204<\2267\322\274\003\'Z\275\373;+\275\367]\253\275\330\363\256=\364\332+=\312\023\215=\007\010\206=7\233\013\276\353A\234\275@?@\274N\245\225<\301\222\003=\305A\030\275\253\242X<\224i\t=0x\202=\211\371K=y\340\225<irv=\267u(\273\370B\007;A\3420<Q\343\332\273V\344\006=x\n\241<9\235\231\274\252]`\275\032\271l\275I\272w\275w\355!\273\240\267\377<4\261\310\275#\216\225=\002E\020\273\353\304\217\274\356L\205=\340\343\253=\372P\372\274\204\320\261\275\t\376\025\275X4\333=E\316b:\266\033\216=\212D\307\2723c\022=+\272\005\276\235\3260\275\275^\367<%y\356\274R\274\244<vqT=\320\341\263\274ZVY=\257\310o\274\331\240p=\035C\021\273{\274<=\350\237c=Vq \275\226<f\275\356\251\001\275\263\017\251\274\377s\201=V\201$;B\304\211=\242\200%>@\223\344=ca\263\273y<\026\276ST\261<8\372\223\275\315\223\240\274\226$\005>\277\233\271<\247vm\274Q`\210=ad\024\275\375-\334<\274v\321\275*Ve\274h\276A\275\355s4\2712\r\334<\265T`=\304\016\036<f\330m\273\370\213\301;\306r\371\273\370!\343\273\225Z1\275Q\354(\276W\373\026\276\'\3636\275\254$\263\275\371\t_=\277\247\022=\266~\333=\333{\220\275X\315\257\275<\376\241=\356\322\262;}\254G<\304\277\242\273%3\254=\302\231,=\347\330\224\274\227\020\276;\323\336\355\273j\215$\276j\365\265\274@\317\260=c\3528\275\263\251U\275\356r\315=\033\\\265;U)\267\275\224!+\275\316\375\313<\271z\254;\321\235\351\274Hm\203=\026\260>=k_\254\273\013\t\200\275N9m=`\356\263=0\242\303<\262\353\266\275u\306;=\306\014\310\274\365H\347\273\";\202=Yzd\275\254\036\250=\000\316\n=\341\366\206<\234\263#\274Q\352>\275\327[F\2754?<\274\312\021\206\275<\241\313<\246\307\212<\300U1\275\201&\251=x\356\200\275\240\337\246\2757.\014\274\201%\032<=\251\224<\276\014e=\327@\317=\263r5\274+\324\221\275\375\355\303=\256\023\212\275\251d\326=\364\210\263=\251\253s\271\277o\337\274\361\363\361\2746N\334<\305\365\264\274\t\377Q\2750\304\001<\322N\200\275\322@\370<\310\303K<i\200\275\2732Bk=\301x\311\275[\311\251\275\264n\026\275xrO\274\247\220%\275Q\330\266\275\207\225\025\275\034\316l=\312|t\275\260\323\314= E\277\275\'\177)\274\013\277\'\275\016/\225\272\267\334\r\275;pH=\237\313\223\274\023\2552\275\332~\330\274\213\\\235\275\220r\245\275\021\235}<\362\373\032\273\270\016\177=d\273v\274\245\353w<\330r\235\275\\TN=m\373\305=e\221\251<.NG=qM\263=\374\376\020:RQ\330=\005~\016\275\263\301a\275\263\320\336\275\312\211\332<g(k\275Z\241x\274\211\321\250<\304#B\275\272\004\372\274\']\014=[D|\275q\310\254=n\331\306\275-s\n>+\344`=\244\257\020>\001 ,\275:W\374\274\031<\366:\302\016\255\274n\315\220\275\005\335\014\276\351\350\246=r\214K\275\353e\030\275Z\204\305\275\2713\305=\212\225\240\275\257\013\211=\027\274\026=\345\370@\276\260\367\365<\257\346F<\205\355\254<\2135\236\275G:\276<\271>\231<\221K\030\275\247v\370\274\024\231/>\n8\032\276\235\002a\275\256\273\236\275t8\250=\350\036\024\275\263\245b=\212.>=\346=M\275\331\363\342=!(\203<\267\207D\272\324\037J\274\366\356n\275\0049\303=\n.\r<\366\273\027\275#\242\230\275\001\032\005\275\274\237%\275\232\020\002\275\0323\"\276\344O\274<\302\2029\274#\307}=\351\017\244=|\316\263\275\234\374;=K\336\203=\357\\\372\274D\204{=e\350\201\274rFT\275S\242x=7E\360;^P3=\371K\332\273\345\260\371\27395\236\274`\310\245=\324\007\303\275#\236\276\275\272\016\224=\256\020\207\275-\260G;*\005\203\275\256\360\213\275\351-\035;\335\250\313;\213\360\370<ZP\031\275$X\260\275qGM;\237\210\226=\212\265\263=\353h\324\274\375>\277=~>\236\2754\270\227=\341@\305=\323\331u\273\305\272Q=\330\031I=6\271\245<\024\264U<\200/4\274\303\226g;\310\232H=S\364\236=7~\021>\265\332\271=!\315\336\274\240\356\252=|\"w\275\304.D=Hp\215\275\234\001e=\337\250U<\t|4\274\336\034w\275\322\325\222=\224mO\275\311\323\016<\345q\210;\225>\277=z:\255<\026i\014==\233\006;\220\237\202\275Ki\226\2752\272\350\274\007\340\270=\245|Y\275\010\207&\275\205\353\t\275Ni\274\273\205\333\236\275\354\034*<\327*\216\275Pd\257\274\336]\033\275D\201\202\275\035;\014<sA\213<P\357Y=Ab\257\275H\374\305<\3747\220=~\220\252\272\367VP\275\354\010R\275o\025\036\2756\335\304\274nc\320=\276\233\223\274\0167\235\275\221A\377\275Z\211X\274%\267\326\273\325\212\256\275\255\031\334\273L\027\233\2732@\235\274^*;={\031\003>N\262(\275\247\315t\275\r\310==\362d\305=\035\206\234\275\323\316\277<\363cl=0\223k\275\363\243\210=\234|\304\275\312\252|\275\265pL=|G\204\275\336Ef=\221s\027=\360A\313\275\252\337\016<\231\003\303\273\227\372\016\276JT\235\273\241\274\261\275w\032d=X\243\315\275\007\356\266\275~\341\325;\237r\375\274YIv\274,\237\000\275\r\nl\274u\303\266<\352\356\'=\227\321\327=\366\261j=\313xf\274\343\261\020\274\377\324A=\365G\331\275\254)\233\274\316\200\215=yq\036\275;?\260\275\325\300\354\2753\225A\275\341a\217\275\376.k\274\323(\277\274\215\360L\274\254\276\373<Y}\331<\375\'\264\275\220\252\255<\240L\020\275B\315\260\275\r\t\207<\323\267\022\275\356\363\017>I\3503=+Q\240=\310?\347<\262>B\2750\n\014\275\373C\341\273\245\211)=/s\345<\373\2245=-\263\020=\221\363v=\024!\021\275I\217\332=\r\372\006=\364\177\273=\025\345l=;\2172;\252\243\"=\304]F\275Q\000\224<\025\305#=\241\227e\275\364=f<E\017+<\303\030\320\274L4q=\232\010\306=\343r$\275\022\273.\275\235\307\006\276|\244\017=\312\2610=\265\027\256=\261\223\226:z]\352\274Pt\211=\346\277;\275\321Z\221\275\204L\'<6\246\\\275-\314=<\266zL\275zz\204<\211\345N\274\331\204\201\275\234\253\220\273B\250\265\274\331\r\214=\226\301\007\275\225\246\307=$j\366<\177z5\272@KZ<\177n\347=cN\247=\365+\004\276S\324\211\275\244\271\250=\2425:\275\214\n\310\274\016\303&<C3\335=\261\264\007\270\014\365\340<\224\005\351\274\013\363\226;\263\272\030\275\222\027\251=#N\234=\304\245\316\274\305\371\217\2728L\347\274#\215\251=\330t\277\275{6r\275\001\274F\275\270\364\277=\310$T\274\353\202\215;e,T=OF\036\275\262\023K=\232\014\036\275\316#\357\274\222G\351\275\206\216\006=\244\331:=l\242\230\275m\335\205\275\360]\347\274\3078\223\275\271V\020>|\031\371<\322\t\307\2759n\017;@\253\252=\227$\201\275\363\nP=\207\300\216=$m\234=\352\302\204=\362\342\322<\t\204\213\275\354\203\004\276r\257E=*\363\334\274\334\027\223=b\225\232\275%\362\365\274\302\362\257\275\327\251T=lz\215\275\344\372\213\274Mb\001>i\317`=ks\363\275\367\311\023\275,<Q\275\370\024\343<r\024\325\274\254\376f\275M`\263=\277\374\026\275\030v4\275\020\367p=\020\261\225=[P^=u\225%\276\331|{=\3372\314<I\373c=\342\235{=\013\377\350\275Z\257\'<cXM=p|\262=\3245\237\275\244\362\016>\004\237\321={\276\025<B\360\222\275Y{\205=\344\246\217\275\376\375}\275\354\267\250\275M\'0<\267\265o<24\212\275I\304\233=\274\352\007=o\217\017<\375J\301<E\316\220=*:\206<Z\006L\274s\013H\274R!\346=\341\342\261\274G\007\"=g=:\275\362\273\213\274\242\265\340\274\244v\337\275y|?\274\275\233\250<N\344\252\2754\256\214<\344h\234\275\367\357\271<C?!\275\023uH\273\275\332\006\275\213\246\247\274\264\026\230\275![\240\273\264\365\361\273\022$\315=\236Qh\272\2307U=\372\226\202<\356\371R=e\036\227\273\017\032\305<Z\326\200=i\366\002>\210\246\205\274\357\021\274<3O\250<,\243\213\275\225\364\005\276\377\266\025\275\216\005G\2748\276\243=bG\n\272\230\323\200\275\225O\361;\303x4\275\017^\363<M\212%\276\377}\314=\317\032#=\320\336\354\274\3718\312=\351K\004=\310\206\374<#\335\277=\340\244\361\272bv\332=r}\232=\267\313\263<\230\267U=\354\243\363<,\t\326\272\370\227\265=\200\216\237=\365\310r\272\005K\016\275\340?\016=\036\331\231=\033\243\014=y\212\207\275\257\017\236\272:\336\337\274\272\031\020<\"\327\277<\336>\333\275\311\006i\2746\027\252<4\351\210\274\220`\201=\212;\245\274,\234n=\345\274\242\274\222\315{\275\214!\235=\242\243\034=\272\272]<\261\006\330=R\034\244\275)\356\305\275\235E\322\274B\367\334=5\231\217\275\027;\211\274g\3440>/2\350=\217R\010=\300\214A\275\023x\030\275\'u\230=\036k#=Q\345\206\275\3626O\275\334\036\250<\020\276\316<\356\345\237<\037K\235</ \341=z\250\213<%\257\324;!\276\203=V2\246\275\224V\300\275\335\307\207;\244F\305\274 \032\247<2\273_=\335j\210<\312+\232\275\221Z\274\274\377W\017=\273\313\205<\340\265\216=u\t\216\275Ty\272<\305\205\202\274%\313\273\275\225\336\211;\270\256\375=\34400\275\031\250\016>\037\314M\275\256\335\221=\376\340\235\2751F\230\274\000\231\367\274.05\275.IX=\335\210\032=\303\210\016>U\355\024\275\233\261G\275\253S\236\275Mf\235=Og8\275Z\243\314\274\023^\230=Em\260\275-s\211\273\017\251\211\275\372pF=\022\340\316;\330\214\233=\225\251~<\024\300\251=\316\024\215= \357i<\265\200\264=\320\245~;FeG\274\342\333\332<Q\302\211<v\240\374:\312j\177\273Rf4\275\371\360\024=\001r\362<\215\3047<\r\245\365\274\323\344\220\275\301\205\210=!\344t\274\314\3735<\032\220\034\274\016\261/\276c\266J<\376U\341=Cf\221<\023\353\325\275\276\327\232\274\007^\037=\300\000F=\364\312\001\275~\266\027\276\034=K=Ft\333<5\346\021\275=\314\304=Db1\2753\027v\275\250\313\210= N\327\274\177K\336<\004\027\307\274\364\013\036=$\362\316<l\360\267=\033^\207=\242\'%\275G\221\005\275#\263C\275\314\r\312=\216y,\275n/h\275\002;S=\377o\206\275Z\322\037\275\255\317b=U\375\034=\310\340\265\274\366My\274/\267A=\232\313\217;\305\340\"\275.fG=\010WF\275Ot\233=\020\305\211=.#\240\274\351\257\013\275\231r\225=7)\313=\2417\333=\3274\205\274\346/\214\274\005G\276\274\353\374~=_l\226\275\241\374{\273\362M\016=\210r\232=\035\335\263=.\340\260\275XS\264\271\2370G\275\262m\246\274\217\255\236=\021\330\240<\023@\205=\256(\231=\315(\025=\332`2>}\2613=\232o\033>Bj5\276\356Jz=\365hQ\275\001\r\317\275\202h\314=X\000\003\275\240;H<\3166\241\275_\360\013\275\246\207\361\274\360|\031=\346\306\372</\373\026=P\231q\274\216\372\000>M\357\326=\325\225}=b_z;hV,=\275ED\275p\220\267\275\356\202\030=\230\001 =\221\236E\275\371\031\373<\330\036\257\275h\215|\274\354\262\036\274\246\372\356\275\354#\354\274\321Y\322=\266r8\2745\010\261<V\350H=Pwl<\272\033-\275\223jI\275\010M\377=\373i\360\273\000\214\300\275)\3001\276\373\371\223=|~\257\274\013K\002=\300}\223=Gb\t=o\256,=,\253$=^\333\367<\345-\255\273[m\336<R\241\206=\024\225l\273\225\231\016<@\327\213=\205n^<\013\272y=\262\215\245\275\"\265\203=2\240\301\275\267\016\345\273eD\013<\020\262\024\275\221g\220=\240\373\006>v\363\005=\001g\344=\351\375\256<`\2175\275\243\300\375\275\326\1779<\216n\033=\263\326\321<\322\231\'\273l&\022=\315lA=z\333\243<T^\243<\274\033\257;\322Ht\2734\255\263=/I\265<J\010\334<rsF=j\027\033<8\343\203\275\3459\312\275\313E\315\275\000\266\356=#qS\275\226&.>5\237\017\275\'|\244\274\007\260\231\275\223)5=e\324\222=\211u\211\275\022k\366=\305\024Z<\240\276\332\274\022XA;\366\241\224<\'B#=j\300\343<s\021\205\275wq\333<\000\333\010=`u\225<\2611o=\243X\013\275\206K\205=\276A\237\2721\010\032=O\313g\275\217\276\212=tln\274\220\201\n=:\360\211=M\300W<\217\306\231\275\021\356\236\275Xq\r<\265\021*=|%\340<\317\224\355<F[\212;L\037\020=d\221\320\275\327\255\026\276\364YD\274\344=|=\307)\370\274y1\020=\226\363W<\005\272l=\2210-\276I\363\255=>\357E=*\302\267<^\022\035\275\022;\204=n\013Y=\225\342\356\275\225\216\240\274\306E\032\276gB#\276\244T\004\275\016\025K=Q\375\333<\232&\220\275+\267\234\275\322\344\335=w-\206\275S\301Q\275\003\343\021\274\277\031\270\275\023\010A\275;\331j\275\372\262;>L\n\247=\"\340\343\272\002D8=Ci\235\275\264`\341<\373@\301=\266\222\014\274El\254\274\305-\241={\356E<\225J\306\2751\210\024\274\177\312\034\275\260\223\346=6\204j\275\n\300j=\025\204\204\275\326o\274\274\340N\020\276S\024\277\275\315\323\333\275\214\363\036\274\355\244\266<:lJ\273$\247\"=k\232M<\272\013\356\274\215\255\306<\342\346\232\275\263_\213\275\370vI\273\274e\245=\346E\"=\366\3065\275\004\n#=s2\250<\006\024\272;U\373\233=\305LN<\333\353\256\275\263\3170\275z,\025\275\347\302\323\274\342\004\025=}.\320\273\026\315\327=D\335L\271\027<\016\275v\3411\275n\276\203\275\315\320\"=\244X\331\274\315r=\2758Q\205=\312\002\325\273\203\3105\275$\254J=\365\322\344\274\356\323L\275\031\225n=\005\020\022=P\212=<C\302\227=\n\0316\274\312\022+\273\255\310\035=\343\014\357=\373\220\204=\247=\'\275q\204f;#\261\037=R\r\342\275$c\315<Qp_=\013\017\253\275\210\236\035=;\305\212<\344\343\266<d\364\345\274E\352\'=\324\203Z\275\314\005\266\275)~\365\274G[\013>+M\357;\212\250\377<\345\2062=\306\325\253<jc\340=\212\177\331;-\"\030<&\250\310\275\221t\211<S\340\213=y1e=\266]G\274\322\231y\275\207\311\010\276\264y\251\275.x\273\275\273\327\200\275\024\231\324\275?\2466<\024\331\270=\"dZ\275\265\016k=:\243\026\275\315\206\301=\226\306\314\275/\t\251\275 |\032\273{\223?=\005Q\310<Z\201\234=\000\323~\273\313\344\224=\242\014I\275l&\010=`/\214<\246\363\237\274m\n\272;\241\224\2608\032\313\035=\242_N=\240\245l\275\244\205\207\275\032)\232\274{\272\030\276\235r\020<\374\256\n\274\235\377/\273\263\350\024=\222}+\275\021\032o\275W~3\275(U\002\276\334;\254<\272\001\344\275\332\311\252:$\360\306=\202\014\216\275\277\2639\275j\233\230<\"s\202=\203\016*=\373f\t=\272\260\255\275\003v\315<\212\360>\273\230\236\270\273\266H\346=\356\316\250\275\007\244\366=\022?\242<\250K\270\275hH\'\272\210\326\262=\344\266\216<\321\224\351<\322\030\002\275%6\003;\302\031\301\275\302\325\206\275\n|\031={\323P\274`\275\272\274\356\001\001=\212\202\207=\276\024\032=\2658)\273\271\3070=\261\300\252=S\213\260\275\217#\023\275\262IG=\312?\272\274\375a\337\274\256H\271\274\021\327\347\275\r\367@\274\354d\333=pD\221=\217\031\227=\001e\214<\0270\026=\374\325\376<\032;\357\274\304,#\275m\334\372<.\314\212\271q\360\252=\356\3259\273&\201W=\330\262\005=2\314\021>f\227\201=\352U\224<\014\010\237:\210\023\231\274\230dN\275\236#\273\275\253\024\013>;=\324\273\324\237\n\275FS\340<w\247[=%\244\345\273N\376]\275\272*\321\274\246\207\230\275Q\225 \275\t\314\212\275\330\262\t<R\222\332<y\203g;\3725\240\275\322\027\307\272\326\373E=6\312+\275\20553;\206\314><;\214\005\276l\032\013\276%6c=\341\236\262\275\236\233\233\275m\007\024\275D\033\244\274\326\331\020=nA\2009\312\200\203\274\020+z=.z\222=Ax\023;\365\376N=\306xa<\\\214\361<)p\223\274\033\350\007=-\362\250=\254\331.=\244\034?\275\3613\343=8\376\334\273o\320\235\274\313Q\030\275\342\262\005=r\362\255=nN\234\275\243\332\372;\313[\030=\351\007\021\275W`\232=\321UZ\274;\216\205\275\252i\371\274\251\205\022\275\364\3567>\212\313\035\275\000\030\024\276\246\364\251\275\300\245,\272C(\220\274i\013\206=N\016r={\347\277\275\000\316\242\275\323\217\231\275\034\'\361<\014\206\013\276\234\003\033>#c\212\274\377\214d\273\225A\334<\246\034\370<\016\020\246\275\321\035\264<\'#\200=\327\201\351=b\275y\275\252\342\217\275\230\n\245\274\354\247\261\273\376\ti=\243\001\017\276\n\311\205=\252\227\243=o\334\225\275\225\n\026>\306\304\005\276\3450p\275\357\247\374=]\246\367<|\224\013<\177?\327\273+\355\n=\266\343\377:\273 \231\275\262\200B;h\027\203\274\336\211\224\274\352y\001<\037\212\221\275\225&\206\275\360\026\267;=\270\354\274}\244\022=1\317\374\275m\362\272\275\007z\262;\267G\234\275%\274\030\273\237\206\010>\254o\247=\235/\233\274\316_\340\273\357\326\021\275\261\375\031=\227e\354\274\313\240\226;O\226\226=a<L;|\316\303\2754=\260;~\274\230<\2409\244\274\241\303\262=7\242\314<&\247\212\274\225\3334\275T\225\352;(M\355\274\337\350\034<t\207\036\275\007\325l\275w\362\247=\366\3577=\303)\337\275\242B\227=\327\266\024\274b\262\000<\255\331V<\300\236\261=\206\372\231\274\365\002\210=\025\'\256<\201\001$:\266!,\275F2f<\231<\207=fYe=\017\376\261\275\314\374\211<\252\032\335\275L\220\331\274\255\2227\275\032[y=Wt\214=\356\000\035;\265G\314;\236\230\205<n\2075=\"\272\261=[|\014=\r\354\344\275\376\201\252\274\031\2007=\311\324/<\"\367\001\276\357\364\245=\023j\300\275u\330\205\275V\2700\274\001\277\276\273rP\\<%\263\357<:A2:sa\013\275\016\372\"\275a\330\005\275\271\177\250\274\315\353\247;\263\360\205=S\343\210\273\253m\263=\330\270\215\274d\030\255<\336\037b\275\'\205\342\275\353\375\266;\'\336\376<\0005\005=\000s\235=[\271\217\275\020\326o=r\016\034\276\326e\232\275\226:\032=U\342\261=\007@U=\341\320-\275\325t@\275p\232M=\276L\243=Zd\024\274W\305e\274\362m\\\275\n\305u\275\213gL\2757\374\336=\256\266\226<{_==O\247u\274\355\266\303\271\354\031\313\275T\204\002>\367\244m<V\035\027<\320>^=U\363\'\275\243:T\273\344\343\230\273\030\027L=\312\225\215=~\tK<\r/\216=\177I\021\275\236?\200\274cvK\274-\016\305<y\032\201:\356\344\224\275\205\032\240=M\304p\275\207\373\220<\370\230\264\274\t\006\277=T,\344=\330\357\245\275\tx\020>}~\271\274v\310\013<dP\277={x\316<]g\205;\365\252\013\275\317\251O\275\022\222Z\276\357c*\274\227\373i<\345s\347<\342\257\244=\343\"\027<\354X\360\274i\250\256\274\362\370}\275x\270j\275\007@\233\275%j\350<\227\242\370\27594\t\275.WS\275\242xB=\265RM=\332>*=\354\265\275\274I\246\375\275\231`7\275\375\320\326<Y\274\022=\014\024_\272\205\324\234:Ah\r=yG\365;\346\372(\275\361\003\214=&\333E\274]v^\275 ]y=\306\305\212\275\344L\353<v\213\366\274\n\325\030=\260\022\353\274K\222\034=\032\332\030:Kw\234\275u\316\r\274\024\340\216\274\340\212\251\2747\305\001\274r\026\252=\034}\026<\216\221X\273\316\222\r>\300\250\231\271X\256==\264\370\006\275\223\365W\274\002*\277<&(\373\274t\253\230\275~\302\366<K\250\031\275\253\245\004=\024R\265=\262\374\220=\351\200\223<\225q\307\275r2\227<\270\246\221=\025\211\200=\322X\241<\032\223\306\273gg\327;\r\336\027=\351\366\233\275\303)O\275\374\264`=jQ\002=\325\211\357<s\330\210\274\304\314\017=\356\250{=V\312\240\275\314\3727=\':\245=\340h\246\274\230\020u=W\035\304=G\371\262\275s\312\266\275\246\213\336<\304\247\212=\017og=\262\306s=\373\035\305<\313\316Y\275\360\030K\275mn8=o\254%>\241\227\255\275\252\340\360=\273\363\364\275N\271\313<\003\224\034\276\240\237?=\r\355\222\275k\235R\273G\327+>\306q\277<\354\325+>\224C\027=\201v{<6y\214=\262v\364\273\306\277]<\253\221=\274j8\326\2748\322\222\273\2630\257<\035\\\216=!\315\246\271Y\251\243\274jZ\203=-\004\006\276\303\324\250\275zI\367\275\177\017b<\267_\340\274\231\202\377=\221\216\024\274\305\327\357;\370\367\005=\272\204\t\275v\030y=S\355\014>ORy=E\350\201\275\260\354\002\275o\332\263\274\333\025\326;\376\333J=\242\032\224:7?\261;\327>M\275\315C\222=\235v\021>w^\222\275\214C!\275\250\352q=\241\030\204\275\304\005\303=20\344<\313\214@\275\236\302\017<a\301\335\274g\374\002>\367\261C=\217z\201=4\010K=\346\274H\275c\333\351;\014\276\010\275X\007\"\275\274H\212\275\204\000\242<2\021J=\261k\n\275\351\310\210\273\017<\262=\t\324\206<g\252d=;\356\247=\352\354w=\346cx=\272\277\215\274\013\256C<\311\211\227\275\346\004(=\365\214X\275\322l\324\274q2\352\274G|\207<t\274\241=\270\246\361\275\225\376\033=?\227(><g\375=\201\305\017\275\256\306\036\274\236F\263<8\332K\275\321\t\240\275r\304\206=\271\220\272\275\331\226\254=E\314\221\274\017J\021\274\335\312H;\021\220<<\300\365\003\2750\351 <\203\310P=l\'=<\251\\\210\275i*\204\275\316Z}<\360W\252;\207\254F=\275\016\020=\237=5>\246c!\273\002K9\275\222\301&>\201\322D=Q\rN=\250\256+;\375l\255=\036\366\201=Y\203\362=\017[T=FO\226=\275K\235=\010\272\224\274~\333\240\275\335-\237\273\256\361u=\345\037\004\274\335\2470\275\343\020[\275\033\255J<\362\242\254\275\3272M\275\356*S\275\263\240\302<\366P\260\275\375\301~<\001\264\247<b\221\246<v\307F\275\317$\020>\221\325\263\275v\310\262\273\021%\036\275\262\224\374;\303H\205<\256\373\373<\244\t\032\273\322*x\275\213\216i=[\365\214<\306z)\276\200\205\016>\010\310\030=\370\276\257<\001R\021\275\370\t\343<\362\334\270\274\357\233\213=\325.y\275\277\370\331<\214\374\030\275\367 *\275^\315\262=\336\003[\274\277\345\261\274\367(\360:d\227\031=9\205n<\254\256\216<\244\365\301\275|C2\275\372\336\037=\rf1=\350\302\227=\316\006\316=0\233\034=\200\006\231\275\356\362t<\342\353\034=\253<M\274\244~$>\207\337\"=\321\324\204\275?\376\374:\252\372\031<|\327\233=\352\201g\274\030\214q<\036\272\'\275\037\360\315\274\334\002u\275\346\346\022=\272\213V<B2\371\274\351S\203\274\247\302/\275\267_\033=^]S=|io\275K\235\341;\377\265\242\275\342\362\205\273\006\3123\275Ry\330=\265al<0\003\037\276\276\360\010<nt\000\275\321\345\244\274\204N\352\273\365\260,\273:\013H=\026-\225\274\303\351N=\021\244\205:-m\312\274\2540\232\275Ib\207<\325rk\275\300}\006\275i\376\016=\263U\206\275p\245?\274I\3437\272\2402\266=\230\033L=~\351\304=\271\034\212=\246ij\275h\036\036\275\301{\251\275y/\034<\2743\230=.\275\374=\230^\000>s8\023=\334\032\302\275\277t\237=\r\327B<\201l-\273\233{W\275J:\231=k\203\245=\224A2=\366\365\026<K\316\353=\002\227\212\275G\r\001=\233\204\272=>7 >\323\001\271\275\343\325\303=KD0\275]}m\274V?\211\275\"\330\376\273sU\010>2\233\336\274\250\274\013\274q\230B=\016\240A<\263\273K\274\030=k\274RE\231\275{\202\014\275=\240\023=L\276\037>\241KO=\222\250\206\2746*\221=!\032\260\275\224\343\244<r=8=\312\'-\275.\332?\275\353l\230=V\341^\275\033\020z\274\316*\354<#J\025\275\270\016\223\2741\036w\275e\326\024\275\222w\007<\240N\217;\017l\226\274\325\035\374=q\367\334\275\254\'\025\275\256n\274\275\003\312:=\257\346\311\274U\031z\274\234\013s\275t\366\267<\302\306\267\275\032\365\230=y~4\275\001\032B=\312\261\026\274\001Dc\274\361\243\242\275\337\204O\274\346\003A=\026\017\006\276\221`\n=\257\331\035\275#|8=A\325\362\274a\270\035=\313\214\026=\201#\317=\034\344d:\3704\330\2740\311\004;\331\217\227\275&D\351\274K\220\333<\332\306\213<\211\004\232=\247@\212=h\320\266\274\023\332\264\275]\374\207=\307\332\351=\006\351\314\275q\204\025=\317\213z=\003O\222\275&=\362\274\3407\r=\024\023V<\037&\'\275!\010\230=\347\\\022<WF#\276\350\217\272\275rxx\275(\215\226=r$\367<\027\327\231\274\366\267\264\275\013p\323<fb&=#\272\206\273Af+\274_\327\314=nb\203<\324\324\373\275\361\2427\275\300\220\361\275\010\366\250\274\366\204\272<\322\034\214\274\321\320\003\276l\"\032<c\374l\275\021\215\226=i\034\220=\216.\224\2753\017\202;\275\315;<\206\204]<\014\237\301\274\245k\353=\200\331\212\2749\225^=\204\226\333\275\257\'\024\276U\354\005=\032\236y\275\306OC<\030\261\311=\200\200\246=3\353E\275\342\246\177\274G\322\271\272\037Kd\275B\305\r\276\202\237\375\275\226\313\362=\025*\034\274\025j\215\273I\021E\2757!@\275\310\224H\275\241\256\232\272\336\263O\275\264n\r\275Vp\251\275\026|\227=\000\271\036\275\267PD=V\205\307\275\277\024\307\273\214\335\242=KK\231=\t\271\"\275\347\371\307\271\272{\371\275dR\256\275\352\345\353\274\347,\031\275\321Q\023=\256\0002=\220\000\025\275\254\033:\275\312\361\363<\301#\204=\305\361U=\340\323\351<\303\313\017\276\350\255\246\275\236I\263=\377\241C\273\024gh\275\003\244\353<\216r>\275)\274;=\343\226\363<p\345\255=\212\232z\275\3574\024<\370D!\275\324\227\212\274Wh\312<\r\320j;fo\314\275\014\354\333<\321\210\330<Q\350\013<\321\250U=?l?\275I\317\n=\322\023\017=\214\353\006\2759\264\215\273\0066\003=sP9=\236\345\244\275x\236d\275#\304l\273\344y\321\274\354\200\235=6B}<\231\355\345\274F]\037\275\305\263\210\274\363\2474\275F\375\314<\277\177\310\274\323\013\221=\324\360}\275xG\010=\2224\222=E\346\006\276\025J\217\275\301\221\364</\2651\275=/\035\275\0203\246;S\351\274\275\350\212g=\0040\274=k\n\211\274\021\212\017=\375\354b<\244\260\225\274:o\356\275\325`\277=\242\357\002>\326\271\372\274py|\274\213\203\210;\264\322\223<\230p_\274?\373\216=R\214V<\000\354\024=\247K\246=7\277\305\275d\263i\272\241y\237\275&\255^\275\277c\037\275\332\347\302\274\237Z\245=\033t\350\275-h\263<G\346\333\274\233;\000=\346(\263\274\355*\241\275\373\030\231\273\246{\266\274\314\034\302\275\036\2577\274[G3\275\3669\352\275\356d\330\275\331\250\234\275\263\272\331\274\320\2359=f\220\004>\341s\243\274\235b\227=(\000\302;\212\364J<it\022<\313L\254\273\347\177f\275\261\177>\275.\034\363\274\264\273\215\275\321\002\206=Y\036\320\275\373\"{\273*\274\303=\206Av=\233\031n<T\257\001=\357\312\206\2746\3766=\205TI=NoM\275\000\351L=\315\316^<4\355p\275U\377\017\276\242\310\210=:7\034\275\317\336\221=\027\206\302;H\274\021=IS\321<\004]\265=\234\206\232\275\364\006\t=\2729\240\275\353\241\270=\350\321\237=\233\275\241\275+`\237\275\036\321\306\275\3404\217\274\032\324\235\275\020\232\017>\3450&\275\345[\254\274\036\320g<\237\002!=\277b\326<\021\263==g)H\274\240{\275\274\234\323\303==\177\203=\303\305\216<\257\376\365\274\223\231J=Ku^\274\017\375\346\275\010\355\332=\260l\243\273\311]_=\206\310\215=\010\317\220\275S\254\201\274\201\216\217\275\024\n\217\274\273\376U;\211(\244\273\023\331\336=\350\312\214=\350\220\241\274M\367\230\275\322\017\305=q\355\357<A\241\261\274\206Gz\275@\246V=e\001x\273U\332\226\275\316\005\201\273{\235r;\204\311\003\273\0254\177\274Z\005\035\275\224\361\r=\r1\205<\362\265\313\275\'\323\"=Y\210\200=\332\332\201=-\240\205\275U0\014\275\037\217\302=\0373$<\3132S=\254L\357=\212Bx\274&W\374\275\305m\201\273\326uC=\275\352p:S\205\t=\241\317\264=[\236\022\275\2434\330=D=\334\275\366\221$<\223\355Q\276\335\327\036\273t+d\2745\220$=F\036\003<b\252\244=\n\352\337\274)\020\346\275\000\264L>t\256t\274\341\244\221\275\324\2720\275r\232\354\274\252+*\2743|\022\275]\221\336\274\314\356\000=\304M\332\273|UU\275\305\236\246\275\274\351\206<\252\267\013\274\311\007\007>\257\2369\275_\341\275\275\372I8\274m1\250\275\247\273\232=\326\001+\275\272\307\007=\220\211\034=F\352\332<a(\347\274W\374\033=\210^j\275\250\237\237=utG=\320\203Z=\025\336B\274\205P\277=\373\271\205\274\230\350\251\274\360.\200;\227\001\306\274k|\221\275\241E\221\275\232\250\205<d\312\212\275\332$\357<\230`\002\276\311\263\224\275`\003/=\033\227\306<\033\302\017>dA\343\275\366h?\275\365\205\203=h_\247=1\004`\274\316\373p=\227|\001\275\364sV=\201\276==]\304(=\231:9\273\004\212\235<\035\337\'=\377p\364\275\020\001\217=\237\221\032<g\320%<\2345\321\275Yj\271\275\230\177\033\272lr\374=\267\352\317\274\342\375\346\275\031Q\247\275\026\204$=\"\230\032=\037\314\024\274\024\304\345<\320N\020\275ocD:\013B\267\275\363\036\375<\200\n\025;X\374\251\274At\334<U\tN\275\006\001\272\275[\201N\275\25044\274\2248\000\275\356\345\316\274pm=\275N\202\220=\001/\246\274F\272q=\273;\002\275K\tN=j_8\275wr\215\275\206\207\352\275j\220\004<\005\022\263<1!R\274\202\226\260\275A\325\246=\227s\322;a\002\331<\334\210i\275\302\355\365\274^q\016\274\245\"\036\274\377\337\n\275;\270\344<X\010\312\274\352L\006\275\325p\222\274U\356\220\273\327:\263\275\221\336*=\232\306\243\274Y\210\235=\203\254\276;\223}C<\362y\317\275y\224\251\274\201\251\246\275.\032\r<8i\356\275nz\303=Q\273\234<\274\001A\275{\005\037=\247\336]=\255\376\177\275\343L\245\275I\333\020\275\037\334\027\275\256\220\234\275t\026~=F\307?\2757vQ=\223d\024\275\313\\\315=\035\333\024=\2343\017>\257\205\233=\276\262r\275x\236M=o2\355<\3524\035=\333+\\:f_\266<\220>V=X7\353\271\025\223\277\275F}4=\320\032\'=\017h\034=\024M`==\337\213<\226\206\256\275\001\003G\273\322\317\021\275\004\343{=\2167\032=@\033\374<\022,\241<\256\nl:\n\205\302\274\344\257\205\275\305\031*\275P}\215\274`M@\275\246\220\300\274U\226\016\273\3229\227\275+\004G\275Q\262\304\275\302 \220\274}\377H\275_\010\346\275\255\374\023\276\214\275\253=\314(\300\274\241W\363\275\007\025\177\275\021\367~<IVw\275B\267\001=\272\003\t>\245\222\277=\324\271\203=\227\334\360<Ov\026=tF\032>^\337\010=\327\030\235=\206\034\207<\274I\020\273eV\202\275\017\301\326=\231\241Q=\357PU\275\207\273\247=\236\030\263\275\371h\307=-s\225<\277/\002\275%\217\316=\221P\331<\316X\235\275\210@|\275\340!6\275\307\320\020\275\261\351g=\024\014\002\274\230\0163<\344\006\333\273\331\347\032=n\036\376<\" \362<\305\220|<\265\365\210\275\250\307\216\274\n\027\233\273X\373\031=<\343\320\274#\027\234=\347\244\251\275\330qW\2754\215\013=\236I\352=\245sN={\262 =\212\334\242;h.[\273`\262\271<c$]\2754{~\271\304\214\353=\273xz=t}\311\275\373\376?=\255\260A\275\356\240\306\275\\\376!\274\337\212\222\275\241\nc\273G&\241=\336\321\025\275\350\222z\275\230\255\324=\276\202s\274I\364\353=\300t~\274n]\332\275Y{J=\347\255\315\275\300v\212\275\261\351\026>\013kw<\311g\031=\261\260\370;t\224\342\2749\204\215:\003\rX<\327\036\221\275S\221N=n[)<\202\220\344\273S\324\375=R)E=\206\016\332=&\004\007\274\336\026\333=\264\236\222\274`\343\201\274\247f\273\272\254_\202<I\310Q=\225\247\220=<\325\327\274\233\250\223\274\321\037\r=\313\262\001\275\375O+>+/\215\275\236-\265<\312\332\025\276\262\304\270\275T\313d=\200K=\276\271]\234\275\241\255*=\237?\271=\251\302\264=o\353\226<\361:\233\2757\367P=\231\255A<u$f\275l37=V\272\034>\013F\204=\357B\210\274_\231k\2757\371W\275\020\r\207\275\275\360\201\272\211+\256;\317\306\315<\016\026\016\275\3775\024\276\333V\322\2744+\005=\210\327\342\2735\013\215\273V\032\237;\253\\\244\273#11<\232#\216\275\303\346C=\256\202\301\275\"\202\325<\303\276*>\362V\324<$\031\\=\310\260\013<4j;\275\241\032r\274\303}\250\273\215>\004=\251\307,=\371z\203<v\302\313\273 TM\275\236\373\000=\360\221D\275\022s\034=\271\301\262=\355?~\275{a\305\275K\2670\275\224\257l=\276Y\243=/\307v=\372\376\230=I.U=\346\276\227<\321\004\225=D\025\224=\302YE=bW\327\275\262\332%\275m\365\346<\335p\242\274\3056\371<c\235\220\275W\2721\274\343\216\243\275f\347@<\375\320\215=\000T\257\275\203\372\005>\326\225o<\302<a<\352\027N<i!\263=/\310\231=x\026\213\275Gj/<\025\256\267=\337\030\344\274\315G\202\275U;[=\3729F=7C\207=9\263\035=\345\234H\275T\237\253=\2340\035=\236\n.\274ni\213=\264\225\227=o\331\352;\227\235\356<\022\324\206=A8\233\274\376\225w\275\342\274f\275~\307\010\274\325\372=\275R\336\266\275\227W)<}V\262\275\332\303\375\273\270U\211\275(r\270\274\255\025\035=\257\210\201=6\315-\275\247\200\343=\263\017Y\276\220\363O\275\r7\003=[[\305\275\306\256\013<\211\242\345=:w\224=b[\224=\032\233\006>l\253\276=H).\274\250s\276<\t\367j\274\264\213\257<b\244\252=j_ \2766\261\037\275\354h\177<\022?\237=\265\361\253=%uR<\311C\227=\353;\215<\324\266\264\273#\313c=^\376\226=\374\361t=\321\307\350\274\364+\376<\223\231\"\275\347\317k;\316\266\234=\327J\202\275?\377\010=\352%\006<\267\336,=aG\330=T\220d=\227\004\210=\357\304\235\275\222\277\255\273I\230\336\275iN\374\274\t\203M=\260JL=\334\353\242\274\340jr=\t\033\232=\345\321\263<\316X\316\275B\206\177;\253\373\200\275/C\000\275\276\373s\275\226\261U=\374y\002=\224\025\234\275\352w\202=\2714\232<^\'X<<v\032<{\005\263<\223\371=\274\245!\240\2732\036\301=e\205\215\275qW\345\274F\355\211\274\210\307W\275\364\014\200\2752\366\025\275\224!\241\275*\212\326<\220\230\302\274\031\326d\2753W\366=_z\336=\213>\327\274\'Bs=\367\267\232\275\376\341\272<\035\000\275<T\336\300\275z\211\036\275L\273\026>\375\214z=V\266\215\275\236\377\316=\304\304\304\2756WV\274\272W\314\275N\275\366\274\311\025\324\275\213\0245\2758z\243=\213N\201=\270W\317\273\222\003\217<\365J==\253|\231\273\325\276\243:>\233E\275\236\347\221\275LS\302=hR\321<\251\247\360;:\022\220\274\216\346\351=\260w/<,\217\216\274\226\256Z\275\014\346A<|\312\276<9L\303\275\317\265\021\275P??=\225\223\014\276gj\006\276CQ\022=\360\377\370=q\376\374\274\320\3723=\312\304\245=Z\034\370<\003&\241=\007\221n=\232\340\314\275x\257\251\274\204\355#\275wD\377<ny\006=#@\326\275\246\320G\275\003)\352\274\301\215I=\n\353{\275\034\005\374<\347\232m\275\3315 =\204\244_\275\203B6\275\372\330\025\275y<\363\273\234\261\255<\227\2068=o\354\220=\003\254\252<<<P<w\210\255=s\274\022>\241\322K\275~V^=\271(\033\275H\016\031\272\262M\326=\200j\256\275\365\273\264\275\322\305\332<\311g\267\275O\266\024<\025\365\305<)\277\305\275\305\226\216\275\361e\371\274a\242\003>\214\246\364\2743`t\274\006\213\033=%s#=k\250\354\274\261\030\354=[a\244<):}<\256KF=V\240\240=\337-5;\335\023\216\275<19=\226E!\274\253+\'=\263p0\274\344\242==\203\002\274=\026\324\201\275\304\334\237\275\235[\251<\363\253\332<\242\022t\275\374:\354\273Ce\264=\230|\313\273I\024\231=m\241\221\275\330\351X=]\224\222=G<\242=K\303`=\333EM\273\267G\245\275X:P\275\tB6\275\356G}\275\361M\342\275\375\377\250\274Hwj\275\347\037\222=\303H\344<\275\366\332<\020\277h=\316=*\275\353j*\275\345\035\223=\263\315\326<\361\0331:\t\346\236\275\245 |\275\327~\207\2723\226 \275\343}\362\274\024\215:\275\246L\262\273\017\315\303\275\371\224x=_\322\260\275\n\252\360\274\354cJ\273%\250)\274]|\025<\312\367\004=\355\332#\275\371f6=\207\341e=\2204J\275\371[\326\273\313\026W\275rZ\211<\037\203s<\216\306\274\273\031\351\247;:\377\t>B4Y;h\247\353\274M\321\311=\211W\277;\036\232n\275\311_\'\276\020}\347\275\225#\275\275\207\306\376\274\256=M<\006\026*\275\\M\235\273T5\305<\227\377\246;\354F\t=A\263\034\276V@f\273\335\346\307<s\204i\275!\337\363\2748\003r\275h\216h=\354\272\024= `T\274\270\274G<<\t\317\274\276_[\274\333#e;\227uI=\035\214I=\357a\267=Z\0069\275@\030\304\274w\376\374=\016\231c=S\r\246=\001J\034=i\335\240<\350\323\236:H\013\270<\251y\352<\262\000\224=\364\257N\275\245\312\213\2748\341Q\275\216\377\363\274\227\351U\275\363\311\302<T \273\274\377.\310<_\276\256<\276\026*;|\010\226=\225*\307\273\025\357\375\274\266\251T=l\257\265\275\010\233z\274\201\305L>\267\322a\275\025\347\3619,\337~=\220\360\334\275\333:\253=7\371$=\034@\030\2741l\225\274u\254\353<\016\373\244\275\232v\353\275#9-\275\245y\365\274qm\302=\333\224e=D\371\"=\311\031\266\275\010\252\206\275}\215\341=9\370\340:%W\000\275\211dh\275\212\346\273\2751\265\306\275\251\354\307\274h\006M\274U\304\317\275\365\365\312<\014\n\364\275\313\\\314\275\257\251]=E&\234=\326\353\203<\334\207\323<\3407\211<Z1\031<4\234G\274\227\321\302;-\246\372\274L\314<=\024\247\312\274!\216\204=\320\227\312:1\261E\275\214\3063\275\025\363\311=\320\027\315\275!\247~<A\353*=\303\022\236<\363\033?=t\244\022=S+\364\274\356\001\334<\033v\030=\372\rg\273\336V/<Up\227\274D\200\315\274\010\237\177=\343B\375\275;\220k=\027\371\374=\375\026q=Y3\212;\374+\255\274\235\037:=\364\203\261\275x\314\313\274\201\333\256\275e\224\356\275N\0202=>\324r=W\360\370\274\321\310\026\275N\343\316=U\265B=^\366\370\275?\254\224\275 \230\254\2754\023\025=\333\352\230=\370\214\203\275G-\206\273\2313\316<\336B\213\275\347\2023\275w\214\002\274>\323\270=\361\334\324\275\315\004\016>\305\312K=!\362?<\031\351\240={u\216=\213\337\247=dLV\275\303\334\">\226\344\256\274k$t\2757\323\247\275/%\304\275\255\251\315<\007\023D\275Q\220\317\274\342s\353=e\214\341\274\002)d=5\317=<\367|\247\274\221PI=\333\323\310=\213E$=\201\021\000\275\276+\252\275\266\341l\275B4\375=x\261\325\275\"Q\273=\327\222\352<_\007\341<\325\014\204<\304\262\000>\352\247\222=K\036\r=\347\016\267\275\221{1=\314\350\333=\277\334\226=\t\365\206=\344\007\370\274\367\301\336\274\337\027\303\274S\254o=\376\267\360\275[M\n=\222\372\354\274\236X%\275\327%\217\274;Hg\274FV~<\260\317\226\274\305\036\234\275s\213\212=\366z\327=\304q\302:\332F\025\276\367\334\313=F\3621<\272G\016\275Z1\253\274\020\201\026=\215\314s\275\360\271\215\275b\221\275\274#|\267;\033\020\214\274\251%\257<\235\3607\273X*\024\276w\254\023<\241e\267\274\230\247\235<x7\344=\037\',=\021\336\360\274\021P\333=\017G\'=((I\275\211\t\307\274U\252Z\275\205+.\275\224\217\307;N4\016=\020\357\252\273-\240\006=U#\246\275}\317>\275\262;\340<\211\r\245\275\374\333\021\275\221j>\2755\321\335\275d\322\353<\272\264\013\2757\261#\275\277\370\226=\033\2167<Sh\277\275\021\006\337<\2170\212<\376\235b\276\201j\215\275\226\334\231\273\323\340\331=g8\233\275\003\343\006:I~\013\275\362\273\341<\376\205\306;\002\003\207<\202\351l=T k<\247\365\226;\314|\007\275\002c\226\274B8x\275\274\371D\274\235\272\342\274\322\275\010>q\3258\275\\\254\272<rK\203\275\017\376\350<o.\347:6d.=\274\026\204=\021\307\323;\255b\220=\031\035\372\273\3002z=\274:><5\371[\275X\303\255=\026+\031\275\371\217\240<\270q\341\274\'\260\340;d\226\312\275\376\0014>!\245\361\274\220~\021\274gF\177\275\3269?;\263\306,=\364/\211\275\372\274~=\314A\350<_\275\327<\005\370\007\275[\n\367\274i\340\255\275X\376W=\250\330\212\275t\316\203\275\206\025;\275\317\223X\273\262\322\t\275f\236\r=N\032\214=\275}\035\275\017\215\270\274<\221\030\274;%\330\275n\tq<1\372\033\276R\212\016=\336k\t>\201m4\276\265\207t\275\374\274\226\275-\366\031=(\334\231=7\267@\275\363\031\226\275N\013 =E\237\272\275\2227\350=z3\211\275\\\254\212\275*\001\005=9zn\275\272G\367=@\216W\271M\026<\276_\272\030\274N\002\036<\3265\334<H \213=\315>\212=?\343\'=\237\333\216=\25792\274\330\213\360=\215\022I\274\252\0167\275MN\010>r\213\225\274\244\227\013=X\333\202=\331\347D=\270\244C=\206\227\346;\341\320\312=8%\360\274\225\322U<\327(\220\275P\027\\<\277\'Z\272\017\265\022\274\364gr=[r\222\275\242*\375\275%\254\204=\216;^\274U\301m\274+\315\267\275w\265)=v\251\304\274E\257;\275\364\307\335\274\227\312\213\275\014N_\275e\363\022;\221\313\024:\367\244X\275\335\330\377\275\222(\017<@4\254<q\007\006\275\345\032\232\274\365\212\223=z\200\351:Q`\235\274\014\010\352\274\200\251\236=\241\227\322\274\262Z\003=\\\305C:\242Lt=\270?\020\275N\243\201;\020\003\243=j\342\342\274\212(\006>k\265z\274\035Z\251<O\325\"\275\203\034\216\274\326\217Y=\033\222\223\275K^\024\274\215i\n\274!\206\234=)\271#\275\305\227\235\275\3243@\275\253\262\265\274n\005S\2756\255\014=3v\220=d,\304\274\221z\344;\231\016\355=\363\345\030\275gM\367=,\032\202\275\'E\013\276\366\324\321\275\224\374\221=\\\037O\275>\226\323\274\266\205e<\363\221\000\275\n\0320=6\2135\275y\207\301=\357\230\017\275\323\277\375\275\273+g=\216@$<\351`\223=\350\014w=\300\2276=\363\346 \275\3708\252=\203D\332;-\253j=\356S\203\272\332\250\240\274\023\036r=\'%e\275\202\"~=}X2=<A\326<Bqn=\340\025\226=\267I\201\275\325e$=\2442\005>XM3\275c\334\027;#a\001<\320U\255\274\202r\241\275\314 3\275\363/\r\275/\002\372\275\371x\215<\351\273\314\275$*\2479\271Hk<\320\370\334\274\243\355\200\274\374{\366\273\016\032\336=tW\026\275\356\026m=\231\250\006\274D\005\002=\026\316\006\275\344W\343=>\347k\272\252\201\203\275\220\024\025\275\354f\202=Mt\016<w\nS<<\256\210<\177\374\216\275\327#\231:s\2762=O\025\210\275\0308\334\275\340G\266\275\021\364\241\274\215*\300=\026y<\274k\020\254\275\251\250\232\275=W\003\275\203l\220\27583\316=Z\371\007\275\257f\246=\373\"\315\275o\334s=\216y\267\275\216\215\305=\371\224\355\275\223\301\302\275\213[\226\2746\315\255\274G\367\262\275v\310\346<\310\025&\274\270F\267;,\n\025=J\303\233\274\331\3141=Z\346\215=\311p?=\256hB=\354\010\227=\031=\002\275$\306\252=\366\254O<\352\222 =\024A\253=\"X\247<\247\310\300;\177\010\032\275I\235\006\275\365`\254\274s\320\376\272d\273\207<h>~\274Y\322\024>\352\\\312<,\242\216=\365\261F\2742\267/;\034\344\314\275\335d\001=\210\226\233<N?z<\025?\253<\007\333\331\274^v\330\274o\311U=n&|\275em\262=_%\204;,b1=@\000\225<\031@\272<?V\253\275\251\365\207=&\235\267;\345\362\035<\211\267\224\274c*\245\275.\302\244\275\371E\356\274\003\354\337=\210\251\025>\240\207\223<\332\024\227<G\002\341=A`G\275\305H/>\2517\252\272\306q\312=o\032i\272U*\237\274\235\260\210\275\270l\217\275\311\244f\275Bg\021<\"`\257=\004\003\303<\221 \212=\002\256\365\275\027\237\335=4\324\037=\355\036\004\274d\314\031=\342\363\334=[\354\024=\270\366v=\232q\033\275s\3573\274K\214\033=\333\251\r\275\235\030\244\272\334I\215\275\314\353\303=\363T\247\275P:\364\273\240\222\374<\020\207\220<1\031+\275\327[\256=x\342\243<\3560\307\273P\360\021<E1\353=Q\205\243\275\213p\344\274zD\332<v\234Y==\000\256\273v~\375=\377\034,=\205H\220\275f\275]<\370\374\232\274\206\215\235=*|\277=\325%\203\275\265\243k\275\237\232\260\275\001\014\225=\276\014`<\360\037\000\275\204\211\356\274\177\030\205;c\336\233\275\234\026h\274.\255\300=\304\032\273;W\374P=\'\275\215\275\317/b\274tL\021=B8\272\275\345\327\236=\010N\211=Q\036\366<\326\235\030=\301p\275\275\034\3746=el\";g\364E=\250\220\215=\332\341\223=\020\016\302\275\005\314\257\274`A\023=\207\233\245\275!\362)\275\226\r\372\274)(\326<0cq;\241\322#<:\346%>\303#\264\275\310e5\274\n\326\343<\346\246W=]\335\250=\320M\353\273k\"^:\324\314\r=\214#\217=\310\335\273=V\036\242\275\372\275\225\275\354\274\014\275f\371\003>4\350s=\007S\201\275\274\267\032<I\027\256\274k*\265\2750\020\214\275\252.\316\274\307\024a\2756\005\251\275%r\031=\214\211\303=\001\261\213\274\270\0028=\001F{<\010\007\314\274\260;A\274\311\352\363\274{\002\300=\3425\212<\214.\236\275\235L\334\274|\251\004>\225`V=\223\266\034<\346\256\243<\240\275\327\275\243\225\266=\010\272\t\275\245\346A\275\345\311D\275\205\305\035=^\224\264\274\315\352\265<\246Z\277\275\262\310\251\273J\300\320\275.\217\271<Pk\224;\014\273\250=\225\2514=^v \276/\366\350\275h\344W=Pt\014\276L\216\364\275A\2024=,2N\272+\372$;\363\007M\274\313\333\024\275H\212\232<,Qc<<\327\362\274\301w\000>@\274\013\276\3410\301\274qc\013=Yb\376;\213X\234<\301wk\275F3\270<\336\372\005<v\251\322;\200!z=\317aT=e\2204=\300\003\240\275\346\tq\275\261Z\027=\006r\272=\262X\306\275>\367\335=\237\3502>\223\345p\275\311\010+=\'\201m=\326\250\272\275\242\\\004\274D\362\354=\246C\003\275\360\340\035<{3\234=\t\377\250<=eq\2754U\322\274\273\030\367\275\224\226.=\306ZF\275\203K\217\274\r8\021\275\006\\I\2725d\003<\325y\267\275\316u\275\274\262\262.>\221}\245\275\345\301\270;\234\014?\275(\206\031=\031@8\274d&\213\274z\237\260\273\351z6\276\345\256\346<\036\213\340\274\261Q\322<\332}\215=\260B\333\274!Z\201\273n\357V\275\313\306>=\036\265\260=\230\225\273=\026\\\354\274-\220\035=\220(%=l\346r<\371\307\325\274\255\202\247<,oK:<M\321<\r?F=DT\250\275\221\301\331\274l\251\217<I0\022=\260\356\255\275\207\020\232\275\267\344\350<\031F\t>\021-\230<$\361+\275,C\310=\230\016K<\300\017G=\025\320\022\275>\206\273=\355\346\201\275\016\\\377<\375G\002=\301\274/\2757\251\227;\033\354\263=9\333\242\275\275\216\035=\233\371i\275\2458\300=\032\031\353\275\255\001\202=$>#\274\237G\223=\026\361\271\275\234\204A;\212\230\024;S64=\222\337J\275\302\270\306<z\225N=\025\345\344\273X\365\201:\032\037\325<\374h\333<\204\354\306<\3646\326=\373~\236=\377\262\271=q\367$<\030\036\203\275EK\343\275\272\307\344=<m\263\273$\210\247\274S\004\031\275\3372\242\275\3408\321<\230L\246\275\250\301\017>C+\233\275\372\362k\274}$\000<\373>\271<\035\316\326<Qo\307<\000\261\311\274\000\320\320=d\357\262\275\2436\222\275\353Cv\275\037\372\022\275\264\366\300\274&K\210;\344\216\204\275\205\3513\276!\352\247=\024\035\022=\377\244U\275\374^\014>\3500V\2755\301f:\231~\007=\005\325\274=\250\351\217\275+v\006=\002W\254=\014x\260\274s\200\353\274e\225\001\274\302\222\221\275\014\236\327\275\361\177\366\274 \251i\275\374^\221\274\224\323@\275t\237\224\273C\267\214<+\316\215=^k\006=\363\203\232\274:\306\374<\003\351\010=\227>M\275\341-\000\276Wy\026=\206l\272;TN\206=\007`\211=\251\273\373\274\021\256\251=\003e\245=n\305\372\275\236\327\235\273\205\036\005\275\307No=\\\212\327\274&y\002\276\252\3026>\2039\212<\226F\226\275p\331\270\274&\245\024\276\201\355\350\273\315P0=+\262\246\275\177\263\357\275\276P\372\272\242*\017\2758\347V\275\250\236\377\274X\226\261\275\360#B;\316K:\274\007\244\362;\343+\225\274V\037\276\274\367\276&\2755yY=\344=?\275eq\210\274\272\202R\275u\005d=\300\252\222<\021P\r=31\373:D\016\266<\033\023\243\274\273\251`\275^\273\331<\350=\335\275-\036\375<3\365%\274J\353\214<\200\333\032=i\254G;.\354\225<\014\372\211\275\2663\273\275\317H\010=\272a\265<g\013\333\273D\256\277=\035VU=r\203\220=\371\360L\272\332\345K\275(\300\263<#\365\225\275Z\177E=\177\266\232\2751\251\343\274\340\265\305\274\210\324\215\275\326\221T=\202#\242<Z\252_\274-T\t\274\n\231i=\333Z\035=\022\261\304==|\221=#\315\252\272\365\300\"<\324wS=V\376\202\272\332\357/\274\377X\376\275f\371\303=\241\257q<64\262\275\365\304\256=\033\207\031\274uO\014=A\236\270\274\037H\213\274q\270\214\272\347\021g\274\330\255\222<\242zp\274\345\\R<h$\313\2754\337.\274\313JH\275f\014\003=\301\"\205;e\230\231\274\003\251\254\274\336\026\233\275zz\226=\251\276\013\276m\010\t<\312\000V\274fO\262<\003*\245\275\262\273\017\273\360\2222\275\314O3=_.a\275(\273\320\273\224U\317=\263\273.=\246\367\273=\314\216!\275\037\224}=\202\271\224\275zT\274<>\261\013=\270\361\317\275\024\030\302\273\230\022(=\350N\264\274\201P\235\273\374\250\244=\312:\014\274\367Y%>\020v\207\2742A\377\274\270\332\025\2751s\3109\013`\256\275\306\202$>\311\231\331=\372\364\271\275\212\231\233<.(\254=d\254j=\243\200\265\275\320?\272<\303\024\235\2753\302~=\273\340\223\272\254|\246=\230} \275og \274\346\224\241<\320F\304</9\215\272c_}=Cs\214\275#\275A<\370B\017>\334(\034\275\033\235\252\274B\204\331=6\016\n=\351@\324\274\262g,>\n\r\016=\255J\366\274+\225<\275\306}K\275K\232\006=\000{\223=\240\002\200=\250#\006\273\'\017\253\274\233\000\304\274\2410\251\274M\266\371\275\210\367\256=u\367\235\275\320\331\022\274\247#\343=\242~H=\0046\354=\217ns=\007 \240<Q\254!<N\266\307<\340\225\'\276uW1\274\272\352;\2754\355\341\274\320\353 <l\315\270=\332\005\353\273q\3659\275G\277\212\274\3727{\275\322\337\364\275\r>\205=\330H{\274\026q\247\272\327\034\t\275$[\033>mc\304\274sT\200\274$@\260=*\300S<t\273\256\275\342\262\315=\020=\246\275\025\010+=\007\216\n>\036\253k\274\2253\241<\024\326\335<ln#\274\0145\357=\223\nf\275\377\365\\\275J\325+<\224\232==\236\232\216=\005\206\\\275\324\305\325=PZ\225\275\030\001<\275t\311\270=\326\346x\275\305\363\216\275U\272\320\274\261\275\200=\023$Z\274%[\357\274@\264\330=(\321+=%\237\246\274\001Z\n=y\0223\273u\000 \274C\"\210\273\260\361\207\275z\362\317<\250\362\272\2746\347-=\221\023D\275tB\263=\313\262\007\276\006W\254;6\302n=\010\320\301;T\212Q=\2160\346<\037\023\201=>\205<\275\367!\226=\\3\225=\214%\265\275c\n,\273\255v\301<l\324\350=\247\351\227=\271C.=0\365\347\275$1\234=`1Y\275Z\360K=SM;<[P\224\274\\\372k\275z/\232\274\256^j\275+\n\333\273k\263?=X\230U=\341#\243\275\301O\270;Km\314=:\302\335\275b6\014\2745\221?=\307\211\362<S\343\247=\005\022\364\274\306D\365<\327C\035\275\341\313k\275\351\372\213=\311\346~=U\346\301=\363\332\005>\314\3546\275(\016[<\316\355\315=Y\271\301\274O^&=C\315\362\274]\325G\274J\237\210=\276\001\315\274\031IR<\202\272\260\274\3032J\275\334\353\274\274`\000\222<eY\t=\377\030S\275rs\001\274\251%\307\274\271\367D\272\264\222T=\037^\360=\310X\t<)?\324=\261\033\177\275l\271\344=\274H?<0\215\342=\273\002{=\372\320N=Z\203\036\275\037\377\267;\320p\275\275\366\333\214=%\356l\275\207J,\275\361\025l\274\345\023t;\223`\"\276\016\343N=\335\211\265\273\t\001\201\275\265&\241\275\\\241o\273\023\233\364<\023\306\304\274\242\201\271<\370\000\270;?\356\027=&%\315=V\367!=\364n\333<%\357\204\275\245\024\213\275\325\275\345\275h\323\001>m\017\346;\323pA\275\271\003$\275<\211\032<\213C\312=\374\223\236\274\204\032\361\275\333\332\024\273\3120\303=\370\276r\275\317\334\313=\306\371\233:\224\255I\275\345\252\360<\033\316\250\275\217\3510\274\321\353\272\275\334\305\216\273\254\314\203\275\006\177\346<\366?I=\347\222\027:\323K\363=\315+\360;\017\261R\275\314-f=1\001\215=\244\375\314<\355\367\323\274)\316\333<m\364\234=\037\033\354\275\357>\331\274\177\030D\275\344\214h\275D\241\037\275\256\004\362\274C\005\336\275\004\037\211=0]\245\2743Lk=7_\324;xB\206\275\177{\265=\210q\003<\177Er<}+x=\324K\224\272;\023\224\274\260r\005=\014\213\200<\255\240\371\274\007\305\013=\242Cs<7\344\376\274.\007\273=\302)n\273kY\257<\305,\333\273\222\304\262\275\3620\033\276,\2134\274\217\177L=\300\354\206\274\235k\260\275\226:\370={\017j\275}vA\275\247\017\r\275Y\256X\275\315\310\006\275<\321\032\275wt=\275\3034\357=A\244\200\275\325\221\260\275\n@\302=\202\017\246\275qm\211\275\332Fu=\330\251\014<\324\351\037<@j\213<\023\223\333<\262k\320\2742`k\275\004\002\006=_\363&\275b\205:=\375\256-\272\242pU\274\311\370k\275\354\033\376\274\351U\251\274Y\365\275\274Vts\275\345&B;\247a\310\275\365\t\262\271\251\351\004\276\254\325u;$\240B\275m\367\242;k\377\023=\326&m=\264]\035\275\316\234\272\274\271+\220=\261\217\027\274\2652\r\275pk\022\276,\233\206\275\330\342\342=[\207\326\273\267\3567=\255+\205=oU\361;f\037f\274\304\214\035<\320\222e=\323:\307\275W\357\237\275\310\001\227<\205\\X\274}\000\226<\362-&\275\372\"\216\275+\265\036=\356\251O<L\332\276;2wb=tH$\275\204\274\221=h\237-\274M=\226\275g\336\235=\221\246\241<$7\266\275P\225\325\275cjY<\215;\005=\314`\002<\024\014a\275V\343\316;\214\0222\2753\033\227\274\305m\253=!\371\233<\267\3747=7\031\255=9\353\307=;\027\034\274\223[n\274\3542\203\273d\331\275=\222e\276=\355\036\317<o\331\254\274eC\003>$\207o\275I8\257\275\345\037B<\025m\014=\324~\303=\305\312\301\273\002\017I\275z\177\013\2743&\343\275=`_= \242\031\275u\345\333\274\365\340\220\275\3740\243<\351\235\200\274\204SX\275\002\377\262=\306\2405\275\rI\027\276h\340\274\275\225AG=\247\317\341\275\331\370\367\275+\340\321\273\020\321b\275\253}\341<*\017\221:\255\373\035;\246\357{\275\337\032\341\2705V[\275@\207\266=\204\215\277<R&-\274\267si=\0209\347\273\031KV\274\211\300\006>\002\216\206\275&\307\246<\323s/\275\267\313\033\275\200fR\275?G\225=%W\014=!5\344<\002\270\241\275\274%\235\275h\326K;b\364\000\275\365\274\320\275b\302/\274\312pP;\321\342#>o\247S=,\262\210\274L\217\244\275\320\202p=\344)\334=\372\037\263\275?J\212=\177\231\312\274\"x*=|\024\006\276\006\370\376=\023\346\255\275r5\031=\350-\274\274B<\266\275\362<x;T\310\023\275Z\235\327<\363\352\360\275\334i\202\275>\355\004<\321O\325=\211a\266\275x(T=\262{\322<\275\3078=\n\007\002=\"\004E<(\245\221=\207\231\322\275\371\331i\275/\250\024\276\'\322i=iR\216\274$n\234=E\351><\014\234\306\275\323\003\'\274\322\237\260=t\321O\275\216\337u\275\271\272y\274\233z1>\251\314\240\275\237Q\007\275g\200\267\273.M\007>\235\024\252<\311\227\306<\235W\206<\024$<\275f\345\337<}\274\021\275(\355,\275\247\350\321<\325I\326<\303\352\303\274$\023Z\274\3270\257<J\201==Q!\263;Q\203Y=\322\357\356;2\324\353=\331\273!=\355|\225=\001\242\347<\300\003\362<(~H\274\206&o=\212\3118<\204kK\275\235\033\335\274~\356\266\275B;(\275y8\203\273\362\350\370\274\250\377Y=N\202%\274m\235=\276<\332@<0\263\277\274\356\255\200\275\006-t\274\000\216.\275\036\375\240=\004U\364\275$\324\277\274\305\210w=),\301\2755\252\246\275\274\"U=+Z@\275\374\270\263=\"\222:\275\005-\244=\0031\022\275X\237l=\205\370T<T?\346<\3360\202<\025\334\227=\232}\223\275\374!\211=\003Q\346\274\252\247\200\275E>\300\274\215\230l\275>\245\n\273\272\027\351\273\237_\213=\317\323\013<,\203\343=>\006\361<.7K\2741_f\274o\005\014=\306\235\014\274\333\001 \275\232e\002\275S\275O<[\325\266<\265\267\334=bg\274=\2410\202\275V\317\233\274\347R\207=\231\222\241=\357\000\364\274B4\340<\204\366):\262t\243:\226\237X\275\243L\373\274\250C\264\275\346\304\302\275\263\344\311<\262\301y\274\032\317\343=\303\353\367\275\210\337}<]\232N\275\"00=\255\274B\275\224X9=\213\026\210\275\247\350e\275}\372\256\275\336\270\335;=\345D>\336\006x;`\307]\275\017\032\201\2754\\\274=\263\376_<\201\376\207=\0109\2739\267e#>\226\231\200\275\001A6=A\251\346=\241?9=\274\0137<\344\\\316=\035\313\336\274\025\317\024\275\221\210V<\213!\216=E9\245\275j\263)\272\362\224\237=\033=\340\275\243\022&\274}\005o=\340~:=2\3776=\022\nR\2755<\323=\253\025#\271K\224\255\275\022\357\030>\274\377\336\274\221\254\356:\212\024\375\273\342\234\010\274\212\037\213\274\223\361\231<\017\005\302\275\205\215?\275k+\306<L\357\020\276-\351\215\275\230\353\201\275\276\250)\275\325B\313=7d\001\274C\351&=`\022\345<I#\215=\027\036\204=S\277v\274m:\024\275\321+\277=X\374\002=\256\371F>\333\336\267\275\327\022\037<\325\330H\275\034\317M\275~J5;\260v\033\273\272\230\250\274\264\300.\275\235B\274=PV\003\2751E\225=\262c\024>w\222\214\275>\3640\275\305\216\025;\210J-;K\376\240\275\275\027?\275\256\223\373\274\314\220\341\274\000H\350=YG\216\275\354\213\343<AGC\275Z\271_\274Ud\227=\205\230,;\371\203\214\272\304\001\004=M\323A\2753\244\263\275AC\242=\265\313\224=\005@\213=9\244E\274\317\316k\275t\341s\275~\374\337<\200ft\274\330*\350<*9\r\275\203[\031\275\'\0279</9S\274T\364\275=8\255m=*S\025<\234\325\251\274v\305B=\343d\202<8?\314\274}j\030\275\262\234,\274\220\360F\274\202 \030\275\005\332\316\272_}-\275\225\002G=\020\223D=n)\377\275\210\262\024:\037\027\t=\335\366\t;\001\222\277\275\031\252\331\275\215\246\245\275ri[=Sm\271\275>,\236\274\032\225\231<\242\204\014\276\276\251~=\222\201\265\275Ks>\275\320\346\346=\343m\006=1#y\275\363\030\013=\225\275\222\275\335I\311\275\225\352\370<\276\"\357\274\347d5\275\206\n\220\275\010o\213\275@\0324\274a\341%\274>I\030\2750\035\324\275\002\314\273=\236:\035\275e>h\274k\334\233=\006\214\356:\316\363\241=\021\\W\274\343\331g=\220\364\214\274B\300\213\273\233}\344\273\312}\356=(\267q\275\326j6=\356O\032\275M\036\330\275\\7\214\274mk\201\275\301\256\312;:\337\322<\361E\253=\265i\242\275\006\307A>\306[0\275\232*\002<\334\004\022\276\274\213\r=\020r\272=\344\3636\275\177\234\301;i(\027\275\032\005\325\275\035$\231<\036:s\274\027\310+::xT=\364\324\335=\364\201-<\312j\n<HW\260\273\356I\032\275Bg\360=\361\020\025<\277\375\010<\220\256\303=2\300\252=$\276:\274\273\265a\275\257\002\354\273\327</\275n%\356\274b8\327\275\203\033W=\034\200\006\275\367\231\300\274?\275\256<:\360\327:\343p\330\274\242\273\337\274fd;\275\2767\206<\374\302\276\275\234=\237=\032\313\006\275\355\022\273\275J\337\230=\007\270M\275W\'A\274\205\201?=H\300\252\274\371K\t=\252F?\275g\324\243\275&C\335=+S\204=\204\010\207=\266\314\324;\"\325\013=\324\212\301\274\337\364W=\\C!\275\210*\035<\322!\004\275\232yN<\004\363\244\275~\177?=\021U\301\275\201W\245=\230\261\244=\223\353\220\274]\0317=\347\262w=#d\\\275;~\342\2747XX\274\305\355,\275\217\346R=Lj\n\2752\222m<\212\234\000<Q\260\013\2761\303(=GU\010\276G\'\007=\305\261\032\275\271\315\277\275\313K9<\326\253\206=\241\256\345\275#\021T;\257\376\203=\321W\034\275\022\010\345=YD\001>\3642{=\246\362K\274\335f3>\212\320\255=t\027y=\022\372!< \364Q==K\200\273:5\030>\027!\356\275\335\270\006;\006\006\002\275\334\276\243=2\365\032=f1M=mi\"=@`\327<Vy\355=[@\363\274!\261\202\272oS\374<\371\222b\275a\333\325=\371R\225\275^\336L=g\303\212\275\267\231.=\314\023w\275\246\226\236;\330\247\214;d\210\354;\376-\377\275\307\337\225\274\253\355?\275\372A\331<\022\342\005>\301\263\255\275q|\037</\256\267\275\003\241\350=\365t@=\345\372\244<`\n\030=\330-\226\275\030I\252\275(\2369\275\324\030&=\3656\266\274D\017\240<&!\000<\352m\004\275\202d7\275\364\303\307=\271H\261\273Q\036\310<\307\356M=8\025\304=n\264Q\273\334?\226\275\255\316J=\242\210\220\275\244NL\275\034\305\316\275\374\023\263=\334\245\235\275\n\350\237=L(\233\274\315\026\267\274 \220\330<\376]:<\322\007}\275\267|\355\273W\231B\274\272\016\206=:_/=u\360:\274\300\355\030\274\307Y\323\275\022v\n=\254\321\304\274\323b\312<+\241\206=n\322\034\275\023\226\027=61\017\274q\336&=\027\213@=\2476\2409\245\"\003<De\256\275\315\335\003\275\204g\203\275\005?#\275~\207\240=\304\311\213\275)\250O\2743\352\224\274\006\234\031=Bm\252=\nP\226=\332L\301=\003\326\220\274\001\263T\275}\3103\275x!\310<\250\'\n\275\326\0149\275\200\320\003=\352\216\020:\210\244\237=\260\257\377\274\315+\332=\351\357\254\274=\246\347\274\202\237>\274\003\261\260<\314t\305=\026F\371\273\263\253\036\276\375\220\317\272\220\r\327\275wY\270\275\232\244\215\275\307\366}\275\224\307)\275\222\306/\274\334\037\372<\014\333h<)<\033>\021;\001<\263\377W\275\322(\316\274\"\221y\274\'\205\222<\003\002\261\275\275a\230=Y\273\234\272\037/\022\276\tM\202=\314|\002=\232\306S=t\274\306\275\316y\004=\360q\326<\341\322\205\275}u1;\356\361\262\2759\227|\275\332\322\206\274q\023\305=\"\223\247=K\315M=\202\262\263=\324\000\204\273\203\246\207=+GF\275\350#\207<O\274#\275|\"\337\274\201!\212=\024\202\300;)\311#\275\342\212u\275\016\221\224=\220{\027=\303\362\235<\362\244\262<\330\244\007\2743<\340\275\357{\212=.\345M\275\"^\250=\365E\013<\310\331\255=\3471\205=\240\326A;X^P=\364\260\206=:x\017\2762j>=%\256\324=\213\331C<\211\201\023\275\310\325\201\275\302\244\246=l\337[=\343\224\247\274M\224\237\275\255\3123\275<\263k\275\246\320/<.\216\252<\335\263\357\274\373.k\275\316\271\231=\250\006\n\275\321&e=\276\026A<-\244,<\227\022h<WN\235\274\212Bh\275|(\312\274\327\262,\276\332={;\2061\013>\355d\230=|\3039\275\231p\225\274\340\221o\275\245\367\343=\267o\n<\017\315\321\275\005\204X\275\205\316\375<\220\001\323<\317\301\203\275Rb0=\265\354\217\273U)\213\275\315\016\335\274*\0174\2755q\241\274\204\207B=k\022N<i`N=\241{\335=NT\334<\240\310\210<[T\024=\036l\253=ih\016\273u\215\036\274\t\371/=\362\356\\<\361c\363<~\0208\275\341q\\\275h\273\270<\213.\277\274\032,e=\346qm=vE\217=\t\374f\275\304T|\275o\277}<\rg\256=\344\003\031>\305\334\357\273G\337=;\343\034\257\275-[P=\230\201\244\275dC\242<\326\250\376\274m\021\252;>V\364<\207\027\233=eI~\273\353(b\274\022_\320=\035m\t\2752\272\357<\310\371\356<\240i\023=i\323j\275\203\321\223\275Y3?\275\030#\014;,_\001\274K\300)<2=\023>\301\306\027;\213A\313\275#\027\270\2752:g<\346e\360=\007\024\211\275\005\013i=\262G\254=\035\235\221=aI\311:\367D\210<U#,\275~\276\205:\257q/\274\344\336\023>\001\213\233;2\265\\=<\257\301\271Wf\261\275\256\025\356:\244\'\372=K\000\032>\000{\266=\311\347\213=(\344E<2\347^\275\300\210\223=\351~\354\275#\3152=\342h\021>\301v\302<\266\007<=\033\013\257<rIC<\222\361\367\275\177\241)=\364@|\274\2279e\275\016\316\275<Q\226\241\273\217\341\037>\201\356|<\210w\310\274\352\323\301<k\235\344\274:G\032=u\te=\016D\206<\321;M=^\355\253\275\326P\004\275\\\202\r=\211($=>\272\025\275O\313\222=\247\017\006>\0034r=\037N\343=\n\\\325\274n\272!\275\351&\326\2742\363O\2758\361\243=f\010\232<\340\363g\275>,B\274\203\244V\275\375\235)=\030A\266\275\265\027s=Cz\317\274\215\030\324<%w\211<\300\020\202<\345-\356\275\0002\n=\347\260\257<\332n\201<\325P(\275c\003O\275\354\335\223\273Y \363\275w\207\213\275FL\272=\304\003\250\274_\005)\276\330c\354\274\254\320\320\274\341\3374<\004\037\344=V_\005=\336\000\325<\024\273\"\274B\350\260\275B\236\036=}\211\236=r\251\215=.o\315<\341\363\000\275\270W\231:9\242\023\273\013@\341=\376\316\344:\"4w\275\362\371k=\324\006&=\330\376\241\275o\222\350=Fn\032=N\211\216\272\241G-\2750\374>=\033\241\017\275+\223\340=3\223\322<\007^;=\365\245\007=\276!r\275\251\023N\273Q+\016\274*n\236\275a\262\362\275\374.~\275\207\233\375;\226\332\362=fq.\273\3332\r>l\273L\275\202\252H=\017h\206\274O\002A\275\346\035\350\274\245a\034\275\3426\365\274\211k\363<Zgu=08\364<Y/>\274\276\317y=|\217\243\274\005)|\274\225?\013\276\265?\270\274\217\332\222=\t\300!;nS\311\274\244d@=9{\001\275\363\230\211\275\006\245{=\202\352\240=S\314\322<z\333\264=A\362v\275\354\007\031>\034Fm={\010\244\274\316LB=9\271=<)d\266=\361n\022>\272\304\356\275\364\225\224=\t\253}=\231\374a\274B\r\030;\234\032\231\274\261\305\013=\272\002\211\274X\006c=\371\376\036;\267\362\322=\340\341q\275\332\234`=\274\014\331<I\224d=\205\300\002\275zb\016\275=\231\235\275\354j<=\257\204\346\275\\=\t=\212\361\260<\000\225\202;\014\017\375=\266\'K\275\246\030Q=\017\212\223<R\221\202\2758\240[:\252\365\227\274\000\031o=\275h\026<\227^7=.\227\202=\\(\341<\262hz<\235\257\205\275\024\273l\275\014\245\036=\350\366l\273\240\267\013\275\233\276\255<\223\025\375\275\267\310\345\274\315:Y=1\035\035<\346tp\275\347\243\212\274\232@q\275\310\204{<Q\202\323\274\003\212\036\275\213\261\210\274\226\3371;T*\007\276\2660=<6Q\225\275x\376\240<4\331\211=>\037a\275\2536\250\275)\021e\275$\361\300=\003\231\026=\352\373\351\273\256$\025>\034\330\351\273\033\326T\275\343\335\262:\213\337\252\275t!\205\275\366`\225\275\276\220\320\274\241\n\337\274\200e\332\2740\252/;\002\177\314\275\361w$\275\316\355m\275vu\010\275\006\356\314<S(s\275\276\242f\275\335\243\202=P\001\205\275Oo\322\274\334\353\327<\0130\303\274\354a@\275\307\221\344<\372\234\344\273\371\374\327\275:\240\024\275\376D\257\275\2544\303\274\0232b=M#\222\275$$r\274\305\217C=\340\217s;\261M\244\275\227\005\237\2754\245\204=\n\270\364=\345\341\r\276\322\372\036\275\216\t\343<K\313\255\274\230\310\203=d\304\250=$\302\344;\225vA\275\201\215K\275\276_w=\217\377\336\275\263N\215\275\034\361\031=\230a\230<\327\255\204=\345\022\337<\210\300\320\274\350\315\331=\245\315\017\274v\270\027\275\327<\020\276Q\261\010\276;\2331=\322w\n<?\337k=r<[\275v\200\023\274(\344\356<D\264\031>\r\211\030\274\014\317\250=IN\352={\224\207=\370\177v\274\201\342q=\236EC=\311[\270<\253\022\270\275\034\024\020\274hg\332:\261\207U\274\336\323\227<Q\377\261<,\303f=\235\205?\275\031\360\356\274\272\317\335\275\027\311L\275\027&\250\275K\021\203\274\256\312\245\275\360\352);\037_\316<\010j\371=Y\211\217<\374\234M\275\\\317\020\276\354\336\022\275\344,\235\275gn\027=\325\345\233<\260A\321\273\205|1\275!>\r\274?\r\026>\203\273\301=\254\350m=\262\246\353\274\3049\312\274-\337G=f\326y\274f\222\300\2758\354 =A\337\177\275\001\237l=\007.\235=\317\351_\274X\364^\275\320\223O=\t\251%>\316\225\334\274\303h\022=#{Q\275\302k\263\274\242\315i\275z\335\210<\255j\267=#l\251\273\365\226\t>\2073\323<\301\210\020\2760uL=\337\303\022\276\017-\334\275\374f\212\274nN\266\274*%m\275\241\200\'\275U\244\313:\245\264\244\275\025\366\366\275\261\204\357<i\306\344=\210\372\320<n\372\212\274\375\004\r\275\270\230&=\033\267\304\275\030A)=* \247\2753\035z\275\007I\033\275)\351\351<\371\372v\274RAG\275_\325D;\363\212=<B\303\326<9q\257=\341m\346<\342\342\020=\243m6:eGE=\254\316\270\274\343r\302\274\233{\251\274\230\331\203=q\253\277\274*\203\263\2753\027\276=\252\345\003=er\261\275\n;\266\273\214$N=\323Q\250\275iw\346\274\366\2440\274\031\344\230=\206a\336<\034\270\250=LW\r\275\037\247U\275\340\333\000=f\341\002>l\376E\275\2530K=7\\\232\274\314\277\340\275\262\301\222\275\233^\207\275U\340\373<\245\005\332\275\213\323n<?\345{\275\353\237q=\202;N\275Dm\247\275\341\310T=R\2672<\'\366\030\274\010D\032\276\177\263+\275\336\037&\276\236\273\301<\320\361u=\265J\255=i\234e=\210\272\257=\"\037l<\306\322\364;\347/\030\274\277\362\326=\267~6=\002\247U=\202\023\204=\230\221\205\274\351\324\010>t\226\232=h\333\353\272M/\224\275\250\330M\275Z*L=r\340h\275\214\t\245\273\317\013\236=mU\256\275\247u:\275X\326\036\274\213\274\261<\376\312\272;\260\022]<\224#\341\274\277\272\311<\231\222\363\274-\344\251\275z\361\310\274^\013\301=\002\347\344=\214V\\\274\320FX\274\256\372P\2752\355\267;Yl\312\274\377\244\'=EK\306=\026\267\234<\354\370\316;\025\234L\275\0160\266\274\376\002i=S\336\225\275\305\n\261\273M\n\224<\330\222@\275B\204\252\2754wS<\016/\257\275\257\371\363\274@\222J=\0362o\275oe;=\305\203\321;.\331\221=$\326q\274\325\275,\275\177\370\374\273\236\034\024\275y\212\254\275o0\034\275\'\\\305\274`\002c\274g$u=\246\235\232=\340\274\002<Y=\272=\206,>=\003\216\230\275\177y0\275\312\250\222\274/1\203\275\002\017\301=p\304\254=F\277\245<zN%\274V\264\272\275G\216\332\274\0247\036=+\270`=x\037W\275\207\353\325\275(\217g\274\363r\300\274\224\177\302=V\301\264=\311\265j=C\322\345<\"\277c=2p\301=d\353n=\277a\320=\227\241\216=\235\004\374\274?\252\310\275\315U\014=\026\334\320\274\252\036\303=6\340\214\274\304s\353<\016&\276;\r\014\214=\240\345\331;m*0\275\177\223\261\274\311a\333=\0300\251=w\344h;\320\274i=\264+\317;\365T\231=\314~l=\217\207\263\275\221^\364\275\276\310\016\276$\377\257\275\341\001^=iJ\261<Qt\260=?Q\202=[\235\306\273\003L~\274R\226\351=BM\216\275N\246i\274\0069#\275\277m\341<\236\003\335<R\024V;\323\205T\2756$\366=\360;\226=\353\036X\275\263\200G=\024\225\017\275\374>[\275P\220\270=\253\357\200=\206\270\177\275g\362\242<\271\2631=\264\022\016<\306X\352<\326\224\254<jy\240=\315HE\274G;\234<\003\004\221\275\331\264I<s\241T\275\243\001\360\273\017s\010\276J/\346\2757\n\347\275i\367\356\275\031\3444\275\002\030\216\274\251\372\266=\234E\316<\274\202\265=\373\227\363=\330\r\263<\233\265\346=,,\340<0)\341\274\001b\213=\305w\316\275\034kK\275\013oI<\277.x\275\360y\023\275\350\375\026>-XE=z\272\031:\276%L\273C\007\225=F\232\323;LW\211=\3608\017\275~3\221=\265 \357\273V\2278\274\232\220T;`\"I\274\300~\236\274\341\025\205=\330\324&=\261\0140=^\220=\275\320\206\203=;\261\373=_\033\300\275\347+Q\274\367\241O\273\220\222B\275m \036=\257p.<0\000\325\275\252\275n\273\237I\251\275\037\nA;k6M\275\310x\243<k\376^\275Zx@\274\262\236\031\276\036/\017>\274h\345<j\314\006\275\036v\020=\001\377\032\275\264\363N=\323y\371<\225\014d\275\tc!=\227\001\232\275zri\275\350\226t\273\313I\337\275R\357P:<\340\372<\320\330\347\275\272_\224\274\251$\237=\005\343U\275h\355\346=_\343v=\256\325K\275v\226x\2731}^\274\240\276\353;\r\242f\275c\250\031<\200\274\206\275\225\210\255<J\206>\275a*W;\243\260\221:t\345\370=\316Oe\275D=\316<\260\026\233\274\252\275,<\370L<=3\341\202\275FO\201=I\257\016>W\301\272\274\214\306\223\274\203\245\211\275\374`~\275\016\030\330<\tg\000>6\267\311=i\2231=y=\325<\251\024{\275\255u\307=\265\311\025\273\342wV\275}=\227\275iq\305\275\224S\030;\366\347\336=]tj\274\177\360\227\274k\314\004>\253\t\000\276`\016\277\273,\255\277=\022;\274\273\234\212`=\010\342\232=\264\016\001>\270\247h=\322w\302;\202R\320\273\303@\355\275\246\263a<\002?\254=\301\230\023=~}\257\274\0064\313\275\205T\307=\256\230(\273\216\241c\275EN*\275\321-\372=\3003\007\275\030\264b<\2429n\275AG\267\272\213e\013=N\260\242=\'l\310\274\031\345\005\275\000A\257\275\276G\227\275P\nr=\305\000_<2\325\312=\r%D\274h\364\271<3\256`=\317iL;;\322\031\275\306c\177\275\235}\267=#@3\275\034/\374=]?\261=\320\207\241\275\312\377\230=v\377\223\274\353+\373=\343NZ=\0262\004=\355\357\312<G\021K\274\347\332\365;\377#\303\274\224\306\344\274\360Df\275\306\020\205;\027]\367=\325&\216<\307|\226=4U\257;\255\3176=\264J\354\274\255\333\266\275NT\355=\340z\201\275\206W\321<=\007\266\275,S\213<\373]\354\273&\260\261\275\377\267\271<\252\325\363=&.\363\274\362?\213<[P\257<\252\304\n=K\337\005\274x\334B<k\261C\275\2362\005>\210\0059\275\252d\320\274YD\352:\335\034(\275\243\034,\275\252\2008=W\277\273\275\017n\032\273\264U\240\275 \347\'\275\257\"\337\275 s\204=+\216*\275\"\020\254<\354\327\353\275l\243\200=\377e\206\274\333\354\231=\264B\241\274\035\201\300<\000\344]\275\275\246\351\274N\325r=Q\021,<\261\271\227\274nH\216=\"\357*\275\027\270\204\275\247\341\300;@\337s\275\372\377\023=\374\247\217=1\235\266\272\375\0227\276F\211_\275\343\002\364=\356\\\030>\263\263\227\275\214s\204\275\247\261\202\275|\000\340=\370lK=\242\225\n<\300\346\315\274\032mu\274\266M\222=B\004\002=QGV\275\360\265\025=\027\030U=\0178\002\274\006\366\025>-\233\204\275U\007\022\275)z\r\275\326\210z=\256\024\241=\325P\246<\246\375\342<:\362\035<\304\001s\275_\005\314\274\236\014\250\275|\"\"=xd\221=\177\250\265\2727)\343<kR(=;\234\252\275\002S\205<$_\r=L\256\315=\245\272\267\275\317\337\361\274\324g\247=[`\271\274\2771k=\345\361\244\274H\'\243=\3721\263=]]W=X-\323\275#\016)\275\235\203&\275\230\037\202\275\310\243@\275~\265\245<&\353\206<\374\003+<\210\215\032\275\321\356N=\010\201\002>V\235\302\274\332j\024=\243\214\231\274;\323r\274\356\326\256\275\016\300\223\275q?\202<o\233\236=\257\224\210\275\260\251n\2751\345\266=~\"\326\275\341\201(\275W\316\306<6\210\263\275= \314<d\263\367\274\344-\265=\201\231\276<\001\023*\275\253\202\001\275\300\266\261;k9\"\274\350w\254<\336:u\274\216o <{\361\245\275`\036\353\272\375\322\320\275\344\2227<\224O\227<g\227\241\274.X\177=\202n9\275\236\325\210<\306\264N\274L\222\306\275GX]<C\273=<\252\001\345\273\210qE<\000\344\023=\344\rO=T\263\010\275\352\037]\275V\0142\274\020\252.=\007\004\365\274\327\020\231\275 \220\255=\244\354\002\274W\360t\275\302\343\226=\207\315\370\2743]P\275H\320W\275\374k\247<w\356B<\325\315\207\275\331\034\316=\255\017\361<d\252\016\275\001j\324={\311\240\275D\317\224=/uM=\277\276W=[\351\260=a}V\275\017\324\236\275z\206B\275E?\002\273\313\346\334\274\212\270p=@\330\250= SH=C\211\022=\357H\360\275B\n\220=\007\200\375\275\nv\334<\331\003^\275\334\370G\274\027\322\327\275\267\240\212\274x\341H\275\033\n\017\275,\204\322\2751\323\034\274\230}\275<\367\246\022=Yx\335<\340\356\240\275(D4\2755Z+=.\010\336\274\270U\367\273Z\252t\275f\244\362<s\217 \275\332\234\270;:G{=\332<\212:\034\212R\274f\363?\275CB,\275\203\331\356;\024\362r=\313\246\032<\030\337\207=\306G\034<\212#\014=\323G\031\2761\274\255\275\244J\232=Z\253H\275;\304\n=\322+\260\274v\322\235\275\357\236\232\275\301&\026<\314\271\237\274\313\td=\307a\013\271\320+\252\275\2277\030\274_\231\237\275\206\331\000=\326\366\342\274M\212\236\272\262@\212\275K\341\037<#\363\314;\327\344e;\321\344\271\274\203\242\001;y>\324\274\376\213V<\247+\324\273\372!f=,@\230\275\340\375\020\276\031\'\306\274\005\016*=AMO=\006\232\341\274!,\243=\226ei\275\377\257~=r\246\003>M\215\211<~,+=\214\235\256\275;Y\241\274GY\316=/\234\253=\016\251\266\275\024\330\020\274m\213\333\275vl!\275g\351\026>\254\272\214\275\014C\177\275Y&S\274\331%\356=\341\204\344<P\256$=`v\304\275F\200\356\275\263\333\375;\200\021\031>\330\233\\<\217\205\270=\251\"\033\272x;\362\275 \332\255=\270T\241\275p\3714=\335\334\000=\335\237\306\274\022\345U\272\032\244\344\275\345E\242=\177\'\244=\002\342\214=\312\307\\\275c{\225\273P;\305\275t\323\223\272F.\275<_\034\333\275(\214\013\275\024V\022\275\313\254\206;\337\014<\275\021\237x\2751H\313\274\014k\037=\311E\264<%\3149=\333\351\213<\376e\253<\245\253\203\275\321\007\001<\271xR\275\223\344\273\275\001_\010\274\030\024\222\275\270\"\034=_l[=\272\2607\275\\\216/\276\367L\212\275/17\275\232\020\331<n\320_\275\300\035\240=*\266\301=\0205=\275\245\033\351<\345\342\267=\220\266y=\342\177U=6\301\257\275?\230\355\275Kff\275\231V\230\275Vg-\275\222\272\231\275\273\232\037\275@j\200=\013|\337\270h\326\200\275?\206\237\275\022\017F\275\341\250\323=\225|\210<\257\204\251\275\320T\275=oT8\274\3325\245<=M\372\274l\024D\271:0C<~\255\262\275w\351\332<;\345\017=\377H\005\276zN\334=?\276*\275\267\316\251<\232n\200=\262\021\241\274AE\267=\244O\322;y\377\211=\320\220\251=\302\307&\275\320\340\">M^\253\274\222\327\267=,\234\345\275s\313]\275\363\361x<\"\327\377\274c\361\362=\367\277\354<\340@\267\274\331\346\260\273\202\007\217\275\027\362\333\275\0335\224=M\323s=B\324*\275*j\201<\305\323\230;\214\\\356\274K\230\224\2756$\376=\364$\354\274\257\253\262<\004Y\236<\264\316\261<\316\353\250\275\263\341 \275\201L\266\275[\250.\2751\266\315=\022-\026<\226\267\213\274p\007k;\237\035\224=\253\377\225\275\010\350\276\274\241b-=S\226\253=\032\256K\275\217N\364\275\250\304\260=V\352q\275\330\313I\2754\023]\275\007\013\237\275L\243\035\2757\355n\273V_ =\313*\202=*\255\316\275\"v\347=\306\022\302\275\375\027\311<\003\303H\274\230M7<\304\316\211=\357\2656\276pL\274\275\251\217\235:4,&\275\020$\231\274\202\271\247\275X9\230\275\311Cb=\032\244\357\274\345\003.\274\340\360\006=\376\345\264\275a\300\301=\002\275v=\014\213\314=\317\262L\274@8\311\275M\351|=\263\277T=\246\262\010<\0261\267\274\347\030\031>M\277\'=\264\271\215\275\360\330\230=\375X\373<\272jL=\232\217\205\275\325\331l\275\tj\207<\265\202\r\274m\207#;}\030*=3w\276<\341\305\350\275e6`=\240}9<\346\245/\275aF:=\257\2045\275\032\321\204\274w\235\'\275\217\250\343\274\251k\246=\366\305\253<F\034k\275^\013\241<k\333G\2741a\203=!\223\024\2750\035\313\275\217\342\206=o\330\206=\316\373P\274\226/W\2737\020\001>\3767\036>})\340<\250\034\332=\201F\263<\331\310\350<\257\234J\275\024\351\207=c\r\374=\336\214\"<+5\247=\373\305\372<*\374\361=\026NQ=\020\200\215=#\206\370\274R\004\206\275\304\212\337\274\320\357o<H%\346=\311`\016=\026\221\362\274M\326V=\224\t\271\275\341\253c=\005(/\274\341\010\311\275z\272\207\274i\341\326;\000\336\001=\'X\261\274\200%\n=\370\267@;\010\202\357\2747%\373=\000_\220=\020\346V=\243K\271<\232\352W=V\200\312=2\223K\275\362X\231\275!\3637<\336\223+<\242\275\276;h$\225=\252\020\373;d\233c\275X\010\201\274\032\336\323=\321\255\"=/y\277<\027$,\275\252\263\201<\005\332\252=\0132\335\273\0047q\275(W\200=\300\017\023\275.e\324<<\320\211\275\032\'\366=\013\243\353=5\273\"=\317>2\275>\236\261\275\345\276\305<D\351=\276\377\235\262\273(\025\006=\260\355;=]\315,\275\022u\331\275_=\025=\274\254\250\2727\332\207\275?\325-=$\214\224\274,\010\206=\355f\367\274\376\227\345\275?*\007=\025\243\243\275\372kz\275\360\240\002>\231\355\023\274\265\311f\275\352\222W<\032\000\246;\225\235\214=\276\227\020;5\"(\275]\303\021\275\203zG\275&M5\276!\344\233\275\254\000~\274!\254\257\274\r\205R<uY\236<\340\261\\\275\227\237\020\275f\347\356<\242l\203\275yK\036\275b\305\333<\362\027\272\275\340\002\266<\001z\224<\357\204\324\274dc<=\363\274&=\363\305\r\275\274u+\275\237\232\360\274+*$\275\260=\245<\351\237[\274\266:\'=I\274>\275\244-\304<\366\352\233\275\336\300\350=%\206\334\274\002\n\305<jG\247\275O\262\031\275\004\244X=\262\367h<\256\276\241\275\257\331T\274[\030\232=#\350\177=\313k\200=\363\304P\273\217\205\001\275;\351H=#Q\356;\030\307e\275\021\014\206;\262\311\036=\324~H=5!\263<\"\315\t=\353\314\035\276\207p\254\275\315\262\343\274\t-\214<\006\026\367<vo)>\326\237`\272\321\243Z=\356\247\372\274\337\333\347;(\264\026\275\251\007l\274h\266\220\275!\342\217\275\205J\232;V^\177=n\3457\273\t\237\333=H\226\t\276\"\351a\274d\274\314\274\243?\221\275\377\307[\275\205\004\230\275_\261\234\275V\002\224\273\301\243{\275\337!\036\274\2039\206\275\277U\200<J\200)=\032\356\237\266zT/=\340@\265\275\032m\201\275F\215\325\273\025\232\341<o\020\346\275\035\n\033=!\257m=j0I=v\266\246=}\302\026\275\350\302\223\275,\2161\275\347\2137\275\266\324#\274|i\301\275]\345@\273\004\353\217\275\324\026\226\2753!\273<9\307\331<\304\215\003=\316\376\347<\273q/=L\212\275<6\263\311\275\302\274\307\274\014\271\257<^\361\205=\232Y\361\273\356\024\007\274$j\007=\261t\327\272f\003(=\237-\202\275\322o\307<\233\272\312\275\014\254\t\276\204\277\r\275\304\245o\275\272\260\247\275\004\344 <\302\016\203\275\002\370\020\276\032\233\274\274\014Q\256\273\217\354\272=\351k$\275\270T\014=\231\263b<\361\205\"9\032(\254=|\316\241;\370x\361\273\032\307\037\275\267\375\261=\234\217\341<9\211\215=^\340\322<\336\001\335\274\002\2213=\324\346\230<\310O\255<\213\230\241=-6\233;\350\260\212\272\370\360\233\275kW}=\241P\346=\375-\233=\370(\366\275C X=K\326\022\275z\377\227\275\213V >\226W^<Q\333/=6\343\343\273#\256\004\275\330\300\r>J\356\032<\351\201\013=\017\251\010\275s7,=\231\322\234\275@\365\335<\233\237\005\275m0V\275P\0005\275vC\035\275\"P\252\274\2348\320<\233\373\271\275u\337g\274\320\306e=\224sc<\316\366\323=\320\"^\275v\334\255=\226:\241=cSW\275\220\360\353=\014/\236=\253G\020\275\335\031r\275\203\367a\276\271\375\025=\3029\264=t\024m=\'\016\212\273v\000\306=\367B\315<\362\235?=\324\373\021<\366\310\331\273@0$=\031\'\306\275B\0042=}\\\250=\017\361\306\275\001\324\254=\021\031\242=&\310\350<\345\316\261<\017\307v\275&\035\225\273\257\3476\273\274Nl\275\265\236\005=\353\227\016\276\001\245\006<\337\235\307\275$V*>\222\016\271<\320<\206<\036f\037=2\274\026\275\232}\272\275\305\265\373;2\217\244:\335\261\371<n\306\014=\252k\033<\352An=\355\2030\275\335 N=\364\357\354<\236\377\030\274\203\321\210=HO\234\274\362\\a=\373ex<S\026\303<\251\254Q\275M\227\366;\266_-=]\023.=N\277\326\2726\r/=\341<8;\031\247\350<H#\217<\222\022C\275]*8\273\030L\344\274h\370\313=\204M\263=\005/\037\275&\353\016\275\343r\232=\217ys<\274%\311<\207|};7\010-=\357\360\253\275-@\244=\336\2740=H\237\347<\356\225\240\275\\N5\275\247j\215\275\002\363\370\274\2134\231:8\360\023\275\227\2745\275\3646r=\373m\261<\2602\266\273~\335\216<\026\225\001\276\006\035\254\275ST\001:_\303\227\275\245=\327\270\241\022\204\275o\242|<\004\351N=\026&\345=\224\365!\275\243\216\030\275\370\032\242\274a\314\016>\252\320l<\245\034h;\313kP<rn\202\275\333\251\360\275\033\254O\275\031\263.\275\374\2337=x\341=;\320r\013>\320\032\376<\307\250\004\275\354~\335\274D\352\311\274\255bG=D8\274=\273bz\275\031G\213\275\333\367\265=\215$!=5G\332\275Dw\020\275\224\350\020=J\225\271\275y|-<\343\361\227\275f\274\331\275T\227\362\274\0016O\275\264\333\304=\274w\307=\232D\320=\240\270l=W\327`=l\335n\275\0331\240=\366\001\">\315u\334=\360!\n\274\316\244\377\275\264\213m=\000\226\023<A1\234=\352\354\020;\004\367A=\367\004\360;\023)\365<\277\376==;\351\213=\226\350\320=\366q\344=\277e\363\274\216\243N\271x\325\226=\360L\215\275\375\301\003\275\007*\276=9\2155=\241\265\212\275\353\231=\275u3\205=S\257\221;\010\311\245\274d4(=\240\313/\275\3170I<\'iI\274\267\362N=$\270\343=`\247\246\274\230{\031\276\360/#\275\030\307\247\273\232\313\332\274\330_\275\275\372K\027\275\232)u=\273T\227;\272\333\272\275\326\275\227=\202<G\275\226{#<\202\227\260<\322P\201=\351\022\007=7\264\364<\357IR;\302\352\n<\310\205\263<8\202P\275\314\332\035\275 \266\351;-\232\371\275\004\225G=vh\020\275i\346\216<6\013\024<c\033\303=!3\365=>\024\023>9To\274\016\230s\275\037a\341\275P99=\242\250\265\275\303\036\242<\\\267\246=\276\273\341\275\000,\221\275L\251\364\273\302\337\314\274@?\221=\315\332D\275\003D,\275\343\244\004\276{\203\027\275\220aN\275\363\252\357<E\231\255=\220\241Q\275>\301v\275\3179\236=Y\365\037=\002k*\275\200\357\235\274\331\rh<\311r\016\275\0323\230\273 \236\260\273\214\347\244<\332( \274\255.\035\275\324\257)\2755t\234\274\370\266\311\273\232!\230=\216\263\240=\006\345\270\275\0249/=\327\234\307\275\360O\004\275\302\305\026<z\3351=\007\251\025\276\377\372\177=6\325\214\274\373y\304<+\356h<:j\375=\203\305\240=\232\243\261\274\035\244\024=5ZS\274\345\355$\276\312\327O;\373\273*=\365\244\005=\023\353\277\275eu\372\275\210\022>=\036zR:#\013\023=%U\006\2750\253\225\274\350O\201\273\000\313k=X\204\026=\244;\301\274\\\377\275\274T\025\363\274!\344n\275\006[\323\272Bc\323<\377TK\275^J\205:\251F\215<\312\344R\275\216\206\200<C\307\212<\032\204t;0?4\273\353\001\265\274\3272?\276\3545<=\225m+=#\302\361\275\020\3231=\376\320\266\275M1\214=\362;\035=\274\212\250=\257\264}\273\270%2=\241\376\034\274\270\236\030=\210V\305;#\262\343=\273F\217=X\377:\275\350\355I=\300\243\"\275#\237\257\275\336R\207=\3257_\2742\027\304<V7\316\275\210}W;K&\304<J\356]=\354\3759\274\323\307\027\275\2541\036\275\366*\323=\352\260#<\223\"~:(\276m\274!\355@<E\\\276\274\204\301\231\274\272\362\374\273f\344\303\274v\303D\275Z\310\326\275\316\241\247\275\363\221\227\275\"\255 =\333\263\273\274o0\271\275\214\325\231\275\340#\233=bp\222=zw\032=HM\355\274Wp\247\275\264B\206\275\212\254#=\336\311S\275\226\243\214\273\370\366\263<\241\306\270<O\277\345=nyT\274\331\373\000>\004\355\270\275\231\231\032\275\243\367\240;\357\t\300\274o\375\203\275%5\314\275\311\250d\274\206#\353\274L\321\336\275\177%\344=[\271\225\274\t`\207=\276\214#\2747\241;\274\326\231=:\027\316u<hs\246=\276%\341\275:r\333\275\327\330\317\275%$\333\273%\235 \275\223s\264\275H\315\262\275\227@\023\274]\r\t\276\217\240;=\001\274\204=\032\321$=\202x\t\2751\313\322\275\372\223\273\274V3\355\275\307\366\327\273f\375\261\274i\360\025\275\371\266\332<N\220a\275\330\341+<W\253\022>\225J\317\274S\372F\275+\014\006=\213\204\"=\332\211\203\275~\242[<Ls\274\275\010\332 <\223\337!=~\264G\276\3553\336;W1\213\275R\212\246=Md\215<\272F\213=w\224\313=\313\224\222\274\001\236\034\275q\315!\273\332\227\253\275Q!*\276\313\335\014=!\266{<\320\014k\275\231\001%\273p\224\027<\363\\\360\275`#\347\274?\251y<\355g\211\275P\364.\275\202\343\314\274\353\305\253\274\270\222{\275V\323O=\311\343@\275Z\232E\275`Sl=\231p\205<\203\0368\275\306z\216\275U]\301\274\252.\346<\325V\277\275\302\212k<\016I[\275p\222\266\273\254\324\006\275\301\253\215\273\265\232\202\275]\303n=\362\335\233<[uv=\217\377\255=\261e\312<\357\264\236<\324\374\004>\234\203E\273#\256\213<\344\315\257\2733e\257\275U\366\260\275\301u\341<\177\312\210\274;y\207\275!\224\345\274e\002U=W\265\006\275\273\000(\275\335>\036\276\264E\253=\002/\226\275\312\201\207\274\217\352\014\272\271\304\353\275\203\030\250=\247\332J<\275\323\313\275\252\002)>\306\034\203\275\327\331J\274\206%\177=\342\345#=f\334\221\274p\247\326\275q\231\256=\264\373G=\322C[=\203\363\210\275\271\221\227\275:\010@\275\232\327\227=\355\033T<\352\3163=Zi\302<\300)\022>\213\343C\274k\302\024;\247\0275\276\214U?;;/\257<R&\033\275\336\2303<f\306\030<\226k\341;T\346\324\275\364\000C=\326c\316=\260[\346;\364\026C=\336\350\207;\250d\342\275\234\363w=>\317\313<\310\321\235\275\036\177W=_OS=7\331+\275\314q\361\275\233\004\372\2751\202\263\275k\344u\275O6\230\272\344Z-=\275\0006\275~\033-=8!\"\275\350\332\245\273qO\263\274-\007\'\275\315\321\244\275;$\272\274\351\255U=\3301\n=\227\273\334\274\275\256\217\274`9?\275\250\357\275\275}\032\030=\252?\240=\\AI\275\3235\252=\034}\250;\002\326-=\265\335W\274\3717`==\024\336\275\027\254\226\275\336\214\320\273H{\031>\236\215[\275\225\337:\275l\2360\275I\302\340\275\"\032\037;.\212\000\275\207\234\331:\234C,\275\237\312\310\274\374\345q\275\325\037b\274\341_L=:+\251<\332\r\360\275A\r\267=b\222\243\2752\335\262<p\251h\275\340&\037=\206\353\t=\273\250\301\275\206m\253<\3132\315\275\273\353\231\274k\365\250<\355\025\210<\0262\214\273s\236\007>A\020\200\275\305\007c=\341\270\337\274\203\311\321<\2107\360=\360\3072;Q\370V<.v\274<\204PG\274K\233D>B`\220\275\320]\207\275@\020\322=\372A\274=\242\3208\275\355\247\225\274\022\307\224\274\221YH\274\357\341\361<P\2700\273\335\331|\274`5z=\242p\n<K\316\325<\205\003\232=Q7\265\275\273=\306;iT\212\275f4\243\274\236\354\253\275\221j\244\273E\253*=y\342\371<\020E\201;\014\236\200=\241B\2269\262\243\230=K\202\200\272>\245l\275\002\206i=\253\274\251=\372;5=j\030\261\275\201\253$=\263\267U;\000=\364\275I\317(\275^\3558\274\233\335E\272\240\376\366=\357F.<\301\024\322<\316\264\255<\200-\177\275\254k\217;~\"6\275\325\002\035\275\312\\\356\274\262\356\300<%\322=<\224\276\205\275\342\312\305\275lm\265<\265\332\007=\033k\352\274\375\224l<\367Df\272x\312\202\275\224\272+=ZW#\275\353z\230\275z,\342< \300\031=i\245%\275\334!?<\356Jf=4%:\275|\017\005\275B\370\010>\013|h\275\034%\024\276\245\364\216\275\252\305\005\276^W\202\274\006\243\357=\006\200\357=\016)}=k\004\220\274\220\266\014=\333\021\027=\312F\"=\360\304\366\274\207\207\372\274\007uR=\237\210\204\275\342`\211<\3142\224\275\007pS\274\344\000N=\320\355Q=i\227|\275\347A\200=\033\214\334\275m\237\177<\r\010\201\273\312\310\212\275\014SI=\202,Y=`\342.\275U\200W=\375\220\356\275w\271\010<\354;\313=5\266C\275F\007\302<\240\330\340=\301h\223\275\027RE\275-F\013\272\316X\321<\230\026\223\275\360V\237=\034\027X\275\226\361\3419\314\331I\275\326\303\210;0\271\204\273\3005~\275\021\350\017=\2731?=t\025\032\2749\242\201=\313\360\343=\207\372\332\275\026A\027<x8\306=\200|\233\275\230N1\275\344\017\033\275\203\274\2539\013\347\003=\314\202-\275m\265\310:\321\224b\274\317\302\377<9\353\233\275\337\241\002=h\346\243;\346\354l\274NP\213\275\260\2574\273\311\332\213\274\376\360\313\275\265o\246<\323\331*<\207e9\275\257\312o\275\017m\231=\213b\365\275\177u\273\274\370\272R=/\356\364\274U\340\262;\356\033a\275=\370\177\275P\344\311=4\363\354\274\353&I=\tp)\275\220\230V\275\036]\215\275\306\372\'=\221H\241\274\203\020\213=\224z\253\275\216\232\021=i\305\356\275\3242J>\304\2768\274\301\356n=\034\203|\275\213\223\025\276\344\220\206\275\255\353P\275P\t\374\275\027\306$\276-[:\275\016\016\024\275\036A;=c\214\306\275\331rH=~n\004\275\362\002\263=8\371,=i\307d\275\326\231\252\275G{N\273HSe\275\037\273\03686\356\302=t\216l=\304y\202=\203O\307\274B\005\204\274d\233\000=x\310\363\274l\351\223=HU\354\274\353\250\n=\200\341C=\273u\231=\202 \010:Y\260\024=\241O\220<\231\005\226<\231\277\357\274\\1>\275\0236\202\275\nO\315=k\3136\275`\000=\275Id\250=\002\305\210=\307{\256=\232rZ=X\275\306\274lZg=\202g_<\177\2030\276I\331*\274AF\376;z\363\364<\357(^\275\306\002\247=\016\231\254\275r\211\016\275?I\337\274zme\275\246\347\304\275\013\036\206\275\226\341\206=-\3742>\341\302\244\275\275\2644\275\322\027\207=s\"\330=b\234\306\274\356\t \274\271N\307\274\355a\337\274\202\372a<\250\256N<b\367\300;\332\276)=\031\037\347\275\360T\311<\023\220=\275P=\361\274\033,\235\274\3550\273<}.*\275\304\330\306\273\226\231\224=\342\246\201\275\213\324K=\377\002\213\275\035\307\302=E\270t\275\350B\004>u\253\021>\305\237\230\274\013\037\020=)\304\245=\210\\8=4\257\245\275p~\201<\255Xs<B\356\245\275/\352\263;M\246\337\275\271x\343\275\315F\343\272^%\361;`\315\267\272\032\223\245;P\315\345=\204:\253\274\317\237\204=\372\002\031\275\371\214\265\274\371\374y=\021\350\\=\202)@\275\344{\214\275\037\"\323=\363k`=\037(\025\274\310\365\036=\363\'\017=\327/\237\275ac\222\275\'v\323\274\354X$\275\2031\016>m\276\345\275\265\017\245=\217G\315=1\223\350\274E\216\032\275\365\341\211\274}\367\347=\006(p=k0\233:\207j\302\273\031\2305\275x\030\013<\367*\014=\343\262L<\321\362u=X\3253=_r\007\2754\021\"\274;\253\261<\014z^\275\324/)=\344\016\302=\335\n\235;\001c)\2742\334\327\272\261\'\333\275;F\243\275P?\372<\0175\357:*y\000<\221\232_\275\345\326\005\275\304\226\337=\347\312<\275Cn\226\275`\313V\275jZ\037\274\312\034C\275\321\323\305=\232W\215\274\r\371\301\274\243T\227\273!\n\227<\312\214\317\274p\255f\275A&\301<\'!\252\275r\007\274<\231\022\277=\362\'\375<\205\222\n\2756\360\310<\370^\262=\205\004\267\2750\206\230\274\017\215\017=#\001\233=\200\272\371\274\341\031@\274\367\244\205\275oX\247\274\231\351\314<D\267\266=<\212\001\273\304\371G=\223\277Q=\273\224\271\2750\235w\275m\252\216\275\374\331\002=\252\016Y\275_\302\220\275N=8\275B\321^<\334\315@=\177\267\233;h\202\306\275I6|=\365\3455\275\214vI<0\237\001=\354\307n\275\377%W\274\257v\202=(\340m=n\031g<\254U\312;}\373o\273\231\330{\274\004c\315\274\007\266\247;l\324\341<d\204\251\275T\212\312\274;[v=\037.M=\006\263\204=~\246!\276o\2041\275\272);\275\2724\037\275cn\211=\262\306\300;\225\025\033=J\023]\275\253\355}\274\250\243\001\275\214\342\335\274AC\315<\220\235<\275\372-(\275\025\367\361=t\2004>\025\035\374;L\337\t\275*&Z\275\014\262\222<C\341\377\275\352\237[=\222c\200\275\351I\"\276j\253\227<v\265!\273_\245\216\274\332\370[\273\225\364\350<\254\236\356\273\030\030\364\274\201\t\021\274\006\207\326=\265\310i\2750\033*=\306\037\013\273\215m\303\275\322Cq=\231\001\303\274e\225\320<\226\322\234\275Z\022\032=\345w\"\275\332(\016\273y\207\272\275\275#\235\273T\277\031<MV\005\276\325\030\022\276/\020\213=5\216\327\275\241\377\020=;\363\013\275\213m\216=0\337\250=\310\211/\275#\271\223=\365\234\333\274\331\321h=\236C\'<\245T\321<\375\036\335;\213V\\<\216\177\340\274\274\347M\275\2518~\275\356I\006<\013\361|=}a\351<\277\0134\275\324B\377<\035\347\225=\346\204 =\021\206\243<l\006\317<s\024\014\273\227e\013=\344r\205=\316\270\r\275\251\251\272\274\025\376s\274\210-\273=:\352\233\275\374\226\356=\355\007\272=\271\316\255<K\345\236=O\032\275=\203\014\005\275\024_\274\274\253\377\230\273}\311\003=`2\226\275\270>\201:\363\210k\275\356\001\243\274y\2521\275Z!,=\302\305:\275$W@\275\374T\177\275\335j\252\274\241;\257=\362\260\302\275\026C\024\275J\323\027>a>\243=\276\214\000\274\203\222\017\275\334\324\203\275\370\325d=\341\r\n=\331\001\002\2757\352\320=\222X\212=\026\2407\276[g\223=\317\231(<\tT\362<q\277\212=\365}\206\275\370\207\356\275\007\372\016>\035\256\352\271E\t\342:\262\366\035\275\27618\274\205\274\025\274rk\343\275W\343t\275e\223-\275\');\274Ii]\275\333\354\302\273\310_\246\275\375\272\373=\376\003\337\275\243\221\'=\207\030\305=4\372\332=w\310\256=4\201\304\274\177w\326\275U\316\361\275\277T\323\273\255\312\204\275j\370\320<\371m\002<C`\246={>\210=q:\341;*\346\010</A\236\275\260\026U\275\200-*=\333\016\351=\247\'\260\274\0204\360\273\273\253\023\275w\313C=vG\010\274>\226S\275\377\324\024=\254|\021=\322/(\275-\207\244\274c\220\252\274g\375\377<\326\204\217\275\025e\353\274r\305\261<dB;=i\177\326=\363\005\037=s\313\206=\315\023\315=\354\\\036\276G<n\275c\034\024>m:\202<\220T\231=\254k\377\274\215\251\r=\3349\207<\2572\351\275I\221\014\275\212\016\213=\244\325\211\275\346\212\023>\341d\307=\337>T\273dc/;\344|\271;\367:\014=\363.\312<\205\237\226\274\350\351]=9\361\354\274\037h:\275\217\211_;\317G$\275,\220H\275\274\300\002=\021*\200\275\005_\\\275\277~\301\275\223\215}=\354D\233\275cW\313<\200\234\r;\335<\007\276\312\240\303=\357\364\342<\t\r&=e.\252\275\235\272T=qwk=\023\237\337=\371\2772<\216\361\274=-\230o=a\017^=\316\'\210=y\343\201\275\213Z\n\276d\364\275==9d;\302\013\275=\351)M<&\037c=b\325\242=\320t\256\273\000q\257;\317\364\302\274x\201\227\275\236\264\271\275:\324\324=\006\352\270=\363\266\322\274 \214_=\354\374N\275\t\t\223=m\003\246<\235*G\275N5\212;X\300\232=wf\277<\237\266\006>\3500\010>\004=\365;m\304\341\275hS\r\275\205\270p=\220\317z=\010e*<\317\241\270;\332\367\341<\252I\003\275\236\004r=\006\301\216\27303\032\273\371X\323<n\322;=\345\272&\276a)\033=v&\234;n\313\275=\226>\240=\363\217\016\276\323\252\031=&\260\275=\335\210\377<*j\226=\317\266+=\037\275\270\275\007\263-\275Gu5\274\221\014\017\275~y|<\013\330\201\275\216\224m\275\375\003\245\273=\317\206\275\202u\231<\221\2502=M\236\306\275\017C\001=.\210\254\275|T\277\275\321\373=\275\255\233\376\274\235D\277\2743y\033\273\020\035.=\363c\204\275\224\356q\275#Y\370<P\236\177=q_\240:\212E\302=!\000K;\333\001\\<\004F\235<`\217\232\274\347\222\223=\2333h=1\236\237=\254\253[\274\276\304\212\275#\264\227=\201>\n=\365G\222=\252\217:\275\366\316S\275\327\371\302\274# \t=\261\314M=\360\367p=\027\272\315<_3\t>\317J\347\274LM\205\275\013\261r\275\252-\316;\'\323\334\274\303\316V\274\213\346\346=\236\367\016>\342\224\"=\t\351\007<\027\356\203<QA\260<\t`\222<\200\303\033\276\336\315x=\23120=\2034\\=_J\203=\304\250z=V\323\t=\366y\213;V\336W<\217\027\226\273\261\206`\275\017EV<\310t,=\205\231J\274=\236^=\331\036\217:\235K\377\273\317\365\"\276v\026r\275\224x\263<!s+\275\243\213\221\274\006\007\000\275E\244(=+w\273\275\307\336*\275gHc\274B|\311<\2036,=\247Q\217\274\033\343\202=Y\217h\275\340\267\277=\215t\203=\346W\237<k\r<=\217U\207\274\374E~=V\374R<6\307-\273\340\226\305\274\245\341\207<Rzp\275\251n\035=\2617\267\274\213\316\333<.\034\333;\330\300j<\275c2\276\303A\214<\344\244\317\274\242-q=r\367\234<+;:\274\222\353d\275\216\3566\275\312\003\014>\024\337\r\274\253g\035\275Q1\227<-\010\226\275\312Q)>S~\361\274\355\275 \2740\362\251:\213Kx\272\020{K=[6%=Y\025D=\320\022\244\274;\004I\274\026\016:=\270\243\'<\252\213\261<\343\264\255\275\365\030\213\274\357G\000\274\005\300S;\371K`;$p =\233\353\343;y\221O\275\300}$;\206cN=\302gj=\262Fe\275\323`\226\275\212\035d<\221\343\266<(z\350\274e\253\250\275\235\277\321\273}\324\226\275\325\016%\275 3\207=\236\244\343=+\014\251=\035\322\271\275a\260\253\275*\260\275=\027\323\022=s\t\227=\3546\254\275\354\356\273\273#\nQ\274@\023\023\275\025\037\313\274\334\005\320\274\336\203\266\275\003\326\302;\261\240\350=\ne\355\275\235\355\275\274\205\307\322\274g\345\320\275\242\237U;\034\223\002\275\213\361\261;\230\253\t\276\016\203\331;\312\010\362=lh#\274\227\262\322\275\3450\305\275\271J\365=\245J\230=\251\303s<\371b\260\275\320`\322\275pu\327=\370\271\006>\305CB=\'\302V\275\003\227\323\273\354\241|\275\243\026\026\274\374\325`\275=\360\001\276lg\021=\\r\363<\355\270\305\274]JA\275\340S!\274\025\016\014\275\326\340\010\275\034\374\246\274\211\027\344=x\355\370\274]Ff\274&\311\221<v\333\200\273\353,\021\276\262U_<\260\263\006\275B\233\025>~\216\223\274#\367\315\274\217\\\305\273v\307\220\274\255\021\013=i\350\202=\305\024@\274\r\362\302\274i0\332\275\353\326\232<.\031\364<\227\360\035\275{\007b:F\253i<\376\233\016>\201\366\355=\244\254\t>v=\202\275\210\233\201\275\272_\214=)\316\253\274\037\027\"\275!4\317\275#\0306\274\327\215\227\275\020\247J\276\360\023f\272\3334]=\335g]\275\247\023>\275\230\370\323\273@\300\265=\322\316\344<\234\014\001\274\321\250!=\226\375\022=\036\323\334\274\010R\025=\236\226\265=}\251\276=Q\355\300<7\177m\275b\302\272=\203\034\274\274\237\376\n\275\332\252\205\274\270\035u\274\306\025L<K)\211\275\215vy\274\253\007\320=\246\337\226=u\001^=C\374\371<\244\344\023=\002\360]=L\020\237\275\r\304\327\273\247P\341\275\246\033\310\275\230 \335<\222w\214\275\366\262p=\020r\010\275\325\270\266\275<\273\324;\300n\214<\341\257)=\271.\233\275.)\210\275\022\361\240\275&\365\377\274\"j\023\275\255\351\230\275\223\207\223<d\325\365;|\002\006\276f\223Q=z0\030\274*\200\210\275\r\177\270\274\274\004\250\275s\246F<1\311\330\275\232\0349\275\276x\026\274\252\335\205=\033\361\t=\"\207\335\273\340\341\003=;\244\322<0\244\246\274\277\334\234=,\231\206\273\347x\313;\021\353\203</\\*\274mm\235\275\322\354\275\275J\240i\275dh\256=\263\033\334\275@~\353\275\016\364\353<)\350\255<X\016\231\275\253\362\234<\366\205\315=\r\'o\275\260\257\"=\255z\207=u\225I\27443\\\275]\037i\275\365?\343\274\000=\310\275\306>\026=/\311\n<\021\257\323<\005)r<\034\\*>\276\210\266\275\3273e\274\327q\303\274Y?\302;\206\213\301<CA\366\275\360B\024\274\313b\\=\206\306\251=\366\254[=\'c\303\275\306-\316\275\013\375x;\013\225\375\275\361\006\032\273\264l\301\274\033\350\357\274\371\'\310\275\t\245\014\276\274_\332=\261\2326\274\247\335\256=0H=\274S\240\224;\220LS=|\257\232<a\371\027=\301\016[\274b\2306=\316s\201=p\203\315\271|F#=\310\331\221=H\010\306=\362u\341<K\022X\275\030T\354\274\251\334\314\274\330\004\271\274E\210\356\274)\026\316;\250\002\314\275\023l\256\2758\022\201\274\\\023\303\275\2507}\274\324~\t=\222Y\357<|r(<\007\310T;G\344c\273 \233I\275\244\337}\274G\304\367<m\276\220=?8\216=O\034c<\354\243\360\275\250\244\265=4\003\016\276\014Nj=\216*\340<\250\363\360\274&0\204\275\350\2333\275Os$=<\202\263\274y\207\003\274\245\000[\275Ge\'\275\302\230J\275\254\353\251<D\351&;\000\211)\275\315\n\225\273Q4\000>\323\332\261\275\024KQ\275;\204!=6\010)\275{\021\362=\370~\276\2740=4>\302:\004\275\302\003J=\233d\206=\274\301\360=\022\246\256<n\201\241=\314\0235\275\314\346\263\274*\2471<\031[\236<4\3741=,J\\=\022\252\007\275\356\235\377\274\314\203!\275\030\375\337\274\234\365\256\274M\371n\275C1\203<zo\006=8\334\347\275]t\372=j\347D\275=(\326<\312\244\227<+[\001\275\27483=Im\305\274\312[\260\271\324\252\000=\016\214\371<\335\356Z=\020\241\010\274|\017\014\275<@<=\205qv\274l6\021=\326\342\311=\232\347Q\275\177UW\275n\177=\275\376\246M\275\234\345\010=\006\364\200:\216\353\201=\024A\355=ht@>\n\036\257\274\216$\234<\272\264\201\275\244\027\232\274\312>\336;\276\357;=\270?}=R]\337=\365\206\244\273\316\210\005\275\267\265\243\275\363\n\251<\307\374>\275\177tr=St\024\276\322\224\331\271\317l\340\275m\221\t\275\311\352\010=c\354\375;\034;\207=\024\323/<\240m\336<\345\304o=\257\342\266;\034\014\227<\201\307.\274\345\013Z=Uj\035=\215\321P\275\\\254C\274\224R\244\2756\007]\275\323R\207\275\014\333\216\275\351\317U<S*<<X\t:\275\333w-\275\205X\204=_C\364<\206\250\030\275\237\226\024=\035\0032\276*\275\">r\2532\275Hk\202\273\003\370a=\363=~\274G\270\224=\335\260\310\274\336\354\335;d\3362=\n\356K=J\346\332<\330\307\241=s\337\264\274\242\030\032\274+\204\243<\376\216\002;\353\310\007=K\343\370\274dT@\275\256\253o9\010\036\253\274(be<\264\032G=\264\304\232\273\264d7\275\244\247\002\275\'\270\206<\374\251\316\273\241\001\366\274\237\303\262\275\313\010\013=\353\\\235\275h\030\001\276b\376\242\275\3370\002=R\005\210=\322\223A=%r\002=\ne\013=K\335%\275\225\256\377=X\3644\275\037O\366<1\237\374\274\006>\332\274\036\010\002<\323Y\205\275[\215\364\275\005\212\313<\354)3<]\002\202<\340\362\207\275\245OM\275#v\001\276\225\261\340\274\267\306\251\274\251k\216\2743\016<\275\261-\212\275\205\355y\275\201\354\221=\352\214\367;X\303\215=3K.\275\275@\022\276\304d\321\275\372\274\344<\036\206\353\275l\314\234\274\375\266\207=\037y\214;i\'x<?L\224\275\247\037\341\275NW\210\275\363\201\335=\303I\256\2755\202\024\272\231\371\326<\300bS<\374\261\013=\247\016n\274\233\355\"\274\274\353\236\275L\313\2348#\316\202=E\000\305\275\037Z$=\315\320\272\273\024\324\324<\244&+\276?\274\271=\360h\216<\264&\355<\t\t\001>\251fw\275u\035\227=\357o\342=\367\217\305\275r;]<\243\032\267\275A\005\224<?\031h\275\234R:=\203o\252\274\n\225\340;\333\331\201=AV\204\275\300F+=9\345\217=S\377/;b\215O=\255\276\032\275\351[n\275\202\262\022\273\221W\206=3t\001>\3742\341<\266\347#\276\273n\220=\377\013\333\275\225G~=\322!\327\272M\027\243=\340w\252=s\257j\274\201\333\340<\025\370\246<de\213=\250\276\007<\0038\215\274\233\"\000=\364\315f=\344\245\331<`\262\033=\264\240\035\275\201x\261\275\316\226\026<\342\017?\274RSC\274XxE\275F\334F\272yw\305\275,^\351\275+0\333\272\343\253\352\275\000\356d\274}\030\323=\376z\000=\200^\024\275M?\357<d\220\306\2739/=\275\225=\000=\022\232\255\275\303\222\026\275\241H\244<\n\271P\274\365N\220<\027\327G=\242#\260\275\254V\235\274\343\021\'\274\346\357\274<\204?\272\275by\233=+q\345<h\347\236:=\017\200\275\32124=j\031\272<s\3142=w\312N\275\251U\207=\022\243\255=\362<\223\273Lv\372\272?\240\243\274\250\2522\275\033h\246=\232?\211\275\223\200W=\310\245\231=XH\025\274H\206#\275P5\001\2760\364g=\226S\021=\2278[>\335\177\314:\030\244\320\275\332\256\033>\336\304i=.\351\305\273\302!\367=>xc=\323\346\230\275\007\024N\275h\246\322=\023\354\t<\">\260\273l\235&>\030\206\2729\347#\352<\023\030m\2758j\"\275\2477h\275\222\275\212=\360(\237\274{\014\216=\255Y\245=\326A^\273f\026R=\"\202\254\275(M5\275\344\262\316=\366o\006=\031\004\207=\260\265D\272 x?=\272U\251=\006\335\357<2[\255=\002z\377\275\005N\261=m\234\274<\007\331u\273\252$N<\263\320\222\273\211\212\341=\264\350\317=\243\251\251=O\225F\2754\026\245==\351\255=\365\027\214\274\3021\337<>\330\034\276\377\265\214\275U\225\253\273\263&N\275.\356\322\275\366b\271\275\363p|=\2701\342=\323\257s\2730\314Q\275\t\035\271\275\001?~<a;\224=\375_D=\340\271\007\2740\322\312\275k\230q\275uE\004<\304\253\263\274$\273[\271L\035\217<r\212\007\276\215\204\307<\257\273B\275[wT\275\277\354\332<\206\031\201\2746^\360\274w\007\270<W\024C<\271\206Q\275\377\274q\273S\230\374\274PPF\275\372M\224\275\264\367\201\275(.6=\242?\254\275\t\020\026\275\361#l<5\266\301=\247j\027\275r7\036\275Y/\026=O\240==g\302\347=\006X#=\332\307\245\274o\337\312;[\210\007\275\256z\250=\353\375\221=W\222\251=4Y\254=\222A\006\275\246\263\272<+\'\t=\217\001N\274hz,=q\'\005<\222z\215\274\\.\243\274\3608\311\274\207\200?\275\374N\235=\262<\354<\267\310\315:d\355i=N i\275\375\3135\275\322\304\020=X\343\333<%\374N=\367K-\273\322?\333<0\371f\275C\201P\275\275\225u\274b\r\231\273Uy\263<\255\243\272\274\364\251R\2736c\375\274\320\001\260\275\217\300m<\317\363\234\273\227n\266<=Z\017\274M\245\332\275\252t\225;\361p\352<\014H\305=\034\310W=\331\033\014\275\\\306\037\274x \277\274]\\\002\276\323`\357=X\034s=\333\320\302\272\313\373\177=z5\337\274\224\346!=\251\\y<\036\363\313< \225Q\275\300\032\232\275Y^\344<)bS\275\275z\270\274\212G\362;\351\252\244\274V\267\206\274T\202^=\002\014\266\274\234!\230=Tlv<M\275\016=U:i=\305* \275gh\330\273[\227\032\276l\322k\274w\n1=\027J~<W%m\275\021\270\220\273\024\004\017=\245\267\217=VC\035=\'\305\235\275\313\002)\275\21778\275\252<c=\247\233R=\334h\311=\013u\240\275\376\2249\274\217\177\302<\305(\206=,n\317<\024.h=\\\027\177<\']\242=\266\276\275=\275i\370=\344\247\347\275e\252\323<\376\220\311\275\237\315s:=\265)\274\205-\256:\250\200\205=zM\025\274O}\017>\'8\270=)f\370\275\013\302\205\275N\232\252=\322j\035\2754\362\201\275\264sW\275\354\217\247<Ji\315\275\335x\'==9\262=\331\035k=x\220w\275\202\016\035>\t\337\305=;>\301=$\212\315=\001\000\262\275\316\262\255<\330\032\364\274\254\n\346\275\271)\030=X\253\354\274MV\246<li\255\275%\302\215=\023\354^=\0132\322;+\021\235\274f\031\206\274\034zm<qH\351\274\342\007\025\276\211v\252=\021\245\306\274\"\302\220=\231\020\201=\016\313\017>#>\023\276\363Sr\275\315\010\013\275K\232\370\273\265\364\306<\0165q<\311\361+=(}\002=O\264\241\275\247\262\246\273\007\257<=\003\272\356=\253Z\344\274\314\035\017\275\007\253\267\272\306\256\001\276\276\345\221\275\017\350%=\276\031\314\274/\322\006\276\224=\004\275\317\312\374\274\302\220_\273\374\220\233\275/\317\256=jh\353\275\262\266\020\275\224\205M=\376y(=\032|\333=\340Ls<\3621\025=w\337<\275\234q\267=\245\"L=rV(=\023\226\225\274WQ!\274\275\216\200=\341\022\203\274\324IV\274\372\223\006\274]\246w\275\272F[=Z\331\003\275\177X)\275\346\300K\275\243\020\242\275\377\323\034=CNe\275+\362\341\275W\354\313\274\210\214\013>\324\324\237\275\265\267E=P\031^\275^\241h\273\271\226\301<\303r\245;\023\350\226<*\272\363;\254[\250\275X\233\324<\346\304\307=,\001y\275\007\022w\274I\245\366\275\221\360\227<\004E\004\275\312\344\354\273\346\004c<\'M\211=#]\376=DT~=\272w,\275d\240v\275\275\321\264:S\335\320=T\225\231=\351\356\241=by\207\275d\274\037<\331!\002\275\032f;=\366\237\007>\332*]\275Z\020\202\275\321\267\316\272\321\207>\275u\206\350=4\256\322\275+!m<\237\026e\275\005\211\213=JI\257=\311\226*\275\365TG=\360\035\261\275\004\213\024<\3050\204\272c0h=6jT=\177\251\254\274\032\016`<\006\335\267<\353\270\177\274<g)\275\257\327\220\274\243\022\211=\246&\023\274\021\355D=\335\220|=\357\234h=\316e\320\275l\307\374<\302\363\033\276~\216\263\274\356L\263\273\232\237\226\275<:\314\275\317\335\026=\025\346\324=/R\332<N\316\220=\252\337\224\274\225\355\215=\341\223\222=\203\301\302<O\274\351\275\341\243\255\275\223\035\257=z\226\231=\021<\324\274&#\300<\253\003\224\274\226\210n\275\304=&\274?\027\223\274[\030\3269\372T\305\275\013\345\254;e!\224=M\'\002=+,q\275\306\204\357\275D\311\261\275\203\037\017=T\0324\275\014#\016\275\330:\275<?\305\200=\025q:={\020E=\251na=\006k)=i\367?=_\337\206\275/\260\223\2758,\227\275\205j$\276\005\356\322;\205\360\350<\3129\217=~I\333<\251\363\351=\316W\203;@\021\243\275\303\357\203=u\211\260\274Tt\313\275\020\010\204=?\334\202=\2034\306\275Z\230\335\274E\t5=4\022\250<;u\002>X\347G;\232\"&\274\313\340\372\274\000\310\225\275T\362\253<\026\\$<|\253\316;I*\216<\306\0102=pQ&\276\227\277\353\274\217\031\021\275l^b\275\345\223\214\275\222\362\251=*jj=\254d\226\274?\345\225\275Z\235\201\275\371\030\014\276,>\240\275\340h\347\274}\253\327=\"\t\027\274\321\345\210\275m\224\254=\243!\363\274\005\202\210\274s@y=\313\230\327\273\177\271\001=7\206\202=\006ev:p\343\020=\251\202\232\274\323\341\347\274z\037\324<\220\336\371<\247\314\271=.\346\261<\256\354\310\274(j\315=\257\"u=\033`k\274?$h=\364\031\207\275C\350\321\275)\336\024=\021\233\216= \311\230=\307\303\010\275\301\262\301=\027g\222=6\311\222=\302\220\252<\\k\256=H&O=\321U8=*\273\330=mK\236\274(\370q\275\231\3313\275\034\271\274<\rdA\275\303\315*<\3268\271\272c|\256\275\251\205\331\274d\322.;#\340\013\275\367\334\351<\317g\303\275\334j\303\274f\234\254=\326\354\252<\303\360\003<r\252E=u$ <w\341\277<a\252\327=|0\273=\3473\377=\014!N\274\013\366\026\274\266\034;=Y\330\351=\332\026H\275\370~\210\2750\203n=\354\237\231=\302e\327<\367\254\024\275rh\230=y\242K=\272\353\266\2749\203J\275q7\373\275\320\333\201\275a\350\237<\264z\364<\2715\027=\247\031\255\274\210k\031=\354\361\303\275\326\341\305=\331,\377=_\t\023\275\240\270\253<\307\330q\275\351\350\273\275\305\376\007\275\377\000\303;\027\t\023=N;\262\273\370\365\233\274\252\325,=\n\346\222\275>\232s=d\245a\275\251\n\037\276\030K\020\274\014\304\005\276\024\364\303=\031\"m=@/]=\371\240\037=\371\241\306\275\2476\227<\215\260\242\275\352\304\020>\216\336\034\275\372A\027<\313\331\014\275\247G\216\275\001\277\215=\264\255\212\275B*\004=@d\225=\362\025\033=4\260\362\275\023z,=\242q\t>\265\224\326;\214\270\227<\375\276\332=U\\K=\373\212\304\275dd\260=D\'\313\274yD\311\273\227\036\267=\220R\027\275\232|\327<\240\214Q\274\315r\301=\361\310\320:\337\202\205=$p\307=\2432d=\216\3607=tyL=\345\215\240<1\340\215\274\2202J=\313C\273<b\031\266=_\375\r\275E\241\336<-\231\225=\300W\301<@\270A=e\307s\275\340\246\276;\263V\246\275\276\317\"\274-vf\275\215\326\221=\336Cs=8S}\275 #\027\274\325\021\270=4q\311\275v\333J=\200\017\304=\367\333\003=\217/\223\275q#\207\274o\260\341\275\307\032\037\275\265 4=j\205h\275\252T\361<UV\315\275\212^\314\275\356e >\005.\265\275\274\227\304\275\376\363B<\276\237\246<f\337\321\275\353)T\275J\000\344<Y\006%;O\273#=P]b\274\253\217\004\276\213\020\346;\247\360\233={\316\006=@<,\275Ne]\275\326\004X=\352\271/\274`\202\340=\255\312\276\274\335\352\243\273\270y\267=\271\360b\275)\227\004\275\377\230\210\275`\034\266\275\351\013$\274v\233\226=\341T\326\274\320X\245=:\2401=\310d\251\273\205\003\203\275\020*<=\257\302\271=6-\343\275\321\337\231<\306\332Z\275,\245N\275\027jn\275\317k\340\274*\365\301<\263\177e:iw\202\274\334\302\200:[o6<\215\321\177\274F}\235\275\205g\365=\272\006\001=\233\275U<\010\265\250=\271\362\325=n\216\362\275\222\222\214\274I\320t\275>\001>\2754\210\260\274 =\221=\2504\211=\235\000\014=\223z\025<\326T\227<\301\221\357\275\350\377\317\274S;\317=\315\314\325<\3064^=\377{;\275\306|\027\275\344\304>=\014\301\227<\216\231\247\275\372\267\221=\350\301\016\2760\257\370\273\263\375\212=\311:$\275\332{*=\264\220E\275@\200\311\274\325\311h;\031&\003\2755\200p<1i\340=]\376\312\274\272\320\363;\263\330\253=\014)\200=\221q\017\273?\n\346\274\344\226\222<\204\005\252=hy\006\275z\322\203=\205\366\263=gGk\275\362*\300=\363P\226\275\310#\244=|h\244\274\272Ej=\200.,\273\250\310\237<n\021\233=x\322\243\275\215\237\213\274\365\224H=\234\006\002\274,\3660\2757o~\273\301q\321=v\023\322<`\342`\273\261\230\324;\002X\377;\234\252e=G\373\236=_u\032\275~.P<\325\2003\274|\030\r=\335\362a=Uy\347=\022\227m\275\034\337&\275\225\273M\275x\255\227\275\362\337\273\275&\262U=\315M\013\274\r\321r\275\017\016x\274\207l\004>\325bw=B\254W=\026\352\375=\306\377\017>\304B\361:9\214\273\274\254&-=\305H\206\274dP\225=\270\350\'\275\315\334\314\275\364N\016=\3344\357<\334\335{\275\243R\"\272\313\232\351<e\304\206\275\373\013\n=.\213w<c\307\"<\327\326g\274\3067,\275L\321;=\363@.\275-\215\250\274\341\2351\275TR3\274\346\001\214=\005\342D=\251\3173\275\035E\315\274\251\"\374;\033\005\273\274\222\277\025\275\306 1;\275Z\214\275\017\352\352<\031\266\344\274+tX<<]\351<\201*\250\275\252\347$\275\007~\023\274g\003n=\312B\256;\230X\337\275\357\241\234=\3456\016\276w\213\025>Z\3129=L@\025\276ti=\275<f\360\273\nJ\020\276\376\240\261\275\221c\277\275\304\323.=td+>\261.\027\274\315\033\003=\023\254\352;D\034F=\'?\210\275,\331\234\275[\022\372\275\344\370\311\275\310\373\274\274l!\360=g\350\021\275\374`\370<\006\214\206\275\226\374+\275\331\250\303\274\ry\277=\037\321\235\274\315hT<7\335\304\275\"B^=\375\323\245;\237\377\214=\257\027\306\273\206p\023\276g\017f<NQ\342:&\320m=x!\270\275\203\376-\275#\000\352\274\327\212\003<\211\245Q=}j\"\275\225P\343\274\215\334u\275\365\360\031\275@y\344\274P\225 \275r\013\237=\227\201\265\275=Y\004\274\260L\361\275\265\2472<\376\203!\275\2306q=\276\n\206\274\306\312\004\275\206L\251\275\014+/\275#\335\235=\233\334L=\231\231\216=\333\266==l\332\001=0b\232\274\2501\202\275\300.w\274\035\271\321\2735\275\r\275\034S\323\275Jf\003\274\356\226\260=\373p\353\274\337\311\305=\353\333Y;\235K\225\275\257f}\275\245S\n\275\347\217\321<\367\322\346;\314\234\"<\002\316\222<\003W\324\275\235\311\210\274\363\375y\273\266l\"=k\370\265=\004}\301\275YQb<\345\211\203\274\261\202\"\275\274)\321=\223\273\231=\322V\233\275\250\204\305<\024l;\275\264D\227\274\305\200x<\035A\031=\362\234\336\275\203\220\267\275\365}\201= \021\203=\324\007\200\274\017\r\365<=E\024>\201\342v\275\371\371+\275\323\216\005=\253\200\214\275\210\321\351\275\237\330\364=\357\265\336;\r}\375<\312\337\021>\242/`=\016\036\251<\336\203\247\275\273uB=W9!=\311\243\277:\303\264\204<\265 \354\275\022h\213\275\254,\366<6z(=\030\001\237=b\271\032\275\310+\351\274L\327\272=\250\320\351;[\364\370\274\231L!\275y\344\022>\202\240\376;\224\373+=\245]\036;\344\363\t\275yPB=Bl\273\275q\266@\275;.r\275\3720Z\275\341+\276<\346\311\003\276;\001\300\273#\207\303\274\177;\n=\313\375\306\273\344\343\235\275L\335\220\275$\031\251\274\0303\202;\333\365\207<\357 ;\275\360\'w\273m\240Z\275h9.\275Q\347H=\246=\316=\356\251\252;~\210\031<\'\027\016=Xr\347=q2\376\273\024e\224=\237@\325<\032\365\232=\341\301\364;\035\323\267<x\205\212=\006\377\237\275\240S\233\274\326^\235=\207\277\210<\227?\314\274_DS=C\263c=\231\371<=\355&\232\275\2502\312=\270}\325\273PI\236<\345\335\214\275\334\267\312\275S \356<D\357\n=\"\257\367=~\352\332\273\t\017\201\274u\224\311=\375\3242=a\307\022\276\313K\035>2\356\262<\340 \226<\273\302\223\275\363^\217=\247\305\315\274l\324\204<\360\302Q\274h\323\243<\212M\270<!\215\032\275\037\202D=\276\207c\275\010\034\367\273\356l\002=2\361\233\274\235a\352\274M\240\231\274\250\305 =\345\364\250\274\313A\374=\275\n8=#\360z\274\234Z\255\275\r\343\220=\301\206k=\021z\031\275\224\026D=\366c\356<\'cK=v\316\217\274S&\337=Pm\316\275\3145\016=\344\363\342= \317\302<l&!\275*\247}\273\325,\232\275o\370\n\274\262I\023\273\001e\n\275\354\000\366\274\325\367\020\275\215\342\254\272\336\031\027=\273Lx=\366\347\334=\237\362\3067\257\021&\276\301\216\261\274w\276!>K\022m=@\355\337\273;X\234=\223WP=\224\232)\275\362\363\250<\\&\313\273\211g\033\275\030\350R\274\340\032#\275\267\005\330\274\001\276\000\275u\322\275=D\332\007=\016\2277\274h\321s\275\374;A\275\353\247\234\274\332R\261=\360\320\301\275\324lh\275\304N\320<O\207\364\275,\"\200\274rge\272\365\354\213\273\210\020\311=:\316\301=\t%\010\275hK_\274\026\377$\275\277\0255\274\370cb=\022\356\333\274q\001\254<\260o%\275\222N%=\357\256c=\2044\273\274=k\250=\304\322\335<\363m\225<\007\240]\274bp^;\220\346\266<\270\2765\275A\276\346<\2452\216<\345\340\345\274\332\217\267<n\'B\275\260\367\304=L5\237\275\340\024\366;C\353\354=\306\211r\274u\370\351\275bnI\273j*[=\372\177\002\274\336\017T\275\377M\207=\372\000\277<{\263\016\275k\267\237\275\266\033;\275O-w\275\022\340~\275\005:\315=L\230\025\275\343\227X\274\021DU=\r\363\003=-\340\027:2@\t\275\330_\216=\255\020|=\311%\240\275}%\262\274\366C\316;\000\320\245=\353\003\241\274\350%\247\275.\237\035>\371\216\\\275Rk \275\336u@=\317I\317\274\330\374)=(\375M=\177\363\2269\245\032Q\275\335\321z=L\363\254=\'\177\262\275\202\273\307\275\261\017\246<\271>\312=\254\022 \275\235\307>=xN3\276=\246\345\274FN\222=c\243\004\276u\304\224\274^\341\013=\350C\317\273\327\205\252\274\221\3608\275x\037\212=\215D{;\2603\306<Y\311\032>W\360A=|\024\010\275\245[o\274B\200G=\020_\213\274\337\237\362<V\343i\275\3227\305<\305\315\214\275\022\347\237\275\300\273/\275k\002\';\003\216\014=\224\026u\275m?\221=\373\300v\275w\223w\275\223S\267\273k\307>\275`\027\377\274a\323\303\275\264\365\257\275-\r\006\275o\256%\274=dK=\000\216\226=\347Z\004\276a\373\357\274\261\311]\275\0146\305\274e6\335\275\200\n\270=\373\3764\275\017\265\222\275.+\207=\307\242\304=\276y\031\276g\246~=\177!(=9\345B\272%\234\301\275*a\310\275\355\032g=\320d?=\010\233\010=L\223g\275U\255\245\275\310N\255\275\002\374\237\275\016q\212\275\346\241\231;G\007q\275\225\\>\273}G\030=\033\237g=\243\272\355=a\315_\275\361\310A\275<D\350\274|R@\275\365]\242<X\240\\\275\223\270\216\275\220`\271=#\315.\274\221\376\275<\177\246+\275~\010+\275[c\267\274I\304\305\275\207ZY\275\217\350\263=\242\362\352<\254\364O=p\372\241;\221\035\023\274\204\353\010\275ec\360=\366\204\236<\231\034\246\275\300\017\037=\260\367\036=f\346\311\275\234\327\376<\350\362\263<4\007\253:\222\226\n\275\205\366\206<\374\2638\275\237+\203\275\003\242\247<\356\311\036=e\t1\275N\341\316\273L\376k=\215\252\345=\274\260R\274\332T\373= \007\014\275\312\215\212\275\\l\305=\225\007\r\274C\326\204\275(\005\277\267\220Oz<\267\324\221\274\006?\331=;\002\263\2673\004\007\275\207\242\354=\267\272\342=Z\315\004\275\017~\331=V\311\262\273\317s$\275\364\345\002>\")V</\262\234\275\020\023P=W\310t\275\343\225F=\255\234\343\275\356I\252=\224\372\255\275\n\254Q=\221o\234\274\302\370/\275\340\213P\2717v\025>\345\263\334=u\365U=\324V\010\275@\207\016\274\210P\304=\344o\230=\016\255(\275\240\350\316<\022\031q\275\372\341\226\275Ud\026\276\t\327.<P][\275R\025\227<\237\340\t\274f\016\311\275l\363\253=\000\326T\275x\000\n<\035\247\231\273\'\010d\275\312-\024=\347\327\201\275\025L\215\275\324.\336=\177\032\203\275\246>\207=\004\313\207\2759\335U\274\t\363\031\274\374U\306=\311|\002>)\263y<\343\025N\274\016\2649<\340\357\312\275t\033\342\275 \226\343=\263\205\203\275\250\022\276\273\244d@\275\374H\036\275\"\340e=\001\213\267\275v\203t<\3526l\275\300\262\303\275\371M)\275\317\336\006<\202\252\331=\325|\360\274\353p\033\275\223\321%=}\216Y=\037\224\376\2758\312?=&\364i=Je\217;\'\207\037=\t\247\345=\337\371\006=\235\263\203=4\260\221\274\311\357K<}\200[\275\r\337\252\275\377f\205=\306\317\232=\346\"\036=t<\277\274I\243?<\316\352\265\275\263\002\314\274\031\202\221=\225\313~\274\327+\307\275}\373t\273p\214\027=-\013r:\325\177B\274w\347L\274\320\265N\273\374\314\213\275-\nE\275\353\3712\275\247Z\221=\347\200\377<W\225\337\275zT\250=\352:\006> l\006\275\306\356e=\334Rg\275\266\252~\2749\370\355\275\020on=E\341\\\275[\312\020<]\232\364\274k\227\240;\024\263\014\275X\353\353\275\332Q{\273\020\323V\273G\032\036<d\251\210\275\205\245\260\275qr`\275La\227=\322\374\007\274\0217B\275\\X0=\272\027\244\275\237p\002>\231\343\033\275\351\310\221\274\343!\226\274b7\360\274D\364\007<&]\220<\032\207\340\275!\362\016\276\212\035^\275\253?\324\275\265u\244\275D\t\016=t>\200\275l\222I<Y\227\260\275\031.\240;\006\357O\274\013\321/=\321\025.\275/3\251=9i\252\274\022J\243=\254\345\204<\303ye\275\306\360\261\275\3662\240=|\354\030=\034\335\226=,\341;=\323\272K=\233\331L\275\201?V\275x/\005=\032\264\246=\227\t\303\275\020\032\266:\233\371M\275\"\376\225\275\375\373\"\276\201*\230=P\220Z<\336\335\214\274\367\345?=\344\253\256=g\213R=\330~\351\275\014\306D</\3107<\206\246\254<\377tL=\377A\214<@\204\214;\370\2652\274\230\346Q=\347\253\002\275/\013\247<\021\260\337\275\311\225,\276\245\376\335\275\260\335\353<r\250\365\275\323\355\277\272\263FN\275\003ve=\013\245\205\275\217\014\016\275#v\255\275\344\020\372:\251z\017>\274\305\r\275\376\345\305\274T8\r<\275W\254\275\235\033\226<\217\352t\274U\206q\274ur\224=\240$\"\275\010T\342<\203\r\"<\230\331a=5\201\235\274\247h\340\2757\016\355\274\225\312P=\001\035\232=\270\353\242;y\010\200\275\0278\243\275:ai<\311\272\341=\223?\030<\336\002\263=\331|%\275\314>\247<\003c\226\275{\030\234\273\r\006\326\275b\321.\275\'\251\346\274\206\022\032\272B\332\212\275\337\301\017\274\206\376\256\270\315\346\334\274\020\372\310\274\204+\317;\340\351\220\274i\366:\275\261\036\267=D\341\025\274^YE\274\3271\201\275\271z=\274\362\350D\275\340\032\343<\253\252\231=\357\021\006\275\203\345\221\274\322\032\271\274\355;#\275\007\021\253=2~\347\274x\314\223\274\021\031\360\274\\y\332\2750\025\017\276|\277\021<FCq\274\\\323\006\276\361\262\002<)\271c=\027me\275\224\322\302\273\227*\253\274\304\014\266\275lX{\275\324\276\242=h\333\304=\2349H\275n\277t;\362(\317=\232\240{=\023\261\364=x\357\005\274\322\224\351=$\266\235\275\021T:<70\217;\037\337-\275\227t!<\266\303\214=\242\250`\275\371\244\355\275T\322\326\274\326_\350=\234\324G<b\216\262\2746:\002\275\3015\274=+\217d<\301Zp\275pD\020=\026\027\023<\366\3601=\377\356\n=\266U?=!\0223\274\233\266\335=p\222\003\275\352\035Z=\214b\300=#\260 =\177F\200<f\211\326\275\213\264Q<\023,\201=e\325\212=\327{\261\275\225\214\207:\351\223\t<\267\247\221=G\237\263<\371\2216=\n\034\305<$%\275<p\262\371;\3775\355<\223\347\342<\007u{<\256\253)>\023\211\306=\240\207\270\275\'-I\275\004\364\377\275\342\215\303\272\010\007H=~Kq\274\010\030\275\275\023\221~;p\370\210;\375\371!\275=\027\016\275\262:\310<\332,\330\2722\331K=\2504\354\274\331d\303\274\276\0340=\247S\263;\230t\334<\373\307w\274\035]\306\273\374{)\275\346k\010\275t\332\032\275(2G\273\220R\242=\247\222y\275k\'\300\274\300\364\220=\314\376\217=)q\306\275\n\237\373=\177\372^\275>\372\324\274ve\222\275\220n\245\274{\210\002\275\222\315\351\273uh\230\2745\203\321\275\\\256\'\276\356\023\270<8\343\231=v,\305=\366\234\354<i\324\247\274\350\0052\275uI\322\274(\0171\275\364\026\014\276\3131\330<8\276\251\273\363\376\210=\346m\230\275\242n\032\275\324=\206\275\022k\232<\223G\334=?\276\337\275V\304Y=E@`=\212p\024\275\242\304\252\275\363\374h=\263\352=<%\204\324<\253\350\266<3\367\307=\352\322a=\n\376|\272Z\300\002\275\223\320Q=5\027\246\274\020\312\r\275\322\242\211\275\254\034Q=\316\211\206\275vl\213=S\364$=\033\226f\274\242\333\237\275\216\270\036=\314\367\277=\312\207\262=\255~4=`&\001\275\335/\010\275=\231\233<\310\220\t>\356\277\342=Bb\270<r\312@\275\351q\255=\356\330\002\276\257\230\305=\010\375*\274F<\014\275+9\200\275\315\265\335\275\303)\253:e\314\201=\332\0206;])\200\275\345[\014=\177ot\274\362\034\251\275\200b\025=4\373M<\376\212\302\275_Z\254\272\022\257t\275\003\366W=\240\003\264\272\253\213\005\275\207/(\274\032\230O\275-\277\327<\320S\207=v\\\215=\243\370~\275$W\360:+\370=\275\026\326\240=!t\005>\274\213\327\274)\354\371\273b\332\323\275\343\3510<\"\277\322=kR.\274\034|\017=\370\006\006=\t\334y=~\322*>D6\035=\026\314[\275\312\t\014\274\312\321b=\010\301\247<\022D\021\274{\317\314=y\270\271=8\271\200\274\346\241\216;\247\264\360<\026U\336=\276\266\024\275d\273\005=D\336\264<\206\244\316\274\231\366\371\275\261\212\026=\325P\'<\322,.\275\300\312\203=\366\234\204\275\010v\030<\216N\352<\353\236\300\274A\031x=\270.\253=E\355\220\2752\'\204=\365\000\217\275?\0218\275+0\343=f\341\005\276\233z\006\275\253a=\275m9q\275\206G\377\274\220\376b\275\350h\263\275\252E\366=\251\210\005\274b[L=O\\4=v\201\273=\037\350?<ut\213\274D\320\023=t\226\305\275B\351\336=R\373\245\274\315\'\305\275r\236\211\275-%\364\274\355\355\231\274\351\316}\275\375;\005=\372r\315\275\335\317\240\274\324\234\005>W\327\263=!r\234\275\251\324i=\013\247\266\274\215\344\\\275\026\247\n=BU&\275\2416\023=*\243\217\275\226`\214\275\236\341\026=\205-\234\273\227];\273}\206\271\275\210\021\031\275{Uw=\370Q&=\203\033\307\271\231\321!=^\257@\275g\377\257<\200Y{<\345b\005>K\355\251\275\202\267>\275l\217\035\275\226\242\205=h\367\253\274\216\201A<\215\375\002\275\021\245K\273:<\261;_\025t=\3357K=n\323\016=\302i\351\272\236D$\275\347j;=\216Z\357;\2539\330=\262\365q\275\364\366L\275\204\'\223\274\033\021s;>E\r>`\377\007=?\353z<\312\025]=\300\326\005><y\271\275\312G\335\275?e\276\275\361\372\005\274\006Mn=\257\035\t<+\324Q\274\202\014!\275\226k\270<\330\033H=\352\372l\275\231\351\234\275*)\r<\025\202\010=\023\376\017\275g&\224\274O\321\213\275f\277\025<\201o\316\275OW\246=\007\335m=D\272f\274z\t\026\276\237\003%\274\020\3572\275\333I\214<\242\016\007=\032\262\200=\311\242\267\275\361D\253\2758\3424\275\345\240\226\272\"6\363:\000\251\017=\367\002\201=\033\311\335<\327\361H\275\227/\034>\212\363\246\275$c\260\275\276\"&\2751>v=xt\202\275\332%7\274s\310\203<m;\315=Pl\330<\243\021\274<\226\372\201=a\330P\2745\236d=\377n\241=\334\3209\2747m\214\274\332h\226<\333d\226<\270\014\n=z\320\342\275\252\263Y=|\370\305<\213z\177\275\036@&\275\333 l\274g\371.\275sf\327\275\251i5\276\224%\r\276\335\230\n>\270\356\306\275\246Sl=@\332\243\274>\377\311\275\221#\263<GUQ=\315\372\037=Q\177\371\274\314|\305<\272\016\304<\221\360\377<\213k,;\364\313\270\275lT\331\273\272\023y<K$s\275_\221b=\326\364\230<!1\006=\001\214n\275\254\235\205;\251\223\334\274\302.\204\275\374te<\316\334\000=\232\2644\275R\327\346\275\t\0047\274\371G~<\273\024,\274\017\n\014\276+w\200<\370{\035=\203\035\275=\340\014\341=C!<=\226X\322\274I\230\203\275\317\254\225\275\003e\305<\335\000r\275\361\314\306\274\223:K=\021n\204<\003Zq=t2\305=m\024\205<c>\233\275Yx\346\274\276\025\311\275\256\335\265<\263M\003\275w\372<\275\335\364\034\276K\032\021\275\031\024\217\275\037\324\250\274\274\235\034\275\352\253C=\361F\272=b\370\227\275Q7\004\275\0063\234:iX\251=\246-\331\275\326\266\010=\017\262\204=9\351\215=%\365m=\211\361^\272\363\t\320=y\'8=:\240h\275\235\246X=^\214\333=\016\347\261=\003\032\322\2716S\325<2-\021\275\033\262\257\273\212\315\010\275_\275\371<WM\274=\250\350\027=\2445\246=\326\032\311\274`v\013:\233\361\316<\201\364\257\273\331|\013\276&z\023\275\224\006\003;\000\313\2029\301\303\254=\301(\036=\312\235\007\275!+O\273j)\023\274\364\307\351\275\212\224\213\275\033wa\275\\\230[=\232\334\205<\342W\021\276\\Tf\275XC\023<\323a\026=\032\351\351\275\342\362\373\275\271\300\010=g\303\361\275I\024\211\274\306\301$=\2159\217=\260o\034\275+\302\210=gr\200\275\326\336\267\274\334\003\302<\354J\017\276w\263\020>\374s\315\274e\255\200\275\000\236W\274\314R\314=\305\257?\275q\363\013=\360\t\323\274\315\242\243\275\314w\223=\030\254);\352.\032\275\245\377\254<\334$\240=\370>d\275]\370z=/\312\253=\214#\"\275\315S\323=6`-\2751\355\265=\2648\254\275\264\316\261=\241J\325;S\010\014\275\346\341b<\005. =\264:\316\274_\004\302\274\271\241\373\274d\2627=\206\217[=\2457\212:b%y\2753p\210=\243\344Z=n\223\034\275\241\244S<i\260O\275\365\2328\275,\203\\\275\014\252\005>J\260?=Z\300$\274\207\014\010\275\001\211\244\275E\336\236\275}\002\005=\017\\\322<w\'\032=\241Da\275\331\337\363<\253\204\316=SOy\275\211\017\252:%\001\022=\351\332\230\274\303$\002=qK\240\273\272{B<~d.\274\336&*\275\224\274\033<\200\260b<\340%\231<^\340\245\275r\320%\276\246\353\177\275\357\025\202=\333\016\224=\364\310\325=\305\253W\275J\010\330<\rYa\275\032\235~:\344\263\273<\230\375==U\036\361\2742\324\202=h\033\014<\3525\347\274\354\332\200=\341\031\332=\037\321\037>\310\\*\275\255d\323<\371B\227;\024\013\353\274\247\362\273\274\210\022\253<\324\341#=!\026\217\275\276\316\276<\t@\302=\312`\367<\235\007\226\275\210\311I=\025\274\243\271\177\352\213=\361\376\002>l\266\273:\307_\333\273\001\000\266=Z\343\340;\021}\213=j\350\210=i\331\036\274U\242\220\274\007\260\245\274c\000\265;o\325\336=,J\275\2741{\225<\261\266\342=xR\244<\371\332$=\262\276\211\275\321\265\236;\310\203\236\275\212\024\303=#/v=\267\204\241=\334\362q=\250\371\370=\316\271\002>\000c\230=\265\031z\275\275G\243\275\212\255f\274\023b\334\272\336\222>=5?\251=Ex\003\275\371\272\333\275d]\211\275\360\346\234\275@\211b\2758\005Y\275\261aC<\366\220\214\274 \017\332\273\276\376\240\275\226Mv\275e\031\256\274\355\203\021=\352=w\275v\326\327\274\033\223B=\024\375\225\275\267\276\210\275\314\005\"=\322\215\203=]\332\205\275w\240>\275\327\334\320\275RB,=\355\255\365\274\330\000\010\275\272\304Z<\375# \274\351\r\003\275Kq\227\274s\r\351<5m\233=\313v\234\275\335b`\275\376\256Q=\364\221\244=\326\002\006=\025k\264<\372\222\t>\210\230\252=\236\232\336;\324\255\247\275O\313\245=Tr\321<2\246\373\275\337\335\n\276_\243\264<\004\340\034\274\307\347\240\275\201\366\225\275:\360\235=\007\030\253\275\377\037\352<\2609\207\275\203P*\272\314=\007\273\200\325\271\274\323*\005\274x+\356=XN\204<\005]\207\275\362\241;=\266\013D=e\312\327<\036\177\243<\254h\202=\347\262\r==A\205=\351\224\252=b\336\031\276\204\376\315\273\034T\021\275m\010\222=P1\353<\3507M=U\362\302=%\217\312\275\\\r\250<\243]Y=\035Z!\275.\026\377=\316;%<\006\273\023\275~\217\374<\200\007\014=\320\325m\274\'\231\243\275\371\326\203\2745!\313\275\030\033\317=$\244g\275\026\370$\272\010~\236<\037\221\'\274\350p\353<\364;\204<Pd_\275\271\2255=S\003\200>\225Q\345\274\177t[=\217\215\t\275\356\243e\2759z\234\2750)Q=\220\034m<r3\"\275\033\203\246=\245\220c=\003\227b=\363\370q=\370\333\313<\016\347\177;\214\224e=\242E\\=\007L\335<\323b\030>q\n:\271\"?\n\274\251M\234\273\014%\225=\031m6\273gc\206;nQ\233<i\330Q=rj&\275#\242\270\275BK\214<2\016A\274\232G\'\275\340\205}\275O\317\010\274\204\022T=\272P\302\275\310\273\323=\247\034\035\2752\244@\275;\355B\275\233\207\200\274\022\021\317\274&a\355\275\t\330\207=\032\220i\275\277eR=x\027\364;\366)\020\276\234\370S=\226<v<\347\"_\2745b\010>\240\215\200=\205t5=\223q\"\275l\343<\275\363\203\215=\300sf<\345\367\331\274\323\252\213\274\334\017r\274c?\235<\261\261\200<\274Y\270=\227\336\230=\256\353V\275\205,\030=II\226\273\266(\205=\262J,\275A@\324\274\227\326\270=\024\200!=\003\017}\274\254Op<E-1=I3\330\275\020?\253=\346\035\374<.9F=\244\371j\274\351\317\026\274v7\025>$k\242=\'t\034=\335_\221\274g\377\260<\240\006\315\274\301S\300\274\025\311\342\275B\345\326\275R\271\255<BP\302=\365\000\201\274W\246$=\311a\006>|\247\004>\230|L\273\027\236\003>r\\\217=\326\377z\275\312}\260\275\250\251\222\275\r\275\350\274\366?\236\275\315\241p\274\002\352\215\275\373K\362\275T\272\021;\r9\030;7\336\344\274\231\357\332<\316\035\257=%\271\255=\356?\005=De\274=\006\303P\276o7,\274\312\022s<\272\345\230<\345Ok\274\0317\367=\207U:\274\317\203W=\023\214\002=\311\245\214=b.\210=\002\330\\\274\206(\255\275O\005\030=t\313\310<s\365\027\274\273\020\246\275\351l8=\032\3166\272\347\273\226\275\330\272\302=\335<\310\275\206m`<\327\232D;n\350\\;)\3320=\233\027\017=z\377\312\275a\311L\273\216L}=\025\316\240<\375\264\364<\276I\033>h\337<=\231\360\007\275n\264\200=\3048%\275\330\361\020>to\362=,\\\227=\216\261\225\275$8\323<\245\323\263=!Mn=\005\302}\275TB\233=\210+6\275\300hL\273\037\031\226\274h\034\241\274-\241\n>\022\377\n\273\2454\243\275\312\203\033\275=\342\344<\022\375\210\275g\252\351<M\374\343=\255\262Z=\301yk;\373\374\247=\037-\327=\365\372\311=\317\232\260\274\004\303!\274\002A6\274Z\030\027\275\271\354\245\275\266T=\275\356\277\007>\364\244\334<er\266\275\r\0019\275\002\276\316\273D\374\206=\374\213\202=\375\360I=\264\305\240\274\311\010\035\275\016`\377:\tP\341\275A\356\215<\033\376u<\257\031/\275D\032\214\275\350\236\270\273F\266\027\276\207\341u\275\274\333q<\367U\204\274v\232\226\275l\355\323;x\n\002=N\2401\275\302\010;=\237\')=\375q\177=\360E\017\274\301\347\377:S \251=\000\235\215\274\257y\277=<\205\272<\205\024\003>\324\365\255\275\301\344\003\275m\203\221\275\255\333\224<$V\016=\346\263\020<nP\322\272i&\005=`x\314\275\211\215\213\275\324\317L=\035\367)\274\223\253\352\274\314\242\'\275?\364~\275\025\300\307;\362\267w=ao\336<\017\376\223\275B\2505\272$\276#=/\356\265\275\343w\225=S\030_\275\001\037\215=\377|F\274y\274\207\2748K\311\275L\310\250\275K\364Y\275k\nk=\004\267F=\014n\200\275J\324\000<#\220m=\360\345\237\275.W~\275\201k\263=\016\325:\2752\340!\275J\230l<\334\025\007\274(:\262;6n\002=u\203\251<\331\253\373<\361#8=\226\223\243\275\331$\353<b$\204\275\2723\264\273\031\351V=\230\270\373\274\205\016!\274\277<\272=\265\204l=7T\2428d\037\244\275\031\026,\275M\263\240<\3363\210\274\214\372\231\275\210NQ=z\366\006>\355)\016=\371\002\211<\326#+=v\336\270\274&&K\275v\330\254\274\r\016\203<$&\014=\006\033&\275\312_v\275\007 *\275\367f(\2752\216r;?\343\252\2748<\017\276(\225\215=\021\206)\270\374_r\275\017\006g=d_\277=Q\226\277=\221d<\275\303\224}\273\307\nm\275\341~\371=\014\331\372\275*\222\213\275\346\225\245\274\365YH\275\266\023\334\273`45\273\226@\337<c\266\224<\247\342j=\347y\265;7\205&<daZ\275\234\203\230=\370\363C\275m_\t\275\3048\221\275\023\325\254\274\211>\237<Z\351\274<\035\323\273<\030\344V\275\021\212\030\274E-\250;\224\201\200\275\225\327a\275\357\223\200\275\201\002\333\274\027O\020<\014lV<\331\334\227=\000\021A=\004r\010\276\267\223\022=\024\256K\275\336W<<\315\220\323\274\216\312\000=9\005\n\275/\322F=w\331\251\274\260\350\221\275W\354v\275\'\264C;\223\340\007\276n\360\231\275\360\377\367<\235\r>;<#\202<\323\306M<I\330\211<h\2046\275\334\341\345=\025\372\210;=\205\206<I\032\311\275\216\t\213\275\360\232H\275\204\377\274<\006~^=\270\224\023<+h\233=\335\351Y\273\202\r\002\275\022\222\200=\342\351c\275z\225\233;\263y\345<0E\340<!\334V=\333\362c<\020\366r=\367|\236\275\241\263\004\274\327\037t<\363I\014=\333\247\250=\303\322\t\2767\251k:\342\374\034\274_7^\275\314\3107\273\233\031\214\275\230\366M=\375=\"=\356\221\230\275\300\3122<\351.\244\274\255\207\207\275m\023\216\275nq\010\275\005\227\302\275\235\260=\275o\005\274=\364\350\206\274\375t\323=\026\351\361\275l$>=e\365\014\272\227F :\334S\271\275\327\343 \275\223k\031\275\t\340\006\274\276I\251<\307\332\212=\251\213\025\274Xv\210\274\312&\037=\rpD\275\266z\231\275\261\344\311<\305\021\325\275\334\001{=\372\322G=~\3425\275x7\362=\214\211E\275*\225\211\275\034\017K=\356X\233\275F\244\315\275\n\222\342\275\307\240\202\275>\034\362\275\010\365\214=x\0374=\261\242\367\274\243\257r\275u\273d\274\264\373\265=\226)\214\274=u\220=\\m\214=\230$E=\272\344\"<dN\344<\201|\205\275\224\250!=\222\231\301\275\215g\013\275;V\225\275e\266l\275\367\343\252=\327!\245\274\316\230\266\274\202\301\260\275\351.\245=\245\374\235\274\234\231\314\274\256\215\024\274\356!\267=\344\222\312<B\342w\274\364wo=\2653\251\272\351C\263=o\375\356\274\255\274\217\275\217l\n\275\177\025\263\275\326\232:\275\0067\351=\307&\247=D\275\346;\007\027\241=?!\363=\010>B\275l\236\252\275)\314\376\274\026\276\264={\243\303\2757\357#\275\327\233\006=\nK\232=\037\t\020=\273\311\027=\3310\013>\242q{=\005l\013\275\220\270\306\274\354\nS\274D\356Z<\354\222t=[ \017=\\=\035=\340\262\251=\257*\375<\327\020w=Y5\343\275\340\206\020=\307\277z\275\026\217\022=\351\357\006\276\356\256l\275\032G\332\275\361\027L\274\014\3469;\014)\304=\007u\352\273[\207~\275\374gN=\031d\035>x\240\244=\260\nk=\247\342\277=\323)\324\273-\233\225=\301\244p\2742\364&\275LBH=\263\340\024>Z\2039>@\302&<ELS\275l4J=\327kO\2750\260\277\275\3575\010\275\014\3711\273\322cM<\374\037\215\275i\276\212=4\265\202<_\245Z\274[\350/\275\364\235X\274\214z\231;\256\357\270<L\031\014\275\336\202\250\275\241\020\224=\354\364\017\275\336XI\275NQ\313\274\211\276\246=\273\001\261\2757\232q\275#\243\226\274(\377\216\275R-F\275\203\244\312<sy\230=\"p\250;~\304\021>\345\340\206\275\207\256g\275\245A\017\274\342\323!>O\010\233=HE\224\275fr\000\275Yq\201\275\244\215\354<\344\373\205=\377\263\032>;\375\244=\230Y\235\275\200\227\337<\244\370(\275\240\350\300=r:\"\275 A\220\275\277\254$\275\352s\254\273{\302\007\274BZ\017\276\376@\212\2752\010\200=\364\371c=\205\357Z\275\3532\222\275\353\323\203=\307\212\367=C\310\307=Rxj\275\377\214\016\275\177\236\247\275=r\327=\\\234\223=\200\261q\2750\213\312\274\214\325\330=\274\210\253\275e(R\275\220\274\366\274tF\270\274\306\025r\275\247m\263=\021zx;\320\275&\275\240\355\327\273\204\246\223=\221 {\275\343\250\251\274!G\030=C\211\206=\300^\325<a\372\251\275!\275\261\275)\031\013\274\025O0<\270Q\252\275\224\325Q=hZ\022\275\215e\235\275J\256\020\274\362\263}\2753%\210<\032\003\220<\233\240\270\275\253]q\275\014[%\274a\240\002>\246:C\273p\002\237=\2605O\275\rP\207\274\215\264!=\372\327\251=\360\312{<p\014\243<\3662\355<\226Zd<\000\225\003>K\353\345\274\3027N<0\344\315\275\023\370\206;\023y\262\2744\n7\274\336\3065>\206K\342\275\334\200*=\357\"c<\256r\230;\026\030\333<\275\0030\275\0345j\275\005X\220\275\233B\346;\027\267^=\002[\205;\203,\255=\364\200\276\275\266Q:\2765\312\246<\3375L<\251(}\274*V\007>\315\325\030<%\321\300\274\2517\323\275sb\"=\371\317\311\2751\030\346\274\237\333&=e\226\336=,\350\226\275\233\367K\275\224\020\246=\365V\216=k%\210<ar\246=C\207\257\274Z\276\227=\010\3263:?c^=6\242\237\275\271Lx\275\220q\217<\020\267,>N\357\016=\232T\021<\252\362\027=\374>\217==\353\222\272\007\311\240=P\362\261\275I\032\240;B\370{=0\345\317\275\022\354\271=\215\010z=\2403\217\275h\270\317<_\275\n>\201l\244\275\366\334T=v^\231=\331\265\033<Q\002\234\275$K\002=D\226U=%yQ=f\033\266;\311\365\216\275\201\274B\275u\204\343\275\320\343\241=$;T\275}\350&>\010\t\022\275C`\312\275\366J\007=\200\271\005\275\243\336\325\273\251~\252<\3356M=\030\330\253;t\216\013\275,\340\035<\316\327\335<\033\235q\275\021\243\315=\346\365u<\351\353\242<\207\325\216=\324fA=b,1=-V\034\275\032\272\001\276\262e!\276\006\006%\2745\371\235=\245R\202\274\374\362 <\351Y\252=\004\345e\274J\311\211\275\307b(<\225\3761=\327\266\304\272x\214\006\275\330\3569\275\272\207\363=\263\207\234\275K\017\253<\270F\007\275`\250n\275y\215\230\275\247\207\205\275\033\362\262<w\313U=\225\251\240=\025\3510\274Wg\276;\361\346\221<\344\374\004\275l\030\231\2757&\245\274Q\320\233<\035\014\343\274\202\021\014=\000\304?=\372\347\007\272Ra<=\007\277h\275\231\314\024\275\304qg\275\302\303(\273\257\354\022\276WCi=\307C\371<\365S6=\010\250\254<\314\'\250\273fO\231<X8O:\035\033o\274\232T\355\275\374\343\2639?\202\251\274\002\345h=\272\315d=3\346\230<fb\'=\260\266@=\317`6=\331\307\275\274\204\273\325\275\007o\017\275\343\223\375\272\335T@\274 \332\242<\212\022\311<\356+\205<f8-<\347\267E\274\253\025\325\274\354/G\274GCG>>{\227\275\251C*\275Xr\005\275#\375M=p#\344\275\004\222%\275\342\247w\274\320F\002\275mN\215=\246s~<\257\027c<\277\361/=\201\262\313\274\2566\232=\342\213r\275hl\324<?\313Z=r\365\213\275l#r\275>.3=M\n\005\275#gS=\321\035\020\274\272\222l\275\375\3146<\027\243R=\252\001\336<\t\365\376;\345&\376\273\311\345\262=\276`\273\275ct\231\275?X\351\274\273\332)=\227K\020\273F\264w\273\313\021\023\275\334-w;\233f\360\274D\362\034;\321\346\333\275\362B\354=::\030\275\006\343\315;\004\3761=\371z\255=\\p\344=\275d\317\272\001k\010\276\306I\247\275\301\365\203\275\270\033\376\274C\026\225=n-Z\275\354t\325\275@U\313<t\262\351\274\337\020\201\275\203y\266\275[~\230<\200\025\'\275\275/\214\275T\233\016<w8\001=V\303?;QK\226\274\200Ri=uea\275\006\031\221\274\2031\335\275\273l\332;\364\337\035\275\370\r\265=g\2463\275\274\267\361=\353>\276=\347x\002\276\355RS=\211\027\n=\326m\271=\220>\236\273\026\340\'<k\262\261\275\2061B\275\316NL\274U\203\005\276,5\004>(\333\374\274a\300\241<f\377\211\275\300\037\373\275Y7\216;(\2016=\200\0246<\013M\247<\322#\236\274\277u\314\275\245\251\311\275\0373\350=\260\006 <R\334a\275;\210z\275\272\373\321<\261hH\275\210\027\336\275\301\337\216\275Y9c<bC\235<S\224\222\274\335\360X\274\305\217\035\275}4^\273t\376\221\275\033\335G=_\213&\275\340\263z\274\362\346\210\274w\201\204=\2328\331=\201\331Q\275\217\223\361<6\376k;\245\325P\275\325\225\232=OU[=\0230\021=\\\307\374=\367\006\204\274\357\2477\274\274\032J=~c\244<A ,\275\036q*\275@\365\272\274\244\3440=\303\237H\27545\364\273\244\267\207\275`\350v<\335\262\343\274\245\262\034\270\006\376\324\275\"\021D\275\005\017r\274\017\307\257;\226\366\'=\335\215\n\274\257n\354<\360\325~=Q\370\000>\t?\352;\311\224e\275/\027\212\275U\014x\275]\277\202=\315\334\234\275\300\242\202=\252\376\240<\353\3225=\203\237\224\275e\361h\275\266\332\266=d\327\212<\034C\361\275\342\314\205\274m\356\177=n\214\225\274\355\005\265=\237_\314\274\225\203\247<\313\032\354=\252\347\253\2756\'\200\275\314^`=\277L\030=\265\262f\275\272^\225\274q\371\310;\"\302\033<\255c\255=\202\245\206=\236\366\'\275\245\201\026=_\253\252\273\215\350B\273%\357\315\275\2717\355<\247\241\215=\342\301\023\275\245-i\275\2702d<T\023\202=3Q\326<\344\224\024<G!D>\260\257\215=y\254\222<\307%_=\226\225i=\r\001\235\274\366\227\224\275\020.\366<\207\305P=y\225\323\272 P\206\274]O\201\275\317B\250\275\000\2066\275\367\032\342\275[ \227\275p\206n=\300\211@=\312\314\324\275\317\031\013>\273\353\225\275G\272\327\273\211\230\355\271\t}-<\027W\224\2754\336B\275%\010\023\276\377\3461=\002\255\220=\374]n;&S\252\275\216|2=\376-O\275}ef\275S\316\207\275\3752\257<+\232\350\274)\010\304=\250\255<\275G\203\267=y\310\014\275\257\004\357=\005s[;\215\344\205<\302)\224\275\320\225:\274\230\361\343\275\330\333\223=\261*\003\275\333\256\273\274\365\336\263<Z-\306\273\307\357\202\274\342i\023=n8\013\274\303\\n\275\2625\323<\223\314-=.]\240\274,\246E\275\343+\217\275w\366\342=\3029\005>\004\300Z\274\377\236\333\275u\307==bi\266=\005\327\316\274\334?1\275\346-\366\274\251\005\006\275\007j\262\275D\301l=\036@\376\2756\372\247<\301\234I\275ON\273\275D\317\243=\231\201\256=\n01=\027!%<\325\177\362\275%3\\<\2133/=/\223\001=\366\213&=\034\230\221\2752\215F\275u\362\001\275>z6=q\353);\372\026r\273\233\377\245=\346\255\343<r\344\201;K\007&\274\014!\242;\215\273\013=\265K.=\001P\033\275\005QV=\271n\246\274\361\206\277\275\235\233\035>Wh\320<\352\006\222\274\225\341\321\274\024O\177\275\241\316\341\274\027\217\337;c\213S\275\200\3376=\'m\311<\236\307.\276\235\245C\275\227\225\230\274\361\014t\274%\231\251<\005H\t=\354H,\276\251Ip\275L,\267\274\264d\277\274\220\312\373\274\032\225\331;<\027\323\274\316\215\312<\242o\016\271\233\360D\274\224a!<\261\224\231=\"h\275\274}\342!<6;f\275f\342\023\275Z80\274\014\241\003\275,\004\222\275\342\254i\275\3262\330<\3137\331\275J.\353;\020\344\216\274~\021\261=\271\005\262=\256\331[=vd^=\233g\223<y\245/=\325\312\317\274\310\017\212=\3462\270\273x^/<\270\362\264\274R\311\273\275h\236\323<\372\207\"<^\371\325<Ah\303\2755\277\327<\241\216\224=\251\316\370\271\352\330\261\274\213l\205;f\316\241<\010\304|\275\021\273\240=K?\021<\346\021\235\274\355 \3417\342)|=BS\331\274\350\013\316<V\365\220=N\005i\274\355\020J<\007\267\035\274\306) \274\357\275\027\275\364\000\332;\0360\201=\350\326 \275Q\300l\275\202\243\261\274\316E\244=\310D\223\275\375\336r<|\220U>\3441T=\240\314\007\275P\204\257<p^x<\270\263|\274\257m\304:*\262\246\274\002t\204\272n\033#<\2737\347\275F\016\\;|\327\031=]\305\215<\342\035`\275p!C=\303_\217\274?\276\025\275\315\t7\274\265\3630\275\n\304\255\274O\031\250<\204f\211<\335\341\270\273\232\255k\275\240\256\035<\371@\021\276E{\340\274JLS\275\201\273\246\275\014\231%>gNx\275w\264W=\330\\\365<\211_j=\002v\337\275u\007\342\274A\330\221=\215\213\352\274\246\216B>\325m\253\275\027R\233;Nw\361=\005\366\343\273\237\250\026\276\235L\243=4\254\324<R\356\277=r\254:=!\031\333=\256\014\217<\315V#\275\263F\277=%\000\271\274\264\302\007\276\033g\200=\270\214\324\275\341?\314\274\372\345:\275u\010\022\275\204\303\247<P\212\345\275Ef\205=\020\342\316=\360Y\021\274\276\270\241\274&\254f=9s\'\274\017\344\014\275\"p==\274T\263\275\331i\370\275\202\366\234=\361\267\212<`Ch=\337\203\214=\341:\r\276\311}\375=\360S\374\274\301~\007>\017`\333\273\277\374\006\2765W\274;L\244\377=\316Zm\275\034\346\204<2\373\312=\303\2350\275R\332\260=\370\223\024=\326\360\363;\324\254\200=GW\034=\335\364\220;\234\266\216=\341\250\222=\305\334,=\264\321\324\275v\327t=X\321#\274\021\246\240\275C\014\213<\270\'\313\275\316 \031\275K\250r=\310\247-\273*\'\'\275}\247(=f\310z\275\372 k\274\227\311\r\276\357\265\024\274\302\360}\273u\233T;\206\232\267<7\310\300\275E\352\311\275B\331P\275\272\3750\275R\'4\275Z\242\006\276\250?\010\2758q\002=\035\277\212=A\304\270<\206\274\004\275\311\366\347\274Y\315\326:\231\036\203\274Z\212#\274\377\331\255\275\263\241;\275\257\203R=\257>\230\2743%\206\274\374\206\010\275?7*<*\310\240=\322\014\250\274q\374\223\274\342\307\023\276$\010N\275\202:@=\361|h=h#\221\275\335\r\274\274\244~3=f4\366<\360c\242\275\301\244x=\334\362|=\327\320e<\303\214\035\275\341\206\223\275\256\351?=\330\223 >%\341g\275\325\371\312\274\207\247\266\275J\265\207<\177\337\304\274\204}\313=4\206\253\274\225\225\004\275h\021\016\276\360_\007\276=2\330\275\240\001\236\275\n\357=\276w\306\205\274b5\335:\022\032\317=r)!\273\350Pt<\317u$>3\205\211\275\252\223\371<\002\207d=\316H\006=\333\024\202< \330\357\275q\213\336\274\022k =&\235Q<\250\253\212<\357\371\024\276\035\234\334<H\000\231=c\333\035\275\261!\240\275\013\020\230=\305,\025\275\305\260\213\272\375*m=z\3049\275\340\213\017\274\020\262\240\274(HR\275\351\214\346\275N\236L\2758W\201=lt\303;\300\010>=u\315\303=\275J\312=:\017\031\275\'\376v=).(\275Av\006\274Z\001\3178\017\345;\275WC\315\274\343\215\237=y\031s\275\304\212\366\274\371@\257=\253\301\333\274\373n\376\274\020I\202\275\000\365\223\274\236\230\203>\244)\251\275\322\252\235\275!c\237\272\220\210f\274\010eS=\027.\004\275\253L\213\275\031\300\372;\303/r=\367@[\275\360\213\346\273\n\340\356</$\236\274\034_\324=3+\003;\006\345\242<\363 \364<\364`z=QS\241\275\234\014>\275\013\261\312=&\335\005\275\376\267\317<IS\322\274\3731\307;\013\303\226\275a\006\372<@U\313=\357\304\226=7]\226\275\262\003M\273\355e$\275\253y\010\275\021\316;=r\177\300=!\340\237=\357Wf={\225\371\274A\333\226\274\334\212~=\306\272;\275\351N\303\275`b,=o\252k<\247\250\202=f\002\217=~\307\242=\255\200\207\273!\362\337\274\0041+\275\000\022\215\275\237\017\376=o\004\036\274#\370Q=J\220?<\276$\276;w\237\251\275\024l\234\274F?H\275\301^\362\274\200\037\272\275c\314X=\311\330\305<\260\350.\275j\313\277\275\270S\216\274\311\214\241<\310\235\013=\236\212\314\274\213A\027\276!~s=B\034\020=\365y\201=\3077\000\276F\302\310\274\236\241\326\275%\335\034=\315R\233\275\373Mp\275G\323\037=&O\203:\034\241\212=/l_=C\004\251=\270\0165;\217h\245=)j0\275\261\250\315\275i\"\273=@\037:<\262\370\004;@\374\232=#\210\344\274\344\037\367\273\'H\222=\365\330<=\307J1\275D\262\036<* Y\275\341\355\343\274l\343m=\003\302\262\270Ec\312\274\314\234\365\274\202;\023\275/\377\305\274gc\310=\377\211\241\27585\347<\032\0305\275\342F\251\274~Z&\273\366\250\217<+\342+<{\366\017<\021\320\t=\004\031\013\275\313\212\226=t\274\357\274\341\3168=\254y;;\250+\001=\321P\320\275\316\376\233\275\351\035\234=\304K>\274\034\016)<<\036\002=\264\375I\275{\214\"\275L\333\210\275\360\202\007;\001\n\232\275:qf\275aK\217\275\013\n\002\276\371r\360\274}\227\003\276\227\322\341\274~\272\201\273\211\331N\275kj\206=v\254\321\274\017\355w<]\265\306\274\332At\274\235\235\000=b]F=\002p\356\275\245\305{\275\206\323$=\333\242\354\275\310\001\003\274E%\217<\236\033\306<\267B\276\275\322M9\275\026yX8\353\022\355\2741G\217=\316\341\332\274\212\331\341<;\366\271<\314:\020\276\331\032\347<S\272v<\234\361k\275\213\244\\\275\035b\362=\177`\347\274(\364u<\356\264\231\275\\\271!=1\035\n>J\000J=\377\245|=T\234\223\273\034\227\255=\337A*<\"h<=/\373\022=OA\205=`\317\251\275\244\310m\275Z]\272;\371\367\313<\310\002\243\275\314\005c\275\315\334S\273&\306\203=\035tw=K\304{\274\215c\230\274[5H\275 \024\373\274\320\3559\275g\021\t>\33063\276=\250)=\343\375\013\276&\007i\275I\2133\274\374[\227\274\257\272r\275tM\302\2755\272n=y\3473<\332\227\007<\245^\036\275\264\307\016=\360\357\264\275\241\364\257\275D^\240<:k_<\307\270\300;{\251;=#\331\021>*\032\352=A\377O=\232\347\235<O\267\205\275\024\364\215<\353_\021<\357U\217\275\216\364<<O\374I\275g\254\303\275\020M\314=\262\017\322=\332\353N\275\364,p\274m\321\255=\010 9\275\257L\216=\305m\225\274\346>\277=\275\362\031=7J\321\275\356\001\235\274\234\266\225=$*\230=\356\232-=\316p\001\275\244\357 =\000\235\240\274\322`\302<\253\033\362;\304`\245\275`\373h=V\337\031\276sy\262\274!\353\200\274M\275\364=\320\240\200\275\224+o\275fi\226=z\273\301\275\232\270\211=\345s\367=\375J\202\274\265\320\032\275\032\2047=\231\374\344;\2527\006=]\004\224\273q\020\265=f\007\270\273^\311\240\274\364/`<\301\277\354\275\237J.:\215S\300\273\304\016\023\275\000\364:\274\306\311\244;\365\227\020=L\"\234\275\366~D=\351\017\364<j\261P\275\\U\330\275\241+(:\357\244\\\275\021\002X;\257\210\216\274\\KM=\330)\311=\344c\222\275\222\022\263\275T\313\277\274\312\302\r>\220\341\224=F\214\2039\025\201\027\274\014]$:]\324_=\302_\270=\324 \010=\007\264m=\344\312F=\375\260\310=W\262\215=\2164\t\275\021\345\013=\256,\n\275\313\356\000=\253v?=\373?\254\275\343\262\200\275~\310\267<\246!\020\275\306x\000\275@\225\202=6\343\301\274c}?>&\336\267\274#\277\314\272\216\254t\275\202\231O\275n\243g\275\325\372\207=\276\177\020=\372:N\275\263\0354\276g\331=\275r M<\265\334\321<\373\235\307=\325\2058<\300\230\225=\255\356\233\275{|\313=\256\372\245\275\274a\260=i\357=\275\357\261\016\273\2715\202\2750\251z=57\370\2740\234)=\335\212|\274Y\036,\272\004\303\377\274\265@\033<\276\344\037\275\035\005\"\275\221\336\007\275$?\272<%`\027=9w\375<.\231\024=\375s\262;\307\021\244\274\231kI<e*V\272D\212n=\014\300\235\275\271O\026\275O?\236=9\322\274\274\277\023\347;\376-@\275\262\020\204\271\256\310\240=X&\264\275\375\331>\275\341\2733\274\205\023\212=\245p\243\2755I\021\272\250\222\216\275\361\200Q\275bZn=h\340\255=&\034\326=\323\031\017=\356\333\342\275\341{\005>\3463J=r%\354<\2605%\274\345\023\326;#3P\275\207\234\006>W\260\326=\304\321\302<\227\014\265\275\217\237\335;\336\347`\274\265Q!=\364\303\221\275\270\300e\270\276\346\\=\252An\274}\021\263=1~O=\003\010\240;\254\313\010=\322\2121<|\366\023\273I\363\300\274(\220\256;\232v\327\274\200\256(=p\000\211;\342+\345;{\n\241\275\024\205^=\250\340\235=\337:\364\273\234\004g<\025ow<\2347\240=\027\204\317\274F\367\206\275v\363\022=\311t\365;\247\216\275\274\362\361T\274\345\345\267=\325`1=\010j=\275\227\3555=\255#\032>\311f\t\274\331\301u=\333u\254=\257\"\357<\027t\235\275\271I\265\275\212\257\237=\274\007\234\273\037\324U\276\304\235\352=\354\274\247=\272\340\251<K\356!\273\026U\232<r\242J\273\274\257+\275.^\253\274\355\273\260<w~\007<\007\265\271\274NeX\274L{F\275\323\351\221=\254\207\200;O\343V="
      }
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "LSTM_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/read"
  op: "Identity"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Square"
  op: "Square"
  input: "LSTM_1/recurrent_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_1/mul"
  input: "LSTM_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_1/add/x"
  input: "LSTM_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/concat"
  op: "ConcatV2"
  input: "LSTM_1/Const"
  input: "LSTM_1/Const_1"
  input: "LSTM_1/Const_2"
  input: "LSTM_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/bias/Assign"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "LSTM_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/bias/read"
  op: "Identity"
  input: "LSTM_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Square"
  op: "Square"
  input: "LSTM_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_2/mul"
  input: "LSTM_1/weight_regularizer_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_2/add/x"
  input: "LSTM_1/weight_regularizer_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/zeros_like"
  op: "ZerosLike"
  input: "LSTM_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Sum"
  op: "Sum"
  input: "LSTM_1/zeros_like"
  input: "LSTM_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LSTM_1/ExpandDims"
  op: "ExpandDims"
  input: "LSTM_1/Sum"
  input: "LSTM_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile_1"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose"
  op: "Transpose"
  input: "LSTM_1_input"
  input: "LSTM_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12"
  op: "StridedSlice"
  input: "LSTM_1/Shape"
  input: "LSTM_1/strided_slice_12/stack"
  input: "LSTM_1/strided_slice_12/stack_1"
  input: "LSTM_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13"
  op: "StridedSlice"
  input: "LSTM_1/transpose"
  input: "LSTM_1/strided_slice_13/stack"
  input: "LSTM_1/strided_slice_13/stack_1"
  input: "LSTM_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/MatMul"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/MatMul"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_1"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_2"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_3"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add"
  op: "Add"
  input: "LSTM_1/BiasAdd"
  input: "LSTM_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul"
  op: "Mul"
  input: "LSTM_1/mul/x"
  input: "LSTM_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_1"
  op: "Add"
  input: "LSTM_1/mul"
  input: "LSTM_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_1"
  input: "LSTM_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/clip_by_value/Minimum"
  input: "LSTM_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_2"
  op: "Add"
  input: "LSTM_1/BiasAdd_1"
  input: "LSTM_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_1"
  op: "Mul"
  input: "LSTM_1/mul_1/x"
  input: "LSTM_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_3"
  op: "Add"
  input: "LSTM_1/mul_1"
  input: "LSTM_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_3"
  input: "LSTM_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_1/Minimum"
  input: "LSTM_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_2"
  op: "Mul"
  input: "LSTM_1/clip_by_value_1"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_4"
  op: "Add"
  input: "LSTM_1/BiasAdd_2"
  input: "LSTM_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh"
  op: "Tanh"
  input: "LSTM_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_3"
  op: "Mul"
  input: "LSTM_1/clip_by_value"
  input: "LSTM_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_5"
  op: "Add"
  input: "LSTM_1/mul_2"
  input: "LSTM_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_6"
  op: "Add"
  input: "LSTM_1/BiasAdd_3"
  input: "LSTM_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_4"
  op: "Mul"
  input: "LSTM_1/mul_4/x"
  input: "LSTM_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_7"
  op: "Add"
  input: "LSTM_1/mul_4"
  input: "LSTM_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_7"
  input: "LSTM_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_2/Minimum"
  input: "LSTM_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_5"
  op: "Mul"
  input: "LSTM_1/clip_by_value_2"
  input: "LSTM_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArray"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/TensorArrayUnstack/Shape"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayUnstack/range/start"
  input: "LSTM_1/TensorArrayUnstack/strided_slice"
  input: "LSTM_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "LSTM_1/TensorArray_1"
  input: "LSTM_1/TensorArrayUnstack/range"
  input: "LSTM_1/transpose"
  input: "LSTM_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose"
      }
    }
  }
}
node {
  name: "LSTM_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "LSTM_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Enter"
  op: "Enter"
  input: "LSTM_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_1"
  op: "Enter"
  input: "LSTM_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_2"
  op: "Enter"
  input: "LSTM_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_3"
  op: "Enter"
  input: "LSTM_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_4"
  op: "Enter"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Merge"
  op: "Merge"
  input: "LSTM_1/while/Enter"
  input: "LSTM_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_1"
  op: "Merge"
  input: "LSTM_1/while/Enter_1"
  input: "LSTM_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_2"
  op: "Merge"
  input: "LSTM_1/while/Enter_2"
  input: "LSTM_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_3"
  op: "Merge"
  input: "LSTM_1/while/Enter_3"
  input: "LSTM_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_4"
  op: "Merge"
  input: "LSTM_1/while/Enter_4"
  input: "LSTM_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Less"
  op: "Less"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less/Enter"
  op: "Enter"
  input: "LSTM_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1"
  op: "Less"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "LSTM_1/while/Less"
  input: "LSTM_1/while/Less_1"
}
node {
  name: "LSTM_1/while/LoopCond"
  op: "LoopCond"
  input: "LSTM_1/while/LogicalAnd"
}
node {
  name: "LSTM_1/while/Switch"
  op: "Switch"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_1"
  op: "Switch"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_2"
  op: "Switch"
  input: "LSTM_1/while/Merge_2"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_3"
  op: "Switch"
  input: "LSTM_1/while/Merge_3"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_4"
  op: "Switch"
  input: "LSTM_1/while/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Identity"
  op: "Identity"
  input: "LSTM_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_1"
  op: "Identity"
  input: "LSTM_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_2"
  op: "Identity"
  input: "LSTM_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_3"
  op: "Identity"
  input: "LSTM_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_4"
  op: "Identity"
  input: "LSTM_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add"
  op: "Add"
  input: "LSTM_1/while/Identity"
  input: "LSTM_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/while/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul"
  input: "LSTM_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_1"
  input: "LSTM_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_2"
  input: "LSTM_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_3"
  input: "LSTM_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_1"
  op: "Add"
  input: "LSTM_1/while/BiasAdd"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul"
  op: "Mul"
  input: "LSTM_1/while/mul/x"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_2"
  op: "Add"
  input: "LSTM_1/while/mul"
  input: "LSTM_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_1"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_2"
  input: "LSTM_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "LSTM_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_3"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_1"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_1/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_1"
  op: "Mul"
  input: "LSTM_1/while/mul_1/x"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_4/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_4"
  op: "Add"
  input: "LSTM_1/while/mul_1"
  input: "LSTM_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_2"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_3"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_4"
  input: "LSTM_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "LSTM_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_2"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_1"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_5"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_2"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh"
  op: "Tanh"
  input: "LSTM_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_3"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_6"
  op: "Add"
  input: "LSTM_1/while/mul_2"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_7"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_3"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_4/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_4"
  op: "Mul"
  input: "LSTM_1/while/mul_4/x"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_8/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_8"
  op: "Add"
  input: "LSTM_1/while/mul_4"
  input: "LSTM_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_4"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_5"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_8"
  input: "LSTM_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "LSTM_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_5"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_2"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/mul_5"
  input: "LSTM_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_9/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_9"
  op: "Add"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration"
  op: "NextIteration"
  input: "LSTM_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_1"
  op: "NextIteration"
  input: "LSTM_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_2"
  op: "NextIteration"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_3"
  op: "NextIteration"
  input: "LSTM_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_4"
  op: "NextIteration"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit"
  op: "Exit"
  input: "LSTM_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_1"
  op: "Exit"
  input: "LSTM_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_2"
  op: "Exit"
  input: "LSTM_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_3"
  op: "Exit"
  input: "LSTM_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_4"
  op: "Exit"
  input: "LSTM_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayStack/range/start"
  input: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  input: "LSTM_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/TensorArrayStack/range"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "LSTM_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/sub"
  op: "Sub"
  input: "LSTM_1/while/Exit_1"
  input: "LSTM_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/sub"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose_1"
  op: "Transpose"
  input: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "spatial_dropout1d_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice"
  op: "StridedSlice"
  input: "spatial_dropout1d_1/Shape"
  input: "spatial_dropout1d_1/strided_slice/stack"
  input: "spatial_dropout1d_1/strided_slice/stack_1"
  input: "spatial_dropout1d_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1"
  op: "StridedSlice"
  input: "spatial_dropout1d_1/Shape"
  input: "spatial_dropout1d_1/strided_slice_1/stack"
  input: "spatial_dropout1d_1/strided_slice_1/stack_1"
  input: "spatial_dropout1d_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/switch_t"
  op: "Identity"
  input: "spatial_dropout1d_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/switch_f"
  op: "Identity"
  input: "spatial_dropout1d_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/mul/y"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/mul"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul/Switch:1"
  input: "spatial_dropout1d_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/mul/Switch"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/rate"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/1"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape"
  op: "Pack"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch:1"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/1"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch"
  op: "Switch"
  input: "spatial_dropout1d_1/strided_slice"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/strided_slice"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch_1"
  op: "Switch"
  input: "spatial_dropout1d_1/strided_slice_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/strided_slice_1"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8891220
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/max"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/RandomUniform"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform"
  op: "Add"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/mul"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/sub/x"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/sub"
  op: "Sub"
  input: "spatial_dropout1d_1/cond/dropout/sub/x"
  input: "spatial_dropout1d_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/truediv/x"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/truediv"
  op: "RealDiv"
  input: "spatial_dropout1d_1/cond/dropout/truediv/x"
  input: "spatial_dropout1d_1/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform"
  input: "spatial_dropout1d_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/mul"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul"
  input: "spatial_dropout1d_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/Cast"
  op: "Cast"
  input: "spatial_dropout1d_1/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/dropout/mul"
  input: "spatial_dropout1d_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/Switch_1"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/Merge"
  op: "Merge"
  input: "spatial_dropout1d_1/cond/Switch_1"
  input: "spatial_dropout1d_1/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3091806
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/random_uniform/max"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "gqG\276\020/\246\275\366K\250<\357a\353\275\"\361\033\276\r\327\245<\316?\336\274\0064\010\276R\304\264=\316R\001\274\2316\033;\254_\036>f\301R>\252<Z\275A\226#=\271\222\027\276\317\234\243\273\014G\276:\316\253\336<\273\202\235=*\254\201=<s\310\275\255\255s\274\307y\210=\030\256\374\274\031\214\204\274\2656\036>>%\213=\245\017\027\274(\330\367=\321\307\336\272\267)<\274I\r3\275\241\0261\2764\351 \276\"\334\241\273\223g\224=\310\363\322<>\257\002\274^\346\321\275\026\224\270=\221t\202=n\003\\\275\r\315\306\2750\262\215\275\371\314\241=\245\221\202=\256\353\226=\213\302d\275\367|\017=FR\244\273\236/\222=\231\211\026=\326=\210=V\031\373\275\010jf\274#\360\311;%\202\363=\365\257\244\2749\373)=v\216\037>\3247\335\273H\233\240<q\030!>\217i\332=H\334[\274\210\037\260\275\024\305A\276V3\226\275f\371\356\272%[\030=\371\017>\276\274K\365=s:?\271\322#\316:\360_\027>\254m\024=4\233\324\275\037\254\r\274V\304\352\274\0073d\275c<\363;\260\341\223\275;\263\026\275w\221\363=7\237]\275\327\007!\275D\316\352\275\355a\032\276\231z\311\2756\224\031\274uP\235=\025\362!\276\345\363\202=\332\245\323\275B\353\302=\326\271\335=\204\017\216\274\\\376\t=\375\201Z\275\2173\324=0\243b=R@C\275\236o\327\275\266\\\274\2747\003\223=\327\031\253\274\357\315i\275|\241\001\276\224\256\016>6Zj<\266\340\357<\3055\343\275\204\263\305=\021a\316\275\025\224\306\272\340R->\321p\007>E\036\002\272\223KZ\275\240\341\213=P\024\'>\213\226}\275\311Z\230\275\363\242S=k\360D\275\236\272\037>zo4\275\215\226\267<\332<&\275oF\037\275e\371\236<7j\"=\211P>\275\273~\334\274\004\210\301;<\251!>\177\3110\276\371o\204\275\240\037\250<\n_\313\275EoA\273\305o\250\275CI\267=\022\227.\273\366\236\245=\031&\004\276\302\020\317\274\317\335\370<\246w-\275\206X\007=3-\266\275\367/h\274\005\271\244\275\2355B;\312k\350=\336\004\334=\356\224\003\276x\207\264\275\002\221%\275\002\354\001=\t\322\224\2754\2473=g\226\240\274oW\350=\247X1\276+\274\344\275A\032\301\275\201?b\274_ \346=\304a\246\271C8\021\276\263\325\245\275zD\257;\304\"\377<\234\300\207=\037r-\275\302\265S>:\364o=1\234\204\274U\n\304\275\304\'\013>TB\031=H&\377=\273\014\177=\351v\326:p\247\335=\333l\243\275\010\335\235\274\304I\252\275\r\203\351=%\331\252\275\250G[=h\\\034\276\224\235\236=1\236\004=\341@\306=\274\222W\275\246\350P;\2750k>\002\241\337\275\361\350\264\275\255$5\275&t\236\274\244z}\275O\016\234\275f\345\261\274\317\013e\276Z\304.>\350\236\274\275LD.\275\004C\010\276\035\222\324\274pH\371\275\237\247\001>\214{\364=\367\020\212\274\270\213\222\273L\202\023\276\357AM\275\215\007\257\275\033\250\241=\233\006\312=\016:\244=\355\235\025=\352\270;\274a#\225\273\327[+=\035\255\024\275\334]\023>h\263\231=\361\364\232=kLK<T\027\021>\347\256\262<\206`\250\274d\"\232\275\317\354w=\324f\213<\225\203\200= ]\214=1\321)>\307\000\345<\347e\272\275\322X\200\274\'\364\323\275\352\235X=\303?\263=\312\345\360\274$\rR=\265\231\r\276i\nf=0\241\321=\306\"\235;Coa>4C\214\273\350\221\211\275tz\377<\325t\022=\334\222\310\275V\027\320=,h\267\274\344\352\031>f\247\205<\033k\004>!,\036=\263\202\001\276}\037\320\274-W\213\275~z\316\275\303+\366\275Y3\336=h\232\003=\213\236\212\275\003\221~=\263<N\274\266\033\337<W\356\004\276\017\323\027\2763\027\375:\350\360a>\264\342&<%\250\007\276\324J!\276:W\226=j\274N\275\277\004\211\275\253q\003>\312\245~<\301OU=a\022k\275\371\244\003>\022\3443\275P\221\317=\354I\275\275\340\237\034\275\226\362\253\274f\255\300<\035\021\245\274^\220\337\275(\301*\275X\226\250\275\225\362/>\360)\206<\364\252\312\275\346#\365\272\236\'\334<\2507\347=\204\343+>%\237\010>\254\372\033\275\311\025\023=\374M\r\274+\334\374=\221\262\307=Y\013Y=J\263\014=Z\224\021=\312\027g\2744\232\352\2753n\220\273s\333\212\274\301\006\251=d W>\214&\313\275\201\257\000\275I\023\244\275\242\301e\274i\247\274;\017<\264=\035-\252=\025i\">R\336\211=_\350m<\365\307D\274\025\2153>\261\245\324=\350\331\211\275\005\237\354<\260~\215<\020m\001<J\246\274=\271\357\216\275\033u\307=\201\255f\275\234\250\317\275\310~\315\275\224|\203<\2206\351=?4\016=L\350\032\276\236\362\211=\264j\340\275\005\311\321=\315*\375=\327\030\201=\274C\341\275\260\355\305\273\345\221\347<fl\310\275\024#\336<\375u\335<\222H\001\276\327\330^\275\033\2312=\032\246\344=#\301I=\206\207\254=\242p<<\236\324E\274\020\"\"\276\tx\360\275\233/\230\275\333\225Y>\221[\254=\013\300\345<\301\253D=\224$\350\275\275\017\214=\"}\301=\373\003\260=\020\\\021\275\312\375\227\2748\312\251;G\246\200=\346&\371<0\036\300=\021\371\025\275\300\260\356\275\007\t\177=;\246\034\275>#\366\273Xw\001>\341\305\357\2754m\357<6\n\223\275\017\240i;f|\234\275\320pM<uh\"= \372\r=\346\317\311\275\357\271:>\n\376:<\203\n\237\275\314\372\252\273\201\262\241\275\235p\025=\251\037M=\272\027\306<\317\330\207=\002\033\004<.\241\245=N~\276=\3638\202\274\330\340\304\274pD\277=\275B)=G\037^=\212b\215\275\240\333(=\354\215\342\275\201E\273=\371m\200<\277#\332=\013Y\273\275\355\367u\275w\260\232=\\Ce\274VB\237\275\355\226\214=\226\202m\275\362\3040\276\301\327\263\275\034\322F>\034\376+\275\007(\273\275\001\\\026\276\327\273\023\276H\027\256=\262\023\316\274\340\301\354\275\036\007o=y\303\365\275U\370\245=\033\266\240\274\322\023A=je\232\274=\267<=\273\354\311\274\263\376\302\274M\245\325\275\265=J\275\037\275\353=_\374\003=\373\224\273<\024\302\314<`;\262=\237\213\001>12\005\274\363\340\365\274<\n\242\275\244\244\254=|0\014>\271\026\210\275-\014\'=\207\205C=\305~\323\275\210\245\306\274]F0\275\357 \\<\352\216\306\275\"}\345=\223.\277\275\376\235\363\273i\034\024\276\255\337U>w\033>=\274\221\314<\222\215\354\273\032\201\264\275]\2605<\t\310\000\276\242\341\036\275\252\253f\276\0232\031>\032\200\210=\372t\272=\257k\023=\2666\241=C\367\316=\364{\245=\313\013\021>\351\267,=\277\354\247\271\206q\204\276\326/\267\275\021\306\205=\340\353\214=\027/\325=-\367\352\275\205\310\310=Qt\230=@\002\255<\345N\272=\217\255\341=\315\216P=\'\264\330<\265\326\035=\303\n-\276\261\327F>\337\203\240<\373\217I<qY\027>\tM\311=\211\3059=\271f<=\373\334V<4\373\t\275\250\201i=d\250\254=l\350O\275nzg=\231\207\347<\027\013\314\274\261a\327\274\361\223`=\024\210\017>\316\344\034\275\320B\024=V\267\201=\341\003\204\274\233e\213=Tv5\274\004\3659\274\261\344k>x4\204\274\331l\355<\206\002\315<\301G_\275d\342\355\275k\025\225=\364bv\276\213\227^<t\321\324=W\021\233\275\323;\373=\354\376\220=\223\234Q=?!\310=N\301z=\325\300a\276\344\335\276=\247u,\275\247^d<c\236\"\276\244w\234=\007%\r\275x\274\245\275\322\363C\272=;\320\275\237\253\332<\004\036\023\274S\275\025\276j\034\037<\316\022\n\275\333|\261\273\214\205~<\335\017\342\275*\335\266=Yi\026\275\375w~\274FK\n\276\033\340\253=\014\327;\274\346o@\275\243\305\364\275\226\005\326=\24577>\231\",<\335\006I\276\241 \362\275\332\256\210=\365\223#=$\234S<\337h\311\273\r\005\t\276\240\202\350;\345\240\006\276\325\321X\275\245U\250\275g\350\227=\256\t\027>\2577R=\314\340\217\273\216\350\206=J\306\277\275\217)\010\276\371Em\274\236\364\321\274\201\234.>c\0347\275I9\245\274\257X\363;X,\321\275\033\352\207=\212\\\025>J\327@\276\361d\217=>\337\201\274h\027\347=_\254\346\275\202\023\306=\346\006\025>\213JX=\357!\020\276\300G\177<\334G\351<\035P\007=\320\251\341\275LF\235=\334\260\241=\373\275\231\275O\341\216<#Lc\275\030\200\300\275\251\366U\275\265t\221=4\365\301:\304J\224\275}\240\276\275\276\n\020\276\267\035\311=U\246\211=\235s\221\275\035\221\252\275\213L\361<8[t\275\353\016\362\275\347\2052\275\340\205\306<\343m\233=\021\225\n=38\377<LoU\276\365\302\000\275|h\310<33Y\275\356\322\014\276\247w\331=\376\246\212\275\2764\260=\267\351\000=\n_\210\275\250\361\254;\272o!>\031\276\321\2752\353W\2769\327\201\274.*\206\275\225\230?>\226\304>< Z\244=Z\267\370<b\021j\275\3115\225\275I\363\361\275\226u\266=\017\331|:\266El<\3320\245=6\021\214\274x#\234\274x\251\334=Ar\335\274\264I\244\275<\017\306=2\'\365=\021<\212<\311\020\300=r/j\276\177\341\243\275\335\253@>\306\214\245=[\326\035=k\t\240=\006\241\232=\357\212\237\275\005\246\177\276g\247?=\'ih\276\032\037\237\275,v)>\272)}\274 j\254\275\000\217\007\275!Qn=%\225\270=\nl\205\275\264\004 \276\030\206\317<\231\375\320\275\026\303M>\336\000\252;\264>3\275&\307\353\273\247\335\270<x\007\253<S\213\027\274Ds\322<\233p\304\275F\2138\273;TT=\200\202\266\274F\014\375\274j\344:\275\350\325\371\275\222e\337<\254[z\275w\371 \275{\212\257\274\251l\020\274\004\377b\275\"\305\300\275\022\223\r=\357X\007\276|`\020\274\035[\233\275{\027\'\275hG,>\022\026\230=\327\216\263\274\373\221\213<\267\323\014>\006L\304<\234C\235\275d\016\024\276\337\211\217=\006 \305=\357G\013\2732\320\362\275 \257\200\274\251\331g=6\321\350\2742/8=R\256\023\2753\373~\274\331\336\272=\335Wv\274\345Q\027=^\244&>9\374:<\035L\226=\227\337\336=Zi\361\271\327V\275\275}a\364\274k\333\367<v\371\002\275y\t\200<\323\031\352<K\266\226=\223\340\365\275\222U\372\275\347p\235=(\242]\275=^*\275\025\037i\275\007XA\275\254l\336\275p\370\022\275\235\245\006\276\303Y\255\274\006\377\312<\367\2237\275\332\330\263<M\002B\275IG\257\274p\305\243<h:\236=f\377\327\275\374\261\310\275\307\026q\275+A\377\274o8 >\032\311\021\275\\\3029\274C\321\001>\2417\256=7\372\330<\200\025A\275\206B\231\275\201b\334<\323.\366\275K\2638\274@X:>i\336\353\275\000>\034\276\263\367`=\236\260+\2755g\207\275\366J\307=\326\212\310\274\322CO\275\346\002i=l9\346\275\345\377\364\274\337f\250\275\034Fo\275\205\270\221<\001\341\027=\242\314\374=sj\203\274\031\310\255=8(K=\343\272\003\273\316\243\010\276\220\302F>1T\265<\333\256\324=\252\0239\275\334z\345\274W\2345=\310\230\325<\245p\016\276k\372\343=x%z\274\210\217s\275X\206G>\255\252\252=\345(l\274c\335N:\256\227\026\274\201W\365=\233\355\227\274\325$\244=\363\2334\275\374\232\212\276\177\254\217=\021[\252\274\275\243\344=\024\257\271<`N,\274\r\007-\276;ur=S\304#\274\322\2647=j\371\306\275\221\206t>E\347s\274\216\"k=\304#\214=\2474\320<w\237\376\274\002\376P\274I\363\211=\000\303\013>\2321\345\275*\'\2269\373\217*<\314\2577=\207,\377\275`\017\201;\217\341\372=\223\316\024\276\033\207\236\275\177\330r=\212.\247\274\246\307\322<\006-\360:\010\275\374\275\206\336\264\275v\233\002=M)\250\275v\370E>:\254p\274\365xx=\266%\215<\177\200/>f\013\031\276\326\352\211\275\345\321\354\273\032/Y=\263\260\'>a\206\315<\375Y\351<\0053\235\274\333\203C\276\273$\026\274m\256\253\275Ir\351=t\362\026\274O\304\327\275\274B`<\315\313\213\275(\205\215\274\214\241v\2751\223\361=O\3126\271q\006Q<\325q\376\274\274\3730>\353\260U\275\365\223\020\276\300\033\356=\036\361\014\275\036i\275\275C\273\036=GQ\200\275[+\245;{\200w\275D\026\301;\021T\277=P\361>\272\266C\203=\343a\311<g\035\200\276\300\023\205<\210/1=G\233,\273\312\330\301=\310\337E=h6\340<\376\303*>\270\177\257=gD\345\275*\331\355=\3170Y>\266\000\031\275\323Z\023\274\236D\204=\367\251x\275\250\'\026>\310\2660;\212Pv>[\253\214<\"]\331\275\205h\235=\023\26189)j|:\004\314\225\274\023\377\252=M\345\254\275\256\"\345=\201\303\030>I|M<\303\247Z\274k\354\324<\244.I=xB\302=\231\263\010\276\362\3732=\342\262\033>\213s\222=\317\366\026\275>\320\240\275G\304{;\272\362:\275\372\212\221=\357\262\331\275\014>\257\275\210-\310\275\022\306$=\244,\364<\033\002~\2752\014\300\275M\335\304\274\031\266\220\275+\255E>>>*=\230\177\035=\247s\343=*\006\262=\304\000\277<\365\344\267=\330\230@=\247\264\315\272\244d\364\275U\326\341=\370\252\225=\322\367\353=\001\350\222\274\034f\246=Qw\377\275\270,_\274E\375\344=\320\316\373\274Q\262\311=\257e-=\336\350\033\275\314}N\274Vw4\276\213\347\270\273\3313$<uT\250=\363\0347<\372\322y<ZeJ>\266\221\244=hR}=\370R\331=\031\231f\275XS]<\014$\322\275b<\220\274$\t\342\274\245\202\235\275\376\315\271;\302.\377=\2675\002\276\255\204\216=t8|=\277\323\240=4\245\356\275N27\276\322u\370=\035\021h=\227.\220\275\236\323d=[\002\261\274\207\235\000\2760\351z\274\265\035\364<\350F\200;\221Of\275\263\2405=/-\247\275\001\233\003>\245\001\023\276\350\310%\276\371\314\n>\3760\373\275\217\032\215\275\357_\356<\375t\373=<\362B<-\314\204<\006\007\371\275<b\231\275\306\243\262\275+\010\240=\373\242=\273_k\362=\232&\213\275\224\372\t=4\'\212\275$\2262>\244\342s\275M\247\332=e\233\000\275\357\002\322\275Rn\215\275g\032\262=D\213\030>\200\364\304\275\353\263\231\275\016J0\276d\005O=\234\000J>\362\304\221\275\257\242\302=1\271%>\345kC=Y!\302\275\373]\302\274\340/8=\244\316O=\351\3149<Z\037\241<\037(\332\275\204\327\273<\0204\025\275\347\236\203=*)l9\361\200\374=F(o<\010\324\235\275\346<\\\274\016;^\273\211\364\261=4\316\237<\370\275\276<\003h\200\275\246\313\033>\254\372(:\230\235u\273a\021\256=\365&\013\276\002\337\341\275\255o\362\274\272\322\317\275K;\004\276D\327\260\274-\250r\275\305*\373=\265kP<\237\200\007=/\250O\2755\037-\274\177\2444\275K\236O=\332\355\375\274\266@U;\206\226!=\003\334\310=RR\002\276\037U\370\275\352P\275=\256\315\260\273\215\323u\275\201h\342\275A\022\261=V\346K<\217\237X=q\n\231\275E;\231\272\3700\272=\317\335\313\2752\232w\275\317\\\177\275\321K\037\275\316\231\033=1\200\010\276\0208%\276B\316\001=\271\215\271\275\253\241\276\275U\346\270=\201j\034\276\351?w=.i\265<\343%\022=\355\227\363<7XM>\263\354O=q\247(>\345\231@=\351qu\274Al\006=\214-<=\025V\007\274@\177:\275\237-+>\370\315W=\244w\027=M\372\243\275\211q\320\275)\332\365\275\267\2567\276\320\337\203\273*K\326=\243\343\362=\332v\370\274\317wB>v>N=\034\365,\275\0053\272={3y=u\273\252\274\3323\243;\210\212\013>\365\234\247\274>ui=^\340\377\273\r\313-\276\304\375\221=c]\336=\022.\317\2757\336\236\274\311\343N\275I_\000=\362\254\274\275\\\254\016={&A=\347\001\266<\005\007\343\275i_\313=\263\301\363=\013+\211<\231\021\230\275\010I\312=\3135l=xN\374\275\371X\253=g\377\027>\217\351\035\275\344\010\352=!p\037;\271\352\270\275\240\374\323\275@\013\311\275\250\303&\276z\252~\274\241\205\370=f\006w\273 \262\001>\004\223\214\274\323\341\235=\026\344\023\275\276|y\276\035\030\230=\005}\204=\214\357\361\275\037\332\'=\033\027\261=j\250\237=\021\301\355=\n7\005\276\354md\2754\227\236=>\316\030\275\241\333C<\026<!>g\037\270\275\005\247\212=\361\365\205\274\330T\253\275\374a\026\275$\246\224\274x6\205=\217\020)\275S\370\240\273q\375\037<h\201\005\276H\270\013=\0175\350=r#\317\273\301y\216\275k\333\212\275\033\272\376\2753\201\334=\2375\210\275\234T\"<\315\263\267\274\261\003\007=\302\261\001\274\036Y\235=M\207\260=\022\177\007>\360\025!\276\'\024\334\275\3442\245;g\327\006=\311\315\000\276\256C\333<\334e%=\234&\335<>\201\366\275\237\232X=\306o\230\275\000\255\256=\302\331?=\004\036\227\273\363\300\n\276\036\363*\275g\225X=\037\325\220\276\022\307#=\301\275W\275!\310\206>G\324\002\276+\335\305<\225\324\302=3q\217\275/*5\2751&8=\341}\250\275\247~\337=\253\274\217<}r\316\275J\001\216;9eq\275\373\010/=\022\306\000\275\022\200V\275\316\033r=\261\301\372<\302\006e\275\264\262\202<\257\333.=R\234\324=\363\201\234<\221\264\003\275.c^=[(\354=G\275-\275\200\236\035\276\202\232\226\274\321\340\030\276WX\321=hR\220\275\207\232\355\275\225\300\210=\272Y\201=X\365\016<\364\243\003=\331\205/\275?\007\231=H,1>\232\305\307=2\014\234\275Ou\035=\334L\036=.e%\276f\222\367\274q\n\230\275^-\313<y\315\244\275@\355w;\213E|8\311D\335\275\272\346\373\274\264\265 \276\271\222\257\275;\241\037\276#\2078>+\242\243=|-d\275g\033f;y\256;\275\312\003V>u\231q=\331\240\305<\311)\n\276\373\257\016\276J&*>x/\020<\002\233\010=\036\215\220\275\261\\T>\\z\'\274B\244\235=f\014\014>y\327\376\274\317\022\361\275q\034\202<\010\333\221=\256a\365=\202.\231\275\214 \267<\231\264\301\275\320,\325<\243\014V<\223\016\313\274^U\"\276\006\225\031>m\014\022\275\001\333\355=\010\227\216=`:1=4\013\321\273\221;I\275z\222s\275\333\211\005>\031\037\035=\253:\226\2753L\242\275<\265\301\274y\312\317\275\254\202M\274\270Z]\275\300\004\014\275@\3254>\030L\006=\343\244\220\275T\037.\273\332\001\303<\246\014\202\275H`\346=5\237]=\2443\264<\301\235\210=\211\223\207<\005\260F=\032\0361<\263;\202=\371?A\274\335\030\267\275\322\030B\276@\245\005>\356\037#\275ex\336<\304F\016\275\2618\007\273/)\335<\345n\033\273QO\027\276\243\327K>\326\367\261=\265\274\304=XiG=Gj)<\231G\235=\354\2013\2747\217 >\016n\013<\"\310\235=\374\222\250=\017\\\242\274n>\t=\376\252\010>\267\277\177=v\320\240\275\246\245\242\274i\362\021\276[\030t\275tI3=Hf\207=\322Wz\276-V\037\276\356\037\205<a9\351<\352\020\361=\023W\034\276\356=(\276!;\257<\014YT:tyi\275\230*i\273v\326\234\274\223\024\232\272\'\345\317\2744[\355\274\304\370Q\275\365t\010<\337\204X\274n\234\345<Ut{\275\320\346\377<\000\004\256=d\307\200\274:\024\211\275\013n/=\312\007\205\275\347{\214\273\365\304\355<\357\301\227\275F.\'\276\204\212\232=\277J\321\275~\001\241<J\252Y\275\036\3025>\356<A=\024\241\250\275\204^\272=\007!\266<\305\214\242\275\331\3727\276\234\341\200\275\037[\035\276\333\365\345\273\352#;\275\210v\204\275\227\333\353\274t;O=O\224\036=\277\311\233=\002-\006=\365A\250\275D\3408>\261\270\336\275\036\331\2629\231\274\005\276\301\322\243\275\217\354\036\275\3339\000;\372\246\013\275UZ:\276Mo\007>\365\375\353<\375\275M>\005V)>\010\234,<\375\375+\274l\331\247\274\227\002,\276\367u\035\275\342\017K\275W\201\231=O:\271=\327T\262\274\374\360a=s\323\227=`\2059\275\312\345\373\272\326\2252\276,\036\266\275\266u\222\275\233\322\006\275u\236\343<#\333/>\340\252f=\377\373U=D\tQ=\304\027\n=\235\355B\275\224\224\363<u\334\252<~\342\377\272\326x\200=$\222\354=Y\007\376<B\333\214\275/\005w=\007\363\340=g\216\231\275c{\004\276\302]2\276\375\231\241\274c\t\252=\316\270\'\275\253\324\372;\277\224x=t2\220\274,q\226=\251\246\241\275\014(\306=r\322\277=\001ML\276E\t\342=U\372\224\2753\014\021\274\342\024\206<\323\255\r>\217\277\227\275\250\210,>\360\025\367=\016]\347=\003\000\256\274\017\233\340<\247i\331=C_\206\275\020:y;m>\322<{m\021\275\345 \014\274\306\021t=\337\330\356\274\033\257\034\276\3427K=\277Am<\320;\022\275\221\343\306=\177yP\274\243\252\022>\303p\303\274(g9\275\346\223\037>\360\n_=[+\313\275\re\232\275\230\276\014>@Q\250<\307\201x>\253\362\207\274g\014\260=\233\215\222\273\246\\\313\275v\375N\275>+.;(\253\t=\023w\340=\256\313\346\274\343/C\276\251\311%=u\\\200=\025\3229=\334#\n\275\327\005\331\275\212\371}=Lb\010\275\017}\205\275V\244\004>Wt\356\275\307\355\027\276I3d=6@\216\273\337b\010>I\303\345;\251T\225=L\274\233\274\236`\342=\214\375\240\275}\336?\275;\014j;j\026\221\275k\333\204\274\213\204p=\306y\344=\204\224*\274=\340Z=\010\345\021>\025\3173\276/\023v\2755Tf\275\304\344.\274+\250\n\276\n\243y=\260\367\016\275\224\200H>\216\266\r\276W\266\346=S\333E=\030~\326;\3545\331<\360o\333=O7\017=\207\326\357\274S+\264\275e\376->\303Mm<?g\331\275f\017=>\255\375\245\275\357`\032\2760z\236<\2019\252<\265\004D\275\027\212T\275\373\013\277<\205\n\"=\367\313\277=5\201N\275\021\211\212=4\241\242\274\034\204\235\274\241\215\202=9\217\236;\357r\203=\345.\246\275\210\233\177\275m\246\016\275\230r\347\274\201\"#=.\216/\276|=%>X\217b=\260\255\333<\233\216$>\311\3019=^l\327\275-In<t\304q=\342/^>\212\276\205\275\242F\375\274ZO\235=1\315\276\275\\\033\322=\0356\n=Nn[\274\341\354\207=s+\245\275\246/^\273L\227\272\275\177D\304<L~5\276&\367j=U;\346=\327\331\300\275Ev\020\275\310\323\241=\244\367\334\274\333\271\363<\240\376\226=0\262G=\226\336\n\276~\216D=\315\331\214=\001\"\007>\225c\257\273\262]\373\274\217f\210=\"\270\220\276\317\313\377\275A\010\013\276X9\210\271\036\340b\2759\352\033\276E*\226=G\232\254\275\236\005q=\317z\240\274\211\223w=\313\2244>\371\355m=K\363\222=3W:=\361\301\006<Bh\364<\177\251[=\301\005\222<%\322F\275kt{= \376\353\275\303\005\352<\334\177\036\273U7\347<\263\217\242\275\274\260\351=Z\233>\276\3210\201<\021\273\236={\353:<6\331\026\275\255\314U>]\252\217\273*,D=\230\001\323\275\2775\223=\327\272C>\354\211\305\275\335\030\264<c\211\303<\220\352\333<\313\330\267=\r,\005=\340\203\021=\372\265y\274U\265v<\326\376~\275\365\253\273<O\216\342=.1\035\275\013\233S=$0\031\2760\340\350<\323O\265\274\037\304v<\022\364\024:n\346\215=\243\255\033\276\377ML<\017\036\201=\221\307\227=\372\300~=4\316\036\276\257\017\314\275\002\366\273\275\257=\313\275\027\245\014\275\301\033 \276r\025\353<\217\253\227\275rI\203\273\232\310\016=K\271\010=\022\000\221<\265K\333=\362\243H\273\014\232\201\275\3008C\275q~N\274\267\0034\275@>E\274\362\245\311=\344y\244=\202p\234\275w\326m\274\271Y\037>\035R\370=Ml\277\275\254c\206=\220\006\036>\326nR\275\351\373|<\230f\">bR*\276\315b4>\031\326\246\275dJD\27663\220<\267\002\231;SR\271=r\205<\275G\223J\275gd}\274D\t\341<\027\215\027>i\223\242<\316?\303=\202\327\000\276\360]\227:\220J\350\2759\023\263=\346\265\007\276{\237\301\275d\201\377<GM\206;\003;\271;\310\206~=.<\031\275\350N\234=\345&\001\276\r\343\320\275\034\233.>JL\256=P\270I\275\307\210\271\2750\323\304\275\023\373\016>\326O\032\276+\201\005=h\200h\275Fh\272<\217M\240\275\341\236\264\275\207\'\203<\321\034\311\275B1\354<\324k\252\275#\261\027\276\344\276\030\274\264\352\314\275\tq\240\275\360%\004\275\327%B\275\207\251\203=!i3\275\002\000&>\277\211\021>\362\247\273<\"\341\n\2764\013\320\274k\346\330=\310\303\037\275\351:\347\275\320\004;\275\001b\300=\227\033a=o\302;\275m\301\210\273\244\330\262\273,\013\345\275\026\020\204;\026\345\t>\355;$=,?K\274P\213\336\275\262\202\017\276\240\375\342<\254r\007<\351\260n\274\320WH\276\370\367#>V\332+<d\234\241\273]\345s\276>>\337\275\321\004/=\033\212!=\300\253\260\2758\0066\274\025/\241:\337\340\334=\226&\024\275\222\361\036\275\007\211\274\273g\206\266;\223\212\220\273\255\377\262\272\310UJ\276\002\030\234\275\217\346\207\2743\356\372;\331\245\016\276\327\035\017<*\203\272=\336\233\001>_~<\275\243l\004\2763`\215=\014\207\333\275q\305G\274\027&\017=\325>\246=X\026\027\276\357u\230\274\233\000\311=\200[\217=s\300-\274\336\016E\275\212\300\355<\356\007\034\275\332\344\235=\353\233\350=\n\027L\276\230\210\213\274j1 =\330\354\025=A\026\013>\013A\323<\212\372_\275Z\275\006\276\361\354p\273+\313\247=\367A8>A\306\263=M\342\357<\244\003\357\274\224X\031\276\305\020\331\275\003\007B<\375\275\223\275\362v\256\274V\002\277<&\357\264\275\353it=\020\377\020>/v\377<\"\177\021=\003\0230>\272\245w=\324gW=\322\273\333\274\2167\317\274\013\356\363\275r\235 =Q?z=u\032\363\275\234sg<P_\251=\342[\222\275\'\3602=Z\272\361=\312\217\206<:\225E\275\t\365J\274\272\260\302\274\347\377\272\275\356\\o;\265\376$<\306~\007\276\276\266\345=\217\271\334=|\314\205\275\001\\\351\275\335\355\372\275B\001\344\274\275\235\206\275#\035m=\241.\351;\262=\340=\351\000\337;\276\312\300=\007~P>\255,n\275d\336\216=\222\373\265\274\337o`\275E\250\r\2769At\275\273\034\300=\303\306\372=q\277Q=\023\214\301\274\367\260Q=G[}=\365\316\014\275`\025\"\275\221\350\343\274\340?Z=\261\007\320=\270j\331\275\266\031\351=\224\017\271<+!\'>#\013Z<\253\246\277\275\002\007*\276\260hT=j\217\354\274\346\212[\275\333\2751=\374hF>\002`\305\273\2719^\275\256(\261=-\027m=\253\210\253=\226\300\217\275%\361\305\275\3038\314=\235\023\332<\277$\332=\336\027S>k\232\257\274\314T\314\274R#\372=\026\226j= \366\000\275\306\004\277\275\321\232\177<\200\220\241;\014B\207=U\023\223\275\366\246\343;\201~]\274\331S \275;U\367=\037n\023\276Q\032\030\276\327\314Z>\257\266.\275\213\235>\275\261\313\315\2748B\230\274\314\232\022=\222\350\"\275\321\232\232\273\325Z\223<\327\272\201;\2327\376\274(s)=\315y)>\363\347\302\275U\3165\276\'[\211=\0213z=\240\017\022=\313\214G\273\247\353\033>\2412z<\320{\252\275\346\373\260\275\331E\220\275\327\3731>0)\302=\364M\036\275\345\271\224\275\005\311\367\275\344\n\202=\314\312\332<\017.\355\275\200\026\226\275\266QN<`\321\356<\301\027\362<M\321\245=\307\177\177\275\355\364\236\274\235d\253\275\364?\207\275_-x\276\033\267\026>\221\275\016>\373w\350<\0218Y\2754\355\340= \327L\276\223\347\232=\357\367\254<\024f&=0\215\034>\231v+\274\"\325\000=<\313\352=Q8\027=\375\n;>\306\275\313\275\270p\324=\303\362\"\275\274\335\014\276\340?+\275\255\032\260<\345)\227=\341\022\207=12n=\237\253\375<\266\355\307=\254\230\360=\201\316\222\275\262\245@=\215P\216\275\357v\207<c\227\371<A#p\276L\266\315\275UC\r\275t\365\000=\260\314#>\246\006c=>v\216=\2023H\276M&\317\275\022hu<\003\361\220\275\306(\273\274\010[\250=\240\275\314\275t\210\023=Q+\037\275-\276\005=\373n\212\274q\230\300\274i\223\016=\370\301\371=N_@=\177\177\005\275\247\247\036>\236\031/\275\247\233\336\275l\257\225<\"\340\005\276\033t\222=\273\027\216<\266\022\242=\223\271V=\3122Q\275!\010\301=\201t.;67\260=u\263\372<\367g\371<\202L\t\276\241\252\003\275\256\t\307\274\201\215\n>^\370\364;\353\376\316<~c\314\275k\374)=\362\326\371\274\240($\275;n\021>(\313H\273m\036\003>\255\310M\275\206\355\213=\321O\352=\201\334\005\276x\356\004\275\351\353\024=\252$H=\0106\342=\234\351\374<\347e)=\255\361\023>K\361\257<\001\241\241\275\326\"\r\275\365i\215\274u\346\343\274\252\234\t\276\346\315\244\275\32001<+\261\224\272b\312D=\333\030\250=1\270\203\275\321i\330=\367\304(\275\'z\002=\212vp\274W\207A;#\200\353=\310\210K\275,\315h\276\371\331\260\275\021\216~=fK\022\275l\326\023=\252\013\330\275F\326\243=\353\334W>\360M\231=\377t\330=\272=\316\275\336r\206\273V<\343\275\004\332\307\275\201\261\214=\341\'g\275\032\252\241=\371\323e\276_1*>\203\217\373=f\326~\275}\273\030>9`\255=~]\326=\301\320\022\274~}\202<dT\205<\237\274`\275\225\203Q=b\277\303\275\274\252\363;\332C%\274\226\217\376\275\r\001\372<\315\024&\276@^\203\275\251\007\305\275\321\366\202;8\272\026\274\265n9\2755Q\027\275\006\231\345<\357\235\372=!\330\306\275\006_\006>\003ww<\261\235|=O\206\322\275\367\326S\275\374J\215=\265\202\030\276\220=\367\275:-\343\275h\275\265<\257|\201>\017\226\322<\227\023,\276\375\377\331<yX\320<\020\356[\275\243^\262\274\2234<>\206F\032\276\317Wq\274\244\203\007><\356t\275\026\344P=\334}\315\275\0012\200<\232\206\336\275\\\317P=\236\373\257\274\330i\000>\026\271*\275\235^\036\275\247\351t<\247Np=.\r\";c\005\246\275X\031\332\273\277C\226=\306\321\317\275Y\241\257<a\007\344\273{&\003\276\0078\335\275\335\0163\276F\255\350\275\224\177\344=|(==j\2000\275\207y\372\274m\030*\276\231\"\264\274C\003\224=gXu>\330\257\233<fz\267\275\356\245\361\275\315\366\272\275\r-N=\342.\261\274\343\023\027>]%A\274m\223\003\276VC\344\275\"\371\257;#\230l\273\216\227\213=\353\007\035\275r\257f\275\013\250\326=\356\367#\275;\352\021=\224_e=\324\007\313\275F\027\275\275\263\027\316\274\026\361\200\275\274#\347\273\037Y\"=(\343P\275ru<<\200\217\037\275\271\213\340=\346\332\210\275\255\264?=bCs\275E\032\357\274\375\345\341\275\232hx\275\223P\205\274\260uZ\276\030\204\326\274\261\235\215=\303D\227=+\270\001=3\021\030\275\307\010\244<\235U!\276\'\255\017\276,\372P=\200*\212\275\330\270\211\275\323W\255\274\203\350\010=|6\020\276c/\016=S:\"<\3506\243=5\210\214\274\244\016\322<\315\373f\275\027\364\001\274\261\315\260=fln=\244.\013\275\005\\==@\211\333\275\360u\217\275\367\360\\\275]\344\307\2746\007\327\274Y\364F<\002\303o=1\"\357\275\r\323\276\274\264\220C\274\346\311`\274\301y\355=\013\352\014>\311\204\300=\003I\037\276\211\001@\275t\356S\275\374O\321\2747\331U\275\214p\000\276\021z\324\274\354\274\365\275\372\257\261<de\245\275\236\022\020<\266B\003\274\212\014\000\275\302Hh=O\200\377=\000F\027\276\210\tM\276\016\251\213=j0\264=\2144\">\206\300E=\327\337\366<6{\247\275 \241\234=d\272\207\2758\271\266\275\233,\215=\261\244g\272\274\206\205\275\213\341\333=\203\020\251\272=\372l=\326-\217\273\022C\233=\362\210\226\275\226\2779\276\033P\327;\257\374L=\306\317\327\274\035l\311<5\335\353\275A\013\341\274m\224\261=\225p\024=\262\302!\276\217\347\n>k\031\316\274\362P%\275\267\330\265\275\307\272\262\272\007f\332\275\3541I\275\302\255\215>\010)\216\275\366\2740\276\025&\243=U\215X=\273\026\006\275\2222&\276\363\236\215=\321\022z\275\312J\026>\363\202\230\275\240\334\274<\241\372U\276C\200\007=\231L\361\275K\247\001>i\2327\2762L\356;\024\301;\276\266F\303\275\332.\312\274qZ\005=Q\242\304=\272\017\236\274C\034\017<\222D3;\316v\375<\2405B\275\\\321\224\274^\207\010\276\357\325\221\274:\353?\275MMW=zE\204\275\250\033 =W\345\300=\236Wc\275q\363[>5\373%;\320x\323\275\311\313\355;_\005<\275\362bU=\327\333];\327\326\334=\335_\337;5\244.\276}\311\344<\360\2059\275\337\316\235<\373\211\017\275\001\376\212=\\\367\315\275\002\355,=\315:<=E]\344\275\270\202%=\023\003%=\321\005\204=)\365\336<\364q\214=Oy\r>R\372+=\224m\020\275\265\261\305\273h\233\315\274\273\326\376\275D\351\017\276\312b\367\274)3\347=\361\214\217=\032\267\214\275\252\021\027\275\356\261\236=\254\375\001\276a`\246\275T\2259\275\203\030\213=\257\262\216\275~=9>i-\'\276\216\232\n>\362\024\242<\251\033Q\273\223i\304\275\320a\324\274A\3141\275\020\257\252\275\005\272\r>\320R-\276)-_=b\307\261\275\353\362\023;\257\232\027>\206PM>z\352\232\2741\352\273=\263\213\376=\3259\231=\363\265\366=\036\272\204\274:\023B\275|*G=\325\0221=\204Q\254=\346_ \275vT\201\275\252\367\326\275\252l\270\274\352\354j\275D\312@\275\243\206\010>\243\321\r\275\313\262\200\275\036\314\013\275u\353\014=\354\215\240<K\331\244\275qW\002;\306\343w;\217-\250\275\3048\334=Y<M\275\275M\020>\303\021+\275\212\222\273\275h\366\260\275A\323\201\275\323s+=5\2570\275\210\300\252\275r\024\005\276\3640\267\275y\033\346<\262!\310=\021{\020>D\322\031=:\016\215=\354\300\201=\241\237$<\037\010\264=l=\034\276\335<\233=\231V\233\275\330\373\037\276P_\367=4\355e>\010\266\351=$\006+>\262$\266=\017W\302\274\253\224\021>\320\323\247<<\347\277=\375\310\352=\021\272\253\275\204l\241\275r\034,<\322~Q\275z$\265\275k\014\327=Y\361I=n\363\231=*\324\020=\206|>=C\3659<NR\272<\3162\253=\230\362F\275$\201\003>\317\374\306\274\037\257\231\275\304\014\233=v{\301\274_H0\276\234\377\267\275%f\360=\246\025_=_t\246\273RZ\373\275\033\211\001\276\213\2022>\024\344\225\274\031\350\227=3L\321=\034\361P=a\354\306\275\205\322\220\273\312(I\276\221\232\337=\355\017G\275)&\037>\267\245\323\275\222C\223>8\342*>\253ug\274F_\307;\303\211\274\275\201\211\217<\216\003x\275e\033\374\274\021\352\357<\277\245\231=\022\372\316=tH\207=\353\350\034\275\371\377\021=r\215\023=\305\320\256=\223\023\320=\331\230\021>\301Ln<\310\235\306\274\233\300t\275NVR=\035\356\223\274\314\024\010\274\'\312\034\276\202),>\3361\312\273\341\277\\\275X\362|\275\2225\210=\004\267<\275fB\274=\217\005\376\275\365\327(>%Nq=\rl\211\275\177\202Y>\261I\313:\346=n\276\326\273\257\275\312,\314=N\036\335\274\317)\365\275\217\224C\276\376E\242\273\260\330\257<\217\251\224\275r7\030\276\200\311k<\014\020\300=*Q\327\274\366\243\200=\336+r\272\321\036x\275\366\2773\275\001\335\217<Z\310t=\366\324\246=\020\316\255\274\303T\242<\004\275\323=M\263u\275\320yz=\020R\002=03\343\274q\216\177\275\327\325\005=Y\202\303\275\354\334-\275U\001 =5\367\214=\312\221\271\275s\316\344\273\232\337\365=\212;\264\274kJR=R\211\242=\247\312K\275;t\007=\375\312\327=\332Z\255<\'[d\274\272\016{=\016\305\210\2755O\261=4\325\033\275\333\332[;\210\342\n\275iCE\275\370\302P<\004\255H\273\212\377\246=-\325\261=Fi\212\276\032\254:<\035\240\354=e\242w\274\0321\301=\333O\242\274\277\333\223<\313W\202=<6\t<\242\326 =\022\334\372<\310hz\275)\330\213\275\234\021\022\275\276k&\276\336\325\270\275\370\232\035\275\226\321C\275m\003\252\274pw$=\032\314\246\274\300\234\030=f\354\243\275\231J\n\275\351\223\177=\331\037\345<\237\271V\275}\r\031\275\314t\034\276E\236\001=\357\341\003=\217\312\032=$\004\306=\356_\211=\260q\021>\335\347\344=\036\363\313\275K\367\014>c\276\322\274\263\313\242\273D\261\005<qw\214=\251\202\367\275P\r\222=\353KD=\222\256\236;\206\251\363\274\321&\262=:\243\371<\26028=\376_\234<\317dX\275\237\0361>=\325\035\274\253v\250;C\325b=\232d\364=\247\344]\275\370\333O={\257\247=\227\0364\276\316\377s\275\036p\000\276\322\247P\275\325\224\223<f\234\242\275\231A\301\275\347-\026;\315\346\376\275.\353\207<-_\312\274\277\260E>.\3134\275\361&s\275\2628\350=\362\301\032>:\376\010>\221\351\200\275\337B\211=\022\306\022=\264\354\370\274@\316$=\354\315\261=c@\006\276\277\221A\274\201-@=\000\017\215;\033\361\371\274zp\324\275O(-=C7\241\275K\362\023>\337Kc=\245E\\\272q\215\325=\367%\204\274\261\337\251=\250s\311\275\252\355\306\274\244Y!\274\234\262\302\274\023\027c=\222B\232>\251T\247=lXT=Be\204=\204\244\226=\232{\373=n$\335\271)\005\352\274H\334N>\033\344\245\275\265\211\000=\343\304\202=\302~\013\276u\016 =\326_\347\275\340\274e=\354\276\202=\274\224u<\370\017\316=\201>(\275\351\272~=\325<\251<:\260\301\275\226kq\275\304\206\025>\2410\205=s\246I\275\213\"\317<\034\231\354\275\003&[>\223dG\276M\007\213=\375\277\300\275D\215\205=\200\2537>6\022\006\275\241\312\217=Q0(\275g\255\270=m\231\232\275\177Y\217\275\325w\004\276w\364\017;\303\335\367\274`\"\301=\265\370\245=\321\301\275\275\250+\361=8\002\306\274z\375\212\275\210=\311\275\275P\354=\305\242)>^19\275nD\343\274P\205\211\272\335\006\233=\tRr<\337g\334=+\367\010>\343I\360\275et@=\\\001\267=\275\203\332\273j\370\t\275{\327\207=\202)\243=p}\017;\032\345F=\371\251\037=\311\362\236<\320\244[>y\017\276<\271\237)\275\004\"\214<I\025\021\275\243X\376\275\376}|\275\222\237\242\275Q3\302\274@x\177=w\311\251\274\256\032!>=\216@\276N\271w\275\021\3272\275\215S\354\275\375\2710\275\374^\023=\332p\035\275\366\227\367\275\256\210@=B\360n\275\273\201\245\275\032*\200\275ITY=\002\007\000>\225\220\366\275\205`\323\275O\242\361\274+L\222\275\016D\234=\2417\021=V\022`=\241\252;\276B\316\331=\227It\275\267\217?>\220U\237=HBi>\355\225\241;a\034L\275C\n\322;\367\200\204=D\216\350=\020s\233<o\360\205;\243\010I=r\030o=\347\363\204:\323-\322\273\022=_<\351T\263=\032\267\007>\265e-=\016\313P\275\377\007y<\271\271\260=)\331\301\2757\014\210=t\363^==\344\031>\n!a\275D\353\207=\267e\023\275\273<\313<d\201%\275F{>\276\214\347G=m\365\237\275J{\235\275\035\232a\275\231\336\250=\205\237 \275\234\2764=\\\266\007>\375\312Q\275\272\227\031\275\313\213\216>\037CM\274r\360:>\303\306\354<\017-o\275\206\343\'>b\303\253=gC\224\2750\003$=\337\365\233=\245Y\320<X\034\320\275h\323x<\201g\240;^\336\353=\023\250_<7N\374<\001\317\031\276s\231\203=\262\244\217=\330\007J=\372\341L=\246p\347=\3335H=\333.a\275\316(\277=\033\001\020>`\341z=\330-\257<\347\343.=\302C\276=+\025\004\275\352$H=\231\316\241=C2\250<\036\210\023>\241\307\313;\316}\231=%jl=\034*9\275\217\367a\275,OF\274\377\211\340\275\177qO\275\360\024\307=%`\314=\224\026\336\273\330\231\356\275\277\275\335\274\321\302\257<\002V\006=k\036\023\276_\016\212<\375O\362;\363\020?\275\204\246\360\275&\333\027\275\242\237\366<9\265I=\261^\342<\376\260\375=\323%\014\276\355\022w\274\315fH=\320p\350=\334.\347;\330\210\273= |X=\250DO\276\362!\000\275r%\034\275\214\034@=\275@\306=\026.o<o\022S=~\226\275\274\243D\353=} \217;\031\273\344\275x\021w;8\201\336<)\005M\275\235S{=#\300\030\274o\247\004=(\222?=P\335\222=\206\000$=\273\t\202=oA\217<\373\253V>V\234\277=F\316\230\275\3264\262=\261\206\264\275Vk\321\275nT\307<A\234\354<\224\"1=\354\340\345\275\033\321\002>\310\203\275=\241\304>>\335G\027\276N\231\323\275\217X\256\275&5\351\275\341\204\215< \226\354\275\276\226m=\037\343\276\2747\203\345\274w\243\322\275@\"\236\275\326$\366=\231l\021>\0274\343\275\366^\340\275\201\022\205<\311\232\206=\230}\210\2732\217\200;\352\365]\275\242\354\317\275S\201\366=\206\202\205>\"\245\032<\271\006\246\275\024z\001>\376y\271=d\305 \276\364V\032\275SZ&<\t\354U=\323\244\233\273\301\343]=\210\213\246=\020\177E=a\207\023\276g4\277=\362\313\372=\227K\273\275O2s\275\023\307\324\275\222M\013\276%\344\235=\315\273L=d\223\016>\312m#\275\355a9\275\273\217E\275\343\327\212=\235\336M\276.q\016\276e5\230\275\230\232v\274\312\033\304\275\3316\031>\324\207\247<$\"\266<\217\344\203\275\253\265\221=z\307\226\275\326\021R\275t\264Z=$\314a<\025lO\276C\261\325<\357\2102\275\365\227E\274\366\250\344\273\224\252\264<\337=G=\254\261\270=\013LB\274\014\366 =\251E\207<i8\242=\335\312n\276\036=\352\273f\332<\276C\2053\275c\312\264\274\334T\205=\214\302\344=\376Fp\275\314\030\213\273\010TH\272\264\010B\275\344\277\236\275\255\244\234=\005\252\243\274\312\024\206\274\366\340\371;\351\376\236=\206\020\004\275:\230\026>\264Z\037=\276\202\'>\254\023\r\275\246\205\377\274=\372\272=\203\312\340<\237\372Q\275\227\311\010>\257\n\343=\t\314\366\275\343\033\214=rY\"=\277\221\236=\211\372\324<Hu:>u8@<D\\\362=wik<G\246\000\275\034\340-<\236D\037=D\333\235<PJ\027\276\314\263\267\275\323x\'\273\265;5<z\036i>\315\343\215=\377Gu;H\002\007<\325/e=u\305d=\252\272@=*\014\233=#\374\3049\177\177\024\276\325n\200\274\257\026\274=I\263\204\275?\021=<\332\204$=\241O\353=\2423\026>\2630\246\274\020\006\302\275\234i\236=\3735W\274\263\274\017\275\321\026\267\275\360)\031\276\265w\242=\"\350\237=\233g\220\274Cd7\276\223\361\216=\3047>\275+:.<}\020e<6}r>\014\234\201<\370Q\024\276\365\003\373\275\327\322\202<i\003\r\276\220\027\351=\0017\255=M\345\267\275\200\306->(@v\275\226\363\033\275\320\300%\275\233\233\200\276\341!\007<\237\'\022=#\005\224\275\227\266\017\275B*8=)o\342=\037\270\204\275G\3367<\"\021_=$xk<=U\365\273\266\023\353\274\377\001>\276\354\327$=\362*\265<b\343\024\275\255\360\246=s\377!\276\311\312\237\275\241\314\320\274\246w\263=\033\376\270\274\210\034\341\275J\030*\2763r\250<\235j\303=\261\273\207=\327\327\314;\230\306\346=\376=\207\274\343\273\014=\017\220\331=\376V?\275\327\222E<J+\003>\255Z_=\376\005p<\035\332@=\232\373a=z\340\257<\260-\261<bf\235\273\322\222\\=\3707\240=\322}\n\276\374\233\303=\317\023\321\275\270\206o=\233\016K\276\025\247O=\357\002\235=\014\316\250=\356P_=\\-\033=\2640\025=,\315:<H=\203=1s8\276=\357\312\274f\234$\275\343\'\230=k=\r>\210\207s<hX<\276\200\366\256\275)\017\236\273\207\242M>\002M\346=\363\005\276\275<\263\320\275\252\262]=\222\026\342<,\3400<\221 \342=\300\311u\275\026\320\"\275N\265\014\276\214\271B:\377{!<\006\262\365\275\314\341\226<\022\370\376\275\034\3618\275X\361\215=[O \275\231_\235\274\370\347\227\275\241\305\204<l\303\243\275Lo\202=^V\260\275\322\207\216=j\025\227<L\"\360<\271\276Y>Qr\344\274\207\002\t>\337\306\263=\311=\032>U\016\033>@\036#>\302\353\205=\256\341\250\275I\036\261;\025\310\213\275\313\257\365\274\tz0=\260*\223=e\270\264=\342/R\274\223\273v\275U\256\341\272\222\363\031<\362\347-\274x\276>=\330\230w\275\322\027\254=M:\232>\371\2560>\272\241C\276\325G\300=\210\3121=\333\324\340=\201\276\241\275\034_4\274\274\267\314\274`\274\014=5a\347\2742\316\004\276\221\372\010\275\017u\314=)\345U=\312\244\316\274\220a\200=\266>\355\274\251%\234=\327\200\n\275\032\260b\2759\036\234\275;Q\373\275n\372\025;vY@\276\370kW>uf\205\275\371\333\263\274A\t\301\275\346\257\227\275\346a\000\274lF\270\275\2270A=\217\254\251=1\024m=\224\\,=r\200T<O\002\002\275\277\237\255=\232\303\340=vdL>\236\346\324\275\261\354\372\275T\030\007>\237\214W\276\350\020\000>x.\t>akB\276|\364\305\275\364\357\353=\204\237\225\2733\016<\275]\377\364=\003\272\353\275\240\230\2049\263\233\014\2753/\006>G\263\233\275\312\r \273w\361\\=\207\366\013\275+OV<%\007\037\274s}m=\272n\t>zR\365\275\261\266\204\274\005\324\344\275\301h\332\267\237\010\270<\034X\344=\016\n\336:\t\212|\274k\343a\2754XC\275\3236\252\275\243Q\026\275\212\337\343\275\265\r\300\273\347\002\237\275\217f\023\275\336\313\034\276\227\371\220\273\326\246\307\2756\254\322=/g\210=\374M&\275{-\014\276\364R\031\275\230s\024\275\275d\221\275S\022\216=\t\r+\276\343\\\360\275\024\223K<x\334\233=\037*);\240{\010=-#\216;\n\226\367\274\335a\300<\270N\301\275\245\3322\276\364\252\235\275,\204\315\275\315\360\217\275Z\217\261<\025U\253\273%_\343;\n\306\225\275;\245\366\275Z\230\201<-\177m=\"h3\274\356\033\037=\365\370\003=\205q\227\276g\244\353\274+$\265\275\347\355Q\275\2673\311\274NN\221\273\305\244\177\273j|\203<VM\302\2756 \324\275\'Gs\275\226\346\241<\260\374h=T\007\264\274fn\337\2752nP<Y*M>\206}\365\274\215\341\245=\277E\310=-\033\221\274g8\\=2)\271\275\2165\261=\r\367\005<\341\227B\275IM\316<_\212D;\\.\350\275\231\313\321\274\2467\301=\013\262H<1\305\345=\336\"-=\332<\330=\220n\035\275\311{\254\274u\023\204\274\346}\001=K\361\260\274\276\021\232\274\034\207A\275\343^\336=\227Y8\276\244\302\025=\353!\376\275\274L\027\275\306\010\312\274\216mo\275g@\">*\272\221=\203\374\257=!\364\342\274((2\2733~\313<\000!\201:\325\307\312<7\177\022\276X\n\250<\246\275?\275\024@\263\275q\232\236:y9\214\275\250O)\275\303\354\240;\221=\034<\033Q6\275\200@\334\275\372\026\034\275\216\374\245\274F\n\032>0\013\332<\3456d\274\017b\372\275\242\317\237\274T\267m=\247\322\266;\347\3620>\006\244}\274w\257/<\275O\325=n\033\230>\026\244O\275\254\213\336=\301r\267:\242\226\372\275\366\204\032>E\006\205<\312\273E>\315n\357=%\272\243\274\274\241\232\275f\221\216\274\n!\014\276\3570\360<g\310\307<\346\353\350\275\217\304a\275\237\366:\276\276\201\323=\205\341\201<i\033j\276N]\202\275s5\330\275\024h\306<\273\320\304\274Kr[\275\024\337\201=!(\r>\274\t\237\275\037\001\014<v\036t\275\ni\236\275\222\255\206=6U\203\275m \231\273Q\347`=e\004\022=\252n\271=\016\277$=\327\006\266\275;S\r\275\300b?\275[\257\"\276s\000\253=\376NC\274\361\315\016=\336\036v\275\346\301\001\274KE\207=\222\034\241\275\247_\017=\031\337\351\273G\305\t<\026`\032>\332\024\013=\256\207 \276\004\201\266\273\030\355!\276\366o\210\275a|\r>\261\251\300\2751\333\326=\2471\253=u\270\031=\373\374B>\024\242\201\274L\263\000=l\251e\276{a\225;\2636\265\274=\324\207\2753\346\262\275\274\225\030<\214\314[\275\361\202o\274\305\247\201\275\3624\003\276\320\223\217\275\320\r*\275\t\353\313\2754\200\334<\025v\207\275\265o\326=_Y\247=S\323\215<\010\027\337<\2502\267\274\334\317\375\275\273K\341=\344\200\214=\205\275-=\317t\362\273\037A\023>1$P>q\r\204;\317b\001\276I\306Q=*\021O\275i\221%=,j\272=\363\343\014\275 RX=7\274\311\275\312G\320<\362\306\363\275_}\212<\245\231\021=\026\021\004>\007\332\227\275\025re\273\322\007\251;\020i\354<\331\020\034>\003\363\323=\221\327N\276\202\246\245=H\321:\276\235\256\301\275\354\367\335<\374CU\2756[\303\274\264\316\213<\'\024\231==K\266=\212\246G\275\0057\031\276\301\312\342=\006\304\374\275\206\002\375\275\177\334\254\274d\237\303=\346\254\214\275\000\'4;\210Z\024=\036\223:=\027\0243\275me\343\273C\261\305\274\3019\264\274/x\306=\003+\037>\"v\014=Ce\200\273\360\017\025\275\3778\357\274B\247\242=/\312\315=\252\243\025\275}\342d=\036e\330=%\2037<\023\341]<P\326\025\276\216<\202\275=\212\024>\014$,=\233\334\331=\275\241\305=p\352\225:\'81\276\3637\313\274\036\021\033\275\337\210\204\271\200\355\031>]n\240\275\211\2353\275\335\315\264<\001\r<>\330$\027><8\022>\323lX\274\300Yf\275\024\323\315\274\212\'\205=\353b\340=\037\214\343\275\242\311\220\275%\302\017\275\030\276!\276\357S\335=\203,\252=\310F%\275\366@\275=\243G\017\276\230\220\252\275,\023\245\275\333Q\305\275,\362E<\364\330\237<~V\304<IB@;\212\226\360=\034q\007\275i\354\311\275+\033\027\275TD\236\275\375|\370<\316\3307=\232\257\023\276eP\272\274\367k\231\275\303\010\n\275\035Q\374<\271\\]\276\006\027\200=N?\254\275\340O\014=b\367F\276\320\222o=\312}\250\273=C\221\2751\034\225=\247\314{\275_\200\307=\253\300B=KHh=\341Y\354=\032\3622\274\013\336;\276:5M\276\275<\301\275\360\324\361\2750\235-<c\321\025\276\022\027\210<\267{B\275\021\022\023=\033\327q=\312\244\343\274\014u\203\275\230\027\353=\003\031\243;41j=t\014\201=p\177\202\275\310\000\314=\037\036\321=\n\030\377=\213\"\204=\323\032\266\275c\263J>\235\030a\275\321\313\005\274\331\'\254\2750()>\320nY=\370\3144=#\022_\276\021\\\007>\005\3705<?\251C=\257\307\255=\230\236\360=\003\272\\\275\367J\315:%\214\373<\306\351\016\276\'\2156\276\220\261\277<\340_\020\275\337\340\245=\242U\323\273\265\3401\276\302\007^=EV\300\275\312\021\003\274\r\333\001>\220n\366\274\r\267\007>\336~\202=\001t\014<\207\301X\273\202\255(>\221\210\211=\237\372h\275\271\277!>\340\305\277\275\264* \276\273\213\375\274\300\271\000\275\253\302\'=\027\224\264<\036\311W=\016\220\n\276\227\214E\273$\373\374<\006\223\324<\243\001]=\002f_=>\241#=\207\235w=\t>\272=<U\245:\335\337\212<w\026\251\274\270<\244\274\200 8<-\343\270=Rt\021\275`\251\345\274\r\355\207\275\\F\310=]V\311=\250Y\036\276IFU=\025\374F\276\226H\3259\366\363\215=\312\234\310\275T\310h=t/g=K\r\021=\333\024\326\2753\353\364=R\271 =Y\005y={\003\270\273\006\262R=l;\255\274N\'\004<\003j\211=\325u`>R\3729\274\314\265\374:\211E\324=\256\241\010\274\334+d\2737cS\275\017\232\251\275;\036\022\276\023\301\200=\264\332\265\270\341_\017\275\251\247\023\274\014\310\344<_\244\344<\344\314f\276\370\346\212<\001Z\242\270}sy=\277\260\216\273\032S\212=\350\256\026=\257\366\375=\256^\020;\035\262\001<\210E\204=\315\202*\276\227\263\312\275\320j\346<\315\236\233<\007\005\263\275\372\005Q\275\036\017c<(T<\276\230K\243=\004\323\226\270\000\236H\275o\205\260\274\013\313[=N\270-\275\314B\341=\007\376L;z\213\374;\342Q\013=m\306\002=\232\324\344=\205\007\007\276\262o(;a.?\276y#\214\274\316R\317=\253\200\247\274\242\266\016>]x\024=i\'\331=n\316\344=Z\227\310\274\207\367\021>RC\241\275i\277\034\276\301\177U\275j\253\212=@\370H\275\332@X\275\320\202\223=\255s\333\274\r}\002>\002\007\247=\\k\325=\321\277k\273\251U3\275\2727\010>7\311\274\275vb\365=\017|\237\274\035\212\237\275\\\211\023\276\001uH\275\256x\037>\332\272\252\274\276E\203\274\223\222\215\274\r\361\035\275\341\017\177=0A\004>8R\266<x\2776\275\265\231\272=E\324R\275\343uk=\214i\212=_\361l\275\322#\337\274\361\237*\275#\207X;\211\223\215\274\202\363L>l\364]\275W\321\033\275Y\321<\275\240\234M>\201bv\275\330Y\363\275\222#\260\275tc\265\275\250\355\205\276\244W\220=\302\326\370\275p\r\213\275B\\*>\310\377\275\275(=}<D\013\366\274\256L\214=5\1774=V^G>P\252\246<z3\205\275\313\n\303\275\2647\000\273\267/\221<\tZ\346\274\"\211\240<\356#\026>hd\264\275?\255,>\024\212\210\2748^Y\275\322\245\330<\333!\361=\035\3468\275\030X\251;\365\307\\<\374\2666\276\024\021\023>*\253\000>Q\026\230:Q\033%=p\354\225\275\r\276\311<\225\272\362=<\236\220<l3.\275*A\024=\210\024\251\275\206\331F\275\250\355\021\273\250\253\322<\316I\221\275,B!=\272\315\361;m\024D\276a\356\014<\336\254\365=\343\304,\2764\210\361=\037\315`\276\235mE=\343\206\010>\".\010\275A&)\275\n%\262=z\241_=\210D\'\276j\346\207\275%\002\014\276&?\221=\242\241\225<\000\306\035\275\364\340\'>1\264\242\274\302\242\340=\265\242\215=d\333\000=\245w\211<cxw\275\356\2767\276\304\235\034=\007wU\274\024\203\333=\342\323\377=q\000r=\250\2632\273$\326\311\274\305\301\344\274\003/\373\274\302\321b\275\r*\020=\363r\266\275\254\003\206=\3623\317\275]\272\022<zN\324<\216\237X=\201\002\177\275i\270\227\2757\215\251=@!.\274\224>9\276\034\312\226\274+\363\027\275\227,.\276\222\3342<e\240t\273\314\362%<\311\273m=[\204+\275pX)\275\022\327\236=aj6=5N\351;R\216(\276\366+\006\275kr\346\275Lu\306;?\216\274=\344?o=a\026~=\223J\020=C)Q>^W\212=$\213\202\275\371\367\224=\352\221\031\276^z\373\274\004\207\252\275\373\266Y=\220\351j\273\006\'I>.\351\000\276\212\007\373=sD\017\274\306\021\276=e\377\351\274\232\230\016\275x\250,\275\316y\347\275x\036\233=\371\327I=\017\330g\275\336\024\235=2\265\316\275t-K=T+\006\276R\327\332\275x;\221\274\361\237\212=Wvq\274\302:\203\275\\\367]\276I\247\345\273\202\231\020\276\001\323\023\276\225P\307\275\024\361\223\274\3301\247=b]\002\275\037\035\244\274_\372\n=:\023\360=\250\265]=\312\017\266=\331\261>\274\346\340\256=F\317C\276\'\302\025=\371\234\204\275\236u\001\2761*J=\326@\240=\240\035\021<\363\215@=S\306\220\273$\273d="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1060395
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/random_uniform/max"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\020Z\271<.\275\274=q\\\242=\353\273\372=\226\203\241<\203\002\033=T\346\311=\246UJ>\272\231!\275\327RI=\375p\243\275Z\272\353\275\325\205\021=}\241y\275y\201\315\275v\276\021>\217 `\275{\2268\275\235\345U\276\021\243\331<\023\240 =1n\311\275%?$>7\210T=\033Eu\275\202\313\207\275\214\220\n\276>\276B\273\301\313^=\305\325\353<\304G\335=\t\025\304\275`\3413=Gh\351\275\250\302\373\275\312\377\241=\2126\200\275(\270\306</\340\375<\265u\321\274f\200\254\274\211.\354=)}\002>\216\035\272\275?\302\004=\300\023s\275\353_\306=\006\314v\275}\262|\276\351.\257=\363t\231;\026\210%\274\320\211\321\275\026!\350\275\335\010\317=Py\213\275\351\3457=\260g\322=J\324\\\275wu\221\273\234\201\375<\302\207\221\275\360\3164>ec\217\275?\205@\276\201\220\311=\307\351\374=c\235|\274\267\010K=P\327j\274\225G@\275\262\035\265\273\367\240\302:\t\353\327=-\'N=\026\241\360\274j]\205<\266\256\251\275E\026!\275\351\371\206=\231\365\214<\265\270\310=\221z\302\274\014\234\022\274\256Q1>G2@=\232\222\304=%V);v\n\264\275\301\255\341\275\317\001r\274\245\272\363=o\344\340=mH^\275A\343D<\2450\242<\356!(\276D\021\364\275\343\210<<w9f;,\356\333\275Q\344\221\275\r\211\271=\037\030\266=\301\032\261\275<U\014=\250\352]>\245\354\316=\2771f\274f\257\270\275v\363\367=\337R\222:\315\3170\275g\345\345=\225t\360\275v\337\374=\213\016\343=\260e\362\274\333\201\243\275\300\217\006\2755\316\264<z\362\001\275\r\325\n>\255\247\221=\227l\217\275\')\243=i\376&\274\230\374\360;#\214\255<\340\307\273\275\265\313\262\274,L\354\275\"\014\t\274\2053U\275\365\240o\273H\274\201;\332\377\213\274h\n!\276\001\027\003>\211j\354\274\331\256\350\274\245\261>\275cK\200=}\357\'=\206\356#<9\231\225\274\252\374c=Q\304>\275\001\203O\275>\032j\275nS4=\253\003\217=/E\332=,\r\257<7\364{\274\225\303\356\274\036\221\020\276h\231\001=\213+G\275\017\242\021\276\377\350[\275\371\254\r\276\3264V\275\007\327D\276\370q\231=\276S0>\347y%\275\304\'e=\317\220\212\274\364\243\367=\025\250\356\274\271\310\271\275\334\247\227<\034\236{=\310\237\344<\221\267\250\275iC\257=<\004\037\275\n\356\221=\004\230\006\276\260\322u\272\274\026{\274\032\021`=\215\362E\276a&J\276\2232K\274\314\034\213\275\314\320\342\275~$.>\037G\202<\337\310\021=8\345\377\274P\000|=*\032\325=\177\364\035\276\235P\261<\021\203Y=\332x\035=\025\0312\276\241\004\006\276\2543\000=\264\302U<\3768\372<\352\225\224=\022aQ\275\220\014\276<:\340K9\310g\305\274W6\013\275:Pr>\023\321t=\340Z\\\274A\300z\274\016m\377=\232Z\364<\2314\001\276#\362$\2740\215\223=A\363X=~\3170=\304\337a\274<\270/\2750\354&>Z\300~<X\031$=\342\330\017\275l\261\225\274c\255<\276W\365c=\225\262\236<!\263\221\274w\001n\276$\205\235\274\255_\246\274\350\341(\276\216\225?>\246\026s=\337x&\276\377\301l>Bs\213\275\354\364\353=\013\246c\274\307\202\035\276g\200\033=\354\256\034<q\313\300=(vi\274~\t2\274\263\263\273<\356\010\203\275\325\376-\275\177\366\200<\3448r\272e!\371\275_\314?=V\036\372<k\251\336<\032*\263;\250\317\205\273\376\227\034>D\273\263;\317\234\222=\275\333V\275<\316\001\276J\357\307=\265j\372\274\370\2761>\357\325\030=f3O\275\020\264\244=/\014\325<\275~6>\177\330\354\275-\372\342\274\271<.= \361\261\2753\3322<\304\305\355\274.b\271\275\311\275\002\276\r\214\237\275ep\322\273+\346\010>H\257\002\276\215\337\214\274p\246v\275\345\335@\274Jl\304\275\322S\037\2751\342<>\300\266J\276\3144\264=\237*\000\276\336\344\264<u\273\344\275aV\330=O\300\020=@\\\200=\013\204\n=\217\034\244\2755\262\244<\211\231\324=\0176\273\274\357\306\246\273<\257h>\035\260\036>e\242\214\275\322h\022\275\033p\374<T\231\346\271\332\007]\275\317\315\022\275\352\3021=\236\377B>>=\214\275\007\215\312\275\207\235\225=\336\233\202=\005O\345\273\312\327\325\275_\3738\276\331\350j\276\214\357\212\2731\260|\275 S\336\275L\326M\275\010\355d\275V(\206\275fz\311=\357\027\222\275\026\365\342=\354\214\033\276Y\274\235=`\347\207\2746{\211\274z\"\252\275\332\361\326\275k\371\316\275lmN<\021#\266<\264\016\224<6fQ\275\262\243(=c\207\307<\256W\013>\253\036\331\275_\220\307<\315s\206=\034\273m=\310\022\321\274fT\023<M\213\364\273\006\226F\275\370\036\245=Y\211\007=\303\357\021\276K\2702\274\375g\264<\352\025\241\275{\242e=\3652\244\275\251\353&>(\251\306=\002\206\302\274#\257\275\275\342\031`\275\300\352\267=\321\203^=\3179\356=\244\216.=\266\353\240=\277\030\345<\347\206\254=4\203\232=\227\244\030=\377\217\222\275?\314A=\204\336x=\323\306\310\275.\036<=\317(\315<\023\337\262\275\022\242\233\275_-M\276\003\"*>\004[;>\233\244\000=\005_\333<$\331\001>\004\006\304\274\321\211T\274m\304\036\2765\200\366\275\306}\302\274\024a#\276\260@\274\275`\374\214\274\324\203\016>N\372\224\275R\266\302\275f\344>\275\025\367\202=\376\253\005=\343\225P\276P\256\000>\323\275\024\276nK\022>\304\364\023<T\320l=\343M\002>t\336\257;\257\354\321=Q#\016<M\364k\273\365\2733\275\367*(\276\353\"d=<\376>\275\202\321`\275e\275\334\275e\244\202\275\310\026\244=8\277I\274\002\205\366\274_b]\275~\300x\2755u$\275\356$n=\376 %\275\216\266\215>w<\003>\233\027*\275cG\316\274\021\262D=\210\310\232\275eW*=Ei\220=\227\223(>\224\350\007>{\242\233=\212Ce=(\252\325=\t\026\331<\251\355\311\275\006\036$\276\243\3645\2753\3051\275r\304\014>\256\335\327\275\327\217\334\274:\314\002>\251\276\211=u\306\301=\325\004|\275\363H\317=\255\217\366<\024\336C\275\270\202\005;8\202\250=\177\274\337=\335\371\n>\231\321\347=\207q\254\274\221z\006<\264\315\272\274B\364\n\276\321f\261\275\274\337\220\275z\003\034\275\026\320X=\004|g\274\375(g\275vXw=\027\265\031=x\022&=J\300:\275\271\217\313\275\261\006&=\211\301\332\275\343=\275\275\257\323\027=j\001\231\275\244\017\350\273\n\242l=\234\337\334=\271{\222=\321n\234\274\232\376\223\274\007\327Z\275_\025P;\202T\230\275A\304\346=?\343\212\274\330\331\346\275M1\001\275\253\260\031\275\250Z\335<\026\211\322\273\317\277\326\2758k\352=4\254\221\275\364\037\250=d\360\363\2745^\241=<\212.>\321\327\033\275f\026\223\275\201\204\004=\307\365:\275ymS=j\202\027>,\222\314\275\351d\343\275\215\346\211\275\025\204\203=\311\234J\275\235\010\033>\310*\334\275l\226\312=\266\201\034\274\260E\032=\250\356\003=\303\203C=\327\323\177=Xa\215\275\206\2706=f\354\026>;Bo=\334\223k\275\301\234\004\276\230\242\355<\004\343\342=\036\323\304=I\341\312\274\367>\254\273>l\225=\373\352\013\276e\030\211\274u\267\005>\220\031\217=\245\323\264<u\256\030\276m\225[\275R\033\372\275W\244\264=\013\0349<\242\000\240<\305\330\315=4&F>\342\235\350=\365\253\202\276,\373\016\276\207~\333;\213\372\006\276I\r\335<\306\255b\275O\377\365\274*@\331\275F\324\017=q\335\355:\233\3320<\347\034\"\273\020\303\355;\245\210~\275\221:\304;U\236\307=N\211\304=9@\316\274\002\377\000\275\374j\301\275t\334\'<\025\247\360<OnM=:`\322\275\240/c=\246lO>\304=\311\271\277\360\346=\220\211\025\2762\304\234=\201\362\354;\232#\245<\204\026e>V\323\300=W\"\241\275\372\205\207\275b\347@\276X\376\232\274\263\234|=1\037\301\275>\005E\275\242\343\027\275\234\354$<\341\025s\275\03547=\311\376\266=%\366\234=\205E\274=\245_\211\275\320A?<\342\255\257=\317\300I\276\265\2374\275u\\\253\274\007o\301<P\250\203=\025k\201=\214\252\343\275\020\213v\275\317\032\357<T\030l=\207\"\016;\033\206\274\275g\010\254=\217\2101\272\034Y+\276\022\260\361\275\r>\320\275b\374\315=\314\016\356\275]p\217\275D\314\017\275\206\363\240=\010\2625=\314J\002>}|s=\007!\242\274\266\'z=\264?\366\274t6\236\273\026\246\331\275\331\2146>N\372^=<\001\235=\220T\027<\177\022\302=\020\034\246=k\231\205=\306\203\323\274\214\323\260\2759\266\246=y\275\275\273\325\276\232\274\253\275\017\276KXy\275\264x\214=~\200-=(5\353=d\203!<\321\020\0318\355@\303\275\362~\275\275\346\306a\274\346h\035\276&\244\213\275\034\266\327\274\324!\263\275\0301\021=\263\021\305\274sn\022=/\354\340\275\006O\266=P\2639=<B\244<\010$\325\275\211\025\t\275K)\370<\265N\300\274\023m\205\274\325f\361=l\222\256\2727\371\207=\321\361Q\273}\346\013>\\\206\257=\370\312F\275\364\t!>\304\t\244\275\032\003\374\274\260\306\236\275p\214\324\275\376K_>\013\371\016>}\316\003>Ta\n\276\235\307V\275 \272\003\275\307\233t=\330\326\376;\342J\025<\017\365\240\275\247\326\010<>\0015\274\3744L>m\237W\275:\254\022\274\241\230\233\275\224L\226\275:L\356=\353\246i\275;\316\217=\0237\251=\"q\345\275;\241j\275#\272\247\275\243D\242<_\2606=\023\247\033>\244%\017=y*\017\276nv\361\275\002\344\264\275\255Q&\273\227\034F>\321Y\035\275w\301\353<6\266\004>\375\327\347=\204\317~\274W%C\275q\\=\275k\271\345\274\21189<N\202\302\275\035\372e\275\202\021y<\337\331\277=\362%\221\274\374\367\022>\257\371\207\275OX|\274gm\331\275\035\273\323\275\311!0\274xE\001\276\001>\375\275r\264d\275vV\006=.,\306\275\226\214\343\275\025\304\272\2750E\263\274\334\243\310=\224\374@\275\207}\232=N\304\244=\001\311\221\275\227H\027=\340\021\207\276\317\246\332=W\314@>\357\370S>\317\032\267=\023\255\356\274=\377\367<;Y\202< \263\363<\375\214\250\275\264\227\037;\355\371\344=\276\243\357\274\302\221\222\275\305\032\021\274\256\274j=eC\213\274\2369\025>\223\216\360\274\305\330\323\275]w\207\272\343J\202\275\371\245\033\275\266,\260\2759#\305\2756\200\024\276\326\221d\275\275\365B;\332\017\230=\242\245\033\275Rf7=\0300!>D\323\306\275\356\224\302=\202\235\361\275I>A>\'\266\323\275eE\352=\240>%>\210g\376=1O\n\276\265T\215\275X\313l=8R\010=\335\007\236\275\333\374\322\275\222\020\020\275\323\017\033\276A0\370\274g\261\003>\014\221\343\275F\275\221;\377\226\003=Z?Z\275;&b==*\315\275\223P\276\275\005P\035>\312V\321\275o\261\026=\270\327\233\274\354\323\253\275\224D\276\275o\266T9\223wq\275|\224\000\275T\211(\275s\222\245\275\0277\002=\303\007\212\275\302\266\311=\376kn>&\207\362\273!\344\247\275\337\265\364=E\204\237\274\337l\014=\326w\246<\264\314\362\274\257\315\003=\355\0016\275\361\003\236=_&\360\275b[\363;\256\225z=\242K\222=\303\371\r>WqL=\275-\003\275\334\204\330=\237\341\354=\246=\360\275\020\007c\275z\360\264<!\247\270=^\020\r\275\033\211)>\251\010\273:\324b\247\275\350Q\016>&\360\032\2767\276\320\2748\006\323=N\236\000\275\310\345\001\274\222\377\304\275\313n\341=\305\330Y>\332\311\210=.\027*\276\357|\010=\257\254\261\275\'Vf\275\234\032\254=\226DR=rbC=M\317d\275A\274\201=\037\253\217\274;\303\020=\272\017\316=:40\274\210\313\004>\200\343\333=\375\240g\275R\307\260\274/\0324:\353\235&<fsn=\023\2570=\235\231\360<\260\356\030>\274\016\204\275:\274\310=\301e*\276\316\264\305=\317>\270;\322>\244<j\227\274<\201g)\274!8\261\275\342PT<\2043\\=H\357\205\275\032\373\014\274\273\362\r\274\305\334?>\022\350\262=\032 M\274t\270\231=\274R\\\275\306\325\007>\240|z\275\274\360\233\275w\234\300=\344C >^\016\205\275\207^\260;Vb\007\276\3158\016>\320\206\002\275(\005{\276\336\266?=\362\246\256\275X\214X<\343\021\230=h\245F=\201D\246\274j\246F=\340\230\222=\362\256\320=7\364\236\275\310\244\254=sGi=\210\374,\276V\357!=Oy\275=L\033\221\275\2549\256\274\265\321\221<P\311\206<Od\345=\2747\n\276\372\331d\275\370#:>+]\037\275\362\016c\275G\346M=\345\360:>\357T\203\275\333iK\276T\277\271\273}\270\276\274\310kX=\273\225B\276|\022\314<\n\376\271\274}\262\245\275^\260\335=\241\314\236\274$\273\305=8\356D=\017\216<=\024\246F=\027\344!=s<\356=\244\031\021\276:\231%\275\324y>=\211\n\273=\203\004\022\275\253\262\336\275\256\271M=\365C\034=4?\354<A\311\035>\315\027@>5\313\001>\2214\365\274\243\037E<\257&\337\275\016zU;\t=r=A\233\277;\274\016\355<\377\240 \276W\205|\275C\265\276\274\303eY\276!\343\n=\355N\237=\257\26289\007R}\273{2\037\274\226C\244\275\261\205>=\240\204\341\275g?\022\276(\310\361\274\275\276==\206\270\203\275\237\220\214\275&\221\266\275\022\003\203\275d\377\272=\234\213\230\275\236\316\035\273\237|s\275A\262+\274\211^\004>\010\207\032\276FMH<\2062\354\274\226\231\250=\2536\373=6\373\376<O\323\233\275\366\372_;L\036\010\275R\235\267<\333\251\225=\300\"u:\3406\245<\006\323\031>\004\271\342\275\353Dn\275\307\365\262=v\3174\275\313\304a<\251>\261\274\177\\\000\276\226m\334<\020i\212=\273\001e\275\331*%\276\025\332\303=`a\303\274\271\t\010\276\2143\346=g\344W=k\300\n<\332\341Z\275\006FG\274\313\031\243\275\360Y)=\306\251\020\276\235G\366\275\347g\221\274\270\014\264\275\304\374\237=\260V\372<n\025E=\2408\362<\310_\223=:\304\r\275M\363\224\274k\253)>(\357Y=\306V\221\275r\223\344\274Z\027<>u\024\336<_\331`\275\236\376\377\275=-\013\275\244\217\250=@\020\201=5&]\274\244*$=\223\373\013\275\035]\270<\222\\\366\2745N\321=\273\316\360\275\223\217/\276c\377\365;\010\360\330\274=*\274\275\352\347\317=\020\224W<o\271\327=I\270\272;EK\311\275\355B+=)\323v=\341\274i=v\234-=\353\221\210=/\212\305\274\351h@\276$=\000\273\353\307,\275\021\3755<\245\332b\275/\214\321<\350\022m=\327\357\307<\276\365\215\274\352\224\024>\307\203\264<0\3429\274\360%\223=\362\001,>\236M\351=\027\023\234=\033w^8\330\321\217\275\"-,<y5\327\273\275\250\223\275S(\271=\362\201\244=\030\005\212<\022\001\372=\207\234\271<\000\242\014=\276\314\003\275\256\316\020\276\362a\t\2761\023\005\272J=;\276\367\325\003\276\373\271\013\276Z\"0>\370a\253=4\001\036>\252O^\275\017\006\005>m2\221=\031\032\305=\213\333\215=\234O/\275\035u\022>\211\320\366\275\302\372\357\272\232\366(\275\302/\372\275\365>\"\274\003\242\241=\226\377\037;d\342\025>D\221\3559\232\212\261=\354\304B\275\023r\301<8[\304\275\"\317\025>V\200\027\275\332C\214=\2328w\276I+v\275\236\326\367=\355\215?>)\312\004\276\275\374\324<\213\234\330=\265\241\031\276\351\346n=F9/<96\360=\006R\317<\342\336\371<\340J\350\274)\275J\275H\325Q=\376\207\327=\336\352,>W\2673\275U56\276\020\256z\274\304\376\220=\213\327\253\275\207P#>\353\317\376=g4\200\275?\316\240\275\213\203\026=\257i\204\275\276\204\203=\363\235\346\274\270\177\301\274\256.+\275\2759\230\274\306\024\307\274T\343==\n\241\023\275?\266)>4\302\251\275vR\304=\032q2\276\007\374\365<\357\351\035>a\254\256<\321\036\370\274\022\020\367=\n\200\361;\301F\337\275\257\202N=\027\223\331=g\340\337;W\267\205<x\361>=T\241q=\371\231\320=\335\326S\275\303V\\\276\\\350\217\275\343O9\275\244b\310\274j\000#\274\030\031\237\274\224`\362=<\323\007\275\356\017\355\272\3175,=\364\212\213\274\031\316\223\275\352\027\224\2748\261\233=^N\302\275k#\230=\016\322\'\276\333k!\276\013o\031<5\016\245\275M\320\027<\362%\357\275\337S\331\274\323g\310\275\257\032\236=\"l\221\275$\261\321\274\3500\334=\217\372\373;\335*\204\275,\2177\274IY\360\274:]\241\275n|\373=lV\223;\307\2623\275\237w\250=\033G(\275\003M\326<;\250\216=Dv\014\276Mc\243=\253\245\002\274\213.\004\276v\310\215=8G\034>d\366\330\274\034U\010>\343\215\310=N\225\007\276&s\235\275{Zh>\212,%=P\254#>\025\343r;\026\222{\275\">\303<\214E\357;\032\016e\274\233\363;=\305s\033\275d\254&\275\010\177\335\274\343\2141\274\023=\340\274\372D\023>\010T\376\274 \303!\276\371\324\250<\010\003n;\001\004\245=\\|\013>Dq\022=h?&\276U\002 \276\212}\210\272\327\212\016>]\002\004>k\316\332\275\327\326\237\274?\244\032\276x\'\256\274\325\334\341\275\203\376\006>|\030>\273ah\262\274\323\017K\275\020b\035>\034)u=\332\275k\275h\375s\2734\353\277\273^4\002>9\306\231=\230\004\304=r\206\214\273c\020&\275i\266\371=\277<)>\260\372\346;\332\217\256\275\231\334\007>j\272\r<\207\321}\274\274\221\013=\\\370C>v\313\n\276\002\212\252\273y\005g\274\210;\307\275w&\316\275\007m\260\275\341\242\217\274\231\230\355;t\362c\275NG\266\275_\353/;y\371\002\274\303_c\275\307S\'\276b\240\001\276\303.C\275j\020J\274\362\010\257<\233\2477=\260\216\241\275\001R\302\275\367\342\353\274\242[\277=\261\336\344\275:\021?\276\243~H\275\2670\233\274\270\302L=1\312\013>!}\253\275P\275\204=O\350@=8\014\211=\332I~\275\320 \243\274\222v>\275/6\322\275\200[L<\201\346\252\275\347\036\346<\004\0179=\016\203\">i\240\331\275\331\271\267\275\221\260\204=Q\017\265=<\227\321\275\271\275\201\273\272`+\275\321\320\356=9\376\314\275\177\352\324<\376\024?>JU\000=x\023\377<\367\256\352<C@\336\275h\322}<\211\2201\275\033\310\023\275H\370\035=~S\343<c76\276\244\345\263;\245At\276\340\373\004\276\215\210\003>\253\300a=\330\321\212=|\325\213=\265`\252\275\355V\305\275U\257#>%\262\264\274\222\017\264\275\3167K\275\355o\347=IV\211\275\226\207,\276\330\307\237\275Ry\234=\021\201\223\275B\nK\275\220\272\226\275\256\210\302=\033K\230=\250/\013\275D\342\215\275\347\330U;\365S\307=\027\033\017\276\306mT\275\314[l<\332I\361\273V\344\002\276\243\215\305\274\2553\254\275r<\035\275\211y\246\275\310\010\273;}l2\275\3009\314=\2311\302;}\270\327:3[0<\177\036G=\367!\203>\337\243N=\3574\322=\317\206O>~\371,\276\304\324\035>\342L\314\272\026l\003\275\335\315-\276f2\334\275\236q6<\037\374\272;?*\241=p\251\304<\220\213\025>\207j\267<0\222\230\273\340\025\r<I\204\257<C\331\321=,t\354=\020S\264\275\307\306*=\341\'\246<g\322\031\276\235\243\261\275\351\217\022\276\260\326g\275rfT\275\332\211\\\275\343@\177=\331\3071=i\206\003=\020\362C=\226\334g<\334\315\360<(&^\2752\235\310\275}\342\210=\260=w=R\237\311<\314T\212;\n\315\016\274\261\240\314=\206\367\243=m\355\020>\246\304\222<\221\274\373=\310\202\232=\343.n>\300\230\'=\343\324H\275\224\273\256\275\336\275\216\275\241@\247\275\032T\252=j\014\010>\0238\002\276\367\264\267=\31049\272\322\375\221<\200\236E\276\332Tr<\014\360?=\363\r\006>\353F\214\275\247=\265<\025*\205=x\322\003\274Q\332g\275}\317@=\312\345\235\275v\035\326<\334;\257\275\254l \275b\336\032:6W\225\275v,_<\305x\'\276\300l\n=\255\301S=\022nx\275\244\316\253\275\346\2278=\355>3;\354\025\362\274\":\353=\000>\\\276% \315=(\276\000\276\177]~\275\247\335\201\275\276J\354\275n\213\341=\305\0268\276i\214\262=Gy>\276\322\200\265\2751{\347\273\340\271\007\275[\311\027\276\325\221\201=\0271\002<\327\365\265<Y\215\235\275_\234\257=/\'\207\275\215\006\360\274\276\372\306\273\250H\250=\320\247%\274\367\337N=\362\020T\274C\371\336\275IK\356=\314\317\242\274\007\336\007\276\032Iq\275\257\216\263=\300z\325=4\306\203=5\211\222=\215\265\r>{\270\315\275\3516\002\275\324\360\222=^\"\234\275\253\312\353;\364\2416=\322\201\350=P\317i==\025\254<\322\350\010\276\250\215-\276)\250\200=\025\201\260\275\260\014X<\216\372 \275\230\260\232=i\006\312\274<\260\031\276\"1\032\276\313\363\177\275\323\220\331\274P\350\001>Iy\233\274B\316\346=\332\'\214=1\362\r\276\031\250\255=s\320\246\2755\003\010<\241J\375=\350\037i=CZ\026\276AF0\275\343\316\227\275\213\230c\275G3\202<\321\032\230=\3217)=\007!i\274\205v\215=\264\010}\275\207:D\276\010k\316\273>1\217<\361\371\225\275\241f\363=\007\363\320=F\020A\276\021\035\346<xDF\273\327T\024\275\336\3573>9U\030>\3543\245\274\202\247\227<n\007\244=Iv\342=j\342\217\275\257\3626\275m5\035\276\2641\032\275W)\260\274\320\301\023>H\210\341=\204\005\233=\027\030r\275\215\353\314\275\005\263\366\275\203+\211\275]\315\331<\234\213\347=U&\242<%c9\275\340\016\237=\0218a<\027?3<5\221\260=dr\330\275\213!\355<\325\327\274<\\\356\362\275ch\315\274\006\2016\275Q\345\"\276\344\315\267=O\264\365<\227t\304\275=[P\276E7 :v\030\226<E\361(\275u=\305:m](\275i\246\206\275\031\t8;`\214f=\313d\245\274\0342=\275h\331\371\275\232r\363\275\220\177b<\034\376\201\275\222Y\347=\26344\274\347\"\234\275\315\036\031\275\017\310#\275\211\025\322\275\306Jw<\372\346h<\n\200\243\275S\266\314=\375\315\271=QW\275=n\021\371\275\264^\216\275(\332\242\275\376\222+\276\254 M<=|(\275L\327\312=I\351\003>\200\373\000>\331\353\"\276\303o\307\275V.\351\275p\343\215\275Ja\212\274\030;|\275\270b\205;\260\302\341=\"n\371=\277\310\016=,\307\335\275\261K\002>s!4=\237\330\334\275\177\252\222\274L\005L=3\013\305=\314\340\227\274k\326\317\275\022x\033>\234J\031\276\353\244E\275\3066}=\244\"\223\273,\356N\276\307\316}=\311\320\347\275\222\250\303<m\334\031>\003\240\204;[\242\226=wD\264;a\372P\276\212\247;=\213\223\260\275b\024\254=\335\032H\276\307?a\275.\242\246<\355Q\020\276=\247\007\276\'V\275=\343U\205\275V\313\356\275\227*\357\275\366\273\\\275\000\3143\275J\322\334=\231\217N\2765<\326<\200\311\216\275\275)\226=\244]q\274\320\307n\275S\254\211\275E\276\256=\353<\215\273\266t\010\276\374\260\315\275al\325\275X\304:\2765\210\264\275\017!\274\274\325,\310=\020\0266\275\223]D<\312U4\272\242<\030\2764\377\333=4k\376\273a\\\216=\263\360\341\274\316\222\214>\r\312\206\274U\240\325\274\022\036\200\275\277\362^<<\023{\275\346\261\'\275\356\035+\276\264\204l\275\223Z|\276\'\311\037\275J\266\242\274\206\362\304\274\252(\332=\226!\233\275\234lf=8\340=\2767U\241\275`\373\216\274\261EZ<a\214@\275\340\343\227\275\016\312:=\245\363e=-=\201\275\233\324\334<\353\275\353\275\220\312_\275e\347\315<\312\262\250<>\r\t\274\330u:\275zeq\275*=\017\274/v\036\275@\353\025\274\334n\254\275\377\220\205=\223%\211\275\032Z`\275J\r\347\274x\272\307\274t\254\'=\016\265\302:\213\026\220=\t\351\017=g\245\365\275p\243\361\2759q\223\275\222\371\360\275\237\267\210<&2C=2\233Z\275fk\260=\222\032\004\274\036\305\266\2750Z\352;nr\235\275\270\231\263<\333\200\266\275\253_\265={\340\361<T`\007\273\366\307\276<ms\237=\037c\233\274\355\214\250=<\031\264=g\253\330=z\272\025>=\245\233\275\220\355\377<\271\211\214\275\323\302\325=O\370\201\276\241\372\353\275\306Tm<\237\344o\275!eo>z\005\n>\022\344\236=\010q\301=\000\273\027=_\262\263<~PU\275\265X\301\275\300\220\034=C\326\016\276@\347&\275w\273_\273\243\027\300<\202\\\260=Q\273\000=R\247\001>\263A\001>\3121\202=\362.\021\2769\330U\275\300\251\200>\301\017T=\361\264\376\274\252\372\336\275\356]\020\274\200\217\036\274\202\024q=y\226X=\233m\237=9B\202=\225\332\023\275\305,S>\204\016\'\275E\371+\276\350\214\355<MX\222\275\027j\250\275\235\343\032\276],\326<3:\004\276C\203\204\2748\006~=\026\021\r\275\362\300\234\274\027s/\2769\013\t=\377\200\345=v\"\234\275\013\343-\275s\261\025\276i\"\224=\221\324\372\275\2151\365\274&b!>\335\354o\274]\325\322<0\221p\275@\264\235=gV\203=\271\033\024\276\355\325k\275\254%I\274(\365\220<\252\372\255=\r\225\001=nJ\311\272\007\325\275\273\2235i>\177\0072\274w\366\257<\326%\372\274\357-/>\324A\246=\232\254\227\275\351\276\263\275\352k\207<L+\265=kp\007=\341\374\313\275a\355\036>\032\356\202\274v\317e\274\030Ra\275>\024;\275\0349\263:\265\233\344<n\242\030<[\255Y<R\004%>t\267\240=\361$\232;3Wb=O\020\257\273\322\311\032\2741\237\220=_2\030\275\3356\261=Ry\204\273\334aH\274\376\255\200\274\2463\203\275\377_\236=\274\335\022\275\301\241\246=\313\236\"\275wx\321=\215\321M\275\342\303O<\000~\231\275\027\0052\275\3152\251<\020\242\275=E\371D\275\335x\340\275V\337o=\211dI=#\365\266=41\324\275(n\302<\030\353v\275\323\030\222=\260\032\242\274m\n\273\275\337\326E>`?>=\210\277\223\275n\344\032\276;\201\274=|\360\314\274\2023\315\275?tF\275\356\204\331\275\213\337\213\275$Et\274\032\370<=\017\301\310<sn\356\273\265\276\014>\362f:>\372\320\002\276f\301\257\275\212\231\215<\030\"\231\275y\211\304\273\021\226\352<B\257Q=\010L\342\275\207\3326=\363\263\206;\t\267\313=\224o\361\274\256\245q\275B[)\275\341\346\033\276\n\351k=\362\254\363\275\000\275S\276\235Z\031>\342\032:\276\273\216;=\0269\364\275-\253\032>-\335\002\275\007<1\276\212\350\275=74%\275\347w\374;\322U\244\275\027\376\334;FRw=D\336\373\273:\366f\275,$\265<\215\202\365\274z\364\006\276\277\330g=v5\027\276s\344\000\276\\\227\213=\227\t\223=\201k\032=4@^<\370C\350=,W\237\275\005\266\231\274\037P\226\275\312m\334=+\377\216<\3119\265=\225M\017\274\206\255\214\2755\237\326\275\\\267[\2752\256\317=E\344\032>\n\037\315\274\332\310\364\275\013Jl=*\270\365\275%\036\233\274\317a\202=\001\331\036\275\254\"\334=Pv\241\275dE7>\375JB>#\365o=\017\232\333\275\311\221j\274\225v\316=\276/\247\275H\373\362\274@3\037=\255#\026\275\222U\021\275g\002\216\274/\246\347\275\247\260\220<\004\250\346\2757u\005>\376\231\247<H\256\234=\345h\033>\211\343\024<\334\200w;g7\304<`\031\212\275Ps\271=\316\007\355\273\320\014\013>\340\024\340<.\317\255\275)\n\013\276\331\321\367=\207Mo\275[f\273\275FE\246\275\352\3378\275\333q\367\274\200\231\240=S@\025=\331\340\370\275\013\336\211=\260\237j=\201D\000\275yT\236<\327\372\027\274c\224/=\327\254U=\330[\235\273(\t\245=`\036T=\000\261\357\275\023T{<\366q\006\273\324\330\320\275\350\230\302=h\350\323=\017\243c\275\232\231/=\363`\344<>\263\222=\377\016\255=(C\307=\004\356\247\275\347*\203=\002\226C\274\212\263\221\275$\273\337;\tq\240=\246I\005\275\321\364\n\275I\336B\275f\263\373=\246\003\220=<\235$>9\263\320\275\273w\231=\177X+=X\353\272=R\2641\276U7\014\275W\245\211\276\221\n\027\275\275j\261\274o\020\302\275W5\361=\237\234o>xtY=\203\276\014=/\262\273\275\332\315\355;f\311\334\274\004\366\n=\365Z\000=UX\016\275\304o\033=M\337\220\275\037t\037\275{\\\275\274\024\265\006\275\031\031\347\274<c\024\276\032\036\350\275\027u\244<\374~\253=\247\275(=\327\317\355\2753@\303=\rVH\275\232x9=\344dP=\315*\326\273\243\263\230=[\307\312\274Wb\301\274j\367.\275\210^\227= S\021=\345\316E\275b\346\322<\276\335\213\275\231\031c=h\363[<\320\003!>\036X\373\275\221\343o=3Q\256\275\305\303I=\0358\354;\252\267\321<%f\364<\005\206\371\272\374&T=D\216\240=\224{\335<\"\023\267:\007M\241\273O<}\275\262\223\262\275\363-\246=\341@y=\376\344\n\276\305\377\265=\247\\`\274\"\024\356<\n\377.\276\023\333q\276t\317\243\275\2276\252=<\246\016>\3239\252=\311{\034\275|\300?=\242:\000>\237\013k\274^#\010\275\207~\r\276m\303\327=W\'\243<|\360H\276$8\014>\rC6\275vd\246\273\013+\240\275\020\240\357\275\214k\252\275\244G\373=\271v\315\275\332\217\331=\253/c\276\'\205\276=\200=\033\276\221\270\303\275\344B\237\275\016`0=\363A\007>\276\220\024>\265n\324<\321\255\225<\250N\306\274Tg\026=\237\344d\272\367\363\240=\000/\030=m\257\252=\265\242\234=\251\224z>\246\264\r<\327\331y=\226\0075=Dp\303=\346\027\212;Nc\254:\031\037@=y0\223\275\347P\314\275\017G\306=n\220\325\2755\362\004>{jk\276\244aH\275\373\343\245<\325\256\021\275\275\256p=\307rT\276F\341=\275\243\0208>G\264\222\275\243,\034>\374T\257=[\307\326\274\n\203\000\276\246\330^\275\363o\341\275\361\372\345\275&\274\003=\213\236\333\275{6(\275\257>8\275t\022\357=\246\240\200\275\365]\212<JP\314=\371w\014\275\225\364\254=W\236\356=!\206\353\275\225\n\000>\363\272\225=\352\266\336<\252\330\256\275\272\036\242=\227:\265\275\216\326^\274\037A\226=\211\232\272\275\236\247\217=\231;\201\275\371\321\374\273\262\034O=\214\003\217\275\252\035\016>>\325l\275]o\014\275\343\233T=\212\025\312;t\344\005>\031*h=\2078\316\275\035V7=\366\351P\272\236\347\220=\360\243C\275\204K\022\275\'|\225\275\351^\025\276\255\nB\276\254U\232=j\235\232=\037[\355=\223\267\204\274c\215c<\t\266\031<\220\377\262=\373\021\273\274y\201k<_M\203\275\264^\213\276#\'\227=)\240\024>\311\233\334=\225\001\374\274\037\014_=d\272\272\275\270\246\323<\340\316i<\217#\006=\014$\213=t\227\022=\345\231\212\275o\273\225\274\302\301\254\273|%\002\275F\346\222\273KC`\275v\365\255=L\306\216\275\274\263\240=\257\232?=\211\237\226\274\200\355\241\274U\007\020\276J^\234\275\372jP\275\351\276\315\275T\302\000=\244\035o\275D(\370<a\211,\276\306J\000\276\347\330\262\275v\003\332\275(\332\207=\374$\240\275\217\246\271\275\033i\367=\370{\243\275\374\365\375<\203\024\344=\225\221\226:\364\237\314<\354\334\\=\332\232-=\273K\r\273]sV=J\226\353\274w\241\030\276\246\376-\274\330\266\355\273\014b\250\275\032+.\276\023r\177=\342C\344\273\360\na\276w\002\202>\343\004\370\275\r\247+\275\2605\372\272\362\353v<\336\301\265<~\337x\276\356\252\225\275\334\255\311<\'\361\333<\010\324A\273w\204\214\275\374z\005\276\321\335\033\276\001`\267=#\035\303=}\033\245\274\037C\n\276{Z\024=]\377J\276\231J7=\301\211\273<D\273r<\210\016\242\272\243\355\343=U\355O\274\266-\031>\362\0033\274\354\355a=\244,!\276F\032B=(\265\204\275\257B\000\276\204\315U\275\311TJ\275\211K!\275\343M\022>\302eM\275Ny%=Xk\200=\026\003!=\263\216\021\275\303\326\235\274BIo=\263U?=\375\035v=9P\t=\263S\013=\331\016\263=\305\032\253\275\nX\345=`<\331=\257\305\004;\0036a=O%w\275\\\332\035\275\312\323G=\227j\010=\201\252\373=\001\004\212\275\2450\323=#\322a\275l\347\210=\010\316\027\276\365Y\353\273\377/\312=\304&\336<\244\036\000\275\263\233\244=UX`=\"\304#=q\317\034\275\223%\213=\212\244!=F\021J=\321\252\020<VK,=(\010\216=RJ\277\274\231a\203\275\350\221h=\326\002h\275\322\335{=\236\325\302=\005\307\343\274\356q\031\276:1 \275\255\337\201\275<\251x\275\036z3=\324\376H\276\244>y\275\201d0>\265\375\216<\337s\025\276z\004\214\273se\217=\327\313\205<\033\340\215\275\204,.\275!\264\231\276 \365\223\274\243\307\254;8\224\306=\033\026\233=\242sg\275\034\336\207=\243\014\323=\020\363\030=\002+\262\275\0318)<\365\000a\274\010\237\265;[`V\275\006\305\371\274pU\t=F>/\275v\223\270<\351\375\002>\374\243\201\274\231\027#<;\225\236=\343\223\320=\310-\301=\236\231S\275\305\315*=&@\257=\267B\224=\365B\244\275aQ%>\331LB\276\n\264\205\275\247\237e\275*\252L\276\226\267\373<\250\223\374\274\370\263\227\2753\225+=\016A(\276\017\312\373\273\233-\031\276\260\372\020\274\336\276\203=\312\300\236=\225\220\016\274L!\005\276\3320\003>\020*\355\275\277\211\201=\005\361\241\275\246L\017\274;\273\206\274e\366\361\275Z\345\300\275*\035\003=w\356\365\274g\333#\276\022!\027\272\3638\244\274/\335\264\275\264\3427\275\002\240!\275\205)1=\323\005\177\276I*&=B\263\300<nf\301\275\367Z\333\273}\200\351\275\004?0\275\242\030,\276W \227\275\244?R=\354\274\316\275%\330\001>]\321$\273*\317i\275\252\004t\275\330\033\305=\3116%<\242\252`=<\264]=S\212\305=_@\277=\037\263\253=\215\324\t\273\351\247<\275G\361\267\275\341V\202\275V\353\341=L\207&>\314\303\356<\317\273\341\275\001\270\\=\010\305\220\274\322\1776=HlU\276\364\377;=\320\347\301\275Y\304\303\275[\3043\275\213,\273=\350#\035<\271\351q\275\270\023%>H.\022\276\337\031\274=\t\232\374<}\354\351<\037\342\217\276\356w`=<\247\373=\324\311\277;6\005\272<\377\025)\275\235\363\372\274Km\335\275\273.Y=\367\002U\275\n\254 \273\305$d\275\343\373\366;\360]\032\276\353[\244=4\355)\275\333\256\002=@\235\306<\276\253\027=\356y\020>1c\007\275\333*\266\275\257\n\233\275\367\373\272\274\336X\326=\242\214p=\357]\362\275]\240\300\275h?_=5Vk<\356\243)=\272\021=\275\000\212\006\276\035\347\223=*XM=\035\265\261=\213\314\201=\211-\236\275\024\331O\275\364\265\305\275\356\305\340\275[c\203=`OM\276q\225\216=\213\300\306=(\377U<\217\356\"\274\323\227<\275\226a\037;L\216M\275\316\"\277\275\020\304d\274J$\230\275\005-\317\274\352\006\377<}$y<\235\020_=\330\326\341\275\366\272\027;\365g\017=\312\373U=\300\022\367<\345\341\362\274\372\371N=4\220\204=\010\207v\275\343\357==\345\241\243=\271\3324\276\267\303\250\275\220\207\363=\265\304\331\274\237\031V=\372l\036\276O\340|\2747\177\335=\326\366\221=\026\205.>\031O\203\275\300f[>\334\336\343=\306}\362\2758PV>!E\301\274\275\343v=\026-\037\276z\357\323=\035\362\320=M\266\003>\242\371\346\275\267sm=\205N\221\275+_\241\274\236\207\335=\035\007`\275\255\237\366\275\250b\200=\026\321\310\274j\016\n>\027\236\342=\204u\307\275k\223\202\275\266j\034\274\033V:\275\014\345\017=$%\241\275\177r\215\274\307\245@<4\022\037=\314\254\350\274\232\305\326\274\264\007\366\275\327\206\202\275\023y\007\275)A\311<\024\004\243\275n\003\373<\300\033\352\275\336\302\240=\034%R\275O|\324=\005\021{>\\\265i\275b\307\210=\327\"\275=\354\3310\276\\\2174=\373\244\313=\225\200\341\275[\223\231\274\030T\246\274\375\003\303<\'\340\324\275\347D\224\274\t\324\300\275\2514\024>\t&\024>=:m\2740\372\354=\032\323\340=\234j/\276h\305\227\275\002<\305=7\306\253;\362\367\247=\0332\363<\267\254\330\275\337o\355<<a\233\275_rb\275>\271\273;\033El=F\003&\275\233\033\306<\037,\223\275|\261\201\271\212\315\241<m\022\031\2751\276/=\237A\336=\334\301\031\275\300\344\334=\251^\253=i8\034<\r\004\305;\357\235)<\37291=\315Q6>}l\271\275M\310J\275J\007\235;`\340\275<\363\220==\361GQ=\304\301\277=\342\200B>Z\001\251<*\020\261\275\351w\211\275\007\316\277;\007X\226\275\231\211\204=\307\267\367=jM\304=+\351\035\275=\003\252;\301I\256=\200s/\2761T*=\3759u=\0271\026\274\250\242\002>3\316\373=\r{\275=Y-\342;\200\254g<\225\270+\276\017\017\262\275r&A\274\020\177\312<V\375\242=\301\346a>\315<\373\2745\344\316=k\240I\276\371\252\254=\224\375W\275SG[=\374V\330\273\230\035\033=\262]D=\2024\273=l\201\t>\277h^\275\315\350@=)c3\275\223A\223=\361\002\234\275\227W\205=\367\231g=\244[\202<\324J\007\276~\035\330<\232\373\037>\017HH>\000\035C\275\252\307\031=\320?\220\27434\226=\013\314j\275\303\330r>sO\210\275\351R\361=u \354=\002\257@<\003\334\303\273\272\323a\275\230\234\200\275\032\366\252=<\':\275\226:\025\275\250K\242\275!\027O\275U\325\010>\017\217\332<9t\333\2750q\t=_\355C\275\245\330\220=\221t\237\275k\271F\276\327}\235\275\nA\250\275\245\216\364=\217\234\021\274\000P\211\275\372\300\231=\203\253\231=\030(v<$\273O\276\016\233\n=\273\372\223;3\223\252=\255\322\017=k\010\005<\212\024]\275\013\036\005>[\356\227\275u\003\252=0B\020=\306\"\236=\037;\224:\007\367\254\2737\272M\276\001\277\207=\302\007\350=\334p/>\277.\\\274D\"M\275-t\327\275\325\241\006\275\0200\307\275\001\231\276\275\2672\006\276\244OM=\377T\007\275\231\006\320\275\202K\017=\226\200\243\275$,v\275\025\320\027>\216x`\275\220\310^=\226\376\247= \365\023>\213B2<\001hF\275\232\305n=\317\031l\274\000\257\242=!\357\334\275\347)\220=\345\034H=\215E9\275P\222\030\273\016\2121=\346\001\206\275n,\240\273\345)\353=;R\242=\030\355Q=U\"\006\276*|n=$\223\024\275F\326\207=\203\347\232\275\250C\222\274\025\256\005>Zsa<\374\034T\274\323\250\242=\223\362?\275+\302*>\351N\331<\031\217&=\034&\340\275\300\3519=\311\242\n>e\345y=_Y\017\276/c\305\275\344\270\016\275\243\320\306\275)\304\000\276\330\276\274\275\303\217\\\274e\340&=\031\366\254\275\005\321\272=\2204\242\275\000C\215=P\360\340=b<\331\275\207\177\020<\221\037c\275abb\274{\320\366\275%\033$\274W%\303=\205\3742>S\317\300\273_\227\031\275\026M\214\275\0302\007\276\032\235\210\275\373h\370=\227\032^\275(\201\207\275\366\352\246\275\217i\357=\024\363\322=*\320c>\215\177\016\275\340a\201=\303\315C=\345[\253\274\033\016;=\002\204\265<\225\006}>\374\272!\275\002\n?=\327\007\201\274\333@l<\230Gf\275\254\350\301=\000C;>5\377\027=\310\3612\276\023\341\344=\274\260*=j\203\013\276\023\267\"=\315\227\010>c)\315=\357\331\030\274\211\260\311=\221hS\275\363\361\264\275_\357\261\275\351\311\036\275\202V\242=\245O`\275\0304\t>\352V\250\275P\227\311\274\316$[<\301\370\024>\2376\266<\214\233\025=\244\t\036\273\257\267h\275\022m2>\263\000\275<\376\230Y\274\223L\240=\374\267F\276\247\301&\272/\003\243<\252\270\354\275\324\333\307\275/K\3469\267\341\'\275t\303H>\337\337\214=\325l\202=\304<\037\274\354\311\204\275\340\024\021>9\325\031>[\352 >(\373\002\275\202\007\336\275\203Sp\274\363l>=J\316>\274r\207\314=\307F!=T\306\300\274e\034\010>\320\275\014>\3509r= \256\356\274R\253$\275\374X\333<\206\257\005>B\220\247\275\033)\361<U<<\274\027/\020<\371\373\227\275\223\203:<\343\261E<\307\032K\275\024\270\343=G\334M\274#\007%\275=\355\367;\221\036\276= \271\342\275\2067\020>\273{y=\203\337\030<\016\333\331\275>\\\332=\320u\271=\373\374:=S\313\335=\307L\r>\0314\r\276-\037\366=\022t\344=\307T\201\276\351\305\261\275_\t?\275g\347?=\307\202\201\275\377A\252=Q\310\217=\034\0039=q8)=\036\365\000\275}\326\260<$\022\327\275+\224\n=\202\263\241\275\245\373\364\274A7\245\275\370A\237=\240|\215\274C\334\226<\023\327\227\275\3378\\\276q\234\221<\\\250\216\275\034\003\004>9\267\316<\276\036}>\255w$=}rJ\273\332\206\267\275\266k =c\251\354\275\213wS\275\202l\361<6v4=\325\220\035=\262\202\335<\365\025U=\240h\320\274&\353\327\275\017\232\031\276\344\207\375=\264\251\272\275\273tO<.\213K\276w\263\220:\177hj\275\237@\017\273sqc<\336\224S\275\241\010\177\275\270\243N=\3677|\275\037\032\006\2765\316\n>\375)\246\274iw\350<\202\202\223\274\035I\351=\331\261\310=h\000/\275\373I\344\273\366\225\352=0\177\316;\330\333\222=~.\233\275\017\357\250=\337\327\001>`\253\325\273>4\004>\037\311\210=\345\301\026\275\201\213s\274q\343+<\230\276@>a\262\261=\255\316\317=\253\257j\275\'\177\370\275d\312b\275]\t\272<f\247\r>\240\377\030=XW\373=\215\026\014\275MW\032\273\340\240\031\275\346\354b=\244\206`<n\301(>\002\204\317\275\366\371\337\275U\3013\275\t\243\211=\017\351\264\273\211]\241=\221\226\272\275\277\215C\275H\372\026<\206Hi\275\033\261p=\227\364\314\275l2\267<8\000\023\276\341\345\013\276<\246@\276\2544\036=\236b\205=\253\361\351\275\334\023\207\273\031\201\334=\306\2170\275\324l\364\273lP\206\275\210|\031\275V\244\035\276\004+\324=\224\367\320;V\352J\276\312L\232=\3513\346<\252\025s=\331\014\356\275\273\321U=\025xA=\370x\377;/GO\276?O\307\272\263\256\010\276fr#=p?\001>j\265\357\274:?5\275\216\317\262<\242#\376\274\331\262)\276\274L =\320\267\330\275\367)y=\034W\207:\\s\205=\0237\253<r*\r>\244\363_\274\204\020\375\274\337\225~=O\023\354\275\023{\263\2758/\334=\354\345\360\275-\304^\273\376d\247\274\344H \2732lE=\325\261\315=\322\216y<\271\037j\275\336\257#\2769\325d\275\240\0003< \000\005>\345\303#=\247\366\274<\026\200!>+(%\275\001W\350=9A\374=\1772^98\264E\275\265\341y=W\256q\275\002\325\223=\007\210\022\275P=\257\275O\312\220=me(\2751\2454>\320\241\273\275y\026\342=Q/_\274}(\323=\315\322==\014\355\026>#\313L\275F\032]=\2744_>$\246\226=s0j\275\247\010\\\272,\017\354<\311b\335<\3329\204<O\340\367=\322\325\205=c\022\204\273\335%\343\275S\263\350\275\234z\205<\351I\375\275\r\200\275\274\206t\033\274\341\354q\276\336j\303=U+\252\275\212R2\275\221\354#\275B~\321\275>\356\261\274W\377\223=\346\220\241=\304\201\337\274D#\256\275ump=\021\231i<<>\245=G!\236=\231\256$\275\013\365L\276\n\245\220\275\340\275\354\274\200\005\020\275\335,\334\275\215\326\224=\004\020\033\275\024+\213\273\326\372\201\274\3216\276=\276\"\236<\275\222\000>\330\005=\276B\272\215=\363\376\241\275Q[\025>\234i\217\275\223\333\"\275N\021\247=u\005\236;?\213Z\276\222C\373<\240\342\374\274\275YL\275h\231~\275&\037\346\273\204\364:\275\300\245\230=\213\257\241=\023\362\3419\274#\226\275\213v\231=\310N\224\275\370\003\275\274\237\266\264\275\002C\003=[G\t\276y\367\313\275D\tq<\025\252\246<\361\356\252=\t\"\304=\017\332\250=6\331\257\275\030\273\216<4}\014=\241K\362;\241\311\356<Iu#=&\000\177\275\314Tx=\354vc\275r\257\214\274\202\002\203=\031\3577\275\030\265i=J\250k\275mXm\275v\0100=\336|]\275\220\'\213\273.\232[\275\027\325\r>-\313&\274\027\235\201\275\3213\344<h\234\303\275m\005\307\274.b\240\275\271\216\204\276W\271v\276\320\037P\275\014*\320=l\220\200\275\244\272N=\323 \306\274\226h\247\275S\370\212\275_\n\t\276\372\032\224\275\1772\001>\327\021\033\275$\026\253=V\037\001>\006\343\312\275\272\343\321\275\372\230\305\274\232\263\014\276N[8=\204\021\313\275\2163\240=qV|\275F\262x\275\2367?\276C\272>\276o\261!=\304\376\235\275\230*\211;\214\325\264\275D\243G\276\275\206\263\275\241\212z\275\353\017\230=n\3275;8!\007>\017\326\250\275r\260\212<\275H\027>@\021u\275\014I\020=\214l\023\276E]\010\276\010\313p\275\032t\002\276\315E\353<n\317\370\275\312!1=\336\023\244=\233RX\275\002\303\351\2740\177\342\2753r\327<\375\223\005>\335\235N>\0069\354=#\352\347=w(\272\275\332\227_\273\373\314\325\273\326e\330\275\366\272\256\274n)}<\016\332\273\275\371\360%>\246\237\222\275\003\251{\275$\"\026\276\334h\345=I\023\027\276\271\264\222<\024\010\n=y\2449\275H\r\247=j\343\025\275\221\217\230=\315!\310\274\036.\354=\221\013R=_\230\333=Jz\225\274\035\243\276\274\001\215n\276Ww\214\275\212\335\260=\260\201V=o\331?<\266\207S<\277\3516\275<\376\301=\2109t\275\365\"\276<`\023\257\274m\324 \275\315\274\213\274\243=\356<[\261\273=\241\241~=\032\270\024=\361\367\276=\240/+>\366w\032>\370\000\356=@]\'\276\031l\270\274|\226\003>\250\216\206=\024H\365\275\236P3;\243^\224=\010(\014>\315\r\346\274\221\3152\276\034\237v\274\333\311\355\275\257\247\374\274\"\354\240=^y\246\275#\023\246\275\210J*\275\036\300\356\275\307f\337\275\244N\'\275\222\3225\2744,\032>]\244I=\003\037\r=GN\312\274L\002\006\274\007\344a=_\360C:\036\325\266\275\020\3006>\033\342q\274\205\240\327=\325\241\361\274A\324=<\252\376.\275FTw\274\240\316\003\274Z\323\230\275\340j\026>\030$\\=\257\276\216\275\251\276\311\274\203\0068>\220Vh=\217X\342<y\017\376=8\323\360<=[|\275\371\350Z\275\316\245\242\275\tD\327=\020\'\203\275\\\213\255=\360\316\306\275K\031\243<p\312\326\275\357#!=!\3770=\216\031\036>p&p=M\341\316=\210k\322\275\310\223\242=\264\314\217\275\2046 \274\245\226\277\274\024\313\034\276\242\202<>\'\000\206\275Dj\332\273;\235\002>\262\272\025\275p\205\'\275GX\223\275\037L\022\276\314\022O\275\013[\214<\347`\340\275\321\315x=\237:\035\276\360f:\274[\272\313=\003h\321;|\3763=a\013=>\202\316\232=\260\321\256\275\324\320\001\275\225\327#>y\242\344</\270\035=\2714\274\275\222<\327\275=\361\312\274%\253Q\274LnB>?\311F\276\237\000k=(\206\n<\002_\217=\204\216O\275\354\367\254<1\333r=y\260-\276i\322\211\275G\231\303\275;J\256=\333\014\360=\013\306\322\275\234\210\346<\204\241]=\302\265t=\247>u=Y\224\217;\023F\276=H\272\262=)\331q\275\220\370\332\275bl\224;\202\342N=\265\200\210=\034B]>!\261\322=\346wT\274\006\310\363\275o\274m;\303a\246=\377 :\275\207\330m=\202\353&=\331\010\337\274\325\0220\276\255V\022\276/\225\010=Y\201\225\275\305,T\276\002\244\301<1\251\216\2758\030\035\27513\214\2739\3633=w\"x=\312\325\360=\217\364\256<\'Q\224\274t\ry\275\250`\n\276l(\256<\345\273\232\275\200J\r\2769\224\226\275\372\304<\275\203\351\353\275\ti\254=\224\341Y\274\020\376+\276\252\201\351\275\013\215\313;\315E/\274\325>\206=\351\030\235\274\310y\230\274H\177h\275\214\221\267\273\220\035\004>H8\307\275i\232\337\275I\336Y=\321W\035>\212t\263\275Z1\303=d\342\307=\"\252\267;f\034\210=\212\206\351=Vt\230\275;~\035>%\270\316\275\256\n\253</\342)=#\361\025\276X\266\356<U;\314=Tl$<\361iM\275\274\036\306\275A\243\202\274\255\014\325=\317:\354<\314\'\334\273P\334\371=\361/7\275&\367 \274&\343r\2754\252\263<\226\005:>\236\347\232=\003Q\010\275_s\203\275%xP\275E\215H\275\343\2661\275\207#{=\323\037\230\275G\320d=\362\310\201\275\362\033p=\027g\024\276I]\235<\304\376\353=\327\t\232=\310\311\037=\365-\370<8\246\300\275?\375O\275?<->$q\264\275r\321X<\212Q\371\275\010\322\010=\002\356\001>\323ma==\364\355\275J\274\257=\n\253\254\275#\350\271\275\\\023\322\275\336R\377\275\363`\362=\312\203f\276\013Dh\275\201\241\255\275-\234\354=\334\230+=\2669\267\275\252*V=\316\217\243<\303\225\200\274\244X\265;&a\016\276d\014\013<\361P\200=\322\314\013\275\3156!\274\032\233\017>\313A\277=\220=[\274X\223/>\202!\261\274\365\232\331=\007<\232\2757\016\210\275\n\264H\273\353\225);\243\\]=\225\273\000\276\021\267\330=\305\253\223\273JP\006<\264\222\030<\254\005\353=\260\r\205\275\257H~=\247\2550\274{\005<>PD\320<\300\246M>\223U\256=\241r\342\275\317\231I\275\343\2618\276\201#Y<U\336+<\321\010\231<\257\271\250\274\232\216\022=\235X<=\205\246\213=\"$\005\275\207\364\316<\273C\211=\265\033R\275K\324\324\273\355\273\317\275\032\207O\2755\265\376\274\2121\243=\334\245\013\276Q\303D\276\355k\034=\033|;\275\200a\272\275\005\343?\275<\257\025>\007\036\3129\247\t\001<\213\2711=v\221\227=>\324%\275\354\374\343=\353(t\275\351\0026>\3024\365\273\023v_=\277]\357=\245\301\007\2761\245\260\275\226:\333</\241\275\2756\272z\274\320\333J\274a\030\204=\222\354r\273\353p\321=r\261d<F\342J<))\212\275\'\000$=\242\322*=\3627\t\2763\334\024\275\2116&\276\024CB\276\255\331e<\260=u=\305\224\343\275\252\3064>W\334\343=\226\315\003>^nJ\274\202Z\326\275Z\302\205=\305f\014\276j\026F\275\205h\322<\333>\301\272\372\337\305=\307n\261\275.\204\370:\345\215\334\274\016pD\275\330\3720>P\325U>t\200\030\275]\3605\274\022_\360\275\246\016\331\275\333j\241\275\223\255\035=\340\001F=Kr\222=\206\220\316=\316\250\332\275\017\026\222<\371\331\270\275F_/\275R\343-=\362\027\312=\320\233\334=\024\255\350\274\326=\323=\005J\357=\322\003\241=\341\312\221\275\032u\345<\216\024|\275>\035\344\275\300;C\276F\016\205=\275\247O>\300\372\237=\305\205\t>\271E\224\275kY\210=\000\242F\276\234\006\271\275\3674\205<\340\221\013=\260\014\232<\376\350\223\275,\265i=\365(K\274\343\n\022=n?\246\275\221*F\275\216\340\222\275|\225\005\276\375.\226=H\005\246=\326\251\204\274\005\362\366\275p\243\361\275\255\264\255\275\365\352\014\275VS\340=\257$O\272\t#\004>\335\341G>[\343\257=\350N\375\275\202M`=\221\231e\275\372\321~\275\3514\236\2759\266\371\275\016\271\344\274m5\312<\214\320\211=\222\035)\274\270)\265\275\271\362\304\275\331?S\275\217V5<\013[\027\275\274[+>\030\346\017\276\370\332`\273\234\203\253;F^\235=\354\006\346\2753\004\004=s\n\003\275\367\3002=\371#\246\275f\204\r>@\351/\275\2475#=M}\203=?\365\200\275\027)\310=\354\036\200=\202\3752=\242r%\275JQ\202\275a\324\001=\035Z\013\275\257\313\225>\271\301\'\275C\332\001\276\013\020\014=\323\276\351<s\305\236=\331m\367<&\317\020\276k;J<\242\230\035>\'\031^\275I\200\323<\342Z\022=\014g\314\273\211>\004\274A\245\267<\025\033\224\274\372\017\304=\313G\253\274\232\360\014<.\263\272=\'\031\247\274\305\262\261\275\313\213\331=\216\235v<\242\005\016<`c\242;\356\214@8q/N>D\346=\275\352\336\205\274\304\234\231\274\345\332\t>\014\"\314\274\3411\225==g\212\275\360\322\275\275\177\367\337<jy\304<\206\000\320=\002S*\276\272\266\220=W\027\222=g\225\'\275\025,\330<,\305\324=\025\306\216\275\341u\020;\033\355\270\275\233K\"=\304\330\226\275N\232\220= \224\031=c\031\'\276\361\364H\276(\312,>\373\016\221=\024\016U=})\322;\313k\220=\030W\'=P\232\000=(\332\212=\206W\'\275 \335\016=\206A\022<\372%\213=\"z\266;J\225\010\276\221\241\222\275\"\233\364\275\2729&=\251,\213\275\271\025\366\274*\244\000\2751<\332\275+:\356<\270\007\332\274\371\252\030\275\037:\034\275q\231\367\275+W\026\273\026\035l\275QF\204\274\032\332%=\310\2146<C\206\257\275\370\277\307\274\r9\203\274}\311S\275\341B8=\21556\275\271\277\312<\346v\333\275\032\223\007\276\r>,\275\274\272\370\275U\030\266=H|\211\274\224\222\344=}w\327<S\251\312\275<\004}=\035+\004\276\223,\034<\223\206\016\276\222A5=\013\320\241\274\0011\301\274? \007>\002\315\006;\356\374\235\274\034\'\342\275\232P\t=\346a\200\276A}\344\275\341\022\340<\2654n=[\264\367\275v\357\200\275\017\023\273=p\362\275=H\273:>\351J\332\274\2352`\275\200n\266\275\232W\001>\205\231]\276|\021e\275`&\027\276\376/\033=R\335\302\275\001\370\214>:\r;=r\314\254\275\210\037R=\213\353}<;:\271\275\r\034|\275\304`\224\275k\031Z;\001\305\371=&\344\356\275\377g\306\275{\302\r\276&\351\304\275f/I\272Fa\216=h0x\275\200\tr\273\365\002\336<L\225\374\275\247zg\275\355\237\300=\0034\234\275\360#\305=\014\376\n\275\r\205\240=\276{\020>h\200\027\275/\240\235=q\246\007\276\270|L\275\021\347\210<\362\333\210=V@\217\274\312\276\261=I\272\000\276\215\207\234\275\307\377\207<Aw\177\275\210\373i<\230\365R\2753\276\203;\020\207\207\275\326\271+>\002\312M=cj\301\275\031`m\275\215v\215\275\357L \276\341-\355\275\334\342\217\274\004,\364\2752\310K<r\364\366\275\254p$\275\037M\352=\252\027\201<\003\300\313=\n*L=8TC=\260\275\370=cfh\275\343\251<\275\341\336\345<CX\004=\3647\326=J\352\025\274<\3034=\272\247\335=\021\321\242\275\000%\360;\215>\312=Z\033q<\331\252%\2751\032\341;\271\302k=5\234\221=\336E\256=I,\260=\311\357\240\2758\233\003=\031Z\213=E\021:=\367h\033>\020w\036=.\254f\276i=\340=\350Y\342\275rx@\273\366r\320\275\220\244\023\275-\271t=\315o\323<\263\254\000=4\337\250;O\221\366=\245K\017>\3255\217\275\025\037\014\275TR\376<\013\345\370=\217\353\223=\215\231\211\275Y]\352\274.\341\252=\257t\277\275\030\274o\274m9G\276\227\004\341<\364+\n>\323Gn\275\'\256M\275oQ\033>U,\236\275\332\340\005\273\\\221\260\274pW8>\010\345\203=\244\035\002\276\341\237\207=\253\206\272\275u\271\274=B\0328>T\261\020\276Q\036\035>\347\366b\275A\007\024><\2507<_-\334\275\342\361[\275\270\220\347\275\36795\275\321\303\013\276\371%\002>\363\345\261\275r\241\362\275\036e\030\276Jme=l\375j\273\377\023\244=\231\275\237\275\337Q\026=\214\231\247<t\233\006\276"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "spatial_dropout1d_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "spatial_dropout1d_1/cond/Merge"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value/Minimum"
  input: "bidirectional_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "bidirectional_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while/Enter_4"
  input: "bidirectional_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1"
  op: "Less"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while/Less"
  input: "bidirectional_1/while/Less_1"
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/LogicalAnd"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while/Merge_4"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_2"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "bidirectional_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_4"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "bidirectional_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_8"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "bidirectional_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_9"
  op: "Add"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit_1"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "spatial_dropout1d_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "spatial_dropout1d_1/cond/Merge"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_3/Minimum"
  input: "bidirectional_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_4/Minimum"
  input: "bidirectional_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_5/Minimum"
  input: "bidirectional_1/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_4"
  input: "bidirectional_1/while_1/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1"
  op: "Less"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while_1/Less"
  input: "bidirectional_1/while_1/Less_1"
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/LogicalAnd"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_4"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_2"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "bidirectional_1/while_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_4"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/while_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_8"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/while_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9"
  op: "Add"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit_1"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_3"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice"
  op: "StridedSlice"
  input: "Flatten/Shape"
  input: "Flatten/strided_slice/stack"
  input: "Flatten/strided_slice/stack_1"
  input: "Flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/Prod"
  op: "Prod"
  input: "Flatten/strided_slice"
  input: "Flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Flatten/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Flatten/stack"
  op: "Pack"
  input: "Flatten/stack/0"
  input: "Flatten/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Reshape"
  op: "Reshape"
  input: "bidirectional_1/concat"
  input: "Flatten/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.02159671112895012
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02159671112895012
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8670393
    }
  }
}
node {
  name: "Dense_1/random_uniform/sub"
  op: "Sub"
  input: "Dense_1/random_uniform/max"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform/mul"
  op: "Mul"
  input: "Dense_1/random_uniform/RandomUniform"
  input: "Dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform"
  op: "Add"
  input: "Dense_1/random_uniform/mul"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12800
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/kernel/Assign"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "Dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/kernel/read"
  op: "Identity"
  input: "Dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Square"
  op: "Square"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer/mul"
  input: "Dense_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add"
  op: "Add"
  input: "Dense_1/weight_regularizer/add/x"
  input: "Dense_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/bias/Assign"
  op: "Assign"
  input: "Dense_1/bias"
  input: "Dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/bias/read"
  op: "Identity"
  input: "Dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer_1/mul"
  input: "Dense_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_1/weight_regularizer_1/add/x"
  input: "Dense_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/MatMul"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/BiasAdd"
  op: "BiasAdd"
  input: "Dense_1/MatMul"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_1/Relu"
  op: "Relu"
  input: "Dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29925280809402466
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29925280809402466
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2374858
    }
  }
}
node {
  name: "Dense_2/random_uniform/sub"
  op: "Sub"
  input: "Dense_2/random_uniform/max"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/mul"
  op: "Mul"
  input: "Dense_2/random_uniform/RandomUniform"
  input: "Dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform"
  op: "Add"
  input: "Dense_2/random_uniform/mul"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/kernel/Assign"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "Dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/kernel/read"
  op: "Identity"
  input: "Dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Square"
  op: "Square"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer/mul"
  input: "Dense_2/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add"
  op: "Add"
  input: "Dense_2/weight_regularizer/add/x"
  input: "Dense_2/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/bias/Assign"
  op: "Assign"
  input: "Dense_2/bias"
  input: "Dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/bias/read"
  op: "Identity"
  input: "Dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer_1/mul"
  input: "Dense_2/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_2/weight_regularizer_1/add/x"
  input: "Dense_2/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/MatMul"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/BiasAdd"
  op: "BiasAdd"
  input: "Dense_2/MatMul"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_2/Softmax"
  op: "Softmax"
  input: "Dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "Dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum"
  op: "Sum"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv"
  op: "RealDiv"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub"
  op: "Sub"
  input: "loss/Dense_2_loss/sub/x"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Log"
  op: "Log"
  input: "loss/Dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul"
  op: "Mul"
  input: "Dense_2_target"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/Dense_2_loss/mul"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean"
  op: "Mean"
  input: "loss/Dense_2_loss/Neg"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "Dense_2_sample_weights"
  input: "loss/Dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Cast"
  op: "Cast"
  input: "loss/Dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/Dense_2_loss/Cast"
  input: "loss/Dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/Dense_2_loss/mul_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/Dense_2_loss/truediv_1"
  input: "loss/Dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/mul"
  input: "LSTM_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "LSTM_1/weight_regularizer_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/add_1"
  input: "Dense_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3"
  op: "Add"
  input: "loss/add_2"
  input: "LSTM_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4"
  op: "Add"
  input: "loss/add_3"
  input: "Dense_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5"
  op: "Add"
  input: "loss/add_4"
  input: "Dense_2/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_6"
  op: "Add"
  input: "loss/add_5"
  input: "Dense_2/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "Dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "Dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/bias/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/kernel/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/kernel/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/bias/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/bias/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "Dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2_target"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/Dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  input: "Dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional_1/concat/axis"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while_1/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_1/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_6"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_2/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_3/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_7"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_8"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_8"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum_1/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while/Identity_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_8"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Identity_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  input: "bidirectional_1/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_12"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_16"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "training/Adam/gradients/AddN_21"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_6"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Identity"
  op: "Identity"
  input: "training/Adam/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_1"
  op: "Shape"
  input: "training/Adam/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros"
  op: "Fill"
  input: "training/Adam/gradients/Shape_1"
  input: "training/Adam/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad"
  input: "training/Adam/gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad:1"
  input: "spatial_dropout1d_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/dropout/mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape"
  input: "spatial_dropout1d_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/mul/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape"
  input: "spatial_dropout1d_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul/Switch:1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_7"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Identity_1"
  op: "Identity"
  input: "training/Adam/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/Shape_2"
  input: "training/Adam/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "training/Adam/gradients/zeros_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Switch_1_grad/cond_grad"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/AddN_22"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "LSTM_1/while/Exit_2"
  input: "^training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "LSTM_1/TensorArrayStack/range"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_23"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_8"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_24"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_24"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  input: "LSTM_1/while/Identity_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  input: "LSTM_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "LSTM_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  input: "LSTM_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  input: "LSTM_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_25"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_26"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_27"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_28"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12800
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12800
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "LSTM_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "Dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "Dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "Dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "Dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "Dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "Dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/Assign"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "LSTM_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "LSTM_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Dense_1/bias/Assign"
  input: "^Dense_1/kernel/Assign"
  input: "^Dense_2/bias/Assign"
  input: "^Dense_2/kernel/Assign"
  input: "^LSTM_1/bias/Assign"
  input: "^LSTM_1/kernel/Assign"
  input: "^LSTM_1/recurrent_kernel/Assign"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^Dense_2/Softmax"
}
versions {
  producer: 38
}
