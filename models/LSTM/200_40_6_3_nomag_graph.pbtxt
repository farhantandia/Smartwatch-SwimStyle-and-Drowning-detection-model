node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "LSTM_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "LSTM_1/kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\366\035\001\275\335\016z;\276\223\352=yo9<\241Xc\275\212\207\312\275\373!?=\262\331*\275\231\271\354\272\226\200\031={O\204;\016(\177\275\323\361\256\275\275\035\342:`\203\226\275x\235\233=G\357\246\274\032\227\021>\206$\200=M\022\313<G\347\307\273W\3402\273\274O\033<\010rD=fW\202\274=\272#\275\030\275N=-p\"\274\213y0\275\376\312<;\363e\322\273\371\257\265;\213\345\002\276l\355\226\275\027\247\366<5/Y\274\365[g=\241\005\002\275\267\325\036=rr\242\275\276xT=\331\270T=\314\357\341\274F\300\341;L\214\234\274iI\322;X\244\362\274\340I\010>\360\371\216\275\020\307\311<\034t\024=\202\253\031\275\271<\254=~\'\350\275n\035\241<\276\223B\275\242\353\212=\223C\210\275o\325z<s\214!\275\216N\366=\315\345Q\275h\357\377<\340t\215=\217\006\013\275h4q=\216\020\203=\335\321\032\274\212\232^\275\210i\013>\212\361\216=\347\370\313<\026\0226\274Vn-=\004\033\246<\225\325\350\275\000\334\211\275\3330\340\275\2564\007=\207Q\202=\306\373\371\2751\256\347\275\3330\272\274\250\355\034=?\026B\275e+\313\274:p\204=\030\346s=\260\203^=\216\200\273\275\002\302\355\274o\030\177=\2046\331\274\026>\215\274I\017\026\275\301L<\274\353\313\006=\\\377I\274\220}\343\274\241\226691\220?\274\201\340v<^}$;?\213\203\275\220\226@=^\215\221\274\306\031\211\274U\321a\275\200\215\214\275uP\376\274r\212\t\275\353!\327=\020\002\330=\214\271\202=\362\230v\275.\344\234\275\350\354:=\307\034%>\300\371\030=\377\310t=t\002\026=\331\207\274\274\246\033H\275#\007V\275\033m\236\274`\235\364\273\036,}\273n\036\205<*\257A=1\314\231=\207B\305\274\251\232]\274\272\311\026>\365\211\352<\251\007~\275\302\271\307\275\315+,\276;\230\206=\031Z\277\275s<\244\275\371\210i<\177\305M=\202\022Q<\234\260\251\275r\322X=Z\216\205\274\023s\237\274\005\303/:\324\223\311=\340+\316\275\336#\227\275n\326\326<\002\373\327\275\227\212\013\275]\351O\274]\003\347=\233\262\235=\237\010\025\275Q\344\030=\316p}=\302\312\217\274\233\007\346\275\277\211f\275\366\260\362\275\344\353\373\273\206\320\315=\003\200\215\274\0327\225\274*\272\026\275\021\323-\275\362<u\275|.V\275\311\362~=\317{\253;\2407\233\275\002\211,\275\211\022\264=\204b\237<\231\256A\275G\217\256< \010\203\275T\262\036<\221\332U=\324\270H\275\343UT\275\251|\016=\317\037\340\274\213O\257=\341.\r\275:\377\376=y\201y\275\260]\213\275T\334$={\215D=\013\225\237=\320\263>\274\253/\034\274nE\006\274\002\t\t>\026(\207=\321\306\244\275\231\006%\275\324k\341;\322\322+=O\365w\274!\372(\276tzw=\301\333x\275\255w==e\356\235<?\253\211=\007\024\035\275:\217\205=G\325Y\275-\310W\275DB\300=\"\207\000<.\263\366<\263\226\252=M\265w=\233\203\354<\252\032f\275\271\260\006\276\341-\303\274j\223\364<x\002E=\353\\#\275\330\202\237<\244\207\"<\221~D\275\014\243\352\275\341\\@\275\274D\005=\001\233\221\2753\320D\275@\322\303=DS\343=\256\252\300\275\333\310\017=!\t-\275\216\330\272\275\247\037y\275)4\241\275+\013\326<8\335f\274\335:Z=\244@\271=g;W=\224\205A<(w\231=\312\r\315=;\246z<\006$\215\275#\300\200;Z\364\347\275W\'Q\275\230[\302\275y\277Y\275}\344\366\273\017\370\214\275\271\300V=\317K\030<\250\002\022>j_\200<}wQ\275\361*\204<\270\314\t<Gl==FU\221=\034y\310=\245\270I\275\253\226{\274mX\014\275\201\'|\275\376\300\337<\361\301\242=\233\337\220\273k\242(=)\267\222\273\351\014\017=\301:|\275\350\232\212\274\335\310\347\274\010\360C<\330\2139\275+U\210\274\375\302\017=)r\342\274\365\026\005>&e\266;\177@\275\275]\334\337\275\006\rp\275\tj\002>8\300\233=\217\014\013\275\334\231\255\275\034b\374\275\320\267p\273/\365\250\275\003\221\317\274\013ts<\333\002\256<\351w\\=Rr \274\252Sp=\020)\032\275D\r\361\2744*\233\274\237k\034=\216\323\206\2752s\n=y\214G\274?\353\000\275v\304\223=\261b\346;\232\265\n>\005Ph\275\336\004S:\263\350.\275\306l\232=\262\243\366\274p\275\352<\241Gu=\346G{<XI\247=6\365\013\274\021\323T=\370\177\305<v\000\267\274\234\030f\275\364)\214=A!\002<\314Gf=*\313\223<\334\3276=}\235\344\274u\265\325=?\245B\275\220@d</Q\005=\326\033s\274\332^\322\274*B\\\275\033\321y=\247O\223=\030\264Q<*\224\253=\265\365T\274hI\361\273\371K\222\273\2443\337\275f\032\226<\361y\230\275\231\354t=\0224\213<\007\364)\275\337\374+\275\327B\304<\221[3=\375\261\325\275\376\313&=\310\300l\274\036\234\345\274\254\033\313<J\263m=~\250]\275\221\245\241=&\373F=h\236\316\275\365\023\230\275\014)\333\275\204K\213<\367T\237<\302wr\275\003\024\256\275\204H\200\275\271Q\001\276\034\003\027>n\351\177\275`K[\275v\267\1777\243\272\225\274,i\005=\3068\224=\370\250=\275\035\330\306=\3723)\275\326\231\r=\3015\204<o\220{=\234>\010>\267M\277=\334\031?=\222\367\267\275\313\333B\276\3469\213\275\375\311\007\275S!~\275TA-\276\255_T\2733\345{<\232\024a=\241\016\350=4\227\233\275p\032\374\274V\246p=>\013\316<\231*7\275|AU=\371\027\020\272\274-\221=,\320\345\274-F\207=\337\324\237<\327%U\275\r\362\261\275i\006\256\275\013\326\342<a~\326\274VX\263=~\0265\2750\275\261\274\377\177\374\275B\365O\275r\251\215\274\232\362\205\275\035\rO<=;\217=\265\356y<\004^)<\243\327\325\275\341rK\275\261J?=Na\336\275\226\352\370<^\220\241\274\357\356C\273\003\3516\275BA\261\273Rq;=k,\214=>%>=\202\324\374\274\360h\356<({\265\274\001{\337\275@\265E\275\222\277\013<;0\323<@\212\351<F\373\330\274\316h\206=\334\353 =\351P)\274\246S\212=\276\326\020=\201)\214<\224\006U\275\nc\371\275\251\231\317\275\340\246\267=@*c<\354\331\277;\277\n\305<\372G\202<9\273\326=\322v\r=\212\t0<\274y\243\275%\216\262<\315f\304\275&q\216=_\353\202\275\317\352\253\275\023O\273\274Y\267\315=\202ns=\254.{\275\226\342\200=v\3419=\217\255\2428\372\364j\275\357W\266=l_\270\274\372L\335\274\222\023\n\275\025\225\267<2\363t\275U\317\007\275\3755\340=(%\254\275\277$]=\260]\"=\027\361\217\275\310\001\301\275\202\323\370\274\374a\376\275\240\360\243=\350\2257=\261T<=\220\331\n=%^;=*\014\227=P@\334\275\014\332\240\275\204\223\221\275(0\035>\341\020%\275c=\221=\312\216m\275O\326L<\327vg=t9\202=\354\026\314\275\003\323\227\275`\347\376\275\264\n\032\275\0270\n\274\261\233\332<\315\254?=)\370\013=\002\376\205>Z\261\335\275S\r\344=\311\306(<\220(}\273\355\303\210\274\255\360\237\272j\246\215<-\246\354\274\367\314M\275\314\r\365;\000\242?=\377D\265\273o\346\r\276\343\223\205;\277\371(>\306\177\020=<\266<\275Y:\233\275\023_\271<l:\215=\304t\266\275\332H\021=i\351\267=(\n\276\274-2\001<2\276\262\274mV\372=\321\334\367\274\376x\027>\267\246\275=\337\261A\272\335f \275\365\322\233<\336\014\313<Y\253\005\275g;\272\274\353EW<\374G\024\274\201\257F\275\230H\315=\340\376\031=\014\032\366\274\322\000_<&|\017=\202T\317=_\252\335=8\277\362<\340Q\000\274y \2149>\362\304\273I\371h=\212|\334\274\312\334\303\274\241\270\330<\002o\341\275L\037\024\275e\213\013=*\347%\274\354\316\231\275\260\367\371\275#\2275\275J\363\027=V\027\225\273\365\343D={k@<\2323>\276\232\327o\274x\265!<p\030\273;\302\264y=\036\223\222\2738\004$=\n\363\323\273\324\r\033\275\017\206\274\274\302\2218>F\'R<\254\214\206=\365s\004>\272\255\252\275\211\233\016\275\350V =\273\ni<$\220R=5=4=@\\\255=f\205\237=\366@q\275j\\\030\275\003L\245<\332-\t\273\367\313\013\275\226\000U=\020\361\213\275\024h`\274(E\331=<\330\304<2\322o\275\331\245\032\274\005?\013\275C\212\\=\027\224\010=\300;\204<h\3236=G\241&\275\203\270\024>Z\205\035\275\376\021\216;\313\365\324\274\336X4=\231\345\003>\270\035M<G\361U\275M\316G=\2774\231<\320;=\275\306\030\226<\304\262\201\275\311\202u\274\230F\241\275\021K,=-\256\235\274q>`<\374J\300=\214\023\223=^\345\203<\265\005\214\275\325\203!\276lz\256\273k\371\366=\202\001r=\002\270U\274\265\221\031=\234\027\033\275\304tY\274\356D\336<\370~\263\275\355\315f=\330_\017=\236/\r=F\224T=\255\276j\275*\210h=\252\0234=DZ\301=4OJ\275\371\235\211\275\216o\247;\335\332\256=\204\225n\274\013Db\274\231\230\367<\022\312\000\276Q\347o;4z\035=X\316\212=}3\302<\2002$\274\262\030\037\274\013\204\235=\005r\252<\205\177\227=4\325\200\275\207\315|\275:\310\260\275(\003\301\274\240\232\271\272\206o,=bS\266\273\322\352\013\275Io \276X\005\212=C\360i=\330\334F;\017\355\324<\313\253\303=\323\007\216<\335\252\225\274\200\022/\275Z\327R<Qt\002>\036)\227=7D9\274\"/k\274?\'\310\274HF$=\214 \026\2755Z\255\273\' \215<o@\364\274\331=\333\274\350\237\037=\231\230-=\310\357\005\275\205\010\320\275\365\371\321=\333\021e=C\350M<QK\252<\371\341k<\225\231\323=\206\317\231\275\326\262\225\2735LB<{MA;&\267\324\273\362\300I=\250\005\024=\324\261\221=\375~\n=\303\354\226\275_W\000\275\365$$=(\231\014\275I\364\274\275\313\203\205= 8\010>%~\244\275/\031\241=\207C\333\274\215\231X\273\325\270I\273:\200I\275\217\3419\274E\n>\275<@`<k &<\307\313?\274\212@q\275F\353\245\274\237q#\276\227;\361\274:\376\272=\002\226\001=\270\']<\350l\236<\263\237\250\275*f\376<UL\241\275W\226W\273s<T=\345\313\r\274\264E]=\377\254\020=\177\272P\275\325V\341==>\303\275\246\243\200;X\346\365\274C\205C\275Sy\227\275\332\264q\273=\257\317\275\026\251\310\273\212\002\005=\354\227M<;C\321\274\326\024h\275#\327\327=\340\271\231=^\211\256\274\251#\217\275\025\225\305\275\333\255~\274\021\214\200\275Lx\254\273\202U8=\330N?\275Si\317<\332\225\223\2754s\356\273ic\263\275\023\270\"=Ay\323\274)\335\006\274ZT\020\275\311\243\'\272\307\001\307<\257c\035\2756\212/=\357X\032\274\315\375\243\273\326\372\272\275<\376U=m\201.\274tF1=\232\205@\274\361\332\356=\002K\023=\002v\234\275\251Wd=~k\267\275\312s\247\275\376\313\234\273\377\257y\275b\213\360<\244l\023\275\240\\\231\273\243\340B\275\221\206\244\274\200@\373\273\323.\214\275T)M=a\304M\274\343\177\263\2736\246\014<\271Uj=\302WR;t\026&=\314\271\007=\366\026\\\274a\210\002\274\n\202\377<\032k\325:(\335\270\274\246d\217=\337\316\337=\035L{<e\236A=\266\025\'<[\000\374<zS\223\275\317>\020\274m=\200<\267\266\273;;\375\371\275\310\271\321=E\256\006=\372,1\275\027<\257\275\202_\273<\037\'\036\275\004J==\314f\r=\223/\315=\360\237\026\275\304\306@=\303\322\222=\336;m\275\037i8\275\241\277\375\275|fd=\340?(=\27498\274\246\372d\275\037\236=\275 \264\204\274\353\372\217\274\014\021\'\275\266\237\203\271\365\274)>\325\276\240\275\327t\033>\016\225-\276R\253\250\275\026\377}\275j\347\367\274d|\322\275\205\255\223\275\261\004==\3006\326=\330\316\026\276h\r\212=J\020\013=\275%\206\275\360\222,<\273D\036=\377&\265\274\240\335\276\274j\001\247<I\255\306=\n_ \274\023\326a\275\236E\342\275Y\004\024\275\365\254\\=\254O\320\275;\377>\275v\246,=\241\213\200\273\3410\220\275\257\t\270<\317\367\221\273PL\201<\264\330h\275\002\024\025<\367\201\227\275%\n\376\275\034D\323\275 \265\"\274\370\242\310;)\252%>\275|[={\2634=e&\010\2757\345\007\274\034:O\275c\235\006><\356J\276^\375d\275\016\360\355\274\217\335\344\274\316.\270:w\0141<\036\267\266\275\327\326\203<\343*\365\274\002\337\036=\321!\215\275{\304\211<\261\337\252<\200\036\307\274HbI\275X.\220=\255\227\217\275r\305\021;\203\235\222=`8\002<[m\236\275\222n\001\275\264\374\005\272\305\035D\274H\347B<\303\365}\275\036\177==\305\221\'\275)^\314\274\214-\"\275\251L\006;\000\006\216\275\251\006\201\275\335\345\356\275*\256\211\275Q\240\236\273V \203=\211\211\210=I`\202=\'Qr\275\215N\244<b\'d=\243a\243\274\203b\177\275\303\274\215\273\270\217\230\275w\026\240\274\300\300\237\275`%?=\214\240\264\273\262\220K>\305k\016\276k\t\002\275_\037\266=\261\2162\273\031}0\275^9j=\007\254\004\276\2170\n\275%XQ\275\367o\030\274![\261=r\313\247;S\206\354=3\216m\275~\225\276<E\177L=w\234\314\275i\017\274\275\021\232z<MoA=\2577\344\273[\244\220\275\333`7\275\267\017\021=\267g\257=o\201\202\274\031\272\312<\324@\t=\215\010\210\275I\005\004=f,\355\273\277y\006\276\n\3655=\010\224\210\274\263\264:<\321\013G;\334V\270<A\234\245\275\322 \343\274+]\005=\2057v\273BS7=\002\327\367=\027P^\275K\351\326=\014=\263=bQ8<\345\240V=\374\363I<\026}r\275t\372\237<\226\231\200\275\013d\260<\3728\314=\024\310\336\275\301\332\227\274\021\271\322<.>\246\274\r\000P\275\375\374;=nXD<\321o^\275\271\2531=:\243\246\275\023|f=\256\356\204\275\232\2638=\rT\206\273g\212\010\273\362]D=A\004\254:\275\333\025=U\331J=Z\325\211\275|J\031>\214\364L\275\315\231\236=*\342\033=\375\327\320\275\321\212_=\020\270\215<+w\203\275\234d\005<Y\345^\275\323\354Z=\340x\227=\210\033\207\273=\370\266\273\030>f=\006hY<]\376a\275\303@\334\275?z\262\275\317\371\244<\346\231\253=P\277\221\275\316\234t\275J\302\":\234\311\210\273\253\020t8\331\242\337=\342\023\025\276\307\223g\275o(\205<H\206\267\275\212<\207;\231\020\026=\3742d=\001nQ\275\346$\327\275\302eY=\365\222\222=;m\030\274<DP;_\2066=\037rs;K\025\331\275Jw\241=P\247/\275\231}\227\275\270\207\244\275\354\021?\274\262]\017>t\375\022:\225\353\217\275\3331G=\3371e\274\"\353*<\004\226\363:\247[\r\275\276e\332\272\272\007\240<\344\346\305\275\272`\277\2742z\354<\2350?\274\022\220t=]\310{=\207\216X=\327\324I=;G\205\275?\030\024=\"8r=\031\314\032\2754l\356=\237\310~\274\005\3001=u\300\301\275\024z\275\275\255\334\014\2768\303\331\273\244\227\253\274(\242Q=\341\312\214\275\363\311|=\267\344a=\317\177\261=qx\026<-YI=\344\314\n=\311\350\307;\334l\262<Q\355I\275\267\324\205<%\360\t\276i\226\212\275\221(?\274\267c/\275\023\362\257<\214\375k\275m0\006\274G\376\365=\305h2>G\255\246\275\244HV=h\324>=\262\217\310\274\261\371V>(z=\275=g\223\275gNe\275\372&\013\275\250\344\252\274S\\\025\274?z\225\274\352\227\275\274\203\207r=\021\030k=\270k\210\275+\367(\275\224B\300\275\351\261\340<\034Ho\275D\320\277\275\236\220\t\273F\245\211\275\031@T=s\227_=3\3008<\334\324\221=\"\213\013\275\347z\340=\367\305\226=\314Q\347=\270\235\276\275\213\034\232\274\005\312\3409\26311=\345\3378=\344x\331\274\013a\345<\020\237\'\2759\341\340= \023\000;*Q\375\272\333\035\033=\305\233\320=n\376T;\341\365J;\372{\310=\247\342\253\275\262\374\330\273\000\t\347;5\002/=\274\351\372\274q\346;\275bw\220\275Z\205\300=s\361\256=\323\242\303\275/P\217\274m\0206=\326M\377=f\203\010\275\327}3\273\007;\036\275\3057\273=^\2120\275\212\332\027=\274\221\005>\024\274\263=z\335_\274\357z\233<Z\027\247\274\014\036:\275\303\321L=\022\355!\275\2149\313<\007w1\274y\010\300=\261\013\237<,\247\227\274\234\221\325<\3707==8{\240=\'\355\347\275\373\262\367\275\312\263\035\276\306\341\225<<\355!\275\312\367\000=\273k\207\275\3119d\275\274\272\000\275a4\276<`s\213\275m\0079\274\330D\333<b\000P\275\273\302!\275\355\033\312\275\236\0023\2752/\351\275p\264\372\274\336\237^\275}\277\230;s\301H\275n\265|=\357\372\307\274\273\035i=\243\363\017=\325B\343;\364\033\231\275!\240\250=O\232W<\022\362&\276;\030\223\275\010\362@<\'k\205\275~C\255\274RH\334<^k\366\274P8\336<\035\222~<S\266\007\274{\333\"\275a\315-=\231F\t=\221\336\274<\245FC\275\342?\260\273`\341\024\274y\373J=\r\230\206=M\371\362;\037uG\275\354o\302\275\311\216I\274\303\340\226\275R\355\200\275#\212~\2759\3605<\347\265\336\274\013\271\341=\231=\256\275h\026&\273\221E\260\275\300q\367=\263\026\366<\376\360\005>\273t\360=\032\r\021=\223q\033=IT\302=={\023\276\203\254\256=\001M\007<\311&<\275\2406\345<Y\275\"=*\010\274\274\241d\001=\276\267\267\275W\263\340=$4\007\274\361(1=8s\202\274;\3478\275\310(\212\274~\221\n=\005+\353<\371\201\372\273\313U\344\274\260\000\340<.\314\022\274\243\243\206=\203\262\317\274S\355\r\275&\005l\274\025\0137=\2456#\275\361\354\273<\265n\313\275v\234\242=\344\320\301;b\257\321<\261+\245=\337\024\033\275j$\356<3\010\271\275\260\246I\275\312\211\233=\t\244\240=\335\251\276\274j;J\275\271\020\240\275\277\017\233<c\221)=2\264\360\274\263\036\230=\356zf=\254\250\253=\231\003G=\221rA=\240\332\301;\301\254\323:\177\310\262=\013\366\002\276\215\260O<Z\362\244=\336f\245<\311$\016\275\326\363\024\275\375\241\034\275\333\206\\\275\014\311\252<\335\035V\275\262\215\020\276\217\307\336\275\223\366\336\274\376\223\244=g\025\225=\000\322\232\273\2007/\275\235\344\003\276L-\267\2758\313\323=\307p\202\274\223<\340=\322]h\275vP\221=\036d\230<\t\2652\275\226|\233=h\221\250=\211\335\314\275\342\340\020\2754\034\367\274\005Z\340\274R\235p\274-J=<7\025\232\2756\344\002=-\233(<~\017J\275$Q\364<{\\\203=\257\013\352\275\267\0039=\t\210\354\275\371\177\231;O\000\315<\366_!\275\243\366\331\275\036kg\274\202\262\030>C\3025\275\362g\247;~t\007\275\3176\005;\006\024\367\273\232\234\360\275\244\247j\273\365\306_\275\177\267\245\274\361\320\235\275\001z\236=\351:\247\274@\300\233=}@\276<\014\326\371\274\355\226(=\224\024\370\274\216\211m=\234c\312\275\273\242\254=\317\306\276\2758)\"=\3639\376\274\270\025\024>\327\264\224<\200\277\240=\330\247\000=\023\235\202\275\213\371k\275\203\030\234\273\303\271\202\275\301\355\350\275\266\010\035<?\215\003>[\2429=\244F\277\275\317\267Q<_\335\316=\205\327Q\275\330\304\346\274\250\203\235\274\220\037n=A\317\361=\224\333\030>\353\036Q\275\244i\"\275f\202\300<\302wJ\275}\265J<\336~\022\274m\232\230;;\2212:\010W\003=\211\307,\274\252/\337\272\200P\272\275\232M%=z\263O=\223)\236\274\021\310\253<!\200\022=@\025\212<\327\375\343\274\213\006\316\274\003\252\252\275\260\007\341\274o\021.\275<\351\267\275\325\212&=\265\032\266=\0079s\275\377N\010\275\'*\252\275q\244\312<\365\335\242<\265\340\302\274O\270\243\275\032\016\034<\376[\307\274i\361\033>\375\257M\2755\001&=p\007\033\275mJ\320\275g\347>\275dY\264\274v]\240\274\360\314c<\356t\250\275\242;\020\275\300\225\353<\314\007\267<\246\245\211\275\375\327\262<y\373V\273G0\221\274\355\363\204;\271\254\215\274Z\200=>guM=\366a\004\272\317%$>\270\243\244<\330<\312<\037]\243=\306\221\\\275D\356u\274\237\017\355=Y\276\312\274\272-\340\273\003j\211\275\023\331\226\273!\316^=U\246l:\010s\256<;\316\320<\016\305\000\276cnC=\315\223%\275\257:F=\330Q\236\275\013\214\212\2755\204H\274|f\232\274\203\233==5\302d<\323)\207\275\212-\300<\213\035\247\274\343&s\275\260\210\013=/\023\013\275`z\201:I\220\020\274\220 J=\253\241\312=\014V\210\275\030\315%\275"
      }
    }
  }
}
node {
  name: "LSTM_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/kernel/Assign"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "LSTM_1/kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/kernel/read"
  op: "Identity"
  input: "LSTM_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Square"
  op: "Square"
  input: "LSTM_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer/mul"
  input: "LSTM_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer/add/x"
  input: "LSTM_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\3206\316\275\252Rj<t\372\261=\333<\314=\0101\026\275\313M\274\274\335E\354\274<XO\275#.\220=BzQ=w\031\261=\264R\232=\235\231\247\274ZA8\273 S\326=\245\350\275\275Sfp\275\000WD=Z\324{\275\226\037?\274\370\224\002\276B\215\217=Fn:\275O\317\356\274\357\305F\274FHt=\221d\216=\220%k\275\3306\255=d# =7\347\361\275\221om<\223g\022:\231\177\233=\326\223\r\275\257\223r\275\331+1\275\242b\267;\226\217\004\275Y\212m\275\004\\\241\275\326\r\353<\010\025\025\273\022t\325<\250\264!=\372K\025\274\033P\250\275+\001\204\275\027\034x\275\333\316N\275\352O4\275\025\343\231\275\016\235\224<\370O&\275_\2763=_B\200\275\377\212j\275\300\026:<q\031\202\274\356E\370\273\334-*=\022\276\"=\327l\016;c\177r;U\243M=$\241\032=\357\007`:\031\354\321=vv\225\275\216\251\342:Q\275Y=x3\254=\373bd=d\321$=sx\347\275\320>h=\301\345\303\275L\327x\2752\207/=5\356\016=U\010\211\275\351~m\275\271(P\275\013<\035>\352\n\003=\325\010\325=G\275\367\2755\340\013\276\274VC=-Z\375<9\244\350<\177\246\216\275\345\373\315=\202{\301\275hL\316\2740hi\274\335#M\273\277a\365=\250A|<\237\024\317\273\271\r\320;\212\211\346;\264\3312\275\023\227b\2752\267\034\274\344\265\243<\374\234\323\275\372\373\213\275#\335\201\274\203o&;\310/7\275\341\020\277\275\270M\377=\353<\224\275{Y\237=R\332\312<\177<\310\275k\362\031=`yr=]i\220=\360s%:\204\217\301\274\035YA=\323/\214\274\253zi=$\357f=\206\357\237=\272\024\273\273\257<\210\274\257\307\002\276)<u\275\001\311:=MR\367;\311\000\030=A\225\207=g4\023=.\3631\275\313\337\203<\211\036(\275\326`p=\240{Q;\023Ev=\213u\360<E|D;\222\300z=\201\322\250<\316\010\024>\320\005\274\274\t\030\347=\374\345\006=\026b\022=\000\247\320<\244\341\213=\213\316\342;kj\250\273m\026O\275Y\374E=\344\236\214\274E \371<\022!\263=bo\217=\332k\007=\221\3009=\025^;>\024\n\251=I\276\320\274!\325\204\275\271\201\257\275i\203\260=\376\313M\274\221t\004\275J\023\307\275\265|\253\274l\230q=\242A\272\275\341\201W\275KRP;.\277\235\274S\210\'=\3644\204\274\277s\037=\214w\330=\016\272\200=w8\252<q\232\235=\355\270\254\275>\216\013=\3350F\274k\275\216<\216z\026\275\214\016\237\275\236\271\001<V\306g\275\373\275(=\362\353C\275\274x\306=\215\213|\271\240i\305=\341\014E<,\373\013\275\206\316\251\273q(8=CJ\037\275\243\254\376=F\202\213=\034C\304\274K\006-=\316ho\273\005\275\023=\326O\304\275\313\337\213\275\241\331K\274\270\212\006;\357r\t\275\3336\242=\t-\242=\024\347\240\274$\212@\275`kx\274\026+\274<x80\275n\253\207:%\363\r=\366\0374</\200\325=\333\262$\275\352\203\275<\0067\r\276aGV=\242\247*<+\322j\274\252\375\006\275\004\215R\275\016\341\307\275T!\017=\3527\335\275\327Q\205\275bZ\376\273\234\377\222\275\026gs=\252\234\332=\255\270W==,1\276\300\345\300<\366\277A\275\317?\266\273\3133?>\3575\300=\230\335\245\272R`\377<S\'\236\274\371\307\034\275W\325\265=\024R\211\274\370b\216=\327\377o=\361\336J=\301\007\303\271\276\306\023\274\233$\237\275`4\177\275w\005\313;\335\002\276\273\261\303R=P\231\300\274\237i\010\275,,\003\276\374HV<\\\202\305\274\222\234\204\275\023\247\336= \024\020<\332N\314\275a\220]\274\273C\352\272\300\372\005=\250\210\002=Q\344P\273HK\177=\253\"\201=\342\335\031>\3427\211\275TO\r>\303\362\313\274\002\036o<\376s\251\273\246\276\026=\014\212\240\275\324\007\365<3\314\303<!6,=\315\347L=MO\343\274\344N\331=-\312\265=rb\331\273\341\337U\275y`\224<\371\236\373\274A\211\025=Ki\206\275q{Q\274S7\271\273\320\004n\275\003e-\275\\>\270=\362*_\272\021\275H\275\203\'4<Z\343\206\274gFa=86\267<\355-$\276\"\372\255\275\277&\346\274\265\007.\276k\264\223=s\366V=\3164\t\276\354\377\210\275\260\025\334\275d\024\023;\306\227\276\274\350\037!\275\363$\267\274\221g\232=\352\337\317\274\203{\317<\226\345c=\\\002p\275\354\021\257\275\324\231\340<\310\336\311;\244\251\221\274\017\207\027\273H]\331;\205\234\370\273\255b\256=c\321\024\274\023\306\277;!\213\255=\242\037U;b\316\300=X\240M\274&Ud\275\252\260\003\276\234\227\364<\002\227\252\274\0040\246\273\305\227\213=@\0061\2741\022\264\275\r\243\004\275\312\342\236=K\207\340\274\221\357\021\274\r\0232=\"\321+=>g\365\273\3318_=\036\241\224\274\321\360\257=\331d\247\274\344\020\230\275\2269\020=z\265\262=\267\351r\275\200\030\206=\371\326\205\274,\334\256=\035\3276\275f\216\223=\232\354\272\274\204\265\213\273\3757\223\275\317)\226;\201\252\274\274\010K\304=\346\312\307<A<\335\275\300E\215<h\021\313\275\201\025\356<u\210\235\274z#%\276\317\214\006\275\002\341\360\275\314\235\220=\351ML=\332\000\004\276\363\274_\275\366\235\222\273Pa\371<\006\312c\275\177\201\001\276\322\276\231\275|\016\306=b\350\010\275\332$\373<\006\263I=\351\016\301;\035\033\241:l\267\306\274\231\376\323\273\347\027\267\275\003 \n<2\222\003>xY\242=\2663g\275h\271v=\351\331\250=\356\316\251\275\376\367c;\237\014\001\275].\362=\311p\344=\013(?=\035\332\032\275\n\221\225\275\245f\203\275\252m\231\275=us\275\274\377\203=7\327\305\274\221\260\347\273\000\217&=\222\230\301\274ih\250=\341\351\227=\316\242\363<[\367\375\274\315\212\230\275\'\310\327\274\275\206R<\363\246D\275\252c1=&Ut\273\202\270\226<v\313\247=\375b\350<)\371G;\216\344\304\274K\332f\2752\246\n;x\n\017\275\227\233\234=\301\r&<0\352\002=4\006D=c\264\016\275*\326\234=\360\375\222=\002\212U\275mB\233=\020\370\n>\310\345\207=\355\324\354<\200.\363=G\024\003<\327\274\333\274\311!\031\275%a\256\275\230\tW=\3135\234\274\327\350\031<$\013\261\275.\2531=\261\340\025\275\254\030\032<c\302b=+N\222\2749[\277=U\266\254\275\232\300\250<\217\222\203=\000\215\242\275\013\321\271=b\357I=\014\024\370<\205`\246=\345\325\017\276\333\267\027\275g\312\014>\177\212\265;\003\002\023=~~\005\276\031\327\233\275\332\025\342=\365\226\252\273\341sP\275\262\305\262\275~r\033=\344\230\227\274\300+S=\202\334\217:\002]\363\273\332\032\300;\315\223\026=\0242\312;\032\236\316\275V\335\0019\023gn<\315\202\250=\215\356\327\274e=\025\275l4\232\275\270\370_=\275\'\023=\304\035\331=\271\271\276\275<f\344\274\335&2\273\372~\020<\303J\016=\260\215H<q\022\035\275\256@r=\205\360n\274~\2212\275\313\"\235=w\334\030=\331\346\327\2740\214\245\273y^\341\274N|\212=O\327\202\275xr\221=\3079<=`\356\251=\304d\231\274\233\232\251=\n-\222\274\303\263\274<v\302}<9\263\014>\362rI\275T\2179=\324[\002=J\377\304\274j\232D\275@4\005=\323\323\250\275\327\035l=G,\261<\r<\026>\237\325\275\2759C\200\275\325z\241\275\201h\024>L\337\232\273\265\3761\275i7H=a\004\221<\352\351\017<7\352\201=\310\014\006=\213E\324=\366\002\362\275\233?Y\270U:Z=\321\362\217\275\347\244|=d\023\203\274\223\246U<\265\245\240=l\021\361<\253;\021\275\2544\\\275N\313\215\274\3208\345\275^\356\004=Q1\006=0\225\374=\357\225\233=\3569j=t\220\005<U\371\205=6H\017=\247\365\232\274\214\370\t>l\272\273=\236f\r\275\234\337@=\253\314\211\275Y\224\263\274\004\232f\275Hj#=\333\271\274:EI\003\275\034s\020>9\2430<\242bM\275\257@\355<>+\277;\225Lo\274\311Q\322\271Y`\222=R\350$\275I/\232=0\271_\275;Y\024\275\013\271\230<\200\254\350=\372\362\253<k\227\253=\205\254\223\275\"l\016\275\375!?=B5\211=\340K\231\274\370\241\254=\250\322\206=\264\013\r>x~\235=\246\322h=\305\317\345\275Yq\032\2748\250\260\274\223\223\020=\247\367\360<\346\004\222\274\254\273\347\274j?\007=\265Wr:}\331$\276\207\232\210\274\270\267@\274\026\227\225\275\267\257\034=\240*\000>\3250\244\273\002\245\212\2754%\216\275i9\224=X\214\225;\233BN=U\010e=e\315\"\2751xR=\273\232\222\2733=\224=Z\303\014=\316\307\323\274]\331`=H\313\210<`\244W=\210%\244<\222(&=\256z\222<7\312\321<gs\200\274\250\3143<n%4=\265\026o\275\317q\365;\263&\354=-u}=\3352 \276\275\347\002\274k;\241\275\325\t\272=&\037\021=\2753\023\275\017\362!< \243\246=\325F\330=\024\t\212=T\362\213=\300\277X=\034_2<\216\t\230=\200\376\277=++\215\275I\255%=\307;\3478\242\365\324\274\250\036\374\275\314G\374;\201h\013=\250\226|\275O\365\030\275\326\r\315\275K\347\'\274\354\366\316\275\246\206\271:IV/\274\013\374n=\362\r\207=\266\275\253\275\000\305X\275\027\242\020>\201\375\234;a1\255\275\210V\350<\245\362\342<\314\206\001<T~\201:\330\215\252=\3639\360=\321\265$;in\251\275^\036+\276\034|\026\275R\'b=\010\226\302\275\227\243D=\241\346\004=\021\350\t\275\277\374+\275\235\313\255\275\014\203\211=~\235\251=\220\205f\274H\213\224\274G3E=\356\031\2479\n\031\256\274\342kt=\202\341\372=x\036b<\025\036\r\275u8\311\274\223M\251=(9\024</KX=\265\307\024=\242\255\216=v\271\255<:%\331<\202\367\002>;\203\243\275\351\224\237\275?Q\265\274H\247\036=\tu\253=\373W0<M\2668\274^\337\352\275\231\030\327<l\346\r\276\216\302\304<\330\251\210\275!\370S<V\317\245\275\236\025\210\275#\371\353\272sm\230\274\013d\342<\303\325\026\274\227\241\024\275,\343\031\274\256o\276\275?\251\272\274\002\244\237=CrZ=D\223o=\010S\313\275\t\222\207<n\323\213\274x\342\320={1l\275\373\263\351\273\013?\373\274?\235\027=\312f\025=\362\215\277\275\324G\020<\256\316g<\275J\341\274B\367\233\274\324\210|\275^\276\274\274\013\030\027<\240.C<\335C\313\275\003\263\322\275\353]R=\204\300j\274\367\013\343\274\2568\247;\204\357\260\274]QY\273\263\253k\274\362\\\251=\316)\323\273:S\310\274d\tc<\316{\204=\266Wz<\212\020\277;\221\221\034\275\202\302W\275)\326/\275\362\365+=$\275\035=s\363\277;r\241\222\275\250\":=0\226\363\272\215\\\251\275\037,\007\276l\361`;\223{\023=\214|S\275\226\021\221:\232\363\367<7\267\344<\216I\247;R\316\276=\004\352\214=\361:\303\274\0362\205\274\277\202\363\274\030\345\027\275g\343\203\275l\340\363<|@\312\275J\235\221=G\340\233\273\237\3758\273a\250\353\275\312\251\304=\000\035\357<\345\301B=yd`\275\252f\372<r\356|\276\204\000\023\272\010\037\325<\207\222\340<S\317H\272\226|\272=Xz^\275\205#\254<\340\247\016<\n \217\275\350\215\202\274\204?\032\274\256\356x\274\255r\361\274\361s\316;\211\303+=u\224\004=<\217\200=\364\360\034=xH\307=\312L\255=W\220;\275\272\326\202\275\333\357\300=U\235\211;\2229+=e_\233=B\247h\275\035\ni=\033\036\261<\302\356j\274\312P\211\274\263,k\275\003\347\022\275`!\346=Y\253\314\275\327\355*\273\365_\305;\271\352\323\274x\227\344\273\3249F\274\367\261\013=\354\257\343<T\276\264<\374\226:\275d\\\000\276;\335&\275\353&\004\275,l8\275YdW=\234\374\266:\272S\254\275\034 \273\275SE\300<\270\275\275=D\367X<\341\034\275<\261Y+\275\276I[\276PZ\235\272\256\025\373\272sex\275P\227\356=\363\3744=#\261\354\273BJ\213\275\204\000\247=Vn$=\345t\212\274Z_#\275\337p\234\274\203*}\273\323,E\275\003\tg\275\366Tr\274\224\345P\274)\326x\274}e\333\272_\235\307\275A\031\300\274\'R.\274\001d\207\275*a\303<\326\255\223\274\245e\370\274i \357=\363\3331<\251%_\275\017\271\220\274h\215\237\275b\202d\275\340\321\005\275\325N\215=\331\264\350\275\307\225\322=\t\212j\275x\312\020\273r_\003=\210\360\257=\202n\033=\370\265o\275\332l\217\274\234\235j<\310t8>\025\237\334\273\2679b\275O\312\r\274\272\333\240=XFH\275\311\266X=\010\214~\275hB\356<\214\207\013\275\364\251\244<\277\347\360=\001\331\243\275\244(\240\275y\314H=\233\333\026=&X\340\275\273\206\215<\343\211\206\275\2174B\275\206\257\203\275\2271\002\276\177\313(\274\036|V\275\277!\200=eM\232=([*\274mz\'\276K\263\236<\220*\275<q\334I=q5\344\2729E\035\274\357\344+\274\342\344\332=&D\'\275\346\251\230\275\263\025\377=\265\264\\=\236\027\223\2756\232q:?\211\212=\315\t\222= L\017<|@}=@\004\214\274\211P\302\275\017\313\034\275\335\031\004>{>\273;\003%D\2754\252x\275kb\031\275\327\270\237\274\226g\022\275\017\016\334\274\322\234v\275\001d\320=Y_\314;\231\005\236\275\001\365\375\275\224\337\224\275#\r\222\274n\034\204=\337?\006\275\311\266\\:\003\202v;2\204\311<=\033\277=mS\n=\232y\004\273\351\261\276=5\377\306\275\244\177\013\275\363oO=\244\216}=\3344\301\275\212\372\254=\032\242\371=\214\023;=\2411\017\275\332=\002\275\r\247\032=\tp\037=\372U\'<\336\256\250=B^\276=t\037T<\345\005\006\276\022@,=\2659\203\273\257\031=\275d:\347;\313\326?\276\026\241\345<\323\002\017=\271\000\220\275\033\207\224\273A\265J=w\207\223=\"<\324\274^\227\323=\256\326\367<d&\220=s[,\275\255\210\343\274\203\247\300=\371A\t\274\323_^=\216\373\306\275\274ye=|\316\330\274\305\223G=\244|{\273\334\327\366=\004\262\365<\273`9=\036\356\021=\373\356Q\276/t\235\274Z\201Z\274\312lX\275\263\353\366\275\250\246\022\273b\365\343\275\320h\265\2752h\375\272\313\220\002=f+\201\275R\006\302\2759D^=R\001\223\275\302s\333:\361\006 =\366\217\272\275%\261\201={\324\244\275\365\255\306\275\303>\236=gQ\260<~\317\263\2745:\007=o\037\231\275\367c\214=(x\340\275\026\002%>\302\3515\275\225$a\275[\023O\274\312vB\275\247D\225=\2579\3459\314\312,\274\031\"R\275\311\267\244\275Y\030$\275\201\247M<9=\203=\277\014\235\275\274\2123\274\'c\333<\220\271\210\274[\227\004<\363\242w<\013\202W<\"z\275\275#\222\213=\267K\341=\215\274&<\346L\204\275/k\217=\366Wi\275;8\273\273\227\305M<1\263H=\215[\027=\034\017\013\275\277\301\332<jqd\275\260m\341<I^D=R\232\326=\326|\374\274\014Z\203<\217\035\231=\260\312Q=\320\021g\273u\213\002\275m\336;<\332\026\233\275a\374\240=\227\256M\275\023\313Y>=\260\207\275\265\334M\275\357\271\003\276R\306\257=\177:j<[\230\247=\034\245\270\275\225\003\333\275\177\335\252\275\327\177d\275\036U \275\360\217\276\275\004<\n\274\227:\345=\242(z\274\316\304\212=1Q-\275\'\2766=\210,\371;\253\002J\275a\302\362<\036\312\024=\274\357\333<X\360\317\275\022b\">^\230\261=\342*\362:=\331\320\274I\216\215\275\203\230\347<\224\334\000\275\353+\306<\276bW=\233\346\343\275&\353\254<\327\316d=t\214\350<\374\240\237\273\234D2=Q\223\031>\332\323j\274\377\244\223=\3469\376<G\232\227\275\327Wm\275\t\267\026;\356^\352\274\275\326\220\274:\353\225<\\\277Q<z\376\r\276 k\305\275\372\335\013\275c\354\033\275b\253\"\275\337[\254=i\177\356\273\"X\\\275\325\270\016=\226\372\352<m\032-;\366t\372\275\022\365f=I\022\002=\336#\007<\216a\315\273\222P\262\275\370\362\252= \250K=\231)\204\273\224u\\\274\375 d\275\226o\215=\336\t\262\274\3203\271<\362\307\037=\373m\\\274 \030\252=\233\2467\274\n\\\034\274\204\353M=[\325\t=\023&\373\274\307\235s<\267Q\306\274\320\317\300\275\254\334,=\301\224d=\250\311\224=DA\200;+\035\311<\365\272\005=\333\306m\275\277\377\360\274V\335\214\273\275\013\353\274\357\005h\275\374\004\230=\302j`\275m\025\234\274~k\014=M^\364<\344\210\305\275\231G\232\275q\353\375\275\035\375\370<\204\253\347\275\276\rV=\313\265$=\373\370Z=\375\237i\274\231jQ=\326j\033\275\247i\323\275\264)\264;\207\327\006>\363\235Y=O\351\315=\342[\206;\361\336\007=\256P\353\274}\202H\275\213\2416=\204j\250=\250\001\031\275$\013\000=]\262\252\274\264c\007\2751\357\003=\233\247\300\275\244\2253\275\203q6=\0006\027\275\320d\376<\007\\\013\276\214S\336\274z\032\342\275V\320\001=\360\226k\275\272\002\213\275\007{J\274\314\214\352<\214\340\214\273{u\222\275;\343\213<&@*=\335\"Y=&\240_\273 <\036<\361\334&=\331\341q\274sz\312=\201i\233=.\363q\275\352\037\300;U\t\251\273R\271m\275;\370\235\274m\377u\275}\246\201</\222\310\275:1\312\2747F\007>\3401\272=\274\214\342\274\003\177(<\323\004\\=)\320\336:\222\237y=\234\245\240\274\352\316\177\275Q4\276\275\245\3249=\317_\363\274\273\215\202=\242\202\302=$\240\264<\370\247/=\364\364#=2h5\275\025\201o\2751p\302=\340\224\002\276\032b\322=\323\322\260<Xos=k\336z=R\300j\275\274\237\022\275|\353M\274\036\231\002\276\215K\242=N\006!\275\204\340\222<\034\263\347;\340\270\264\275\266B\333\274\346\363\203\275\3366\201=\203U\252;D\r\353=\304Me=\252\252\377\274\335\n>\274<\027\215\275\026v\010>\250z\244\275\324<\226=U\355\374\274/\277\t<A\212\244<\364\305\325;\327\315\025\276\306\253\250\275m8\254=\262\342\373:C\264\266\274\356dF\275:\246G=\315f\202\274\213<\215<\324\214\336\275\265[\016=\324W\344<!\330\202\275\326\323\330<\326EF\275@\2219=\212\214\222\275\254E\000>\365\232\256=#+\325=s\321\366\272\347\233L=\347\361\224\275\330\200;\275/EN\275\360\014\311<m\270\001=?\321\346\275\340\327<\275\303\226\245\275vE\225\275\265\005\230=\213\336e<r\n\024<7\371\205\2742\273(\275\271\316S=\020\330\357\275\3614Z\275\0358\347=\274\210\201\275\2053\242\275%\261a=\2634?=\3511\313\274of\241\2752b\264=\366{\375<\234\'\354=\031\020G\275\333\334\216<lnI=Kr\\=d\270\013<\2774\232\275\372\350\256\275\003\345\004<\202\205\t=\210\024\254\274\241\213\314\275+7Q=\rL\222= \363W=T\223\t\275\016\000\302\274\222\016\277<\r\360\264\275R\375W\273\266\203\336=\021{\221\275\204\247\372\2759t\023<;`\034=/\301<<\021\211\260=\2206\\<\223\340\352<\022\220\r<\334\301 \275\'\332\261\275\243\355\034=\342\301\337<\316\267\035\275\372/\325\274di\312\275k\002\244\275\275\352.>\277:\214\275\255:\030;\240<\364;\265\301\320<\"\027\274<8j\036\275U\226\010=\304c\334\275\210zJ<\245B\274=\263\243N;\227_r=S\272\340=\243O\241\274\245\365\262=\210\232o\274[\376F=\014\020\356<\005\223\014=\322=\222\275:\205O=\366\336\361\275*\223F\275\353U\200=$\323\r=S\336\217=\252z\227\272\247\243\272=\216\374\034=k\376\222=3\"U\275\376\005/=\220\360\277=)t\333<\21387\274\262\330\211=I\335:<=e\177\274\220\253\340=G\201\245\275\272\335|\274\255\030\037\275*\231\326=\277\221\273=\024\235\033=\300e4=\235Z\033\276\n\355\037=\350\205\014\275\377\035\335\274\232B\315<6#\277;pI\304=G\030\266\273\201\303\253\275\261\t\271\275q\017\312=U\257\206\275\"\005\027\275\354\244\210=\366\'W<\377U\373\274\321@\321\274b\022\210\275\347\013\212\275\355\305E=\036\260\361\274\267\321\237=_\365\314=\262\220\205=IZ+=kq\303\275\214\214\315=\013\271\026=\364ov<\203\035\235;x4\212\274\244W\227=n\233&\275\256(\273\275\035\303\375\274\373A\236\275P@\222\275u\210T=}k\330<[LC\275#h\233=m\267\237<\005$G\275n(\377<e\361a\275h\006\212=\2175(<\260~\360\274\367\277\232\275\'\203\237=\253\276}\275\234\004\370=\210\001\240<\316\312,<\375,i\273I\242r<\005\002a<\266\027\260=\212o\215<\315\270u<\3228\313<\206`[\274\332q\204;\314\210\210<\351\221\224<\256\231*=p\246\206<\221\315\216;P|\005:Aa\211\275u4L=H\310u\274\276\";\2753uG\2741\202\347\2744)\231\275*\371\177\274$\371\232\274\247\013\333\274cp\342=o:\033=\301\260\036=\223\027&\275\033\336\243\274Q\305~\275\330+\">`h}=\267\330s;\032\314\004\275\216Xe\275\211\275.\274\253\356\333=\315\244\304=?\270\t=\033\360\214\275\247\257\366<5Y\201\275\020\225\266<\372\376\250\275=\311\241=\'3\242<5\n\367\274\324\034\260\275\251W\010\275\332\232{\274\"\264\244\275\306Z\212\275mWC\276\205mg\274\361\311)\274\270\230Q\273<\223K=M8\321\275\024NS\275\006\236\"=g\312\020=\026\246\014;\336]\265=k\223\264\274S\030Y;\365M\n<\304\272\237\275&{\214\273j\221\t\275Y`Y\275\277\367\245=)\261\226\275\225h\334\275<L\351\274Q\363\361\267t\361\005\274\020\225\213=\242\014D=\372\362\232\274\315\217\376\275l\013\236\275\331_\314\274\215o\303;0\317\007\275\202\020 <\036\003\206\273cm\351\274\337\001\002=\351\251\000\275\361B]\2758U\307=6\371\337<Z\353\336\275&\263\220\275\nq\261<\275\022\317<\007\311\227\275\367\205\026=s\321\324=\2554F;P\347\207\275,\353\364=9UP<\\\275\330\275\332!\247\274OF\005\275\243\037\212<\337KG\275h\360;\275\377@\017\275\210\210\330\275\224\350\207=\300\177\217\274@a\226\274\346d\216\275\2159\257=\026\305\270=]\000\341<\223L\376\2751~\227\274\035)\257\273\333\346\260=\034\311\320=x\014`;gx\236\274\234JR\272 \027\r\274\030j\204\275\252J\243=6I=\274Y~0=\353T\233=\014\266\364\272\221I\'>\257P|=mY\255\274\357\007\215=$\371\253\275\020~\016\275\310zP\275\021\354\326\274\337\346t=\007O\321\2757qA\275vA>;\'d\233\274\023`&;\030\272\014\273q;T<,\330\262<\344F\320\275\213\234\021<\3366\236\275\261\310\037\274\233\244\233=T\303\\\275\247\261\345=\001o\356\274\252\2455\275v\373\226\275v\206\307\2734/\246=\365(t\275f\270n=\322z\221\2751sx<\264$\003=\221O\211= =\352\274\022\302\025\275}\221\001>\321\243\006\276\276\230\241\274\322\245\007<\331FE=a\366h=\205\366\024\276\n\341X=\211\273\306\275\3134\266\275\026\232\310\275\027~\225\274m\263\017=\206O\335<\346O\263=\233\266-=\360x-\275\241\321\246\275\220\274\254\275\2036\266<\334\3149\275<EK<\235$\225=\265\277\274\274\212\342I<\004\306\032=\276t\016>cY\355;!\336\204\274U\277v\275\207R5\275\336\306\321=\037\265\034\276\3411\034<\rR\303\275\001\341\023\275+\330\221\274\371\313\220\274\365 \355<\320\013\272\273\35058\275\3525|\275U\3373\274\346\312\021\274\332\334g<\220\253\324<e%\340=o<K\274I\250\334<\331\266\255<\330\347\357\273\326\026\264;~Le\274=\266\225\274\306X\315\275\252\310\211\275\017;\236<]\254\244=\357?{<\305\376\216\275\035\241\264=\023)(\275U\226\033< \265I\275@\0073\275\316NO<\r\237\200\275\201\300\017\275oA\014\274\231+\036\274\322h\213=7\235\346=\237\220\224\274\242\241\250<\337\261\034\275\024\024\267;>\275\205\275j\321M=q\313&=\024\363\236\274e\362 :4\375\250=sC\230\273\376-4=\331\323\265\275\223c\344=)\017|\274\275\365G=\367\226[=\270\212^\276\034\220o\275\202%\253<\365\240\034>2\027\267=\005\221\t\275\361\303\017\275\316\275z\275`\361y<\376.\352\274\254\303\031;a*\205\275\272\004\235<\221\027D=g\364\233:\026\225\214=\337\377)=\365\225\231\275\240\345\025\274\232\235\240=\250\262\230=[N\234\275\214\370;=\363\023;=\246\255\344\275\273\363\326=\273\213\213\275\0250\200\275\016\024\313=cu\202\275\026\350\003<JL\003\274\223\215\276\274h\013,\275\\\"\n\272}@\001\274\022At=c\340\264\273!D\312\274\017\240\223\275`s\010\276!\254V=0\215P\275\303\'Z\275\237\371*;\360d\221\275\377\376\035\2756^\376\275\002\237\t<~y\317=\014m5\275\304\306\374;\330\216\033\275.56=B\255\355\2745c >!\013\277<~\344k\275\266\232O\275\262\314%<\310\260d\274=V\030\275b\256\206=\240\212\222=\322\346\326\272\017\210/\275t\225}=\262e\335\274\352-\241<\003\2253\274\'\341\340\274\250<\245<\355ti;\320\326\006<g\315\356;@h\266\275\246\3137;\025G\377;\307\351\370\2753\210\323=\317\361\263\275N\367l\274\n\335\023<<F\264\274A:~\275lQ%\274\177=\244=f\344<\275\031\253>\275\344(\204\275\200\362\264\275\336_\361\275\271\336\n\275\250Sx\275\220\200\333\274\335F\312<\300G\236\275\2674\365\274\324\314\244\275\322\334)\274g`\254=\360\036\215=\317\310\332\275\306OW\274\276\020\023\274\360\216E\272C\016\367\275~);=s\036\207\275\342\357\232<\007\242\324\272}\366q<\255\275\206<h\222\240=\262OZ=\340\303\271\275\213\021\013\275\327\350`\275h\267;\2758t\264\275\252\275\020\274I\352~=\226\347H\276(4\\\275\241Tr\275\370\030\206;\035n\201<\\l\001>t\224\361\273[\341\327<(B\037\275\023\277\237=6v\235<\331\266|;\313cZ=\311\346%\273\221C\223\273\252B&=\3551\225=@\200\232=\224c8=\371\t\373;\034\021$=~k\213\274\354\024F\274\256\013\360\274G\336\025\276*\022\245=\242\274\222=s\330\236<_ \233\275\337\263 \2750s\341=\266:_\275\353\232\351<\017\353\332\274\232\241\326\274\267?g\2742\230k<\0300X=\251/-=\257~\214\275\\k\214\275\352?\266<p\226\203\271\027\004\323;\033o\251=\332az=|T\007\275\334fB=5\212\254=Lq\346<;$\326= \261t=\375s\370\2744]=\275\337?\213\275yx@\273\003\263\256<\006\307\210\275\332\341\356\275\356\002\300<\317\350\227=+L\007\2749\330u\275\360\376\026\275Nu\021=\345\376`=C\367x:\001\276\201=\t1\265\275\3434\333=\246\014\002=\3309:\274\251;\306<@\363\022\276\344\r\323\275\021\347\237\274\374[]<\200\037\224=&U\215=U\313k\274K\321\361\275m8V=\205\273\241=\027\352\304=\303\373\366:M\301\337\274\247\n\336=\177\021j=\305\357a<![s\275\010\006\214:\226\342\250\275\276k\017\276C&\005=\232\205\004>\305\213\246<\356l\006\275\314\243 \274U\323u\274\'\236-=AJ\036=\004V\022<M\322\023<_\350\336\275m\246\027;m\225&\275q\312\273\275%\211\340=\374\\\331<\325\265\203\274\362\342>\275x\344\305=\254\255\220<\350p\351\274\205v\">u\016\244\274{\363\254\274^o\273\274f\017\277=\265z+\275s5<<\216\200l\274\207\326\244=\360\213\205\274N\014\201=E`\023=,]4\274\366#\344<\224\033\206\274\235;\325\275\017A\253\273\003\313\221\273YW1\275\222\236y=\257\326\313\275\372\311\200<\226\235\004\275\247\255\334\2751A\314=i\351\030=\236H\301\275\3729\354=O?\227\275\025(\003\276\320<5=\357\241\r\275\305\205\264=\327B\235=B\364\246=\236\301\362\275GS\036=\337\377\326\275\207I\257<\n\266@=\022n\031\2740\333\370<M\237&=\330\3166\275r\246\214=E\367\332=9\230J\275\311\\\256\274*\024\215=\237\343\375\274*\325i\275]pI>\266}\254=\014\002M=\333&\341<\241U\014\275\365.?\275\022jM\275\321%\006\276\014\177\r>+\341\262\275h\356\355<\022z\034\273Qnt<\007\306(=>$\033\274\230\315\247\275\320\332\246=;\324\311=\240\003&\275z\272\337<x\205\271<\306\177\242\275\237\221\224=\020\0004\2758W\356\273-\340@\273y\222/<Xi\364\275\340\257*\276T\306\311\274;\336\034=\317\272\"=\332\037\305\273\256\345\025<\"#\032<\n\343\243=5n\035<M\331\202=\352\374\276=`\305n\275\241\260K=\210D\023=\230{\014\275\210\254\242;\274X\034<\033\317\304=\310js<)\243\311\275\324\370\277\274O\303\257<\354\217\023=\016\240\t\275E)\214;B6\321=\013\340\231={\213\276\274\024>\231\275\356\300j\275\262\247\207=bj<\273N\360\311\274f\353\244=`\255\017\275\224\222\234\275\340\0033=\247~\304\275\341\231\014\275{\320/=:r\226\2759\267\201=\030\375\356\274\372\251\2269\n\211\234\274\020\332-=c\243\221\273q\351&\272\342)\312=\224\277\220<]\025\233<X\'\236=(\214\004;\246.\256\273\343)\341\274\260\235\353\273\004\354\277<^T\000<\275\221~\275\274\330\324\274\257\257\333\273\014\024C\275W\002\335\274\352W$=\213Dg=3\023\275\275 %\027=;z\247\275\360uu=\324\226\323\275\235\355\030>\236v\242<\210f\016=\245\002k=\310\346-=#A\276\271\307 {\275\240\317\324<\234@\000\275\2645s=<\t\337\274\365\276\341\275V\327_\275\262\006\367<4A\336=\223\356\204=\0148\366\274\020\r^=\336\330n\275)$\235\274^\317\323<\224\333\340\273\304\r\205=y\266+<\223|\007\275\335\241\240=\226&]\274\255\277\">\357\264\326\273+\006)\275:u\217<-iJ\274\240\340H=U\001Y=\243\303P\275\037\336\211<\006\016\312=\022\2764\275\246\203F=\323y\017\274kO\273\272\001\367\231<\277\272\177\275?\264\212\275\312]4\275\257Vh\275\021\262\262\275V;\025=\302\344\371;\266\262\332\274*;x\275\325K\275=\315\006\006\275h\322\271\274\233\370\247=\331V\215<\200\350\352=\302\370\271\275\0260\022=?\230^=\306G,;\366Q@\2756\2634\275\206/\r\275\300\342\203<\311\327\306\275\027\217\001=\020@\337\2733\315\006\276\036\267\323\275\346P\363\2741G\262\275\201\213\236\275\016\n\301=\021\257\243=-u\215\275\226\203\332\274\276\344\211<p\272\256\274\375\221\255\274b\202\201< \014\201\275_3u\275c\233\203\275#\221,=\334\003\327\274/~\302=\361\0304\275\322\250B\275\035x)\275i\206\217\273\235\267\213=\202\256\225\275]\273\363\273\302\020=\275\356\036\036\274\033\033\341<b\352\365\275%{e=Lh\342\274\360Gb;\024V?\275\204\231\363\273\255\037\320=\215:\372\273@\240\241=\307j$=\333]\215=l%\341\275TC7=\264\0310\274\245\331\016\275\\\325,\275n\3172=\315KL\275\r\374\263\275P/\322=\377\204\036>\305~I=m\202\344\275T\027\2149\251\017t\273\024\277\373\275\016\205\000\276\206\341M=bM\262<\27012\275]\377[\274\324|/\275@K\342=Q\315N=4\200.>\200\217\013\274m\037\274\275\357@\212\274o\276G\273\265x\344<\316\277\263\274\017p\245=\340\243\260<Y\201\007\275\220)\223\275\\h`\275P\274\374\274\272\211\327=\272c\n=\252\273N\275\376\034>\275\250\211,:\277Xz\275E\370\374\274\305\353\324\275k\304d=&\334\000\274\247f^\275\3070\253=p\316Q\276\264-\347<)\253W\275\325\006\332<\t\270F=\244\312\216\273\037\2100\275\255\014u;u\363.\275\223\200 =\315X\334=\274\266+\275T\003\235\274\327*\245\273\373\203R=X.\033\276\301,4<\254m\243=\243%\326=\037X/=\343\366\024>.*m<a;\313<\357\303\243\273}w\220\2756\320N=\330\325\262\275w\2658<\2250\200\275^A:\275\313t7\272\233\200\260;\340\325\366\274\373\343\244;\347 h<\2755%=SRY\273\274\325\037;e\027\322<\254\343\241=[(\\=\221\023\327=\r\367q\275%\360\276\274\004v\251\274\324\213&=l\264\226=\270\177@\275\266\304\216<\017\002n\274fDD\275\240-\373\275-\005\262\274\003\270\010\273\300OW=\327z\306\274]~\032<\3537 =\347\343\204\274C\202\201<\356\000C\271:\337\373=@\013;=\017=\\\275\224\213\271\275\346\306\000\275\022\'\035<g\366\300=\216]J\274 \036\216=\322\232U<[~\231<\361t\231;\333\236\313\274:I\235\275y9\214=%=\010=\225\261\031;-fy\275\351J\032\275\312\324\341;9\315\216=}\251\206\275y\260{=\212@\204=|\340\022\275P1\300<\n/\215\275\021Bx\274\327\243]=u\352?=\263\210\037\2742\243\001\275\225&B= \336\004=\274z\n\274B\372\241=)\370b\273\0344F=\177r\200\274c-*\275V+\031=\251\263\211=\002(\227\274\3570T<)\331R\274\226!\036=\031\014?\275\234\253\355\273\355\262\306\274=\347R\275?\266\256\275\022s\026\275;+\267=\226.\271=\235%\211\275\033{\302=\352\243\256\275W\205\223=\222\216r\275\205\307[=q|\376;\373T\021>\362\332\021=\033?h\275\217p\020>!\340\264=@]\031=\310\363\313;^u\214=\356\245P=\233\005\010\275;\034\226\275(\346\004=J\255{=@\356I\275\033.\213;=\330\006\273\241\341\346\275@\245c\2757`\310<\324\370\021>\246\307C<\217\246b<\377Z\260<\017du<5\304\005\275\365f\234\275\006XT\274\3464\226\274\243I\037=\013<\206=\'\336\241\275]\377\240\275\345*O\274U\\A<|\303[=\343\0031>fT\335=\242\335\217=*a\341\275\333\2035\275Xt\023>\355\313\236<\312\250\340<\372!0=\3117\010<\316e\212<U\303\025>\265\231\006\276\361\240\343\274N(0=c<J;P+\230\275\371\224\001=d\356\207\274\315\245\276\275\342\203\004\275\3219\353=Q\364F\275\317\320\235=J\251)=\220t\316\274)k\023\275\007;\370=\r\306}=\372\205;\275\350U\302==\261E=\330\0060\272\334\010x\275=(f\276\205\355\351\274}&\037=\273R\253<U\314]=#x\024;b\325\217\275q`\006=\004\352\022\276(\206\017=\006U\232\275\2314\027=\351w/=\323Eg\274a\357\321\2744\250\317<\363Rm\275cB\\\275\030\216C\274\340\237\312\274\363V\230=^\360\347;aYp\274\r\222\247\274|\240\255<\033<\024\275\263\267\321\274[\335\213=\350\024\001\276\241\340\363;\315\265\234=\270v\265<\354\013\347\272\201\017\022>\365YG<\024\t\231=>oZ\275\234\004\030\275#Ut=\027\233Q\273^k\341\275\031\355E\275\333\217\277<\035i\203\275\367G:\273\342\200\221\275\254\252\212=\214\230S=\261\022\334\275~\333n=\365\003\025\275\270\371\252\273J5\374<\236g\267=\257Q\025<\257]}=,\232w\274\233h\036=\236\024\361=\266\020\227=S\371\022=\301\204\305=\256\344\202=\344j\243=W\264\267=z\005}\274\030\205.\275\r05=\300F\243=\277xZ\274\21086=\035+R=E\0057=\352\006\372\274(\206\360<\014\001|=\034\321\207<\341G\025>P\364\252=\276P\204\275bk\365<\214\203\252<A\301~=d\241\002\2769\354\354<\260D#=K~?\275\245\2052<\0278|<\016\222E\276\345\315\273\275\"\305\277<w\234\253=\270\206\010\275\\\210\335<>t\024=\';\217=\305Y\377\275\r*\020>xl\305=\371\207\005;%-\037=\267\205\235\274\033\014F=\217\321\353\274=\376\300<\254Me\274I\rU\275\320\000\233\275\237\354i=W\202y\274\235f.<ds\210=\217;V\275\036\252\262=\356.\223\273\0034\277\275\207<\370=N\361\236<\261\234\002\275#\267\304<\2143:\275\307\230\230<\365\277\007\275?+\001=\331\325\026\275y\347\321<\3730\004>\350T?\2757\316(<\025\003\345;\0372\354=J\300\275<\224\325\356<\3557^=q\034\022\275c\352\267=N\213k=\246T\231<\032\356\270\274\210e+=\031\376\325=\026\366@<\344n\226;?\337M=\033[\227;\207n\353\274M;\335<\351\257\245<7\256\332\275|\320\211\275s\315\023=\001H\220\274(\321\375<\034\304\216\275\216^\014\275\371I}\275\211\245L=\252!\360<\321\013\344<t\255\367\275\344t\013\274\005^\227\275\3173\301<YJ\253\275\031\362\252=\254\255m\275\207wR=\234\347\250;~\220\313\275p\275\346\273e&\201<\203\260H\274U\205N=\021\000\023<\252^\3168\232\354\214=*\007\213\275\320(\022\275G\225\300\275\274\004\273=;\017O\274/\321\247:\276\242\214\274M\264\234=\322\3632\273\335c\210=T3\023<\213\313\255\275\212\202\316=\212\350Q=\371\250\002\275\250\347\222=\016\000\267\275\331\212\265\275\001@\250=\343\211\324<\251#\344\273\246\337;\274C\342\024>%0\302=\370\336\201=\256\266\326\275E\367\3519)\307n<\251\212 =4\032\026\274\212\300\215\275~HO=[\326\354\275J\325\336=\343+\035\276\373\262\307\274\347\200\211\274\034\235$=\260\\#\274\316\024X=UR%\274!n\323\274>\2347<\325t\243=DU\366\274Z\340\006\276\201U\255\274\323|\231\274\027\247\242\274\0177V\275\340\253\372<\007\022X\275\303\210\231\274\213\001C=h\360\007\275\013\256\341<~\035~<\230\177\213<FB6\274=[\276<\246\235\033\275z\370C\275L|\200\275\216\255\322\275I\t[=*\037\272\275\310t\223=JH\366\273\304N\025\275\\\302\320\274\213\357\200\274\301Y\227\275(\261\033\276\216\003\016;\n\034t\275\246\356\\\275\325\014\312<\363\270\027\275\256\341\302\274=\2118\275A\356\270\274\267\241\225<\321\206\230\275\036\277\222\275<\237\217=\307\356\211=\234m\203\275\342E&=*d\331=)\3740=\252\326\241<D\336\373\274@\n\230<@\013v\274\211}+\276\010,\022\272D;\010>M\303\222\272\301q\324=\266; =\301S\220\275_h$=\275\r\177\274\337|\247<*\010\036=e\241S<*\344\217<V\330&\275\330G\246=\216\n\257=\236\030\260=wK^\275)\354f\274\355\367\r\275\323\014\272<C\022M=\215\265J\275-\\\205\275\244\205\343=7\303z\275F\324r\275Gf\023=\311HD\274\210\036\014>\356#\363\275\354\272w\274\315\273\221\275\026}\n;(+F<\306\002G=Y\241\241\274<\235\363=)\036\342\273z\224\351=i^\027\274_\267!\276\032\000;\273Z\001\217\275 \037X\274\301\326\364=TY\372\274\377\014q\275(\344\010<\267\"==\233O\201\2741\320\210\275\246q\247\2749s`\275e\253\236\275\204\034\r\276\212\210\314\273\2009\363<\207\203:\274z]\013<?\250\221<b\205\351<\031\253\356\274\266\374\300=)\002\251\275QQ\024;\377\3442=f\324\222\275C\376\304=\271Rs\275j\375\222;#z\201=\026 z\275\246\337%\2758\375\210\275\341\022\341<vq*<$\350\277;x\363\275\274C\003\375=\201\311\322<\234ip<(\300\361\273&|5=\004\257g\275\030\263\004<\240\241\257=\247J\262<k\251u\275\002\021\001\275\344\023\207\275\034\267\037\272F\201\364<\005\206\261\275\314\340\017\275\022T\315\274C+\000=\364^\205=\356\255?\274^\000\370;\2418\345<\032oS\275}@x\274$\374\347<\364X\263;\2560\003\276\326\025\273<\3225!\2755oL\272K\033\'\275\224?\312\272\354.Q;\357\236?=\315\321\327\273x\235\340<\204j;;|\256f\275`\211\240<p\025[\275\r\320\237=\337\276\344\275D\275\237\274+.\370\274],\205\274\"7\251\275\273\2536\2750\271\331=8[\300;\204(\231\275_I\000>QS\222\275\375?\n=\325_\005>\325\307x>\251\242\243<T\r\'\276\243\361{\275\243\271\271\275\373\365~;\334\342\005\276Z\'j<\235G\332<Cm\220\274jXY\272\316s\021\276\020@}=\3179\250\275\331\332)<\207\220\255\273\235\243Q\274.\346\203=\363\214\342;\206O\363;(qH\2742\257?\275\246\356\316<\3248*\275H8\234<)\236\031\276\300\200\250\275\016.?=\335S}\275\361\371]<\031\330\237=+LX\2753\2030\275\2619z\2755f\034\275_\271\016\275\300\'2\274\313A\371\274\362/\003=Y\016\307=)\177E\275\275\270\301;U\205\362=\005m\307\275\355m\002\273\027\366\n=\236F==\247\222\261\274u\331q<\347\243\221;\264\353k\275\021\224\236\275\355\205\214\2759\030\263;\tu\310=\036%A\273_\366\230\2732\222\255=:\001\211=3\267V=\016\334B=!\322\216=\376}\334<\267&\021=\204\371\226\272\361\272\224=\231,\007=\030\226Y\275d\213\214<3\342d=\\&\000=\250e\261<fB\246\275\370\261\005\275CVt\275\"\214\234\274\027\202\251\275\3279!=t5\226\274.\250\010;\203\334I=\225K\371;\335\005?\275\222=_<,\372 \276\370\026\020=}y\327=B\017\212=?\\%\275\262\352\035>i\217\225\275\236 -=\237\276\203=S\332\211\275\213\272\230=>\017&=\345s|\274d(\266\274\212\213\334\274K{\325\275{R\260\272\025\346S=\312\344\230\2758L\267<,B\220;-/(;4<\331\275\325(R=\264\377\215\275\0103\200\274\363\201\317=}\313m=]\217{=a\004M=\342\377>:xs\366<7\030\026\274\355\303Q\274rZ\004=\345`G=\375\347G=\r\240\345\274iM;=\2730\232\274\020\320\004>\010\360\205=iz\370=m9\321=\231\250\204\275\026(\003\275p\211\036\274(v\227\275\267(_\275\252\340\227=*\373\027\276\353k\000>P]\351\273\314)\350\273\245h\257\275f3\010<H3\324\275U\342\002\275\0034\320=/\267U\274\252\024G=\312+\021=,u\021=\365\323\263=\247_k=\177\347\370<\222\315\232=\215\345_\274\337B\007=F\274d8v\216\244\273\270.\307\274\277ZQ\274\230\250\257=\360}@\275\267\360\t\275\250+\322=\255\310\264\272\371\201\034;\266\340_=\226\371^\273Ak)>\347\273o=\256\206\332;7\005\212\2753\334\221=E{\257=Qc\361=\3463\311=o\002\375\275\336\314\321=\277\227\"=\035o\362\275\2314\006=\260#\034\275\006\235k=\025^\234=\235\247\333\274N\n\007>I\264%=\254n\205\274d\235\237<\351{\361\274\212\022Q\275\366\264\013\2751^\r\275Xu\225\275-w\005>?\272\350=\306\030\036;_N\021\275\024\243\005<\305\006y=8M5\275w\346P\275\240\030}=\203~_\275t\323\243={\264\024=1F\216\275&W\321\274e\276+\275\217B\257\275\276G\263<\317}\t;\221\343\260=\032\205\332<\251L\260\275a<7\274\321F\370\275\271@\200=\252s\304\275\017\006g\274\0058\312=\263\246{\274\221\204\300=\215\033\026\274\273\221==\2631\253<@\273\342<\344\255\003\275X\003L\275\357\234\230\272\264X\221=H\207\244\274\244~\211\275\240\027\260<\353\330\331=[\300\017\276\221\271\023\275{)\333\275\t\265\371\274\220\202\007=\357\036\273=\330t\304<\035sc\275hB\220\275C\374\024:\\\362\004\275\'\376F=\315\311\266<\213\351\261\275Y\245\201=xo\327:\001\370\361\274\355\364\000=\020\324\023\275\271\t\326<\231\212w<\263\321\263\274\261i\024<]\344\333\275\220\237\261<yr\032\275\311\020d=n\376\213=\003\247\354\274\334\267\215\273\021\277\t=\236\350\035\275\t\213[;-\322\235\273\362g\371<\341bF<\201\310\211\275\274-\027\276\007\354>\276\347l{\275\203`\301\2746\351\235\274\210\336==JK\306=\306\037B=\000NY=\023\246(<\327\337R<\030\205\002\274\320Z\256;\314\222W=\201j\365\272K\240\206=*p\037=`BK=\325]\370\274\373c\304\275\004\337\374<a\262/=\217-d=\007#\204=\344\202*<^\034F=,\233\253\2755\177\251=G\232n;\003\340\302\274\350\023\236=\177s\231\274\307o\202\273\177\351\245=\203\340^\275\023\2341\274)\036o\275\254\302\320\273\341D\261\275\220l\243\275,\344\262\273I\\u\275\300\330\272\275\033\027t=\030u\337:8\220\251=\330\332\367\274\266ks\274W2\330\274\354J\021\275\026O\031\275\337^\222\275\033\nD=\374\340J\274@\261\334=`\370\312=\257\371\224=\t\004\202=\316G\212\275kvy=\330\201\264;\204\250S=s.\227=yO\353\275\361\276\247=\271].=\356N1\274\213\351L\275D9\235=\333\240\200\274oe\256=\270\275\014\276\247\256\363\274SE-\272\222\230\026\275\214\031\343\275o\277\026\275\037\007\215\275t$G\274\027\371-=\017\366#\273e\017\323=;B\205\275\255\337\016\274\022\347\371\274[p\034<I@d=\224\317\351\275\347i\300\275\202P\007=\357<\255<\316\0003\275\310\302\000\276\006\257\266=O\017\316<\023(\\=\227X\301=\213\301\020<\223\374a\274\013\232Y\275|\241:=\264\333\253\274\361\253}\273\177#\006\274e\262C=\351\3431\276g\304\224\275\r\346]<\236$\013\273\255\316\232=8\230\216\275y\023\036=Pe\036<\231\336:=X\014\223\273\352\236\346\275\306\260t=\261(\345=\223\322Q<\";E\274\253\373%=h\0171=\336/\001\275\303\226\210\275\304|\021=\366\r\000\276z\324\314=\207t\350=\311\307\203<Bo\260<P\257s=\376\363n\274\274\013\241\272\273\313 <\241=\255\275\217\362\203\275{22\275(\370\002=,\016\000\274P\032\024\275\214\n^\273e\005S\274\224\315\346<\334C\013\275\243\327\322=y\375V\275\356\"Q\275Y\321j=\215\316\207<wI\363\274\261\326\335\274\334I\220=\\\377\373=\272z\233\275J\t\266\274\020M\002>}s\272\275\336~\030=Q\201\242=\256H\027=\3653\212=r\3650\275w\275\363\274\230]\326<\021G\034\275\301o\302<\234\325\274;\310\030F=A\254\200=NPK=O.\001\274=\021\247\274h\330$\275c\020\304<^z\356\275\336\244\305\274W3\257\275\247\353=\275]\000\350\274\277\033\274=\363S\244=.\251\343=\007\257\365<1~`\275<_\261=\341\017Y=\337\252\253\274FT\310=q\345<\275\010)\204\275\362o\321\275\014u\021=\351C\013>N7\314=S\265\264=\222\244\313<K.\333<\3702\323<2{\030\275\014\277\026=\013U\202\275\330\204\'=4\206\006\276\360{\324=\027\240\373<\211\324\333\273X\311\002=\303\335\n\275\3709F\273\231r\003\276\322\3731=\34451\275\\\232\266\275\255\177\233<\316\022\237<d\210\\\275\311LJ=\302\315\214<J\370\031\276z\364F<\243\255i=2I\252\275x&W>\323\265$<:\205\205=\277\345\222\274f\306Y=\247\361O=\211\205r<\003\245\022=<[x<\266\333\336\273\017x@=\374j3\275&\223\302=\235\360\204<\177\250\302\275\202\344\265\273\214\203\347\273us$<+\001\234\275\025E\203=F>\334<mg\266\275v\254\203=\263\347\321\275\252iD=6\037\360\272\343Qe\275\240m\311\275\331q\230=>\0201=\177\337\254<\027\004\333=\214\244L\275\265\004v=\0030\356\274\360\320\006=y[\035\274\037\346\206<<e\220=\332Q\255=\232\204\251\275aQ\307<}\"\016\273*\264p=;h6\275h)E\275p\034V<\315\031\252\275`\254_\275\363\263\216\2751\027\244=\013\246\270\275\234\322\271=\004\212\276\274\335g\212\275\351\036-<\307\340\324\274;\266\"\275x\243I=[\263\004=\312\252M\275\243\341\313\274\"U\277\274\010\253\026;Z\360\302\274\372\264 \275-\272\232<|\3013=\003V\205=\240\273\324=-\003?\275\211\177\001>/\200\027=\3444\266=3\267\t\275&\206\007>L9\000\2758\247\007=\013\357W\275\',\227=G\350\027={\363\337\274\347?2\27471\215=/\265\201;\332\007\210\275\025o\220\2746A&\274BF\007>\251\325`=\375\275\256<\272}\232<\360\023\002=\261\355C<\213B\227;C.\n=)\2636<\014n\006\274e&B>\266]-<d\001\262=}qK\275\3163\r\276\234Aa=o\223\030=\304X\037=K\274(=t\300+=\020xH<\301t\346<\215\r\305=\342\241\013;\240\273\212\275\0058\337\275\377\232\325<\242\024x\275\324\357j\275h\013x\275(t\266\272+\255\035\272\253.C=\007\355\003=\314\327\024=%\326\261:Y1R\275\243\373\253\273\231\223%\276\354,i<\271\323\264\275\272\341\303\275.\')\274\200\325\307\274^\276\377<\366\237T\275k\216\335\275E\020\023={\353f\275\244h\316<Q\030\256=-n\357\274\350}\364\273\213\370\030\275\202\345H<\355\260\342\275\'!\030\275\000\336\320<5\215\377<\002;\033\275xf\253\274\313\305\247\275\016\254\214<C\206U=/\336\000=\022-!<\005~m\275\331W6=N\325\334<p \332\275\347\n\260\273Z\204\313<\313\207\274\275\330\305H==\226\243\275q(k\275< y\275\357}\302\274\020l\002>rl\226\275\206B\212;\003#\364=r]\016\275\344-\231\275X\301T=\332\r\r<@\261\256<\313\362\210\273\350U\337=\205\343\353<!S\341\275\312\266\n\274,\271\2159r\245\020=\203\377\035\275\n[W\274\037()\274a\031\002>OP<>\362V&<\n5\241=\351Xg\275\203\206\242\275\026\212\006\275\272\372\256\274\204\341\206=+\321\260=\243\245\367\274z\373C=2\222$=\024\243\017\275\177\032\217\275\r\321j\274\244\273\262=\202_\201=t\227\277\275\240\325\235<\035\265\177\275\234\352\334\274\375y\354<K\\\252;\357\272\254\275\237c2=[\236_=\315\254\264\274\030\r1\276\231\r\346\275\2311$\275\031\206B=\273\365o\275\206)\230<^E*=\373M\206=%\3403;\273\256\000>\355c\304\275F\242\213<\207\035\275=\272\344\206\274\363\227P\274a\304k=\017e\027=\360\3749=\336\\\034=3\231\274<\302\237f\275\026\233\264\275z\013\205;y\344\247=,<\375\275\302(\207=\366\301\253=M\271h\275\336n\311=\2072K\275\233\204\256\274\031\034\311\275t\362\331\275\035[\330\275\313|\237\275x\304\377;\217\331\332\275s/`\275\211\346\030\276\204\002!=:a\323=\327\302y\274\367\333\330\275\263\350\317\274\350\237\371<\360-\307<\233\257\016=\213\220\204\274_j\213=\035Y\001\275\221\322\301<\300iN\275\200\264Z=T\2515=yn\311:\363-\340\275\231U1<\336c\341\274\347\225[\275\032\261\207\274U:s<+\245\356<K\206\273<\366\211n=\243\245\242\2744\261U\274wP\013=\002\3162\275\237p\237\274\302\332\001=n0=\276%\344\024<\266v\271\275\344\334\276<\314W+==\005\247;\354\355\214\274\230\332\205=\206\263\032\275\205\350\206\275\314\300\241\275\031\203:\274\336\330\"\274\333\234d\275\334\375\244\274\371\004\357=l\265\202=D\307t\274J\260\301\2759\017y=<n\037=\263\3419=K^D\274\316\274\300;-\177_=a\333-\275\361\353\203\275\021\3233\274\365\351i\274\026\t\217\273\205X>\274\217\336\020=\303\273&=\204\355d<e\001n=\031\271\230\275n\366\266\275^\027\353=\324,\r=3P\342\275\363\377\007=\322\331^=|\201\333\274\201\303\356\274\236\017\345\274i\377\225\275\232\375\347<L\221\024\275\304+\337\273s\263\260\274f\177u=\336\344\202=\004j\n\274\327\312(\274ro <\362\010U={I\275\275\362\r\002=\002\014)\275\212W\032\2742~m\274\253+U<X\264\371=\032\203\223\275\201-\036\275\354*W\2756\203\234=D\260\224<>\240\337\275L$k=J\014\205=\347?d<\342V&\275\317\027<\275\\\340\244=\356S-\275L\303u=\014\221\007\275^\333\035>\336\215\213<\335\241\272\2734;\277\275u\323L=\266Od=\363\227\343\275\242\372\311<!|\250\275K\275\213<+%\337<Y\014@=\276\2148\274,y\334=9\376F=\266; \275\207~29sq,=q\031\021\274\266D\r<\026J\216\275Vg\023=\252\024&\275\000\031:\274a\306|\273\307\254\000\276\256}\221=\037\210o\274 \033=;\1774\371<\377\317\237\275\026\177\221\275\370\327\346\274\355\271Y\274\020\031\330<\026\332D\275\216\307/=\311T\246\275aA\222=\333\247R\274\325\310?=\300\002W\275\347\025\320\274\362\256A=_\223\330\274cy\250\275\004J.=\232i\000>m\360\274<gIq=/\330b=\177\000\333\275\360\td=\312\352*\276\254\274l\275:\017k\273#\032c=\017\264j\275C\201\202=\361\355y<\277\214X=\324\335\360=\201`h\275\224\375\003\275\002\345\335\275\373\233\235=u\264\373\274\004y`\275]l*\275\324\363\024=h\376u=\243_E=[\354\030=}\215\014\276\313QP\275\t\020\301\275)T\363=\267\306\315=\023\002f=*\246\320\275\360:G=()\312<\0035\205\275\365\377\001\275>\303O=\035\270\234=\277\024u\275\350,\250<`\004\251=\346~\322\275\303\236\244\275v\010\230;C\342\217\274\034pd\275\253+\233=V\235\030=7\363)\276\307\254\253\274\314*\213\274\020\'\000:\334\247\212\274K\026_\275\247j\322=L\232\251\275\036\034\033\276\235\300\200<\257\332j\275\310\322\312\274b\304\337\273\001\340\201=6,\271\274\347KY\275Qhl=E\340\231\275UB0\274\232\374\203=\354\036\231\275\327\346\214\275\027M\356<\222\210\232<\314T:=:2\"\274+\241\030\275\226 \304=\314\341\301;\255U\235=L\236\241<)\032\\\275\371%\013>\261\r\333=e\021\265=\\\370\241\275\212\000\360<\306\236Z\275\177\274\216=\035#\355\274\350>(=\206\231}<~`\206\275\244n\230=\030wo=\270a+\275\271m\302=\331\211\322<\033\314\022=\3350\207\272\362\\I\274\360\374\227=O\272\n>Ab\216=\367\262\334\275H=\r<m\352G;\215.[\275$\\3\275j0\014\274\213\010\006<\351^\222\275\370R\320\274\255\022\223<\024w>\274L>c\275\277}6\275\n\2659=\2241\310=_M\214\2758\226]=]\277\202\275N\276\000\275\025\234\251\274A\271\t\2742@\210\274\035\263\033\275\3700\031\274\3504\324;\327\324\250<3\267\260<\342\310\335\273\320n\310\275\352A\231\275\203B\254\273f\364\200=\354\331\234\275\346o=\275\245\r :l\351\006\276\320sb\275X\304G;[\245\306=C)\205\274\335\336\014\272lp\007\274\273PU<\336\372\275;\216\200x=^\0226=\250\364O>\033\274e\274\351\226\266=ul\035\275 \213\212<\216\374&\275_\233\301\275\372,\216<NaV=\221\005\263=\220\357!\274\305\361\327\275>\277\024\275\245^\206\2750\234\377\275sr<\274:wX=\322\370V\273d\226O\275\tK@\275\361\252\220\273-\230\370;*k\302<\276\021\304<i\313\270\274\251>\321\274\261\374V;\006\000\262\275u`\217=8j\337;l\270\317\274\301\025\204\272\245\360%\276#\223,\275q\001\206\275wF\211\274\004\311\253=\276\007\222;\304\201r=\010;\266\275>\323J\274\232\211\242=\010D\200\275O\344W=d\202,\275\321\003\341<\230$\354\275Z\350$;K\022\225=!\241\200=\204\006Z\275\272\007\226\275H\242\223=p\035N=\353\363\202\273\263\202x\275hh\224\275t[k;\035((<\252$#\275\002N\240=\216\006\244=t\006\223=\373\000:=d\017\024=\034\256\035\275+\372\241<\222XJ=\303s\214=o\224X=/MZ=\347H\221=\211\016#=\201\210\363=\317\317\261;\357/\200\275u}\244=^o\202<7\000\254<\270\024\244<\032\362\236\275S\247W\274\321\363\t>\314\020\232=\234\003\373=/8I\275\3321G=p\020B\275\\\372\345=D@\030\275G(\246\273\260\034\214<T\246\303=\226I\246\274\216-&\2756\246\t\274\350\023\215\275\003T\024\276Ss\242<X3I<\332m\237<\004\323`=x\277\016\275\002&5<;\337\214<vX\342\274l9B\275M\361\020\275d\024\337\275\036\255L=\002\312e\275\332\254\334=*$\367\274?\324\001\274t=\314\273O\202\035=\256\220\260=\320\221\365<w)\230=\2779H;\025i\345\273T\010\300\273e\313\024\274dW\004\275M\203\311\275\217o9=\207\313\340\275\271j\342<\204\210P<\030DF\275\337*\376\275\022B\016=L\361i=\3264\004\274\346\316\231=\253\321\020\275xO\014\275wl\217\275\nX\201\275\020)\224=vd]=qs\021\275\264\020\225=\246-\003\276\267\306\225=\333\332\330<\333\305\033\275\366\010\304<\247V\310<\360\306\216\275\033<\366\274\205^\313<*\205$=\243p\323\274\211\332L;\017,9=\211\305+\275C:\035=\227\022/<\275:\010\275\021GA\275\027\261\'\275g\370Z<.\0214\275\350!\253\275\261\355\024=us\372<&\325;<\013J\220\274~d+\274?tH\276\227\343\010=\235\342\024\275\314M\336\275\320\214\247=\272\013\275\273*\013\313\275\233x\327\275\252\037\242\275t\277=<\035c\331\275\'7\313:\354\265\003\275RP\222=\304;\346<P\207)=\210\270\314<\220\273b=\216J\236\272\274\243\235\275\266D\340<z\302+<.\025E\275\242/j\275\203\014\260\275\306\361\301<)m{<Vo\336=8*p\274\t\335f==\237q\275?\243#=\351\362\204\27538!\2755\322\013\276X\3063\275\342\020N\275SF0\275\023\026\213=\034\345\305=\0102\014\275\361\207\254=\312Wr=\326\340\030=!\242l\274\265\000i=1S\266\275\021\022\002\275\336\303\231=\"\262\001<\327\305j=L\305#=\273\262\210\274\337\241g\274U\202c=G\201m=\n\321g=\245mJ=\322eI\275D\256H=0\211\006<8\242\374\273R&H<s\342\204=5\260\360<\0239\362\275\205F\324<\246\214\335\267\001h#=\374\341\203=\361R\323=z\2754<\217\005\274\275\005\306\372\274Z\201Y<{\250I=\206f\200=\252\340F:\373\331@\275\014\347\275\274\250\275\014>\320B\206=\326\234\211=\342\353\000\274\r[{\275\323Q\013=E\371k\274\310cH=DP\271\275\225\225\236\275\366\200\245=\014\205\221<MR\242=k\265\200=\037\246\373\274\317\006\367:AL\\<\016J\371;\257\300\311\275\241\347\276\274R\334\250=\234\024@\275/)\213<\231\216T\275\004\n6\275EQ\200=\211?\257\275\365!\221\274\374\332?<e,\364\274\356O\323=\233b!<d\025\204\275\261\267\016=\272\277\236=\243u\263=\340\307!\276}\367!<n,\270\275\0219\024\2767Y\356;\306 \025\276n\007\362\275~\253i\274\361\343\256\275\265]\366=\272\240!>r\277\212\274\300\267\022=\0252\310\275\204\317,\275\002\263-=AtP<H\254\350<\004\341\017\274\256\255\016\275y\211\323\274\333OY=\000\374\262\274\034\301\256<1\322\336=L\257\263=\234\243\005;`\234\251\274V\210\004>\233\254\256\275%\203\266</\231\343\274\271\033\202\275\266\027\220=\314\220\251<X\250\317=\353\310u\274\200}/\275\021]\333<\227\254\306\275EM\333\274\265 \026;\345\233(\275\010\326$=!\366\321=P\t\267\274\231\234\306\275\334_U\275 \224%\2750\234\256\274\231\320/\275i\303\351<w\253&<\232\234\363\274\034\213\013=\026\307w=\323\354\262=\\\227\006\276G4\332=<\220\366<\235\232\301\274\021\322\\\275\266\345\363\274\343\245p\275\232\323c\275\340\223\005\276\221\301\r\275\023\352\277\274t=\023\276\303\371z\275\263\365\246\275\206r^=IE\277=\032\213|<\361\234\021\275`\233\230=\351\323\313\274\323R\375\274\256<\016\274\rZH=\242\323\220\275\336\236}\273\243\346\333;y\030)\273r9`\275c\013\314=\211.N=\251\357\257\275G5\234<\016\225g\275@\230s<A\313\273\274W\202\302=$\220X<QS\032>\230\312\024=\203\357\351<:\2277=\314~\247=\245=\377<\355\207\346\273a\206U\275\246\220\356=\r\030y\275\335k9=\313\003\207=\0304\255=\344f\222\274\320\362\321<7\366w\275\215]\027\274\3777\n\275\027*\035<\014\346\265=\304\357|=u\240\341=\354\267\241<\350-W=\314\224W\275\346!\263=#\203R=\357\253\236:E\224F=\017\276\254<\025P\026;\026\266%\275\006m\327:\205\226\035\275#/\270\274\346\264\020\275\360^\024>P\360\247<\313\236\200=vVX=j\022~;\230\334\215\275Ji\357=\"\257\"\274\327t\221=\330E\024=o\332\261=\030\333\360\273\336?\364<\252\243\203<\375fh\274c\267)\27393\377\274+\037G\274B\333\307\274\226\364\270\274\030e\354<\201c@=\307\356\215\275\210\203\273=\"r\367\273\013\266i<J\267\236=\346\200\252<BF\214\274\237\264\230\274\372G\212\275\206\223i=\275\361z=\362\257\275\274\213\177\241\275\250\030\263\275\2522|\273U\261\242\275c\343\005\276\034\352U=\327\224\366\274\311\365\001<\204\261\016\275\023\201\036;S/l\275 \251\224\2757\376\000\276\354M\264<\006\377\346\2751c$>\315\277f=\301\353\262=\223\002_\275\326\274`\275#<\236;\337\205%>\014a\"=\033\r\227\275\302\2660\275\322\232\324=\377Nf\274\273[\200\275\323X\354<\252\231\225\274\006\244\231<KK\330<\323\263\230\275\307Uh=\376\n\335<\013\t\362<Z\343\376\273#\212==\262\321\255<\324\001B\275\325Qc<)A\375\275\021\022Y\274\274\345\000=\346\233S=o\234%<e\200\372;\257\202F\275\315\263P=\250\206\'\274\2360 \275\272T =\304Ga\275\271\245\241\275y\362\227=\347!\023<\334\014\342\274&\2252\274\027\357c=\272MH=`\273\215<J\301\313<\257\374\363\274\000\035\270\275<\020\031\275k\010\240\275h0\266\275\036f<\275\301i\306\274-\337!\274\005U\250=\307\215\206\275\r\357\214\274\265,\270\273\026\210\253=\212\'\254\272;*+<\215`O\274j\351\025<\202\350\246=\255\270\266=zm$>\332\201\247=\247^&<\264\252\232\275|\346C\274\347\202\374\275WVt\275x]y;\325[X;\231\177\245\274\0006\361\2753\300\350=\226\355\010\275\365\375\304\275\216\3009<\310\335\224\275\'\003G=u\014K\275\037aE=\275\232\200<X\231f\275\355\316\250<.YQ=\037\276\207=\177\235\014;\312x\271\273S\215G\274\037\305-<t\300\260\2743|\004<\t\222\2229\2252\027=\267G\342<\306\301?=\305E\363<\030U\350=a\367\r<`3\300<(\032\233\274\325J\376=>\027\021\275\222\250s\275\237\245\267=jdF\274\004S,=\231\243T<\227\305@\275\021G\005<^\214\237\275\360\"\344=\023\227\216\275\252\026\320\274\013(\320\274\255 I\271o\023\223\274\374\023\213\272%\262\273<5+\277\275\001iz\275^nL\275s\357\310=$\356\262\274\361qe\274e]\236<\374E\005<d\226m\275\206\303\265\273\301\262#\275$)\310\272\244\247\005;P\203E=\200*\244<\216Zi\275\027 x\275&\275a\275\024O\313=\301\277s\276yz\026\275\005S\020\276\263\021O=\374\225\262\274)2\016>\225\257p\274PU\320\275\374\300\355\274E\256\366\275f\207!<\333\024\007=/\234\350=.X+>\247}\267\274\317C\237<\317g\347=Ag\210=\032\300\216\275\027X\206=\346O\316=\275v5\274\252\334\326=cd\211\274\274t\374\273\264\030\252\2752Rf\275\322\316\210<\360\'\004\275\212\360d;\0023\320<\351\367\016=\272b2\275P\\(=T\035\337\273n\303/\276K`%=\207\332\025=w\265y=\021\323\304=}\373*\274\257\203x\273x\2155=\315\234\216\274s\032\362:\306y\256\2758\262\311=\343\352\262\2752M\213=\241#\222<\003p\300\275\030\n\250<\'\206\245=\t\256\204\271\006*!\275OW\260\275F\207\216\274p\235W\275\232c\365\275\004\317}\275\237z\003\275Z\230\221\275{L\010\274\372\355\353;c\231\211\275g)\211<\3522\370\275\035F\002\276\355\014G<\371\233y\275\320\305q=\372\277?\274\365!\304=/\\\351\274\262\021\262=\276\231H\275\342\322\277\275\367\207\227\2749c\035\274\276\033\005:\260\344S\275\006O\334\274\376\326\t\275\354\222\361<\270\014\000\275MR\n9\034\344W\275Q\306\013=\304\244\263=}0\222\273\241\214\260\275p\261\000\275\237\256\341\275\246\241C\275|\r\205\275\246\216\034=nE\225<\367>S;\004(8\274\277\030\027;\313\005b=\214\217\014\276\255k\035\275w\312\355\275\222B\210=HF$\275\262y\232<\231I\017\275C\306B;:ne\275x\252\223\275\324_\234\275\256$\225\273\273\234\306\275\000\334\232<\333$\236;l\356\306\275\312\r\245\275L\"\257=r8w\274\307\363\272\275a\271\376<.\350\277\275A\343\245=s\215d<\2354n\275N \324=;@\303=\337\024\221<\316\'\211=(d\246\275\013\240\365\274\355\354\363=t\347\222=\003\304S\275\035\"\237\274!\247P\275\347\331\261<\334\n\336\274s\371o\273|\373\352<\0310\226=\344\256\201=\311\0225\274R\321\353\274\241q\217\275\240|\260=\343\231p9\271\262\237<\266\265h\275Fi\202=\260\2354>\273\325O=\037k\356\275\235\323\255<]\342\014\275\376h\262\273\251\177\245</pM\275\204\271\021\275\363\037\341=4\377\207=Z\372\361=\260&\243;\334\345\026=\221\373\213\275!\177\270=9T~\271\367O\370=W\266\270=R\360\376\274#dg;\224\356M\275\230m\021\275\305\223\220=\311\221$\275\'Y\337<\317s\323=\177h\r>\341\346\270=\301\352\341\275\343\366j\275\316B\336<\370\215E\275O\247a<\200e\t\276\017_\242;Y\345u\275 \247\001=\262\323\017\275\300N\273=\241\225\016=\371\020\233\274UC\242\275\342\374\312\274V\351\005\276\372:\000=\306\002\020=\331\232\347<\232\367\037\275\214\203\360\275fD\247\274\2708\253\275P\212\026\275a@\343\275\337\336m=\356\351\343<\331DG\273AP\223\275\321}\016>\272\tW\275\021\"\014\275\361\356\265\274^\030\355\274\230U]\2730A\347<\311 b\275]a\262<vP\217=\241\302\236\274;D\352\275\'\266\263\274\003E\261\275\271\220&<\310\354\216\275\020\244N\275s\232-=\205y\001<\260\306Y;\365\346\236\275a\361|=\000\303\326\275\"\224\206\275\355\332\244\272\303\324\227=\004\367\312\275\224\335\243<(\'H\275D(7=1\244\203\275\027\255h\275\354h\033\275c\302\301\273d\235\270<\225\276\254:\251\300\255\274\362X\336\272_,d\275\337\352\002=@\332\001=\267\232X=\357v{=Y\275 =Y\t\201<C2\302\274\3367\037\275\243\017\017\276\365\201?\274\031\340\276=\234\240\313\274\315m\302\2748\327\231<\247\302u\274\276\312\324=r\030\212<\275X\325<(\003\230\275\026u\177;\\r\300\274\270Xc<\351\354\002\276\36424=\336\303\324\275\023Cq\274a\205\204;\027\350\264=Q\306|=\342H\272<\253|\372=\341\357\354<f:\267;\365\331\204=\217\222\001>2\224\257=\371\200\276\273\374\2059\275\260\275m;\357\006\206<\274hQ=0I)\275\232\010\021\274 \336q\274\252H\215=\367J?=AQ9=\263@/=\375\023\215\275\307a\254\275\340\232\247<\201v\220\272\207D\t\275c\267\022\276l\201\t=\226\002/\275\026\350\310\275O\270\354=\350O\027\274$!J\275\201\026\304=r;o=~\016\r>\365\233\"=\225@\361=\330WL\275\037\021\224<v\3259>\"\353\270\275*\342\024\275\0345\224=oHQ\275\r\216\235<\250\330\317=\023\213\004\275\347\320\273=H\204\223\274+!\205=\203\321u=\205\240\321\275K\337\216\274\355\207\204\275TQ\212=\370\303\035\276\014\354)\275,\236\031=-U\204<w\370I\275\347\033t=\356~\242\275\005\207\023:\375\213,\2755\206\021\275\035\353\264\273ZLG\275\335\257\315\275\003jh<\226\220S=U\265\242\275M\241\237\274\205\303i\2754{\303\275R\210\036\275\222\277\221<\264\241\203\275\243Z\264<\332\332\203\274g8\234=\235\267\010<\366\321\316=[\265\203;e\211\344\2755\211\204\275h\270\234=\r\275\252\275\377d\336\270\354A\251\274<T&\274\225\247\t\275\0238\254=U\354\206<\347\253\276\273\004|t\275{MR:\024%\230=\233\3712\275\312J\007>\r0\000\273\207g\351<4\365\206\274\236\310\013\272CT.\2757+\220<6\020\203\274n\307o\275<\306(=\272\324\211=9\313\211\274\003\351\224\2743\223p\275\027\213\254\275z\246\325\273\336\3149<-\243\327<dR\270\274\031\'\341=\3220\002\276\305\273\200=\354\303\205\275\321A+=K\315\220=5\215R=o\037R=\347oP=\323\362\212=\014\331<=\343\304\224<\263\277\277\275\231\222\242=R\245P\275 \224\374=\tV\337=\2527m\275\033\013\271\275N\354Y=D\017\324\275\322d\227<\224\021\230=\3027\025\275\036\207.=\021\224|;9y\276=\0244A\275\217(\363\275\3573\235=\205\0008<\031*\232=j\216\265\275Tr\001\274\314_\033\275)\026i=5\322\221=G\303\344\273\344m\247\275p\022\312\274\"\232\330\274\271\222R<P\331[=f\\)\275srH<\214#\346<\262[\025\2752\314\263=\211\315\025<p\\\346\274b\177\374;\355\r\336=^\313>\275\223\236\373\274\027N&\275=\300\264\275\266cU<\364\233\310=`\nT=\363g\353=\324\261\021\275\344g\270<\264\206\025\275\237\342\253\275q\360B=|\221q;Qs\003;a\003\340\275\252\360\304\275\332\260!:\030\001\036\273\356\321i=\034`V\275\375\232\201=\275\373\034;(\320\253<5V\204\275\237\311P=/\301I\275\310L\032=\r\224\352<\177<\277\275N\317!=\333\340\004\274\263\"\212=\331\036\022\274\363\031\230;\343\340k;\304|\222;\255\205\014\274\3718L=\035\260$=\026\361\003>*\323\034=\261\327\n=\001\033F\273\267\307\371\273@\032\261\275$\216\334=\030x\300\274\253G\321<\033e\005\275\262z\274\272\347_\017\276\226Pp<\305\r\211=*/H\274\262\361\364<~\311\274\274)>\203\275z\374\237=\177\373\237\274\307\324%\275\217\"\302=\"U\220\275\330}\325\274\366-\010\275\377\357\230=\242Bk\275\307\303\215<I\020\251=Q\025U\275\'\350\216\275\346\376\210\275H\3543=\260\342K\275\366O\214<\235%3\275\366\270\310<V\330\000>\013\265 \275\301+\010=\265w4\275\326\316\224\275X\360#\274\013w&\276S\224c\275\327\037\010\276\332\214\024<\3605\274\274\013\367\010\275[\345\231\275_\037\000=T!\017=\323\322\227;N\032L\275[\t\230\275\275\335\342\273#&\372\274\'\274\266\274QFN=ox\225=?\254\374=8\203\027=QH\343<\333\370\366\274?\314\003\275(\342\232=\216%\002\274N>\343\275{%x\275Z\266K\275<\036];\266\343\007\275\3741 \275\305j\226=\356\226\302=B\346\002\275\326\317\201\275o\350\203\275\252\306\252=\014\256}\273\325\327\222=k>a<\356\2328=F\262\207\275y[L\274\027Y\230\274f\317|:6R!\275\33305>\325\365\211\271N\261\315\274v\233\037\275\311\363\010\273\231\360\215<$\374\220\275{\2720=\313,\025=\340\"\305<\221\005C\275%\317H\274\016\2210\275\222\344\275<x\271\034\275#:<\276\326\372\306<\244\007\300\274x\te=\333l\221=\010\377\263=Ur\251\275\033T\373\275\314[\005=\227\021\370\274t\214\226\27438\t\275\321ic=\231\377M\275\005\207\025\275\322\006\327=\315\312\272=\336\275\020\275($\205\275\003\346x=\221\373%\275\024E\304=\315\033\213\274\232\352\273\275-\305\356\274\016\274\n=\316L\373<\255X=\274\010\260\273:\203\324\243\275\314\321\'=Z\344\355=\305\254\375=\367;4\274\177\373\254\274*Z/\275i\212\266\2754\215\211=\303\217\334=\306\372v\275\200\350 =\223\001\210\275\225Y\230<\316Ub=\317\345\330\275\202\215\017\276Zh\354:aO\002=}F\374\275r\314\317\275\302+K=\355\362K<\017\214\246\275\355\342,\275[\216\234=K!{\275H\240u\274\357\037\024<m\322m=\205#\326=;\014\305=\001\325/=<@C=\365\001~=\010\207\226=\375z\225\275\033\231\243=\361\000\026\274\246\206\007<\310\212-=\215\241\234<[\261\231\274B\261\200\2743\341\271<j\360\237<\037\036\210<\'j<<\257\327\251\275\321\363@\275\2122|\275\252\235\243\274\023;\251<\177@\211=\'\273\370;\201\323\217=\030\344f;j(\"\275qF1=\026e\223\275_\216\236=\301\275\240<\036\374\276<\005\200\352<\322\016\213=\031\343\270\273G\267\217\274I\351\225=>\201J\275=\035T\275\325\273\"\275\024\246\023;\331\265\223\273<\005+\273\331\346{\274\001\316\007\276UP5>?9@=\221\343\225\275r\246f=\021p\242\275,\261J\275\013\r)\275\242:\020=\343\354a\275\274W;\275\002\341\324\274\024\232T=SA\335\275\303\300b=\245t\307=\356\\\211=\000\334\336\273\272\261a\274d\033V<S(f\275}\304\216=/\004\031=\215\207\\=\265\026\222=\256/\312\273a\304.\276L\333\326=\013\010U=9{\246\275R\227\025;\331\301\215=;\335\025=\300\350\366\274\303\007r\274l\033\035=o\006\'\276\246~{\274\332R\256\2755\377\226\275P\213\006>\270\260\200=\3264\342\273|v\204\274\203\371u<\036J\246<+H\222\275\007\254\312\275d\351L\274\020\020\361;\tZ\212=\342`\020\276\276u\203=\341\231\257\275\233\217\235<\267!\013<Y0\326\274\014}@=\365\331\227=\306\201\335=\002\256^=t\323\311\273\030\326\221\275\233H\212=\252//=\316\232\366=\321m\261\273W\242e\274\3563F<}\214\305<\212Sf\274\255\323\256\274\214M\303\275.\200c=\310\2329\275`\335L\273\021U-\274\224\226\035=vu\035=\303\227\275\274\026\300\263=\375\312\240\274\216*S=\372(\n=\237\311#=\200\002\370\274\2356Y=o\251\263\274\262\343\016\274\271\370;=Xi&\274\010**\2751\242\022=9\304\275=\241\356\013=\366\234\231=pR\255;X|\020>Q2j\274%e\017\275$\323\255=Xi\257<\032>\311\275\2028>=\351\034\325=\034\027\216\273\246\335\240<\020\013\032\275@\261|\272\\\303\224\275\216\017)=\315V\365\275r\204\"\275ba\371\274\362\375\324<^fl=5d\007\275\271\361\275<\217];=\340\215-<E\271\316=\351c\014\276\021f\214=\343g]\275Vx\206\274\005\031;\275\206\031\020\275\211\207\020\275$%\205\275&\332F=\2438\320=O\302\026\275n\t\357;~\321\221\275R4\265\274\246D#=)y\031\274\302\004\026\275\031\352N\275\253\264\201\275$\345\004>oQ\223\275\254\276i:#\376\n\275\351X\226\275\003A\"\276\211\033\237\275%\215\256;\317\203o=70\216\275s\000\034=xg\216=\274x\207=bm\251=\210NS\273\232\327 \273\312\357\023\275\003\211\224\274\001Z;\274s\026F>0\334\221=tb\332\275$\361\204\275k\306C=e\214\267=t\341\203=\010t\207\275+L\233=\321R\213=\221S\010=V\371\255\275\265\237\242\275MWm=\225)\351<\022\221\222<\3002\203\275\"s\347;p\344%\274R\352\302=\253\035\005=\025v\t\275w\027a\273\262\221\257<@\331\007=\302\031t<\2336K\275\236\220\001\276\364\377\276\271\210\302\023\275vx\216=\356\213\004>0\365\366<i|\327=5\263D=\005@\260\275`\346\247<ItX<L\035;=\227\301\277<\306C\261\274\371\245g<v\014\202\275N\237\245\275\351x*=3\262\231=\252\224#\274\271:\330<\233N^\275)\233;=\324\352\n\275\324\017\320\275I\367M=De\226\275\235\211\'=2\307\020\276\264\220\004\275N}\026<\030\375(=y\210\005\274\010\030\301=\000B\t<H\0026\275\215\241M=\327\306\205\275h\007\302\274^o4=\361\344\316=\222f\201=7\257\006\275N\030\213=\003\276E\275\207\"\363\274\364L\005\273\276\271o=\037s\301\274yv\275=rX\270\2740q&\275WC\222=*\2214<\220\350+\275m2\006\275\306\336\333=\2340@<\027\274\335\275\r\245 =IP\204\273\337-\216\273\223\203\227=\325\202\017\275]U\224\274\035\266\217\275\355\025\232\273\304t\306<]\031\353\275\254\346d=\224\222\022\273M\237\300=\352s\375;\244\006i=\276\222<;\307\205h=\351\267L\275\213\271\232\273\304\276&\275\202\021\r>\246\343\220=\264=\307\275\323\243\257<\r\306\202=\276.\206\274\304\344\234\275\331?8=,\020\006>;j\303=\255\024Y;\013A\262<\036\376\376\274\330I\245:a\201\241=\226\220\222\2746\373\027=N\340\300\275\002\212]\275\345\016\361\275\372\030\273\275\306Y\314<\263IJ\274[hS<\337\277\276\275^b\262\275\210\306\203=\206Ty<\027\001\315=\"\254p\274D\034G<\300\025\264\274j+\003<u(\266\274\344\342\376=M\223\035=\177\261a=Fb\263\275=\331\277=\002\373W\274\307\232\210\275:\252\277\274\344\317a<\276\222\315\274\241\240<\274Q\355\374\274.1\300<>\355;\275\207\270\310:!\331W=7\300w\274,Ab=\032)N\2751^\020=JAM=\375`\036=\r\356\'=S1\313=JO`\275\203*\336\274\316\340R\274L\335$<\302\345\263\275p\220\003=\177N\273\275C\365\357=\005\325\003\274!9P=Pg\027=bj\257=\354b\240<!X\t\275B\356\307\274\360P\210\275\327\247N\275{\303\264=Mu\377\274\213\201y\275.\033\243=O\324\003\275m\251\316\2741\220\212=\265\220!=\351\303\235;\376\332\321;\372\374\372=b\361\366\273\353p\214\274Ze\343<\367a\237\274\2744!\276\214\373\275\274\002\025]\275)\211K=\217\344\323\275\236\212\324\275\204\303\037<\'\274\234=\305\345)\275`\350\265\275\334zX=\275\331->,\226\333\275\2328\250=\036\371\237=\344\377\031\2750\265X=\351\272\335=\255\243\213\272\362\364\016>B\2550>\344\342\321=45\353:-Oa=\322\312I=?\211\023=pP\344=L\306\305<\026\375\264=\033XQ=>\273+\274\356x\306<\374\233?=\373Q\254\273Y\345>=\241\014\366\275\007\243\220=\tL\237=\341^\\=\026\224\360\275\346OU;\033Bg<b\200\326\274\242\013R=\2434R\274\036\3126=\261\203\200=\352{\000<\303\265T\274\265o.\275\314\'J;\r\336\363=\235`\021<\254Y+=\006\266\007\273ci\031<^\301\022\274\217c^\275V\220\251\2746\001U\274a\264@\274\023\233V<\214\365\235=\277\034\\\274\026\306\214=Ep\370;\363}\232\275xI\217=\334\320\231\275To\004\275\267Q\275=(\377\227;\tc`=2\016\r\275\024 r=Li\373\274\312\206\256=\032\317}=\236j\002\273\277y\216=U\226\260<s\315I=@r\315<\020\025@\275\344A\254<XX\237<\265\364\363;5\020\216=\267\366Y<-x\\;\271\362F=\341k\275=\275L?=\262Y6\274\211RL=\327D\332\275\370\030\334=*+\346\275jXS\275\347\377F\275g:\360\274#\344!\274d\255k=\307\306\356\274\036\233\321=ti\252=\327\237P=\276\300\207\275\232#\257\274\277\227\221<\300\351H=\254\335\004>Q\244\317\275HQU\275\330\223\366<\311\347\275\274\373\375\203=\363Lz=\305b\204\274R\3343=\005\327\372<(\362\214\274\031\244e<\274\200{\275\262\364\360\275h\371\036\274\000\223\223<\374\330\227<\247\021\326=\373\352>\275WY\360;r\017\344\275\014^\264\274\324\201\364<\254\'\256=R\243\212=\316\310\346\274\275\007\225\2759\020\034\276\347R\030\275\265\\t\274,\273O\275tD\000=*\257\376=1@\251<k\020\231\274:2\347=\003\360\275\275\311\271\232\273\251L\240\275]\n&=\305\356\330<\200RV=\231\325\277=\317C\225\275\324~h\274\';\352<7\362\276\273\361D\371\274\220\320\370\274\320\020\326\274\321a\346\273\334\327\317=*\313\315=9\341\227<\2761\270\274\234\253\246\273\363\\\217;0\372\323:\324\272\257\275\211(\300=\374U\021=\207q\371=Z\220\"=%\246=\275@\322\317\275L\177\001\275S\010=\275\336\365\245\274Y\310\277\275\362N==&\"c\275\261\254\261=\271n\224=\357\245\252=\262\201_\275:\230U\275q\261\303\274O\356\037=N\020\375=\271\224_=\220p\315<9\350\351\275\034\020\343<\364{\271\274\360\330\303;\337\030D;\332i\023\276\227\212\217<Y6\206\274\027\005.\275qx\205<\232\031\037=}\376\206\274(\254\t<\036\334\025\276\270Y\225\273\214<F\275-\333\233=\223WH\275\232\034\306<\263pG\275B&\016\275x\037N\275oj\252=\262\362\214;w\253\241\274\225zu=36<=*$\243<\266\007\317=\260\"\352\274Zl$>w\371\266\275\027N\327=\024r\260=:\000\025\273.\200\200=\207\236I<f\373\335\273\2273\327\275\001\226\020< F\007\275I}\336<\300u\276=\351\262\000=\372TM\275\367\240\t=\231s59\033\302\357<\330\004\341\274\021\017\214\275W\006\362\274\350\020\231\275\037\254\305\275\351s\362<\010\177\t=\252# \273\322g1\275\270\360\202<\367k\002=\351\230`\275\231\303\265\2756\2510\275a\026M;\356{\004\275\305\210\227=\r5\363<\2763\336\274a\343\223=\0147\210=\003\235\010>\014\004\347\275%`\251=\223#u\275\250o\200=iw\033\274\314]8=\n^\t\276u\310m\273\007\370\354\275~]G\276\243\332S<=y6=\307\234\272\275\026+\364<\202\276L\275\274\356\252\274\345\014\356:\332\306\232\274\335\301\273=\022d>>\340%\354\275\377\237\313=\014\000\262=s\2606>o\224$=\267z\002=\264h\367;\010\007\274\272}\3004\275\345\374\275=\270\005\313\2740\017\313<\361:\332\275N\022\261=\3403\026<\300\211L=\213K\227<\004\347\353\2710u\330<P\357\232;%W\266=\350\332c\275J\213\014<\303\220\t\275<\255\242=\257\371\262=L\353\301\273\0247\307\274\003\300\356\274\313\231\222\275\374\243>\275&\341\265\275D\260\323=\335(O\275\205`:\275u\241\211;bCJ;\206\245)<\313\350\354\274\303\352\363=\203\300\244<\263\300\314\274\336d{=\025\3057=\265\265\376\274$oU=\177\241\226\273q\223\033>\305\246\214<\242\312 \275\r\215\177=\304[\301\274\007\263\261=\2020\232=\343-\003< \237B\275\375\321I\275\302\324\026=\250o9\274\237%\254=?\017\001\275\272\207\037\275q\235\343<\315om=\326\304\366<\nI_\275\310\331&\275\356W\343<n\250#\275}\232\233=M3\n=\365\270\341\273\231\244\321<\220g{=\307\256(\274^.\030=\035>\330;\355\222\000\275\340\014\017\275\336\303\200<\021#\266=\2263\335\272\362\003@<?\243\330=I\254_=\376\274\210\275}\372\311=\3316?\273c\375E=\017;\340=\216<9\276\"\333\000\275uI!=cm\226\274\333\222\"\274T%\022<_\200\260\275\215\254\325=\301\313\322\274\3357\306\274\202\352V<\267\373\031;\341\275\325=W\352\254\274I\214}\2740xP\275\001\216q<\374\020\225=\232\234\206\275\024\360{<\017y\306<\274s\240=\245\250V\274\201\263\245\275\'4J=\332\270\0038\t\004\371\275\245\304m=j\215o=FIY\275\211pQ\275\222\270\203\275\270\331\374<VZ\274\274\r\355B=vNn=\213;\366<\000e\276\275\r\345\212<4pZ\275\025\212\001\276\306]\244\274X\225\t\275\213\252\263\275\007\010\272\275\277\367\277\275\206\344(\274\276\221E=u\311x=\205vS\275\303\335L\275\000Y\263<\276]\026<\2125\315=\230 \237\275[\007\302\275C7\030<\272\\\344\275\316\273*\274\322\327\202=a\345\242\274\'\204\260<\277\313\266\274K\033\313\273\025^\342=\210\303\271=\362\242.\275\267E\245\274\322eA<\217\017\240=\351Gq\275\200\224\376\274_\343\350\273\367W\252\2752\225\326\274\322d6\275\342\3330\275\300R\322\274!N\007=\253j\264=\375W;\273X/\022\275\262\326\226\274\2418\270<\361\006\004\275b\n\236=\275D\236\275e\211\204\275\356X7=\3544\242\275\024Q\006\275\201Uh=\314M\036=\303)\242=~\033{\275\210\234`\275\036/\200\274E\372\242\274\275pS=\277\243\374<\354\2115\275\037\002S=rd\270\274\200=\262\275\227k\200<h&\352<T|\355<>\272\245\275Mv;>2b6=`9?\275|\221\203\275\323Rt\274W\335K=\262\236\303\275-\210\205;\005\277\212=\246\177\206\274\260\222\326=\213A]<\340x\225\2742\2225=\t\t\357<\r\261\230\275D[\214=\324B8\275B\003n\274\034.\275=u\246O<kb\225\274 &\006\276\0108k\276\243L0\275\020\343\021\274\276\n\343\275\356\335\014\274\326\230\212\275\321\372\023=\354\025\214<\307\225\244<\317\335h\274$]d;\036\364\352\272\325\217@=\027\266\222\273xa\243<\260\351\222\274\253Rk\275\236\277X\275\335\351X\274\367\235\250<\300\225\241=\307`\245\273\275%\236\275I;]=u\325L<\231\200\334\275\244\277\014\276\365\223a\275\342o\027=\251a\370<\022a|\274\301j\013\276\353\237\t\275U\003\207\273\\m\205=\257F\311\274P\233`=P\206\237\274\332\321#=\3032\323\275\025\326\360<z\235\340<\236k\034=\220\2212\275\237\362\243<om\'=0\213I=n7\335\273\237\376\346<v\346\211\275>yU\275\331\033\274=\022\t\242\275?\343\213\274\266G\333=\367\206\t\275L\214\356\275\373\0145\275\004*\340\273n\227R\275\263\3529<\306eA\274\003\315.>\216\263t\275\335\027\374<\034\347\256\2737H\256=\346\327\327=z[\215\274z\025/\274i\024\245=d\036\201;\027\207p\275\314F\322\275\227\305\263=\337\321\024=\311\027\r>\253.;\275+\204\212\275^@\217\275\262\274\273\273\371\253\214=\302\037T\274me\353\273Xg\262=d\361\035:\342R\214\275\016\233\243=/\335\330\273\3045\226\275a\367\256\275\257\213/=\215\310\215\274,z\253\274\024w\222<+q\236<oM\232<\223^\226=\303\337\355<LBz=\r:\242\275kb\022=\275\307\361\274\017\353\362\275\231\r\331\275\325\024t\272\203d\202=L\272!\275M\367J\275\261\234Q=\023\340\321=\275\030\211<\265\003<\275\t\320.\274A\023\001\275%\317g=\034\\\352=\316\r\202\275\200\367\352=\267\243\256=\331FJ\275\364!\322=0i \275J\025.=\201\350\006<\376\r\010\275Y\231\333=#\335\260\275\030:#\275\304j\343\275\274,\'<K\356\t\275_@\325\274+=2\275\000/o\275\256\336T\274\204k\310<aD\334\274\231W\257;\275\213\247=v\200\254:\350r\210=\240\272Q\275\264\373\004>\232\313\251<&sB<\205f\222<\030\232\024\274\203\353\006<4\021\243\272\271-Q=8\265V=8\344\347\273\274\346D\275IF\204<[\300\346=W\330q<\257DI=A\214\307\275\254#4\275\256~\221=;\237\310=q\204\004=~\327\235\275~a\215;\210\300\246\275Z#\031<\264\377!\275\367\201\213\275;\"\365;&\000z=\311\265\311<\242J8\274N\236\026\274\311\246\033\275\220\300n\275\225\230\002=\300\'\307=\023D\251\275\324G\n>z\316D\275,?\022\274\363x\022>\224\306\312\274\263q}\275&[c\274+\035\226=\337\350\013>\267Jz\274$\035\230=\247\242\215<\3771)\275\331\340\216\274\307\260\227=\336X\341\275\363\002\267=\260\261\017=j\311\022>\244\rg\275caG\275C\202W=\242`H=\205\362\274\273\3250\r=\035\226\202=S\210\220\273_\254F<\234\"\330<\246(\207\274\271\340\255\274\251\352\331;^h->\210*e\274c\371\251=\376d\243=\335hB;\270\233\211=`\235\216<\035\372\205\274\3443K=X0\300=\272\016\240\275\271\311\274<\252[\031\275\020\026\325\274\313s\357<\257y\035\275\325\241\202\275\r\203\214=\301\017\221\275\200*S\275\376FS\275uv\315\273\327\252&\275&\032>\276\034\260[=\311\207\305\275\211f}\274.o?\275p\341\262\275x>%\275\261n\227\274\211\333,\275\267k\343<t\247\007>\310\336&\275\273\014\317\273\221\201\022=\240\256)=\215Y\267=VF\370\274I:\346<\310w\254=\267\030Q=b\2649\2747w\320\275E\235\215=P-\251\274\020\007\240;\250\017}={\035\325=\236\325S=\243\200\221\275\347\374\323\2740m\232\2748\363R=\002UQ=%Y\306=8\027\304\274\002\316\217=\366o\352<\244~\013\275\r:\177\274\rR\024\275;5\335<(\304\373;\302{\007=\257\2737\275\330\264\323\274\333\250\357\274@\'\340<\347EF\275\220\250\263\275\335\373*\272\357\030\314\274;\271\352\274\332\034C\274yY\025\275\212@\241=#U\301<0JU\274|\014O\275\277\2706\275\242\177\'\275\n\200\203\274\321fW=\030u\026;\351\371X=\275\335\201\275\352\250\2279\303\014^;T\335\005=\025\313\213\274\206\"@=\270\263Q\275\250\266\377\274\340\314t<\250\360\345<\321:\035\274\026\364\313\275\272\213\316\273\200\3526\275y:\360<\302\334B;\250\035\341\275\263\245\275=<\355\372:{\271\022\275\005f\300=\230\320\n\275\033\3465=G\364\216=\367\267K\275kH*=?\3140<v\253\264=\003\206\345<\314aR=&\361B\275\200\022\211<\245j\212<\316}\036\2747\036\003=C5\023=.!\332\274\317%\210;b}\257\275Q\263\352\2744\232\010=6]2=\254 k\274\326\335\240=\272\270}=+\202\246=\356\2655\275\037\332\265\275<\302u\275\222\334\362;)\013\221<\230\371u=\273\322\354<\272#\272\273\'\205\036\275_I\022=\353\376\035;\336\276\241=f\366}\275Y\206\261=\3530\264\274\030h\027\275\020?\237\274\007\236\002<6\370#>(\355\364<9\313\352<0V{\275\371\267\314<s\2419=o\007\t\274E;-=\223\277q\274\3111\255=Z\230,<\024_0=\004\264\255\2752\004#\275Y\237\t>N\026\253\274\325\362\247\274yv\242\275\234\217\003\275\275B\005\276\352\232\336\275g\030\032>\231^\301=s(,\275\310E\002\275;\204\204\274\357\260\n\276\355\325\206\275\202\260T\274\251\304\371<\037\205\277<\344\t\225\275<\336\314=\316\344\016\276\261\020\234<\237\362~=\224\360\030;\341\355\373\273\325\304\275<\023\211\030=\257\234\200=Z\307\204=VG%\275\300\214*=\325p\016=\311\3048>MW\014>A\026\270<\275\005\262<\216\371\034<u\270a=;L\204=&\302@=4\314\227\275B\363\243\275\225Vo\275\243\235\332\274\2502\306\273\344:S\275\265u\307=6\334E\275\371:m\275a\266\317=!\322.\2769\243\274\275\254\265\306<\331o\273\273>p\216=s\362\221\274\006\330\327\275\226t:=\242\212S\275{\341\027\273\'Rf=\327\256\"=\220j\350\274`\304\000\275\002N\336;\333\235{\274\222\323\210=\340]\255\275\"\024\n\275;\225\241=\030\340\013>r\037\035\275!\361\227\275BQ\006=S\346\030>\027\367]\275\250-}<\004\000\370\273\312\375\264<\202\247L<\363\310.=d\245\315<5\2058=\255\027\230<\007\177\236=\243\275\310=\217\032@=\357\243;=\000\034\305<\212\214p<\026\323`=\305\022\227=\351\204O\275\341\252\272<C\344\237\275\346ot=$Q\225=\315\260+\276\323\264\353\273kGD=\315p\027<\262S\234<\242\025\022\276\024`\304=\234{\025<\264\3557=,\203\300\272)Tz=k\370\211\275p.\353\275Z\262\332\275|\3017\275\274\000l\274\232\313\256\275l\224&\275d\337`=\032l\330< l]=f,/\275\270\317v=\021s\256={\342\242\275A2q\275\250\337J<m\350\373<%\217\210\275\023\303N\276!\006\311\274\255\367\014<\241\315\342\275\373\247`\275\302\217\260<O\231;=9\177v\275.\371\203\274\256A$\274&\004\263<\311\304\222\275@\032\007>\312\236\212=\021\322\017=\261\246\307\274\2523\237\275\253!\007\274\221?\216\2746\244\201\275\tcE=\252\2758\276\370v\006=\331\347!<\033|\211\275sU\334\274\240+M\275x\010\260;n#\017=\250\t:<\232\205v\275^]\004\274t\206\356\274oH\003\276\362\037\021>\320\376>\275\343\316\275=\334\234\020\276\273\220\247=\037M\272\272\220l\307\274\024,\246;\202R\020=\3706\355\274\010p\032\275\314\305\224\275\240\352x\275=A \274_\241\304\275kWj=\312q\014\274\361\335\261=\346\306\334=\255)\225=\004Hr\275;\'b<\347\355\261\274\226\210\277\275\243\305\267<B\377\242\274 \n\246=\203-.\2759c\276=!\005\010=\223\021}\274\337\335\025>T<\327\273\211&\345<*\r\375;\334\004\367\274U\322\024=%m\253=\334\362\235=/\220o=\rOX=\023@}\275\036\362\215=]\224\217\275F\356\000=n\374\342<M\215>\274\220|\233\275\035J2=\036x\274\275\234\222\231\274\227\233\373\274\203\030\326<R\314\207\275\255\nz9\227\025\033>6\223b\274dZ\367\273MZ\207\275<5\236=\303\370\377\274_/\263;\214\253\"=\0329\306=6U\036<\360\224\354\274\277A\003=\021\354\035>\210fK\2752x\014=F\253\241\274G\264\022\275\303VN=\030\357]\274\035Q\215\2732\205 <\002\204U<\237\2523\275w_\306\274\271\214^=Cc\353<x\235\241\275\252\303K>\212\375o\275\310\347\254=\\g)\273h\317E\276\0245\226\274\266\232\233<\025\253\013=\331V\352=\377\000\207\275\204b\313:\263\306\222\275\204\221\334\275\202\336B=\332\207&\275\231QK=\332L\367<]\251\260=\027\236\251\275\345?\316;\016\310B\275\tK\212\274\215_G\275\030\277\013\2757X\210<KA\336<8\267\213\275\025\323\353;\224\3264=\261\031h=\n\317\363<\213\034\352\274\205\330\273\274\nG\013\275\365\n\007\276)QR=\304(\023=\306+\261=\361\206>\274V\270\010\276Q\276\332:)\000\301\275\t\024\026\275\244\020U==\301\022>\n\ne\275\2566\022<\004k\032<\033\t?;\035\275&\275\335\245\007;(\262R\275\327K<;F \002>\216\207\360<\264l\213\275\302\260\206=\305j=\273-b;\275\n\210_\275\'\222];\014p\001\276\263\310\210\275h0\222\273\262\2617=M)J\275\037\322\021\275\262|\227\275\207\\o<\3007\000\274\314\343\022=]\010\024=si\024\275\262R\310\274LA\371\274\323Lr=\003\352\216\275\267R\017=\217\372.\274Zt\335=\315\336\215\275\364\025\330=N1\230\275\013\227|=\014\375\263\275fL*=\371 \361=K!!\275\340\3053<d\321\027=\340\177$=\002\271<=\345e\207<\375+\366\275\363\365\256\274\373T\322=e!]\275B\224\205=N\214\202\275\356\263R<\360I(\274\322\356m\2753\236,<i\031\014\275b\317Q<?G\243\2759\302\245=R\014\303=\325>\377<\013$\214;\262c\343=B\253\207\274|*3={\264\204=\370\3045\275\336\320[=\342\354\312\275\224+\313;\025t\004=,oa=\374\366\031=\322=\261\2753\312\033\275u>?=9\326\240=\314\250\216\275=\326\363<\332\254\355<\237Sn=\2233\302\275L\034\251=\036n\001=Q\216\243=\014\313\313\274v \203;\330\310C=\260\342\226\274\227\312\354\274\204J\360<\030N4<\254\365\256;\2050*=\217\231\016\275\360t\356=w/s=Lv\026\276\200[\306<2\352s;\326y\357:kH\032\276\037\360\007<\256B\007\275\327\241\'<\362\253\222=\230/\314<\211_G\275\206!\256=\367he< \005?\274a\263\203\275\265\022?=\225\334\324<\216\275b<7\017 \274\244G=\275]\'\354\272)\277[==DO\275D\342\262\2754a\001=?n\213=\326\254\013\274\227\3016\275L\026\255;r\373w<\227v<\275/RR=\336Y\370\274$U\247=\367u\245\275\232\204\222=\206k\267=L\335\005=\3464-\275\022\223u\273`E\020\275\263H\312\275\342\227\017=\3127\300\274e\025\302\272\207\030\314<+\234n={u\224\275\370\230{=\367\253\350<n\3227=\030\007C\276\363\216\336=\227fD\2757\032\037=;\212\265\274\343Ad<B\006x\275\014\032U\274\020VV<\320\324&=B`|\274|\303P=6\233\204=\303\202\363\274f\240\214</\332\215=\271DG<f\260\"\275\201\236\263\274OT\264\275eCM=\242\310>\275\212\000n<f9\214\275\224\'\326=\r\177\345=U8U;\234\204\243=\374(\330\273B\336\177=\223\252\033\275O#\223\275\251\340\376\274\2063\201\275\214~\266\273=e\273\275d\t\271=7Z\370:\r\277\272\275\335\010\334\274Yr\262=,\251\372<\306I\363<\222T\006\276m\250G\273\263xR\275x,@\275\032\204I\275\225\256\001>\260>\017\275 \\?=`_\036\274C\207\204\275\222\254\211<\204l:\275\270P\326\275\261\350W<\372\315,=2\361\246\275\323\321\"\275\277\235\354<g\207\212\275\224#\350\275\2013\311;\273\364v<6kA\275m\362\265=(%\276\2741;w=+\241?=\355~\212<\255\210\363\274<\261\250<\r\270\303\272\330\302\"\276\343\361\200=r\277I\275\374x\251<\3269\177<\304\262\353<M4F;i=\322=\211\355\331<\260:\253\275\337\253\312=j)\333\274/\337\353=\307\246\020\275\251\333\347\275\254\243\307<\243\243\273\274\315N\263\275\"\221c\275\036\364\222\274\351~\002\276C\030<\274\237\337\272=\231;0\275;\325\320=\324M\253=+\213\222\274\030\225z\275\210{,\275\354m/=\205\300f\275\227\233i=\315\321Y\275\256*\357\274\003\035\003\276\270+\003>\312v\227\275\304\352\241<g@\246\275\363,\321\275\n\360\265;Mul\275\334\376[\274\222\316\206\275\375V\275=\177\263\300<e\000\243;\341\023\246\274ir\2619\227\254]=\241\223\323;\016\271h\2754a\240=\234\032\213\275\245\226\270\275\\p\305=^\243g\274\353\217\326\274\020\211\352;qE\'=\311\262\224\274\230\356\332=\341t\204\275\236XN=\357B\276\274\221\245\263\274\253\334v\275H\375X\275\317\262\364\273,\207\373\274v\220\366<_\310\245=\211\001\036\274\233~\230\275\311\3317\275\316B\004=W\220\252\274\346|5\275\255R\346<(M\002=?\344+\276V\367\007\275\271\344\364<}8\356\275=\242+;\347s\331\2741\315\342<\017\230\205\274\212\270P<\312\306\312=\"(\272\273aH\334<\005\350\305\272\303E\246\275\340\356\370=\373\301\205=\342\321y=PG\275=\270&d\274]\224\r\275\314\345t\275\234\n\341\275\343\232\225\275\3352i\275\016\274\341\274\377*\027\272\323{\357\271I\246W\274\220\021\306\275\034\000[;\313\232\204=f\355\261\275\361\236(\276\206\253\231\275\222\020\247\273M\324\241=-\336\220\273\303\266g\275#\376\013<:\035\n\276\024\307\000\275mD\003\275\276\334\262=)\224\211\274\241\302\001\274\302\036\272\274\371\017\202\273\tA%\275b\372\360\275\032\016\336\274\331\324\014\274i{\246\275\353f9\275\236\250F=|]\256\273\\l\373<z\021\340\275\375\370\204=kS\304=m\202:\275Y>%\274/\244\371\273\347\372t\274\352V\021\275\364\005&\276\353\205\211\274FD>=\373.,<\212\302\241\275\221\330\t=C+\245\275\307\262W=A\214\014<\245\000S=\t\233\260=\357a<\274\247:9<\245\364\224=\366\021\220\275\026V\004<j\260x\275\277\036\235<AJ\361\275\244i\344\273\004\373`\273\006\353d=\270\013}=s\353C\275\020\031\275\275\300\215\273=\034\217\000\275\276\335\200<7\371\201\274\303\324O\274{SL\275\242\272[\275\332\032\312=\371\317\017\274z\306%\275\215\260\010\274\027\020\241\275\215\037\032=\216\254\243\274B!\240<^\355:=m\202a\273\307\241~\273\365/\030\275\365\007\007=9*\256=\335\347\264=;\226p\275V\257G<R\275\000<\301\232\\\274*+\357\274BU\320\274n\324\227=%3{\273\372[\177=r\001\371\275Z9\376<\3422\271\275\216\373\245\274\007\244^\275\204h\244\275\301L\304\274s\027\331\275*\200\273\274\363\365\352=\343\333\303;a\216\301\274\250\347\206\275\253g2=\3650h\275\314T\227\273\342\364\233\275\032\325\225\274d\211\004\275\3767\001<m\021\251\2755\253\202\274$\364\201<\235\235\256<\327\353\273<\216I\270\275\007\326\202\275\220bt\275\321\301\254\275T\212a<qt\261\273\206\222\013\275W\247\334<\356g\361\275\004\312\324\273\267)\250=/\332D;\356\037\222=\254\214\001\275\240\304\313\273\202\231\362<\272y\373=^\371B=\245\3756\275\210\307\305<\335\210C\274|\354\344\275\t4l=\246\014!\275+\335\373\272a\301/=J7i<+\313z=cI\024=tAY\274\363p\363\273\257\']\273\016\362Q\274%\326\252\275\237\n0\274\347\031\220\273\270\232\243=,L\273\274\\\321C>\231\326\237\273}a\370<\332p\207<\215\200\025=B\205c=\3707\277\275\007\373\204\275%\332\021>*\354\373\274\364\344K=#x\333<\r9\215\275!R\221<\362\266\273\272\337\306\301=\267\347\225\275\370r\204;?v\204:\311^\036\2759\035\255=f<\177<6\357\025=\346\'\316=s\300,>\231*a\275\237{F\275\344j\250<\'\"\313\275V]C\274\305M\204\275\367\327J\275\0301\336<\307\361\266=\347\240\206:\333\023\215\274\217d\021\276\272?\006\275\307c%\275\351S\346=\224\002\231\275\222\372L=\205\265\335\274\223\327\273=n}%\275\021\031\200\274}e\266=\027\021\261=\033_K\274\225\023\016>OF\234\275\316\206{\275\312,8\275\177\"\250=\273\311\321\274\"\017\307\275\004\024\347\274\261S\330\274]\336\001>\200\302\256\272\260\243\310\275R\375;=\222\333\212\273.\346\303\275\367\231\273<u\244\207\275\216z\264\274Nk\254=\266!\233=}\222)\275\244\221\223<\023-\336=%\347\013\275\362N\225=\267\215!\276\205m\201\275\364\3571=1\350\241\274ET\215\274\302(\336<\021h\366\273\006\212\224<\205\270\020=dO\006=\257\223\300\275;\361\336=+\320\252;K$\213=\215y\260\273\262\307\254\273\0104\344\274\350\322\016\276.]\227\275\001\020\222\275$l\256=\263@\000\275\304\r\260\275\214\206\204=t\350\306\275\243\200\347\274\257i\306:\010\345\t=\265\256\200\2752\276-\275\340\255\361=(\257\037\275\232\273]=\001\270\360<F\0316\275\366u\240\274*\214\371<\265\364\021\276\207\277\013=\226\342\007=L\304\237\274!;}=\255\207\317\275Mh\017=\205z\225\274**\230\2751\"]\275\203\027\213\275~\214_=\360\202\336\274\371f\000:#\022\201\275\275\306\215<h\242\030\2754`\321\275W\253==\351i\013=\354>\233\275D\274\374<\217\244B=\004\367/:\345U\347\275+\260\255\274\'\372^\275\302\264\004\275\3047\235<\372\203^\275x$\245\274$\332\201\275s\323=>E+\317\273\226\355A=fz\026=\335H1\275\320}\313<\256-\031\276\215\014\307\274 \365\026=\265\210\376\275;\004\205\275^$i\275\003\021\200\275\324\316\275=\026\"A=\337\301\321<\363v\252\274[\313\355\274\014\250\022<\371\347#<\3059h<o\306d=\313\006\332\275\030\'}\275\311\017\376=\"\240\320=\214]\205=Q/\033\275\224nK\275p\030\352\274:\t\241\272\\\362F=k\326Z=a\'\235=\347\332\327\274\030s\271<\361\314\331\275P\n\363\275;m\271=~~\273\274\305\306\037>\375L\267=K\201L\274H\346\222<5\017\240\275\246\350Y<\336g\336\275\356\023\246\275\303/\256=\361D\226<\243\257\244\275\302\240\332;D\203\242\274Q\325\003\274\312G\006\274Q]X\274\361\363\265\274\214u\311<\375\332w\275\273\354\036\275\320\267\222=\265f\243\275\024\016\207\275\271!\254;\215\236T=\377\217\230\274]\225\206\2758\334\202\275\271rN\275\351\370\000\275\207\221\262=\356bm\274\246\204H<;\260\002\275\230w\270<\324&\002<\021\324l\275\210>\371\273\356\014\272<\376\313R=\231`\203\275\017\227:=\376\317\365=\3143\266\275\005\211\316\274\'\272\216\275\314\207\215\274}\014\032<er\005;\351!\037=\005\260\204\275\013p\267\275\023\243?=A*\324\274\010\271\231\275\222\031\245\275\203\252`\275+.|\274\241\337l=\333\302\033\275{5\351=\016.\344=\372Md<\004%\377=\372[I=\006\r\230\274`\310\234\275 \245\027\275}A7=\271\016\202\275\245\030\322\274\272\304\244<67\337=\375J\026\275d\177\253=H\360\022><\212\215=\322M*\275\351[\343\274Y\211\310\275\224\035\212=\245\306\203=,\223\000<Vp\263\275\207m\347<^u4;\305\344\226\275\213\320\345=&% =\235\024?;l\256\025<W\337?\275\253A[=%Q\244\274\235\334\022=\240]s=\373c\003\275\002p\224\274\363\n\000;r\275\006\275\217x\035>\362\243\005=\001A\200\275J\030\203=\277\342{\275\321\302\004\274(\372\327\275\211\236Q;\006j\360<A\350\026\275\000~\215\275\027\3127\275\325\033\236=\035\264\"=\236D\206\275x\032\023\2750\034E=&m\033=\306\327a\275\271\007\017>\320\251\251=\366\030\334<\212\3510\274\201\177\342<N\273\302;\017\326\227\275\003\342\305\274#+\206=yD!<@\345C=\227\205\036=|\236I<\322T\336;\277T\263=\355$\233=i%\014>a\026,=@\357\246\274\251\211-=_\275\026<dx\311\275\225\215\245\275\r#3=\005\221\242\275S\025\347:\347[\313=\320\264k\275\300\304\237=\344\240L\273\233\332\301<\345\350\034;\313{\016\276\247J\210\274\372\036t\275\031i\303=U\251\270=E\300<\274\263\215\276<\000=\234\274\366\031\260\274\305\006\270\275=X\335\274Y\020Y\273\307\202:=(\212\245\271\3202\200=aAx=/5\200=\245\224X=\366\2054==\211i\274Or\225\275\244\300\204\275c\247\360\273\231\350\336\275\306\211\220\274%L\235<\303\t\314<\251\177R=\330\313\220<\0236\252<\035\230:=CQ\177\275\364+\352\275\363M\036=8\216\006>j\360\251\275*\275k=0\211\201\273\020{\016>#\232D=\243\243\215\275\272\266\303<\2233\313:=\261\317\274.7\'=\000\007\217=\330\274\264=$\332\356\274,\347\234;\274S\030\276\257\345\246\275+f-\275\255\272^\274ZQ\215=\226\245\030\275A\332\002=f+\007\275.\210\223=\243\034\033=\026\337k\275\030\374\005>D\356\353<=\220\352<\177$\256\275\320\313\254=\360\020R\273\020\177-<\241\235\032>\214\023\214\274\324\237z;\260\024S=\207\365}\275.\241\037<R\272\351\274t\357\221\275B/u=3:\256\274\244\255\262=\216\271\264\275\242\214\276<\315\257\275=^\"\003\274\302\357D\275\244;\221<\307.\346\272\364u\277\275\014?)=\000v\266=\321\025\274=4KH\275\017\357\240\275\332\303\342:\207LJ\2750\037\236;\255\343\241\275([\261\275\207\327\022=E\202V<\360\226\273\272d<\206\274_\351\304\274pB\202=\242zm;|C}\275\002\346\260=@e\352\274\307[\233\275N\336\323;wL\035=\361h#=\322\000+\2754\310\336<w\300~\275\273\256F\274\014\320z=O`\223\275Y\200\273=d\2003<\243\231\254\275]E\354\274)t\253<\032\321{<]R\234\275\263V\240;\276(O\275\363C!\276\034\366\316\275\'\361i\275\333r\251<\265\375\023\275\233\351\337\274\022\260\363<\337\266`<s\310\310\275g5\224<\245\367\303\275\0269\223\274<\224\275\275\332\000P\274\017\377\273=\3548\376:;\226\312\275\004+\027<I\024\273=\231a\017\276\031R\360\274j\304\260<\304\006\027\275\3216\226\2742\243 =4\177K=T\032\n\276T\202\t\275\271\r\345\274\322=\203<\021\013\221=\224|\377\272G\322R=\314\363L\273\202\266\037=\005~[\275\343E\274=\264\211\320\275\311\357\306=\323\261\034>\305\010\270=\001\230\324=E\317\027\275y%u\275o\363\305=x\333\365<\215\247W=\026B\222=^\346[<\177\023n\275FN\024=\"b\2307\304c\200\275]\002\"=\017\002\203\275\306G\236<\'\252[\271,\2253\275\300\245\202=\031Sz<!<\257\275>n\202=y\3769=3\207\311;\231[\022\275\330\237m\274 \232\266;\331\023\005=\022sD=\032D\266<\365\307\007\274\223\233\375\274}:\326\275\346\036r=\376\372\207=Q\365\260\274F\033\215= J&=\215\013M=1 \301<\024\215\227\272\225\212i<3\".=0\027a<\376y\377\274%x\316\274\035\250\241=aO|\274-i8\274\233h\244\274I\240H\275^5h=P\010\264\275$\366r=\243\235\323<\3012\355\275\204Z,\276,|\315;\271\301\220\273\022,T<\350><=St\003\275\023\340\007=\351\3434\273\250|\247=\002e\263;\205X\t=$\216e\275Z\260J=\356\216\"=\367A\307=\263\002\241<}h\000=\371\2478=\205\274q\274\"\271\377\274\r\300\206\2754\352\014=QZ\026=PS7\275\375\263?\275\314\327R=\030\340\275\275\361\266\363;\340\216T\273\362\245\307=*;\362\275f\206\361\271\rO\241=>\217\r\276F3\325<!\313\256\275-\005\304;\265\246s=)\000\275=m<\035\275\003(\370=\0061\260=\342C\276<&+\223\275\200\352\301\275\220[\273\275T\026m=\360\355&=\304(\365\275\364\361\354=E\'\003\275:q\017=\0051\213<\254\365\374\274\271J\360\275\217&\324<\201o\242<;\207\244\275\362\254\256<\324\305\314=n\263\327\274X\266C<@\3776\275\227\2544=\200\n\212=\341,;\275h\275\221<\353\255\207\275\242\025I\275\205\023\017\275\340\200 \276\316R\323\275:\244\374;8O\023>i8\027=\223I\210=M\351*;,\271\210\275\336<\223\275\237\226\r\275\215G\201=QqM\275\014$E\275\035\310\017\276\317\215n\275\211l\257<&w\246=3:\261\275v\n-=L\364\204\275\004\371\253\275j(7<\220[!=\257S!<\313r\014>*\365\221<\024\212[<6\277\314\275\317\263[\274\217\254\375:^q\204\275\223X^\272\213\3364=\3354K\275\3205\321<\262hv\275z\311\034\273\304d\203\275\004\217\375\275e\020\014>*\004\271=1\245n\275\330S\245=\222\3707\275\262{r\274\342\023.\275\310\360\020\274\202\353@\275|$5=\013mL\275\000\273\226=nI\006\275\207C\335\273\370X\223\275_\\\022=\177\002\257<%.\261=\333\310a;:C\273:\t\224\003<d?\266\275\350\330\266;\270\001\201\275e\267\300\2758~l\275\276\270\260\275)8\001\274X^\374\274utT=B^J\275.\236\227\275~\272\275\275\230\014D\275\342\223~\275>\020*>\003\004 \2753\016V\275$\035$<l\255f\274\035\220C\275\346)\360\274\243M\323<+7\204\275+\310\200<\252\300F\275}Y*<;\006\177\275\220D\004=,\232\247\273\371_\340\275[@\252;\220\317\200\275\003FD=\201\342~\275@\007I;6\263\362\275e/\014=\376\300\267<A&A=^Q\320\274/\377\220\274_\032\323\275!\0315\275\322c\263\275:\nw=H\257\332\275\300\232\\=\263\202i\275!\366\275=\353\257\310\275\253\234#\275\277\240\210\275\357\211:=Q#\230=qW\277\274\362\354\242=\245\277\232<\217s\027=\374p\326<\016\360\337<\200\332\030=|p\322\274~\241\324=\206@\314<\022\343\201\275\033\207\346\275\325Y\232=\000\324\351<\254\360\013\275\245\326e\275\321\316W=\032\243\243\274j\213\205\275]\2167<Z\313\336\274]\n\204<\323\035\200=1\223\267\273\230\371\004>1V\357=\264\274a=\213z\244<\264E\271=\352\254&\275\374\021\355=g\025\314=\342\275\037\275!\230\203\274t\027\267=\304\260\211=\317\2171\275\005\330\327\274\260\246\026=\212N\216\274K\2216=e2\037=\324\2578\2757\322<=\203\030\251\275\205T)=\354\363\036\275\267\211\010=\207X\242\274T\032\250=\217\327\201\274,\251#\275\254(\223\274\t\366\331\274\336\035+\273\332p!;\237\317\342=h[a\275\316<\312<\037\332\224\275\224\t\251<\250\005\022\275Gvw;\332~\266=\317\242\315<j<5\275[P\301=_\3647\275\223$\265<*\255\206\275c\263\302<_\260\030=t\211\035\275l\334\007=\n}y=,m@=\222\234\267\275b\200\337=\204\000\t>\024\310\274=\206\232\212\274\315\324Q\275\275%\022>A+\023\274nB\226=\352\375]\275\036\253\320;\261\260\210<\314\222\321<\245_\226\275r>\023\276\314\377\315=\271\222\032\276=q\032>\331\226N\274\255\277\033>k\353\030\274\345\003~\275\241\3414\275\026\331\033\275\014\255\360=)\334\025\275\226b0=K\\#=\266\213\275\275\001\225\320\275\201b\214\272v\325\265<\231c\204\274\342\'\001=\315\026y=\2320\013><\313!\275\304\020\224<q\342l;\342\314\215<\211\036\330=\027\277\254\275a\203\232<\343\375\243\275b\014^=\354\332\352\274\237\032\335\274\013\320m\275\302\201\025\275\220I\213<\224\210\336<\357\345\031\276\246l\013=\332\177\344\273\255X\030\276^\271\253\274Ct\003\275\315uI\275\371!s\275\241\217\031=\023\207\010<d\254\233\275\232\374<\275\206,6\275\201~\241\274\326:\307<\332\326\332\274\207fs\275\267\324+\275\236j\036=\201O\273\272\371\235\320\274\340.\201<\275\227\234=\2117\225\273\234\237\304<\3652\2258\326n\214\273\322E\325=\235%\357<e\315\t>\323tN\275\203\247\232=\016z<\275\374\220\216=\003\223\335=\241;\202=)\357\371=PF\256<v\316\331\274Z\342\220;\363\373R\273\27775\275-<p<\201\000\267\2746\"w=\306\237\255<\233\373d;\035\205\253=\304j \275\262\233\230<\224\367\203\275s\035\242\274$E\021=\334\343\214=g^+\274\236\375\235=\341\210\217\274\206|\231<\357\325\222\274J\225\226= \223\037\274\352\201\224<\3305\264<\034\003\030\275\353\250z=A\033\316\273\026\222\014\274y\340\'=\013\345\r=Na\246<M\221\025\274\216\334 \275\\:\326\274\206\035\370=B\212T\275#a\202<\377\326\241<\037\247+=)\326\235\275\362=\024\275\270`\022\275\325\306v\275:\240\267<\022\361\210\275\037\325\230=\320\217\021=\310\020\345\273\321:\\=\t6\273<\307Bu\274\253}:<\337\374\323\274\014uc\275\237\305\324\274~\361\252<4K\275=\342\';\275w\215\222\275SH\261\275m\321\243\275+Z\211\275\265D\307\274\244\357\006>qYA\273m\031\327=m8\370=\032\242\243<\nG3\274\366\200L\275\177\316 \275\330L<\275\033|\265;\357\201\360\273\007\373_=\307}\364<0\211\007\275\225\013\006\275\230\'q\274Y5D\275\223\257\310=\213<\221=\200\004\276\275l\362i=\0319A=\2445\201=L\272\037\275\032h\277=\'\325+=fkz\275\351\330{\275\346`\247\274E\205\321\273\227\2564\275c\364\266\275U\377\347=\007<\227\275\335\227\016>,\323\006\275)\364\000>\270Y\236\273\301\021\027=\244N\275\275\005G#=o\321\214\275\226\347\235=\2213^\274\321#%\275\324\001\r\275\276\351\232\275i[D=J\254\225\2755\346L\275\256\036\307=\216\027\372\274Ps\010\274\274&\346\274d\374\220<\256\251y\275\022\376\231=\203\206C=x\247\226\274\327\323~=\351\335\372\272\343\210\324\274\254z\315<\302\321\270\275\320\217\"\275\232\366\246\275\275\326\226\275J\277[=\233\246Q\275\264C1=\324;\315=u\340\001\276\312\010w\275\331# \276\361c\211\275\257\242\255<\265w\341<\tS\001=\335u \273K\227\310\274V\264\331\274\226!\272\274\252\347\374\275\346\357?<L\371\231<P\364\364\274\212\244:\274\263\" \275\261\213\235=\376a\300\273\2177\t<g\263-=\374\030\013<\361\227\300;>\204\362<\332\003]\274.-\237= n\201\274n\251\337\273\254o\264=\360/\347\274\3675\271\275\027\300\264<\377\272V=\360n\026\275\325\232\350=_\360\346=G\260\345\274 \357`\275\020\206\\<\033\214\301\275{%\345<\312\000\366=\230hi\275\241\300,\275\342\373\254\275\321\334\274=s\241s\272\331\263\020>z\nL=\370\211\030\275\254&\007=\376\033L;\tq\300=\243~\336\275\005<\235=^\344\366<6\017Z\275\332\307D=\252G\363\274\273[\335\275\303\271\013\276\002\251\274\275h\220<=G\267*\274\274\365\025\275\312d\n>\367\3709\275\017\021\343=\343f\316<\360\314\332\274\327D\255\274<\237D=\356kA\275\244\266\001\276\203xn\274\332\253\332\274\377\342\220=G{)\274\331`\273\274\356o\357:&\210\207\274U\267\n\275\275\267(\274\321F!>\304\267$;\347\033\300<\023Z\327\275\246-\025=\363\256I\275\002\306\302\274v\360\277\275\216\237\000\273\351\373\205\2755\ra=\341B\377\274\216b\252\275\371\377\237=\000\310w\275\032\226o\274[\322\006\275\273\362\215<\017&\202\273G\351\236\275\273\275\r>t\220<\275\006\366\250:-G&=\"\004\007\276\014\210P=t(\266\275~\307\323=\376\010\314\272$\270\033=\207,\033\274\016\3250=h\370\241<~#y=c\323h\275Q5==\324\245\344=\276\307\321\275\311\234\261\274\010\366\344<|W\322\275X#\320=\354\262\331=H0\367\274\223V\313\274\300\217\365=.\3669=\357\357\373\274\360\225w=\266\216\220\275\361\031\240= \332x=\035\355|\275\304\261\203\275\227\313T=E\341J\275+\256\224=\255\267\277\273\262H&=\222\341\370<\350\275\206\275\314\223\331<\364GK<\313\307\220\274\021\032\307\275>\265$\275\330v==;\210k=\232\325w\275:\263\212\275E\002\255;\262\260\213\275\\\257\177<L\2544\275\325r\002\274\260S\333\274#\204\352<S\240\021>\030\264\005>\345\202Z=\211(\223<=VA<-\001\353;I~\225=V\364g=*\0262=4\025\304<\\\364Z\275\210q{\274\376n\037>E\220\265=\266\202C\273\374\267\346\274\372\037)\275\006\361\021\2743\013\236\273\310\262-<\242\203\201=\033\375\254\275\034\004&\275K8\374\274H\207\341=\200mW\274;\353E\275:\232\344=\026\203\274<\277e`\275M(\330\274\007\036\212=\267r\375\274p\244\266=T\302\343<\035\373\001\276\r!\235\274\371\254\367:\223w:=\032DH\273\r\3654\275\265\232\260\275\003\325\'>\374\266\230<\372\207\233<\002h\256\275\230H\003=\020\001c=b}*\2753\275\374=b\217U\275T\200O<.!\232\275\0056I\275\367Wk\273\000&\340\275\276\033j<?\214\024\274\231\352\233=\267L\207=E\366E<\r\276\342\274\336\034\370:\246\2736\275\321\267k\275\364\256\212\275\333g\223=\002\'\231=ms\226=\352\2779\275\304\205\236\272\354\355\216\275 \346\024\276\3103K\275\262|k\2757\346\225\273\033\3204=\353\324\214\274\232\014d\275\366\001\257<\203\276/<2\304\t>\352\030\357<-\366\316<\013>\233<\032r[\275m\001\341<\211M\354\273\232\013\032<\315F\221<8\256\251:P\3604=\223b\243=\346-\361\275W\376\366:\354$\362=Y\0279\275a\254\207=d\316\004=\001\254\232=!eX=\003\000\010>\002\212\352=z\251\370\274\347\260\363;\033\212\322\275S\204:<\006^\261=8\023L=lC\240\275|s\227\275tZ\244;\333\211\326\274a\314\202\273\304\206\204\272\216\351h\275R\217/\275\300h\363= \265\370\274-\376\240<Az\275\275\371\005&\276\333\334\376<\377N+=3\320\005=\263\256\037=\20459=\256\240\356\275\271\276\024\275\374\206\277\274\017aX\275\001\227\230;\256nE\275\312\332R\274\3343\020=>\217\277\275\340\022\344=\3637h\275\255%\005=\032\347\002\274\n\220\037\275\016\013\375\274]YB=\306{\217\273`g\025=d \354\274\276(\352<\322\005\013>g9\024\276Gng\275+Mp=\014$\372\275Z\242$<>\305\000<\303\352\252;\336\307\275=@s\302\275\362\016\265<\320\220\026\275\303\230\246=\313~\243<\205\334\302\274\013\255\340<\001(\016=*kQ:\227\306\336=iZ\315=\336\377\301\275\316+\303=\336\220\024\271\223\305)=\025B\034>\335\360\202\275\377\022\013=r^\273=\375\3665=\333\210\026\274\322~\371<\206\255\265\275\311\312l=\357\261\242\275\275\023\363<h\224\227=w\032n\275\330\n5<\272\347w=\215\016N\275\357\365\005;eJD\275\034\340\203\274\024#\236\274\220\365\354=\325\304\320<\265G\335\273\327eU=\273\330\006\275\245\326\372\272\325](\275\210\240Q=\346^\251=8?\020=BV\266<C\265\252\274_\036\323\274\217\215\325\275\022\016\347\274\237\350\301\274\276W\302=\303\346\263=\354\313R=\204\274\310<\254&5\275\246\002\321;\370\177\312=tg\221\275\236\252\244\275\243l\013={\325\307<\"o\214\275~K\317;\367O\020>3q\233<\334\221\251\273\246\017=\275m\207\225\274m\342\r<\232\216\340<\354\303\364;\205V\334\275V\246\264\275p\310\n\274\343+J\275\215N\304=OB\306<\035N\212\274\347\314\340;\242\256\\\275\360\r\324\275o\252->n\215\275<\3557i=\022\037\370\273\251\224\217\275\342\n\244=\027\211\273=\274\231\364\275\215`\033=[\322\360;pj\026\274AU\266=\207\010\314\273\217\252\360\275:\346\220\274\237\335O\272\036J\"\275\317\3348=\354\335\326<.%\207=\344N\243<\003q\247<\002\247\217\275\313d\220<\367+\020>\361\324\207\275#\251d=N\267\310\275>|A\275\340Y\014\275+\376\025\275sM\265\273R\362\002;\330:d=\322\\\n=u\2756=\222\265R\274\010*\376=7K\211=ed\221;\256\303\202\274\376\234p=\212\017\330\273\2210\265\273\037\231P\275\302<n\275\224\177n;c\352\320\273\003P\030\275t<\331<\347\000\177\274\026\204\020\2755\266\211=\232\352\210\275\340\206\235\275\242\366\013<<\342Q=\317\034\267\275\306\027/=\365\224\366\274\202\010\377\275L\232\210\275.\315\216\275Y\255\261\274\033\322\243\275_\257b=\265\\U<\345\354\204=PJ\020>\346\237\336\274\376\026M\275/%\301\273\354\3101\275{,\370\272\344w\233<`\345\307=\034\242^\275\234\016\364\275U\022\231\274\271\266:<A\016}\275\202X\333\274\263\246\333=\373+\327<\327\026w=o\031 >\314*\315\274\010\014\272<\274.\277\275\367\366\260\274\334`\274=F\027\223\275^\204.\275\337\223N==M\032\275Vb\321=\265-\222=Dz\374\274\200\204$\275c\316\301;\205c\241=\233g\360<!\247c\275\323\036\026\2755r\3039\372\205\t=\334x\031\275S\217\000\275\326\275\234\273E{\217\275\311\336\216\274\335p\035=sv&=\237n\305\275\374ty\2752\023\361=3\250L\274*\315/=[e\305=F\356\376;\005o+\276\232\360\214=\352\265\336\273\370\317\022\274\303\337\360\272zz\274=\231\027\025=Il\025=\337V\363\274\025\245V\275\262\207\307\274Bp{\2743\030\016\274{\277\202\275\323\252\"<\204j\352\2742{/\275\327\313\205=\3007O\2747\351\245=\264\277\331\274!\253f\275\336\363v\275\240\335\372\274P\377\214\275y\222\000\275\236\242\375\273Ip\010\276\020\203\227\274\253\177\276\271@\252\353<P\034|=S\031\356=\351H\346\274\013\361#\275\177\211\274\275<r\201\275\305\264\270=mG\242\275}O%=\327\036\316=\364)\010\275S=;\2744E*\275n\333c\275\003\223}<\330\240\314\275\235x\224\274\210\227\301;m#<\275|\265\354\274Nd*\276K\303)\273\354\301\263\2754\005\014\276#\322\353<\214\r\210\274`\272\232=M-\030\275]E\004>\367V\305\275\336q\033\275cS\271\275!z\243<\"\241:=\035\251\354;3}\254\273F\353\246=@\332Z\275\'\341|<\350\177%\275dn\230<\334`\364\274\323\212U\274t\223\244;\3305B=\r\241m=\372}\377<;W\025=d\360\263<\212\257\021>\\Wa=\002O\006>_\354\266\275\200\201\027;\241\244^=\376\305\204\274\302\026\322\275\370.\354\275h\243\374=x\3143\275\224\276\224\275\251\224\312\273\346\313\324\273\307\362A>w5\004\274\036(x<\312\372\237\275\277_\022=\016\0376=\220\361\223\275_\347\374\273\035\225\300\274e\367\037\275\275\372 =\215fN\275\004\360\204\275iW\247;^V\264;\034\276\267\275BO\037=/\006\235\274x}\n=\321\025\220=\270+1\2757\350\355;<\316\314=k\377s\273\225Z\007\275\200\353\345=\213+\202=\3643\016=S\316k\275\375D\360;f\227\273=sX*=\305,h<\312:\022=\251\204\303;Df[\275\006\034*=`\332\355\274\351\343\226=\344e\034<\001\253\360=A\235\305:\262V\202={\2024;\351s\334\273\262F\275<n1A=\377\366~=\351\363\251<\273\240\265\273\320\331\326\275\241\253\217<\004o\230\275h\253%\275#]\301\275H\343\016\275\037<\007\275W2\007=\315\\\330:\220\034r\275\251\r\240\275\216\334\013\275\202a\010\275/H\020\274\001\316\362;\303\237\223=F\022\365\274\342\025\232=\237o\365=y\264\252\275\365\341\033=\021\237\230;\373\211\025\275,\240\274\274-\264\216=3e\303\275\243 1\275\032m\347\275\323\346\351\274\031A\317<\303\2218=\362\256\221\273U6\213\274\024,^\275\331\207\370\271r\262\032\275\302)L=?\336\003\273\'\256j<\336\327\266\273iE\241=e\277k\275\233\213L\275\213B\207<\243\331Y<T\242\204=L\364}\274\022\373\233=\341O\305\274\377\276\250< \316\271\275t\364w=\221Ki\275\237\257\352</\227\005\276\317\346\364;g\331\272\275M\034\"\276\002\254\260\275\240\264\267\273 \\\004;\256%\354\274d\020\216\273\322~\r<=\006>=\365\003\233\275\334z\275=\256\002\274\271\017\357\000<\216\223\200\275E\362\317<,N\010<\371\357\202\275|\205]\275\271\224%=\313\334{=\r\365\022\275\257\266\202\275\301Z\026:I\362\010\275\370}\246\275\302~\343\274]\230\007>\352e\230\275\210\271\261<wJ\206\2751>\033>\274y?\275x\205\257\275\344\013\345<\330\022&\275c\354\270=z\305\016\276m<\"=\n)\236<\232\371\275\275\310o\256=\227\306\241\274Av`\274\317\205\220\274\367/\326=\222\223\324<\036M\025\276>_\316:\272~\232\275\254\241 \275a\"\026\275\240\r\273;\320x1<\t\225\021<\212\200\222=\210=\t>\\\240\215\275-\031\361:\026\370\206\275\357\345\200<k\335F\275Y\200\'=\210\271!>g~^\275\014\323^<@:\034=\001? =kG\361=\246\314\242<\000)$\275\352\306^=\002\351\237=\346;\264\275\261\302\332<H\276\024=\034}[=\335?s\273y\213\307=\225\024\213\275\017\314\320<\371\312\242\275u\335Q=\373H\355<\376;\216;n\371\354\274\"\232w\275H\266\303\274\'\2669=\276\024\213=6\260\024\275\325\371(\275\246-?=Cl\340<\317I\245<\333\034\307\275\305J\353\275\365\314\326=\001\241\335\275b\370\004=5\033\007\275\336\037\222\275\210TB=\017#\273=\345\316\215\275\356.\227=\210\255\310\272q\202\317\275\004U`\275\265}\r;K\266\366\275\347y\360<I{\016\274\367\244T\274U \034\275\222F6\275\316\363\366\275x\217\214=\250\017\222<\227\263\207<$\252O\275\347\013\014;\246H\240\275\1774\252=,:\306\275\343H\027<Sy\220=\322\236\313\274-t\016;h\226\007>a\323\325:\262\225}=pB\003>\021\2575;\367\204\213\274S\270\217\274\243#\312\275N\005\265<\220k\344\274\241\025\303=ft\233=U\215L\275oD\367\275\236\013\225\274\257\355\230=:Cy\274\267\327\346\2758\266\361=\2444\326<$U\236<xa\253=\304\013\350\274\374\2035=\206\312\251\273\335\276\221\275m)\027\276\253\tw=\033`)=\363\326)>\331\377\211=:,\016\275\351R\032\275\337QB=\250\ta=\216\256&\273\363I\254\274c\366\370<\262S\303<Uh\370=E5\030\275>G\217<^\2048\275e\342\267\274\020\221\217<\362z\261\275&8\313;\025\364S=)\3359<\340\374\016\275B&G\274\233\212\213\275%\024\005\275\371)\037=xu%\2755\255\005\272\211\301\316<v\245\252=L\206W=\257\017\325=S\325U\275{:T=\365WT\274\020\360\301\275\355g\213<\264\320\335\275\305h\252\275\253\237\210=\213\025\224\275\222Z\303<QI\000=\333\233\237\275\006\004\237<\3703\'\274\027\324\365<\264\373Y<,PK\275J\032\267\275\\\204_=fh\320<\300^\023=\317b,\275\300\026\007\275G\371\032>H\373\252\274P\262\337\274\356\325\334<\371l\203\275\260^\207=\250\"\\\275\323&\003\274\001\361\007=@\003X\273\316T\223\272\277^\216\274\023\016\216\275\270\016\034=\323\n\366\273N\n\207\274p\372;=\216MU\274s\035\033>rMP<d\317\326\275\335-\232=&)=\275\330\2311=\003\202\032=*\273b\275F\354n\276\275\021\320=\244\272\220\275\251k\037=^\224i\275\n\214\242\274\\-\257==\344!\274!\rf\275.\212 ;\030\303\211=\330\372\302\274\315xX\275\300\305q;^\221\025\276]\222\262<2\307a\274\255b\n<\362\033\\=\245y\245\275\317\332\273\275\352Q\014<\031}\233<\355b\014\276\323Q\032>\335\244.=\016\301\211\274\022he\274\377[\016=\213\273U\275\030m\200\275\250\314\016=\001$\217=A\204\252\275u\n\234\274\017\345\210\273\025!/=0g*\276):%=i\336\255=\223\265\254\274\\#\316\274\233M\276=\364c\2739\240\033\270;\236\262\232\274\341f\316\275J\332\350\274z5\227\275\2438\025\274\221\031\026\276\003\354\365=jV\323\272\302c\221\275?\340\037\275\026\232\001\275W\303/\273\001?!\275\n\220\257=\247S\020=n[>=6be\275\0140G=\271z\221<*=J=O\376A\275(\210*\274\305\334\247\274\037\007\002\276\367\244\027=\264\371\213\275\241\210c\274\243y\211<W}R\2752\026\324<\354\322u\274\345<\205=\030\010\216\275\257\342G\275\274\350\367<\000\322\036\276\344\242u=\017\353\342<\3339`=7\305M<\035\361\003=\340R\220:\343_\327=M\375I=C\3760<\025\260\310:\016\244\326=O\252}=\340\351\250<z\200\010\276\203$\241<\222!\017\276\355\005N=\0354&\275\215\3442=\254\354\362\273\000\322\307\274%\212\215\275l\023\036=\306l6\274g\217\355<3g\002\275#\032\205\274\270W\216=\332\021X\275#\034\374=\"\310\200\275\3013\264;\027t\242\274i\312u\274\326\355\036\274\262\342\200=\037\313\214\271H\360F=\330\201C\2750\217\375\273\275\322-<\275\\\272\274,\277\327<(3\350<\375&\247\275\247\311\013<\242\364z=M\275\214=\316[\"\275\251\205\214=\343\032%\274\274\260/\275?\030\333=\352\246\032=*!X=?_I=\277>\n;\201\356\273\275\023V\232\275\210Z\014\275\275\223\005=|\366L\275\000\035\202;6\351e=\344\275\375\275\331\212P;\334\266\017>Wz\302\274\301\236\301<\016\037\213<\2504\341\274\006\001\250\274k\332\317=\323/\227=\222\205\177\274\225\021@=JxD<m\333\377\274H\340\r\274\330(S=\225\354\217;\374\326\013=F47=\025\212)\274N|\305=\240\270;=\014\324;=~\341\006\275\360\314\215=\241\2567=\242\261\343<\034X\376\275\030\\\214=G\227F\273\273qm=\353v\023\276\371[D<\242\036\000\273\277\320\203\275@\262\254\274\004s\335\275\233\034\275\275`\2451=\025\211\303\274}\374==\016xN=\330\323\315\275p5X=!~!\274\216\310\273<%g!<\005\033 \274j\320?=c\320C=\177\025\231=y9\022\275hr\235=|BC=\027\010\013\275\260\036l\275\302\032y\275\035\225\276\275\365}\205<\035\370$>\370\"\346\274\220\325U=Z\217==H\035?=w\3355\275\353P\327<E\037\033\274\231v\275\2740\001\010\274\3777\245=\344\210\304<\002\r\030\276\302\020\216\275\373\034\223\275~\005\247\275\270\035`\275\345\263\210\275\362B\020\275\014+\251=[\210\254=\310\335\326=\350Tc=m\254e=\253\323X\275\n\023\243\273m\004\001\275\251Fy\275\330i\316\275!9W<I\265\360=\331\230i=DYb\275m\014\020\275\'\352\202\275\271+\221\275#\334\241=g\311Z<\025\274\004\276_\255\305\275l\263\225\275\243y,;\024\220\236<\022\315\266=w\310\215=Y\245\010\274E\262W=\345 $>\205/\026\275\240;\252\273\270\372\205=\266\323\356=\341\335M=\236\251\275\274\260\357L<\336\212\003\276Y\253\030\274\335\274q=D\333\373\274\376\343\224\274\261\227\316\274\006\032\272=#M.\275\215\324t;\336\003\350\273\034\342@=\026@Y\274O\272\343\275\010\033\025>]\022\204<AU3\276\327D\r=\337\010G\274\010\201\235\272\240\225\343;\377/\300\274Y0\300\274\334\360:\275\257c\304\274}\265\275\275\277\333\013=\033\224\311<\355]\220\274/\020~\275e\250\270=f\351\253\275.\277\010=\013\377\323\275\263\272\307\275\353sR=`q2<A\003\203=\356\203\367\274\202\370\241=\212\321\214\274>\311\336\275\022s\032\275\322\221&\274l\034\265;F\275\317\274\255\361\267=f\352\013=\004\337\032\275\360\332\320\273\263M\255;\357E\221\275\304\321\330\274r\330!=\205\025\314\274E\246\277\274\202\317\262=!\300\346\275ll9\275\303?\330=\341VO=\n{\225<\3018k<\252y!=J\341\010\275\226\330 =\223\000\245<R\376\017<Nf\014=8\214\036=!t\n\276\373\024\274=|\205\014>/\323\356\275c\027\037\275wq\232<\212I\306=9Pw\274\037\201\341<\344\323\034\274\263\363)=\372\037\247\275\336\351\321<\211\311\257=\233\221\214\275\313\325\241=\t\273\226=\023Q\241<\266\213X\275H\215\031\275KK\373:\226\\\275<\220\001\036\275\205\014\006\274\300\376\312\275\022\305\221;\'\3012=\320}\320\274d\336[\274\252&\237=\"o+\275_~\r=\2047-\275s\r\014<Z\253\013>Qz\215<l\244\003>d$\342=\036\214x\274L\373\007\274xQ\013>NV\243\274\377\251\331<0\025\026=\350\266\241=\301,\361\275\206~\376=\315/*\275\261`\004\275\207Sv\275\265\203\341\274\3211R<g\331\304\275\242\006\016\275\344u\207=@\254H=W\017.\275\347\255/=Sg\017;_CB\2750E\225=Z_\022\274\377\220f\275\227\263\260\275T\006\277\275\247\022\t\275\230\220\251<\330\005\201=\236\217\233\273H\350\207=\331rS\275\035\202\213\275P\3128=\350\223\376<\213q\034\275\016\r\277;\215q\2308\033 ,<\244\253H\275\271\260\211\275\216\035\260=r\037l\275\242\260\221\274ja\274\274 \313\235=\"\241\021\275YJ\266=\356\324\243=\316KN=\243\373\335<nsJ=\036\344d=\365\337 \274\227\033\242=\213\224q\275;\014\254<\177\1778\275\233\247\214\275-\303\210\274%\307\000=\3368\207\275\222\357\277\275\335.\330\274\257p?\275.cV=\325@\277\274\367\242G=\356}\310;\031O\002\275\014[\352\274I\353G\275\332C\365;\202\3532<\331\250\013=\313\346\250=\036\021c\275\201\373X=\177\331/\275@Bb=\263\231\232:\217\027\3049\246\353\224=r\rk<L\257\212\275\365b\324\275\331\210\224\274|\227\231\274\005\220\360\274\320\"\021\276E\306\225;\345Z\r>\206\317F<B\203\n\275\252\021\003\2765#\010\274Q\'\332\273\357\273q\275Q3\317\274\353\262\177=\020\203\203=nq<<\213(D\275\367\374\226\275\341\242\267=F|g=\3544\347\274\232\327\030<\017\342A;IG\253=\320\240\234\275\023\275\007\273\027\007\201=0\223\342=r\001\323<>\277\337=\336\267\243<\257\333\025=V\006\016\276\003\322\243\275\365\367b\275\223\250\273< 0\341=O\337\232=\306\366\342=|\250\365;\3333\025\275\362\245\332=5\276\326\274\177\211\363:U\337\035\276q\321\022=\247\211\024=_\263\223\272\242\226\034=\t\326^\275MG\244=H\2473<*\034\346=@\310X=V\303\010\276\025\017Q\2751S\032=\25293<\3454\233\275\377\227\300\275\315\025O\274\331\340\305\275\021\302\201=\020\024\214=\215<\243\275W\'\301<M6D\2747\323r\275\346\310\032\275\02524\275L\217\024\275\367\324\226\275\036\216\200=\010\343$\275\211s:<y\\\311<\203\255b=\340C\367\275{\300\307\275\207\250\251=\237C\322\275d{\242=\271\217\025=\266^\376<\020^\334\273\221\372\003\276\342\320}\275\316\333\305=!\316\344<aq\204\275#\323\204=\223f\331\274WO\323\275S\375\351\273R\344\304\275\017\256U<k\337\304\275\2164\331\274\277{\336\275\004\330\200=h{\372\275\315\332\372\272\370\232\302\274\253S==!\303\232=\251v{=\013\217G=y`;=x\320\205<\2451S\2750\031\343\275\323\246\256;>\230\370\2742\255\337\275`\342\260=T\337 =\260\213#\274\250\000o<`U\303<\023\021\235=\251\220\303\274I\003]\274$i\257\272_}\342;\355ce\275\000K\036=x32\275\352\361\311\275\221n\234=M\201\366\275\010\362\272=\246\227\"=lQ\314<\026\216X\274Y\321\277=\233\310\247\275\217#\014<\027w\241<\242\331\255=\222\005\'\274\221\203q\275\221K\022=\007\362\031\275\311&7\274\367\336\000=?\352O\274N\227/>\273\035\303=\022x\001;\354b\310=3\243\020<m\t\266:jB\031=\246\334\025=\225[t=\300\237U=w\204U;M]3\275\021\030\341=\004\204>\273\207\300\201\274\231\002\246\275\247\245->\004\357M\275\235\371\232\274e\360\001\276*\327I=\310!\213\274\215RG=R\331P\272)\347\303<\000\232\017=\2172\251\273\324\356^\275p\330R\275}\207^\275\177\273\322\273!\364#\275\360\024\"\2750\222\001=&x\031\274w/\204\275\363+\267\273\271\ne\275H-\013\274\002\034\214\271\356S\014\274\000~<\275\350=u\275\211\235b<\365\032\035\275w\357`\272\265\203\000\275\271Y&<l*\026<&TP\275Q\310\220\274\010\357\021=\260|H=\027-\005\275\231I-\275\341\t\316\272\216\217]\275\2354\360;\2117\213\274\345\315v<3w\210\275O\256\273=^\336\222\274g\210\n<=\342\347=\025\241f;\361\276\211<g5\307;C\217\"\275\004H\352\275\330U\002\274\\\320\240<\361\317\371;\362\213\305\272\234o\277\274\253\250\371<P\325\204\274;o\033\275\344`\207<\344\242\210\274n&\225\275V\263U\275T\237\245=\272&\333<\333\206\331\273w\233\371=`\224\370\275\276R\247\2756\265\340<\245z\260=\240\256\010=~IT=z\204j<\317\303\002=$Mb=h\267*\274\215:\036<\240\250\375\275\257\373u\275\021<\276\275u\315#=+Y\300\274\321\235\350=\014\211)\275%e\366\274krT=\256\002N>/\332\356=\342g\205\275\374\216\343\273\277T\214\275\220\247w;\214v\036=f\327\270\273\277i\206=\342\334\254\275\274\221\270=d\n\201\274N\270\202\275b}s\275k\362\214\275q\306\273=\231=B=\203_P<\354\364\007\275\204\364R=\010\0316>\000\212k\275\"\377\014=2->\274\006\375\345\275\313I\217\2751>\215<g+\351=6\264H=\021B,\275\313\3115=Xh\302=\235\313\226<\375\207p=\367\271\245=5\215a\274{\326\361\274\233G\214<]y\020;\026g\250=\215\263\003>\271iJ\275M\320)\275\001\0330\275\345\t3\275\034\003\325\275\\\372\212\275\017\221\256\275\260\373\225\274\223\375\305\273~z\231=\345\243A<\353C/\275\2762h<\020\375>\276\344\t2=q\350,\275xG\301\275\272\247T=\377\026\233<\372\233\323=Nq@=\274\2210=\204\254\360\274W\333\252<\244\257z\2743\254\217;\212\305\264\275\266^<\275~\235\232\273@F\206=G\352Q;\026\270f\275\204 \004\275\235\003\017\275/\031\300\275X\217\377;w\336\t\276)Xx<@\236w\274\207\353\205=\241U\215\275\233\ry\275\017\020\352<Bp\270\274\315\343\272\274\313\361\300=HiY\273Y\221\010\276t\346*<{\331M\274$\243\214\274\037\325K\275\332X\260\274\340\232\033\275\325Z\215=*\276\001<\277\275\250=\2222\006>3\312\'\275\336J\270=\226\260j=f&\370<1d\261\275\306\257{;`J\273\275l#\266\275}\362\262<(\0179=\342&6=\346\252a=\355\333\326=[\320\215=\007 \\\274\363M\273<\312Rl<kU\271=<$\310\274A\223>\275$z\351<\3772\220<d\207\224\274^R\347\275>\217\376<:\316\252<\251h\357=\027e\344=\270\2056\275\212\371\223\274OW\031\275\337\261\272=\2367{\275uz\n\275\321+\252=:\310&;\377_d<\243R\334;P\335\200\274/\375\255=\254\355\330=\010[\033\274#Je=JFj=F\254W=z`\325\274\026K\203<\215K\253\274\315\355\242\275\000l7\275\021\332U\275I\207-<\226\370?\275\006\327\221\275E\310\374<\r\2553<\375\230\330\275\232\030\217\274\363\271\201<\007\326\016=}U\273=\352\n\303<3\301\007\274\313\313\201=\242\243\302\275y\357;=\245\374-\274\254q\242=\232\303\205=\267\300\235\275\346<\222;\022&\005\276y\352\365\273g\357\307\274\371Km\274x\330\014\274\240\231\007=\327\267&=\001R1\275\036\362\273=\357Sn\275\272\325\300=\357&\020\274i|\342<\361\2126<Q<|=\201\350/\275\240$\371<_\000\251=G\257\244<\224U\263=4\360\272<b\224\204=\205V!=\206\253\005<\016\231E>\255\237\204\275\362\212\031=K\336_=&\033\326<\372\263\267\275\3055\233\274\031AU\275\315\215\255\275\343aF=\266@\022=N]\350\274\255\310\037=Z\3656=\276\233\356<\223\376b=]d\2658\270;\225=\256\001\207\275y\275\276<\272\356F\273\314\222Q=nT\236=oW\256<\034\276\326;F\363\013>\227\036\014=\363D!\276\364u\306<gR\200<Ql\253=cN\312=q)&\276\204\321C\2755\216\037\2739f\242<\357\221\320=\305\365\367<T\302\205;\235\216R=\242\323\231=\302\342\014<\310e\326<>!^<\337n\241=\206u\004>\254\260\254<\005\276\034\275yi\244\274I\327\013>\260]\002\275\307\021b=\315\037\000=Kx\026\275\370m\"\274\007\305B<\337p\223=\327\245d=iQ\211\274\233M\343=\314i\212\275\225\005\334\272E}n=\366\351l=!\357G\272l\377\212\273\233\253\250=\3152\005\274jP+=\002\225\177\275 o.\275\251\210\213=Uz\304\275\3024\223\274\250qs<q\323\204\275\376\326\337\275V\274\305;\342\340U=@n\271\275\036N1\276xI\324=\223)\206=\325\027\226\274u\333\311\275\325\303)=o\037\346\274\213\250\354\274jh&=/_\266\275\211\304u<\2530D\275\002K}=\360\006\341\275\235{\213\275,$/\274-V\235=\313j\330<\340\336\214\275\016\313\361;\250\213-=^6\250<\006\223\263<e\343\320;\277*{=cx\200=\311\271\242\275\004+\310\275\002x\354=\363Hf;rN\240<\025U\327\275\226~\223\275cn\342\266\355\263\000>\311\271\034<S\020\324<\010Q\346\274A\273\233<\301V\361<\277\013\025\276w\231\244<fU\204\275E\224\231=\373r\213=\014\226\323\275B $\274)\332\270\273\370z\024=E\220\201\275>\367{\275\022\232\025=|\323\236\275\237\343\271\274\305g\273\275s@\220\273\324V\202<\3050C=\365_v=-\365\254<\256\217I=\231>\224=\225\235\207\274\342\013\221\273\250I\224=#\235\254\274*\245\351\274-\347\330<\224Y\003=\245\374{\272S.\236\275\311,\321\275A\305\233= ]\371\274=0\027\275\257R\r\275}f\321<;1I=C/$\276\205\366~\275P+\244\273\224\267\203\275r+\027\275\347\230\213=y\322\272<Z\363\212<o\367\212=F\356@\275c\341e\274\214\321\370<\331\311\034\275\2223\272:\264Q\301\275\036\315j=\357\023\320;\264d\331=\251:\\\275{\365\267\274\366;\230=\264:8=v\263\244=go\023\276\227\233\332=\014\276c\274\212\256\324\274\'P\006=\004\025=\275\027\307\353\275T{\032\275l\226v;\010\'\317\274f\355\236=`\000\211=N\337\233<\216\2223\274\247LU=\206\371X<\366\372o=\014\027\203<Y\254\314;\276\255\037\2755\2050;\006\0327\275:{\246\275p\222U\275\307~v\274`\223\325\275i\373\004\274\330\340\321\274D\006\226\275\303\372\r=Nn\221;\340\207\354\274f\340*\274\010\023b\274\r\023!\274\233tY\274D\303\225\274\267i\\\275\211(\232<\202\010\262\275\333\263\010\275\234\2336=~\231\026\276\213\017\317;\234\212\335;(\264\201\275\345\001l\275\367\317\345<vFh\275\274%\305=\275LM\274\366\271\275=\214\030\357\274m\242\315=\264\032\323\275\364\311\033\274\302\225F<gK\022\275u@\003\2769\265<;%UB\275\265\346\201\275\352\202\020=3<\210\275\224C\277\275##b=w\034y=\263\353\261\275M\255\311=\271\025Y\274E\257\220<Z\257\335\274*\306\347<\303\215\346\274O(\330=\351%)>\354\240\321<=Z\204\275,B)\274\031\333\260;\356\024/=\212\034\241\275\2634\236;\374\r\213:H\033\202\274ct[\275\354\227\324\274\027\341u;0\225\204=\316y\317=\201\266\221=\362\267\006=\235\361\263=\311\222\031\276\007\227Y<\244\340\360\275\214\030\234\2745L^\274\277\374\337\2749\344\266\275\203\223\036=kb\217=\261\265\370=p\306(\275\325\2465\275~\331\031\276EQ\256<\335\025\261\275\353\003\303\275~\274\337=\302\331\202=\354\003U\275Y\317\343\273\304\000/\275\010\336\363\275B\000P;bg\207\275D+:\2740\223\222\274\256\375Z\275\352&\n\274\256,\271=\320@1=o\273\313\275:ot\275N\214\216\275\006\004<\275\2322x<s\022\n=\235\372P\275\026>\362=\327\326B\275~\237\211\275M\006\306=\260\226\233=\251J\202<@\t\030\274\026\220\216\274sT\207\275)\245R=\002^(=\353\215\347<\032p\242\274\357\2778<h\003\220\274\257\010:\274\220\237\232\275G\"Z=\360\212\257\274q\010f\274\225J\245\274\341C3\275V\250\360\273I\004\226\275Ig\236<\\\370N\275\267\334B\275X\236.\275u\315\006=\026\362K<\244\337_<\351\023\236\273\221\353\006<Kb\205=\027\323\006\275v\327\036\276\223+\330\273\254\007Z\275J\214^\274\212\251\\\274\261\250\202\275Ac\036\275\035\"\021\274\014eD\275\013Eh\2744\312\305=\314\337d\275\364\030\3509\204:z\274)\331<\2754\206P<N|\262\274c\253\177\274$\022\217<\372\002\317\274gfR=\354I\243\274\372\370\327=\250\253\267;\031\254!\275\336\355\303;\270\225Q<#\372\332\275!\005\014\276i\324\304\274.*\214=\2532\270;\250\345w<,9\r=\021_\257=\3009t;\261\364\345\274\272H\203=TE\210\273\233w\030\276\373\260\235\275\016\345{<\365\325\226\274\nV\312\274#\000\232=g\356\005\274\233\007\331\273\343\261\225\275\243\337\323;N\331)\275r}\003>5\177q\276H\226\013\275*\235\305\274y\331\277=\327\3437<\267aY\275\226\330\362\275\327?\321=\234\035\023\274\n\376\224=\376\273(\275\226\247\21691\201\267=g\003\016>\037+K=\354\337\345<\361H\300=#:\325<]x\310<\252\351\352;\362\277\213\275J\346\"=\315\244\220=\204uL\275B\374_=\266\000\263\2756\341\256\274\nj\251<U\016\213\275\242\344\206\275\277\024\346\272w\006\342\273\373p0<Q\357\260\273\335\247\357<Q\032\020\274\"\360\001<\367\3413\275\021\362?\276\001\323u<\002~\213\275\353\217h=e\234M\275L\211\312;\2561\201\273\031\333\277<\302kq\275\247\272\264=\262\t\217=\371\007\336\275\020/\224<\033\262\373<\016\267[<\030\314\n>\271\351N=\364\353\272=\315\257\243\274\\\336.<\177N\237<\363\332\255\273>i\263=H=\375\275\334@\034=\r<$<@N\304=;\226\007\274\025\211\311=-\311\330=\002\023\000>\335\265\371\275\314]\324=\252\032\232\274\001+y<D\2363=\206\177\270\274>1s\275!+\306<f3\272<\225W\323\275:g\220=^u\236\275\267n\315=\273\254|<\245\251?\273\350qb=(\214\244;\241\'~\275m4\036\275\004X\\\275$\342s=\t\316\204<\355[\244\274\353q\344\274\365AH;\315jp\275\330\257_\274\245\211\027\275\206\007\004\274!\247y=\362\315\227\275y\257\301=wV\224\275\226\350F\275\267\245\253\2747J\230\274K^j\275\366\025Z\275\215\311 <\246L\357=\020\231P\275\363\375\340=g?\'\275\307N\324<\262\253\343\2754\002l\275\221!\177:\2341\324:\2763\221\275\304\316\210\275\035\355\224\275\025J\010=\337\330N=\266M\'\275\372\223\367\274v&\351\274D\217\327:\320KG=|\032\304\275\300\352\247<{\034\350<\207{\306=\310\334I=\001 >=eLB=\353\337\003=d\023\022=\267\227(=\220Y\031\275u|\213\274P\364g\275\320\354\226\275\206;4=\"\355\016=\243\025\025>\n\201L=\212N\311\275NO\003\275\376\366\000\274\t\376\000<r\362j\275bh\003=(\377\367\275\334\004\273\274\304;\274=\225MG=\206r\276=\216?{=D\252\024=\203%q;\367\361\017\275m^\n>\232\210\233\275\371+,\274\226\024\212\275x]\000>\336#\203;\222!\232:\247\010\312\273\352\330\360\274\305a6=\345V\227\274\310a\243\275\367\\\210\275\354\251\020\276\010\274\325=x\267\254=f^2<Ra\304<\035\250\350=\004\237\223=\346KM\274\2374\030=\212\027G=\250 \001\275\343E\206=\307\300\232=\201\032\021=\"\364\376\274\360\217\355<\376~\376\274\n\242\361\274\267\270i\274<\334\234<}\213\000=\006\311q=\335\227\272<\352\271\033\275\341\250M\274\330\225\353\275\271\273\331\274\230\330\311:\305\333\223\274\215\235\214<\303\274\206=\201\344\261=\235`+;\271\277\221=\201\217}=4Y\246\275}\226\262\273mY\300\274d\377\016>5\037\006>\261\005\226=,l\213\273+-\235=E\237x\274\353[\025\2765\225A\275I\320/\275pW\010\275\301R\346\273\317\335\300<\005GR=\263|g\273\266\277\217<\024~\221\275\252\336\240=\364\345T=Q\256R=\301z\205\273\354\307\264\275\321~\221\275\354D\247=\235\302\n=\367\006\350;<=A\275W\034z\274\242J<\275\271+\256\275\207\262\343\2751\023V\275T\247\023\276\276-\202<\215=\256\275\204\266F\275d4\240\275N\022\265\275sRE\275\000\365\202=\276\304\252\275yv6\274&4\267=\372\222,;$\356\334\274\372f\030\275\220\217\">\362E\224\275\235\356\237\275aE\003\275\256d1=,-S=\304\304\371<\332\266f=\000\303\r\274J\363\033\274\346\r\234=\234\272\360;\345\326\004\274=H\275<9(\247=\374\357S=\223\030\256\275\025\037O<\312\214A=\031\336\207=`3\032\275\003j\357=\273t\232;4`\001\275\242\013\357<\364\320\022=W\216\243\273m\2517=\331A\264<\001\235\217\275{|\363\274|\356A\274\276\t{\275\252}\261\275\332b;\275\324\177i=\314\023\201=\257\365\220;\215\217\204<\213\0228\275\030\037\n=\311vX<\241\025k\275\363(6;Q0\233<\271\215\200\274P\034\231\275\376\274\032\276<Y\363\274q\207:=\330\376\025=9\267\273\273X\333$\275E8A\274\233\023\247\274\251\251u<\017P(\276\302\272\307\274\312\335\024\274\351\317o\275)\220(=\252B\234\275Y\032\315\275V\236\313=X8\010=\222*\026=\304\337\322\274\204\267\201=f\217\236<\303W\302=\336\265{=~\t\r\274\374\320;\275.)\324<\214^\261\274^\254\227=\347WE\275\340\0176<\001\325\347\274\342\344\232\275\220\2243=D*\331=\375\203\003\276\244\373\032=\221\346\343\275\301JU\275*\035,=\003\264S=.w\332\274MM\377<\036\335\343<\007\227{=\035\244\345\275\001\270:\274_R\227=@\310a=\207y\245=\366D\r\2755;r<S\016\270\275\323\375\261\275\366\210\315\275\203\237\177=\n\013\006\275\005\355\367\275\217\276\334<\234h\276:2l\020=\211=\034\274\235\360\200\275\022\254\242\274\\[\n=\346\233_\275\251\231!=\337\363\255\275\n9\220\275}\020\257\275Cd\214\273\272\334\205\275\263\350\r=FZ\233\275\207\221\366;\344\177\203<\257\340F\275\033!I=\337F\010>\003T\n\276X\331\333<o\326\220\275\217\327\367<_u\235<&&5=\036c\230\274R7\256\274\231n\326<\316\304\024<\361\357\313=d\352\224\275B\213\347;\233qb\275TQ\003\275m\326\214\275%\232\034<#\367F=CL\222\275r/\216=\260\032\253\274W\032\217\274[}\211\274\000k\030\275\212L\266\274\240;-=\205LD\275\263\307P=\245\315p=d\207m<\022\024\255\2749Z\367=%\234\314<\236\345\337\274\270&x\274\310\246\355\2759\205\354=bR\305\274\222\310\003\274\030\252\267=\360\226\255=\316\014\211;\367\351\346\274d\3321\274\340\026\357\273l\036\230\275\032d\273\275\267b\350;\033\207\002\275+\303\315\275\3358\205\275\262\313\017>\021\255\275=_P\340=\245p\372\275\013\206-\274\226#\014\276R\224\335;b\354\322\274\260\372\201=\370D\247=4\013\032\276\236`\032\274\227r_\275\301Q\207=\351\366\023=,)\301<\007\024G\275\013\215\273;\212\315\215;\263\321\360\274EQ\032>\035\037\007\276:\245V\275\006\034\310;l\220\352=9,\217\274]\203o\275\205{\254=\227cP=\240\250\204\274\374\217\010\276\211k\273\275\272X\234\274\223*\023\2750\267\023\275s|s=\371\262\257\274\374\242\372\274\315;\364\275\324\211 \275\367\366\273<\323\022\202=\211\243\360\272\342\t{;B\377\310\275k\374\247\274\245b\267<\344\315s=X\316\360<\021Sc=.\005\013=\220\373\223\2757R\030=$\014\024>\n\241\263\275\177\031\247=\341\232\006=\264\266\036<\372\261e\270\247\226M\275x\032\000=\361d\221\273\342\0179;Y\000\302\275\035\026\002\275\324\013\313\273\203\016\032\276\235\016G<\223\352o=|o\253<H\r-=\274\201\322=[AC\275BJ\232\275\341\031m<\376\341\325\275\251o\217=A\223`<\3705\354=\027;*\275\347\306*\275\355\224\204\274\177\025\300\275h\206\021=(\3177\274|\206Z=Q\205\225<\237\377\353\272\256\302\251=(\024 \275\242~X=r\215c<H7H\275\332\'\262;\001Cv<\342\325W==\321\026=I\345;\273\013\r\322<u\224\315\274q\035\244=\205X\\\274\366/1\274\374j\207;\302\016\r\275\222\273\336\273`\236\202=j]\313\274\315\331\227=\245\232\236=\250\t\033=\264\312+<\2623f=\026\314,\275\\J\365\275S\205\033=\025\231\274\275\006\365\324\275\002\226)\275\330\203\306\274\203\226\232=\023n\r\274?+\267;0\211\257=\n\356\372=\0206=\275(1\247;\017Wn\275*x\257=\210!]\274\340U\240<\223\3077=\363]\201\274v\251\257;\212\272\005\275;oj<ju(\275D\361\300<\243\337\361\274\270\242\006=\233\260\314=\367\277\r<\347z\024\275\217\277\255<\227B\365<S\306\200\275b\n\325<\217}g\275\037c*=\262\235\025=m\003\334;`\326\032\275\344\355D\2759\344=\274@\212\247= \003\334<\'\2532=\364\355\230\275%]\371\274\273\r:\275\343R\222=\220G==\353U\231\275\305\361\023\276\351\326\201\275\016\327\'>\014p\232;W\250)\276`\235\247\275\222#U\275\331\356\240=\374\336P=u\0326<\253\'\336=\242\333=\275\305\001u=D\243\002\275\363\314\330<7\217\213;r\331\227\275\347\020\310\274\201Z\271;\305V\271<\346\367\205\275{b\027\275\307C\300==\026\253\274\241\255\207\275\365L\330\275\307X\243=\210\277\322\275\241\204\376=\336\320)=(`%=\374\323\022=x\250\222\272\206\277\027=\206\372U\275f\007\022>{\351\336=\252#s<\324\026\270=\303\251Y\275\036\254\254\275 t\254<X\n\025>\247\377\210\275\335f\226\275sw\332=\271\212\321\275\214\305\324=Q\024\330\2737g\031=O\265V=\205\255\272\275>p\265<\305;h\274\331\022\332\27429\244<\004\365\322\275\344Vl<\335\315[=y\223\242=\177\245\340=\256P7\275\024\241\347=ET\236\274\026\370\017\275\337\272\\\274\304+\343<5\315d\273\257]\375\274\265\357|=\245C\265\275~4I<;\220\237;\264~\372\273\257\375\212\273\322\226)\275\344\317\016<-\200!=\205p1\274\013a\246;\364(\351\275j4\"=\246\035\345\274B\255W;c\227d=]\274\224\275\001t\230\274\014,A>\223C9=E\016\211\275\007\323V\274\023Xp\274:y\255\275\200\224\203<D\225K=/\223Q<\244\003\326\272\235z\306\274\337P\347=s\324\005\275\037h\004=\017\374\253<my\330=,s\233=\206\014\247\274\037\354N=\254\003\206;\311Y\002>\235u\322=\230y\244\275\366\t\270;\304\223\237\274\001\006O=#}8=\273\374\337=\202\261\324=+\272\352\273y\007\014=]\261o=\271\002\255=\262\303\344\274\237\315n\275\262\027(\275q\223\333;\243Z\252\274\217\334\n\275`\\\204=\024\"\206\275\322\003\271\274S+>\275\372.\377\274\220[_\275\2661\204= \216\204\274\254\352\251\274\230[\255<2tV=|\016\031=\304\236\201\275\335h\230=\0223\022\275\003\'\314=e\023\270<\255\276\217\275\301T\027>\036\315\024>\035\227>\275\'G\303\275\2741\343\275\300\025\361<+\220\202<%\334\343;\241\262\033\276\361\243\337<k\204\261\274\007\214\005\274$[\200\275\241\300\245\275\265\260\242\274r\037\221\274\200s3<!x\000\275;b\266\273\"\245\010=\340\350-\274\330\337\025=\347\227\032<o\253\236=2\202Q=\027\273\301=\372\221\373\2742\210q\275\260\033\226\274\007#\345=Z\"\254<\335\232\265\2755\356\205\275\256\2440=)\254\344\274\340\211\217\275L\225\005>\362F[<\020l\300;K\337W\275a\336\010\274\220\205}\275\332[\371\272@\377\200<\337\033Z=\236\337\322\275DsD=\227\025\221<\331\340\037\275\306\276v\274\036r\275\275vL\330\275*0\271<\r\234$=\355VD;W}\342;\365y};\301g\222<3w\200<\350\203\212=\362w\320=^\245\026=N\327\3227\374+\001>z\274\007\275L\223h\274\245\rZ\275U\215\202\274{\341\234=@\312\312=\313\3703=m\253\312\275v\304\347=v\200?=\2570@<o\326\266\275\301@\241<9\275\252=F\350\017=\211Z\313\275\033-\212<wx\247\275\214k\250\274\013\262|=\202\2227\275\022]\335\275\201\257_=\000\370\216\275\201YU\275~u\326\274E<\217=&\232\371\274f\202\306\275)\304K=\242,\265=\265j\217\275 \270\237=\376\215\206=fk\035=<\306\025\275*\340J\275\212\276\036<#D\177<\347\030\237\275\3602\314\274\324\322\310\274\370\242^<\273#0\275\236B\256\275\275\'\247=\257\264\341<N\360\t89\307|\274I\235&>\267\374\223\275\306\243\252\275\031\235#\275F\026#\276-\362\256=9\311\254=\217u\334\273\335\331};\0165\274\275\326\030\007>\016\006\204\275\345\307\237=\320\323\221=T\206\250=B\320\311<q}\312\273\211\274V\274\361\013H\275\000/\006=8\220\237<\337\030Z\275h\204\367<8\222j=\377\325\373\274\361\270\326\273VF\273\275\006\337\270<\'bW<\373D\001>\245\223E<sG)<%d\031\275\353\202\311<iLb=\213\205~=P.\274=]\002\232\275\256\\P=}=?\275pT\027=Q\022p=\257b\032>X\177\206\275\031\307#\275\347 \271\274\300\304\315\274\016\313:=;\275?\275\312\032Y=\242[\342\274\251 \276\275\373\250;=\201D\005=Q\013\264\275W\tb\275Pr\022=\227J\257;\332\372\345\271\347-\212\275z2\005\276\217X\200=\231\252\200\274\t\335\351<9\036u\275V\007\345;\207\177%\275\223\207\203\275U\261\020=$\321[=\372\014\246\275kM\323\273\352\201\205<\242\272i=\216~\203<\271\214\350;\355ES\273(\243I\275\320\343==\221\037\014;ON#\275\304/0>\023\310U\275\217!\241\275\202-\247<\2302c\275\375\373v=f\364\021\275\221,\206\275K\030Z\274^\014&<l\267\236\274s!g\275\227\251[=)\253\253<^\224B\275\010\323\331\274\313\257\247\275\255W\221=\017\035\227<\317\'-\276\376o\277\274\355\270 \275\261\3012;~\354\310\275\2534$\275\324\340\224\274\272e\003=\226\205\272\275\354\365 =\312\276\240=\335c\005\276\225[6\275\265\360\317:S\2152\276\340\022\366\274fQ\330\274m\277\'\275T\254k\274\325\342\310=\3442\005\2749p\315=\036M\310=:?\375\274Q\242\356=\370\203\025<\302\333\327:X\353\023\2762\r\r=pU\207=T\307\030=\010\025,<Z\257\226<\251\245\016\275\325f\321:\371M\270\274E\3137=D\022\340<x!\276\274S\003\272:\023P\356=\274\371\267=g\367\022=P\226\276\274\001*\214\274\257\022\024\276T\020\374\274\302\327\312\274W\373L;\310z\255\275\322\312\351\274\321R\217=\006<\006\275\000f\361\274\272[#=Pp.=\'\317V=Q\346\'\274%\367C\275\360\035\313=\202\277\337\273B\214\235=\204J\002=\377\261\245=\210\341\371\273\016~\003\276\242\2212\275G]\003=e<\255=S\375Z=\034\344\036;\364\375~<\377\030V<\233\322\340\274\364\342\027<\341<\300\275\370\347\307\274\257\346/\2757J\214\274\002\\\206\275JJ\214\275\311d0\274ni)\274!\252\225\274\0010\277<0D\204\275-6\207=\'\017>\275\266a\273\275\372\301p<\323\032?=\202f\001=j\376\351<w\240\340\2747\247\205\275\'4\270\274\214s\024=\365d\373\274\377It\275\344\232\035\274\231p\r<\3141\000>\225\304{\274\264\315\020=\033\325o\272T\316\275;\217;\304;bP\264\274\363\311\214\275\341\251\224\274\036\233O=\204+\320\275/\326m;\302\233\353\274>0\241\275\325B\261\273Wm\257\274\271\232:\274\232\351\025=K#]=^\200\236\273s\217\304\274N\244\204<\364\335\304\275a\371\337<\220}\036<\361+r\2752\204\202<\006\210P<\352\022\242<\263F\226\274T\313\220\275\243\204<>\233\361,\2760\224\207=\262\247{=\362\270&\273#\2639\275\024[\n=$\'\345;\276\036x<\362+\255=\"D\324<P\034\314=\211\217\271<\305/3<\225\326]\273\264X\243\275\320\264\207=.\257\237\275\302\000\246\275\037\r\242=c\263`=Kd\372<\334\375\003\275/33;\025B8<\256\272\306\273\324U\322=\tx\007>\327\365&>\034\274\223=\227\361\265<\225\344\234\273\351Em\274\321\254\230\274\036\025;<V\010t\275\262\326\312;*nd<\241}\345=\225\004H\275e\272\226\275\312\364k<c\200\210\275R\326\257\275\366\005\032\276\355\004l;`\251\241\275Qa\342=G%\244\275/\331\230<\366k\201<t\372\n<\026{\215=\240\344\255\274\344\264\236\275\"\241\001\2754f\224\274\031\245\325;\234\001\273\274\204>\033<q\215\223<\207R\337<\361QO=%.\271\274\222\211\024\275f}K\275\226t2>\255\222V=\377\036\244\275\000\327$<b%\324\274\270\333\242=\224\237\261<h\320\270\273\373\2213=\033M)\276]\t\245\275K\024\030;!\304E<\3152|\275\277\000\036\276\351\330\324\275\221\020X\275\267\021\'\275J\304\251\275\277\342\263<\204!\307\275hW\252\275\207fQ=cV6=\261\004\013\275\330\016\327\275\367\257\222;\322\311\346;\036\033\007\275\234,a\275\177A]\275\027\317\266<\347\003c\275;\267 \275\"P4=\216\377\014\275\356\237\276<v\316\211\275p\370\316<\273\325\304<\350\006\211\275i\315\003=\336m\232=n\264\225\275vy\240=\030D\372\273\376lZ\275\346\376\343=\214\231\327\274\246om\275\305\252\275\275\363\334\016>s\202\222\274\320\342w=\276\334\276\272o\377\022>\3422}\275\221L^=\212\374%<\220Hd=\\\301\"\275{\320\355=\3448\020=F>\310\274\313\227Y<\263\353\237<r\034\327\274\314\325\225=o\201\302<77k=M\001x\275\354\266\246=\210\024\003\276Jxz<\312HD=\033\240)\274\017H\277=x,\036=a\375\270\275Q5\001<\037\262\270\27522\207=+\347\203\273\342\033q\275E\344\014\275Q\213\247<\225\212B=g\235\034=\330f0\275\005\322J;\216\n\003\276\315\003.\275\334\346;=B\230\317\271\367D\300\275\340\307\227\275Cd\332<c\213C\275\221$\377<\375\236\340:r+/=D\260,\275\353\324$<\226\350\300\274q\2646\274\327\241\001\275[\206\010\273\350\376\037\273?\002\030=\013\354\213=\006C\264\274\005\334\034=\272\022\231=\340\352\350\275\344\224)=\277\232\223\275\352\253\224<\260\262\264;\343v\315\275\212\373\023\274\266)\262<\236S\367<\256\"\014>\221F\233<\303\321\231;\313\326\013=?\247\214<\254\233K\273\007/\022\275\373\257\311<\232[\227\275Z\016\356<v8x\275\274\"\272<\341\312C=2T\240\275\241\240\300<nTS\275\272\272\320\273\224w\213\275h\303\n\274t\310\231=7\234@\274T\325\235\274\001\265\221\275\240\020\211\274\026;Z\275a\203\250=1\234&\275<\274b\275\211\010<\275h\363\005\276\027\1771\275\272\207\257\275\203d\232\275`9\003\276\016\360!\275e\010\334\274\331p\303\275\003\t\034=\231\360+=n\252\204=\220\020\326\275&\350W\275FC\002=L:\200=.\244\316;\037\336\252=\'\214\"=L\177\023\275\246Z\021\275\235{\247;\343\215\253\2757\275 \275Y\023\236\275\221a\316=I\265\r>\273\373-\2759!Y=l\217H\275s\203\320\272\205\320\225=\223\377O=\322w\336\2746=\251=2\376\336=o\271\271<\237\233\210;R\227\004\274\351\014`\275\316]\240\275\335\257K<v\305\207\275z 2\275U\346\006=9\2222\2765\005\202\274-\210\037;\343\020\267=?v\324=k\340$\276\300r\273=\312\303\246\274ZKS\273\232\265\210<#\033\325\273\361Nq\2749C\237=*\373H<4%\000==_\214\275\343\353\312=(n\025=\370k\032\275*C\340\275\335\027\265:\275j6=A\376\373\275axO;\212\'\201\275;\020\262\274/JZ:$[\311<\257\027\r<\0028.\275\331\333E=<\214\263\274Q\344*\275\347\325`\275Bog\275g)d=k7\032=\321\263\n\274\262\224\027=\372\261\005\276\025\256H>9\264J>\374I\331<\256\367\315=\317\232\353\274p\342\253\274G\226\320\274\001\261B\275\262\271\023=K\274\265<\231D\235\275\223\001\330;\252\241s\274\213\343t<M\330t\275\357\317\200=\001C\023\2753\013\220\275\235\311\232\275\202\327\233\275M\r\t=\377\317\361=\355Fa\273u[3\273\344=\'\275\340\236\365\275\023h\251<\210\234\001=\353\305\311<C\366\363<\243=9=\273;m\274\314a\364\273\016\277\226\275\366#\230=x/\002>\206\246\202<\210I/= d\330=E\263\274=\036\240\213=r\215\030\274\250\256%\274)\206\312=&\363N=\t\225\275\274\262\313\005\275\330~\032\275\014\205T=\342\2136\273d\362\264\275\326\305\374\274\373bo\275\204\210\237\275\263\303o\275\225M\337=]6\030=6xL=\225\335>=\000)\343=\256|\275\275\227~\034\273eA\256\275z\026\235=\303z\256\275\350z\036\275,\353%\275)\265\274\275\266\227\344\274\003\313\244\274\334x\315\274\325\3701\275\246RN\275&r\223=\213j\241\275\243\275\235\275\n\206C=D>\205=\2345 =dy\r\274\376\014\224\275\276\215\225\274L\025\377\275\302\006\333\274\315\225\350\275\276\007O=\262\272\252=\272\246\371<\260\300\224=^\2219=`s\036\275\245\231H=4w:\275\"\232\267\274\273\241\341=\322\273\201;\240w\376\273\375f\211<F\304.<*\036\016\275}I0<\275\001l=~\316>\275o]\261\275\312\223K=\244\260S\276\242\017\030\2759\343\017\275\326\300\311<\330V\034=\304\007\027\275\267\013u=e\370\242\275\025\024\212;\007\333\236=\352UL<+V;\274\313\317\220=1\220i:\333\346\270<\222K\227\274#\225\022\275\227\271F=\302V\214\275-9\230\273\352\305k<\226\210p=$\341\270\274\177\337P<b\245\351<\226/U\274\332\002\240=|Q\233=\231b\315<Y\247\261\275\234O\020\275<m\374\275J\233\357\275C}\010=O\013\005>\206J+\275g\004\260\275wx\004\2753G>\275^\217@<dJ\315=_\232\335\275\267\230\306=@\360\362;`\202\246=\350}@\275\231\336\020=?\t\232\275\006\326p=\231\264\216=\246 \027\275\277\263\316=\350\211\024\275\231\343\212=\022\'>\275+F\032<}S\215:t\243\002>O\263\214=\030x:\275y\253\340\275\307a`\275;g\364\2759\207\302=\354=\006=Y\231\r>\021\351\270\274\021\245\210\274\"\271M=\004\220\353<\267\370[=dqA=h\202\233\275u\377\357\273PM\323:\t\376o;\211\263\030=hK\247\275\\\266\304=z)*=\235!?\275\3747\021<\265\006%>F\021F<9\213\322\275\367f\247\275\231e\312\275\374\302\025\275\322\222\335\272\312Sr\274\365\317\276=\031E\001\275um\320\274\300\010\t>3\342\374\273\330\256\237<C\007%\275P\206\360=~\022\001<\241L\235;\002J\247\2755\306\373\275\236Hc\275\363\3425=BZ\361<\034\255\311\273\235\312$\275\371\362\250\273\351\266\374\2746\261\214\275F\312\027\275\326a\266<\253\221\200=\027\275:\274\n\216f=\211R1\273)Z\215\275\376\007D=\375\374\361<\206o\032\275\322\301)=Rn\300<\357$\340\275\276 \216=s\331\322\274\352Uu=\204{\244<M\202\017\276\301\215\026;\265\316\r\274\330\234\344\275\204\253\225;\305\364-=o\203\010<\013 \375<\202\004\005=LA\332\274\324\2345=\r\311\225=_tS\274\305\216!<\006\311S\275O\021\005<T\023U\275\305\2168\274\250f\002<\261\377\323<\247`2\275*2\336=-\311J\275>\210\353\274\3352\212\275\330S\020=\217\343\033=\317w\025=\013%\256\275\241 &>R\211\252\275o\264\242\274\243\277\247=p\300\221=\301\361(\275\224\003(=\205>p\275\023-\254\274\330zn\274\302\352c\275\034\233?\274\036\303\210\275\211\332n\275\327\nt=\342;n<y\350\305\274\233\261==\330S\316\275f\201$;\332m\257\275+)!\275\234W\253=v\337\031\275\245\007)\275\244\324\"=\363\202\203\275kE\326\275\356\027\t=\306v\354\275\025\321\217=[n\325\275^\342|\274\330\322:=\251\206h=\303O\206\275n6U=\034\200<\275\303\340/\274\341\017\365;8\363C\275\2008r<\260\274\204\275\305\2666=\003\266\250\275\255\200\356\274A7\001\274,\362\370<h\311\204\275\311\311\010<\326G7\275\224\222\341\275\256\355\337<\200\260(=J\337k\275fH\327\274\n\303r\275\354{\'\275q\272\274\275up\201\274\340\376\206<\334\223a<\225\350(\276\275\272\217<**\323\2741\032\017\276\277\232.=e7v\275WQ\314\275\267\020\210<\245\275\270\275\376\000\365\274[h\332\275\325\360\235=\263\207-<W%*<Dg\251\274+\224\252<\002\355\255\275\357\323\363;\300\013\305;\272\223\256\271b\341\036=\344\371\003<\0341\257<q\361\262\275\342?\337\275\371\366\274\274\211er\274\353Y\224=>+\275\274<\261\266\275\372%\214=\r\032\204\274\224Eo\273\320A\206\275\020\235i\2750\220\253=\302\252\025\275\310z\375<\312\'\232=\023\000\233;h\215\224\274\t@\343\275\035)D\275~\255E=\002\302\006>\354\217\335;\344#\257\275\307hy=IO\233<<\337\224=\001s\224\275\374j\227\274Z\016\304;\203\207p=1$D\274/EK=\3130h=\276c\220\275\334\226\374<d\267{\275m\240\274\275\253Q|\275\364A\243=\021,_\274M\330\235<\3311\345<\006\204b\275 `\2109\336\2124=o4\330<\034\370\262=\265#]\275\014\022}<\276\203-\275C\330\276\275C+I=\253\031\010=\351\327\236\275\231w\253;\003\027\006=g\001\204=\262\r\335\274\\g\240=@\345o=\206\310)\275\037\222\234\273\320\315B=\374\252\007=N\331\306=.r\006>#\023\306=Q\331\213\273\244\341\331\275\261a\232= \357\023>\342W\030\275\343\307\007;[6\212\275\216\337\252\274\020\322\211<3\205\016><\372\356\275\312)\214\274o\263\\=Y\222\224\273\357\203\022\275\356{\375=\242\006\267\275^H\241\275\215\242m\275\013(_=\201+\371<\274\370*;\373\327m\275\377\306\034=\247\307\252;S\355{;\013\362\010=\254\003\326;\370\261u=!\374P\274R\312\023\276=.X=\244K\255\272\323\261\343<\301\273\277<a\375\033<\276\351\367\275\2310l=\257\361V\275\301\210\350\275\307\363\253=g\246\217\2748&\332\275 \231\207=\0337\207=x\302\237\2758L\000>\215\250\270=j\016\340\274\244x\270\274\371\366\000\274\277\233\231=:\037X\275\221\264g\274\270\250|7p\211\215=\275\356c\275M\240\210=>\251\237;\257\327\227\271\0214A\275\302\027\257\275\005f\203=\206@\3139\266Q\246=\247\246\216<6v&=\255!\267\274\211\302\306<$\260%<\364eW<\360\033\230\274\331,\252\275\323gL\275\210\223\000=K\341t9\266BQ=\205mp=SJ0=\221\n\007>\312\305(=?\013\325<kl\275<\324\330\277=\271a\365\274\243\261\216=!\343\177=\340\221;\275\215T\377<\373\276\354\274\355\'\333\275~M\350=\353\234\331\275HV\203\275\222\243\023>\210e\371\275\377\010\373<\026\320\013=\235\037\213\275\002\247/>\235j\322\274\024\031F\273\333_\372\274\321zG\275\225\345\250\274\025>\t>k}8=\023\370\204\275\317B\271=vFU\274\262_x<!\361\233\27501\277\274d\323\212<\007\347i=G\016\n=L\000\206;8\025E\275\'r\321=\3149\034\275\356\'\r=w\010\032=\235\363\320\274\026\352\020=\014\257 \273G\013\254<\253`\006\275\350\254\213\275Q\342\335\274\216\273\n=\221d\221<\277\260#=7\021]\272\"\037\354=&\211\'\274\001\036\021\275\351]\311=\3348\202\273\014\2265=\006\025l<5\345c<\342\033\262\275\223H\261=\202\357\332\274\01356=\030`\216=Qc6=/\306q\2756\371\227\275\032\223\326:\216\350a\274\214\225\221\274\352w2\274u\345U=\324m\001\276@\031\310\271\0011\374\275\322\355\256\275\020\353~=%7\276=\277\n\235\275\331>b\2751\343h\275\275|\207\275\373\007\262\274Oe\037<\324wQ\274`\244\227\273\246\357\223\275\217]\314\274\247DK\275\373\331\302=\310\264`=\016\216C\275\360\004*=\355M\177=k s=\2500\207<$\352\313\274d\2055\276`\230\347<\327\243\321\275=\260\324\274\256\222o=hE\001\275k\376\206=t\326\227=\212\014E\275\377{\252\272`G\367<\026\020\n\275\260Z\302\274S\036\025=\206O~\275lgQ=F\262\212=be\261\274f\230x=\016c\335\274$\014\244\274\3044C\275\307\256\320\274\235\216\r\275\313]\327\275S\031\203=\270?\350<l\217\202\275^%\255=\251\345!<\030Y\000<\273\250K\275\034\226\315\2752T\344\273\374jP=\265\215\231\275\330s\311<1\376\002\276X0\001<._o<S\035#=o\251\265\275Q\t\'<\247W\333=T\211\226=\024\355\346\271f\365\365<\346?\345\275\265\253\025=\312E6\275\326\037\031=\337\201!<]=\252=\364\331 \275w\333\252=\217\333\244\274\003:J\275\224\243\257<!\301\n=\241\035F\274\241 B\275[\236U=\366&\301=\371\000\330\274\342\356\227=HJ\033\275d\215\277\273\331\340G<\364v\314\275Z|\233\275\215\350\202=T{\236<\266%\360\275\214x\226\274k\345\233=\207\274\367\275\212\020\206<\255$\242\275\257v{<\341\365\247\275\367\276\310\274\002,\224\275]\323\236:\n\177b<\202a\242=\354\035\342=\267\361\224=\225\321H=\363J\263=\230\301d\275\020)\205\275\2047\317\274P\250$<\261\035\244\275\"\031\266=\314\023\207\275:^\253\275\236s\033=\304x\254\274A\034\211\274\225\245\300;\'\267\341\275\016$\343=\363\225\270\275\370\363\366\275v\377^\275_H\260=\342E\030=\022\306M<\366\351W<\340\017\004;h\305\037=L\235\216=\236\264;=)\305\0009\263\r\200\275\335\322#=\001\352\033=\263q\232<\334;\034\275\013\322\352\274l\224\257\275\260HY\275u\014B\275b\221\225=\333\326N;\225!\354\274\356F\013\276W\352\t=\002\267\226=_;\372\273\202\266d<\200\311\323;\314\273\t\275ai\211\275g\325\025=&\241\216\275\0063\353=W\222\321=\316/5=\026f\214<\037\237^\273\313\230(:D0\020>\226\266\025=\355\221\036\275Y\340\346\274u\243R=\312\266\344\274A\353\023\275\014,\372\275,\335\273<\007_\205\275%\227C=\333\243\312\275\234\206#\275d9\227\275\214\003\316=\367\016\350\273\362\266\346;\301QI=\314\352\t\275&*\315=7\264\203:\307\002\236\275\236\347\272<\\\000\220;\305;\244\275\204\362\215=\370}\344<\031\253\272\275\2213\332<\320L\264\275UC!\276\276\201i\275\351Z\223<\000Z\004\2768\263\322\274\305.*\275\247\215\314\275\227\204\204=\244\016\213;\255\037\356<R\374\221\275)v\221\275\t4\236\274\336\344\025=\001\335.\275\270A\233\274\3064R\275\212\343<\274\204c\265\274<\264\t>7\367T\275\364\373\220\275k\205J\274=\233P\2742\330g\274\3426\017>Wf\017<\364xJ=:T\035=w\316\237\272\0346\350\275\2327\213\274\322$\256\275\326<A=\216\276R=\214\224\325\274|\243\036\275\023\346\257=\374\356\240\274N\226\211\275\344\177\233\275Q\354\n\274\372\206\036\275\346a\006>^\000S=\373\327\274\275\236\215,<!\272z=\205\256\272<\000\267\363=b\314B\275;\201\312;g\214V=\366\226\341\274\344\272\301\275\256\273L=\024\335\002\276\025\006\006=W*\254=\263\335\r\271\006\366P=\260\317\220\275\366\236\n<I\017a\275\245\271\023\276\267a\237=\353\341O=\315!\346<+U~=\031\313\315\275\305\371I=\332\3318\274\243\357\214<\021\204\000>\227\246\n=~\314\026\275i\302\257<\307#\322\2745\254\213=\336\373\362=jc\356\274\355\031\351<\310\013\312=)\337\0049o\214\220\275\336\362\010\274z<\370<\337E\253=w\215\025=\322:\315\274b\254$=;\347\225\274J\330U<\267\004O\275\375_\037<&\246d\275+\273#\275x\355\\\274\351\227\301\275\312C\213\272\324\331\260<\232|\267\275\245\002\342<\213\353\r\274\242\344e\274\345\372\007\270\302*z=\0205\230=J\031f=\t-X\275^\210\307<\330\361\301\274\006F\035\275\213H\202\274\266<\006\275\023\037\016=\313E\260<\377\027t=\257@^=0\\\035>\201ge<\276}\277<\346\007;==R\347\275S/\024=iz\246\275\233\n==y\n\252\274\177~#<\265a\006\275\023\220\033\275\313(Y\275P\270\275\274\016\356l=\351\325\020=\233+\207=\005~\377\2747C2\275\340\360\261\274\016=B\27456&\275\035S\236=\001kM=\301R\304<S\020\302\275\276\253\335;\351\237\245\274\254\016H\275g\"\234\275\020\275\304\273N\367\207\273\3214<\276\344e\252<W\240\001\275=\201c\275=\3065\275\272_1\274S\237\037>\370\361\270;\261\234h<\204\t\211\275\266\271\026=</\032=\265V\265\274\244-\245=\211&\023\275\300\262b\275\266\250?;\321\021\000\275\337\'\006>\371\350\230=n\260\253\272}\237\360;\336}\020<<\210S\275\360;$>>\230T\275\270\237};\014\224o\275.\324%<\334t6\276\303QD=\324\202\275<\202qs\275n\244\034<\356\033m=cJM=Z\007N;\204l\317<\215\030\033\275\250n*;\262X\360<\027E\037=\364K\273\274@\344+\275_*\210\275\016#(>\322X\351<\245\215\312\275\253\226o=\036\225\n>~\270\034=\2066\246=\000\226\240<s\3325=p\225G\275\266\240\016\275;c\010<\271\221X=\\\226\273\274\254J\225\275.#E<r~\n=\211[\271=w\251\205\275_t\315<\242\342\215=\300\203\037=\263z\242\275\340\177#\274]\351\037=\305\315\\;K\232\262=(\333\235<\244\306\200\274\330\370\303\2753x8\275\027\245\307<(q>\273\001B\360\273\244\017\347\2748\272\360;C\023#\275\177\257x\275\300sI\274\272\375\021=\177\204\032=\017\201\340<8\337\254\275\2079p\275\222\006\274\274\252\241\267\274\203%\260\275\317W\233;h\024e\275H\240\310<\252\252\203<#\353S\2757x\357\275\001-\n>u\004\032<\037z\\=\213\035\n=\243F\343;\026\300V=\301T\220<\373\343>\275R\316\032>\0207\303\275is\232=a\234l=DL\262=/\254\021=sNC=\2535\200=\355\224\001==\317\222<\256\363\014\275:\346#\2750($\276\272\014W\274\303\257\252\275\n\270\004=$\334\344=\253E\367\275\322_\361\274\236),\275\017ST\275\204X<\2753(\375\275n\246\271=\367Z\201=\005D\321<U_)\275\r\001-=\235\027?=\222\326\325=<\340h<\202\272?\275\343\324\314\275\\\226\251<:\310\301<\2357\023\275\204\221\004\275-\216,=\353x\236\275y\232\273=\375{\006>\322y\037=\347eK\275\262g\227\275\005\346\326<\273/\227\275\222\311h=\263\210S\275\327\356\306=:\305\333<O\265\017\275\234\316\177\275SI,\272\274\301\352\2741\006\326\275\351\005\220\274\367\207\316\275v3\374\274\217W=\275\372\321j\275\023\307\213=\351\320\225=\276E.\276\\\311\302=ZM\235\275\224N\003<\276R\330\274\036\244\203<]H\256=Mr\347\274z\032#\274\255\226\233=\334vY=\307\270m\275\331<\321\274\022em=0\2237>\357\301\311\274\235T\230=\223\235\312<J\204\245=\262\005\231\275Q\342\337=\2302_\275\025\375\000=\203G\302<1\206\367\275\2176\330\275=R\273<\306\224\243\274\361\244\367<\237\206\031<$N\032\276\334\270\217\275\rR\207\275\266m\204\272\255\266\274\275@\265\264\274{X\014=\341A[=\251\314l\275\321\004\351<\000o\r=d\362;=\317\277\232\275$\023\371<\246\216\260\2756\252\310<\327Ma\274#\350\010>\370Z\025=\327b\021=\024y<;\370\031k=\271\017i=\376\303e\2757p\320\272\t\373\241\2755\301\373<o\354\023\275K\350@=\016\302\311=\2034/\275\377\275\325\275|\002\366<\312p\374\274\317Y\2419\032\036\241\275c\341\224;\352\t\343;\312\246o\274d\363\036\276U\213(=\310\021\201=@\372\203=\014\344\360\274\277u\n\275=\312\017>&Q\210\275\306J\305\274\361\2779\275\331\240\304=\256\310y\275\007\234\213<\342W\354;\222\261x=cD\322=*_\236\274\352\022\337\273\320\306\251=\010\010\206\275\311e\027\274\354?\353\274&\275\310\275W`\201=O\225\361<\315\330\342\274B\370\254=\252\316\220\275\024\247,=\215\035\221=1\275q=\010j\303<\342\257a\274\216\023\362\273D\233d<\014\352\235\275\207\350I\273\325\365E=\266\355\r\274\357\323\016=]\231\221\275W\370i\275\037\032\035<\205\372\221= 2#=\273\307\304<\225)M=|z\335<\303D\307=\004\366\"\275!u\210\275h\352x=%\350\355=a\005\265\274\203\004\364=2\004\240<\374!\323;\352\343\t=zY8\275\332[9\275\263\251\300=\323\025\206\275q\372^=!\\\016>\355\363S\275\251\001\317=\264Q\252<f\340\210=\270\336C\275\250_\217<E(\323\275\301$\211\273\356\213\260\274\233\364\362<ad \275\317\230:=\261~\r\275\013\371\330\2752\020?\275\217h1\274P6\000=\267\302/\274m\370\304<Q\"H=\261=\246=0\\~\275\010\017f\274\331\331\021>\364h\201=\276P\035\275+\213\226=\3342\353=\372\024?\275\210\331\262=\305\244Q\272:\220Y>\267\351\004\274\205\264.=L\337\372<\261\322\335<\203\022\334\275\374;\032\273\347B\'\275\353y\360\274\337]U\275\205\347\203=\005j>\275w\025\321;\377-\300=\321Co\2730\375\251=\347tw=%g\302\274{\022_;\266\244/=\340\n\210=\nfU\275M\335\213<J\256\250<\036@V\275\202\347I\274_\250\'\273)i\242\275\232\207*<SA\241=\255\242,\275\354?\016<E\260\346\275\244\233\"=\253G\226<\374s\213\274R\260\365=\370A5\274\272\035H<\347\357\351<t_\205\274\'\203\275\275_\324\267\275\331\231m\274g^H=AV\"\275;\255\033\276.,n=\350\272\227\275\370\302Q\275\030\014\316\270\340\257\333=\032n&=\245\315\367\2745c\341=\325_~\275dnW\275\031\307\347\274\250\206\222\273\017Bt\271a\375\'<x\274\022=8\345\237;\376\332\277<\244z\331=\016%\345<B\223\303=%8\253==\206\341\274`]\327\273u\305m\274\024\n\t=\350gS\275\032\242\005\276\251X\227=\211\337x\274\370A\243=\327\224i=\206\317\215\275&\352\023=t\206\316\274\177\177#\274\r\214\261\275\257\237\210\274T\363%<P\310\227\274\325x\250=\216Z\346\274\231\214\211=\014O\217\275\022(\342=8\357w=\t1\206=\352\212\227=_f\014>\301\023\312\275{\356\335;\324\271\205\275b0\031;<\274\207<w\023\224\275g\')\2755\240\317\274r~\225=\217\027\005:\263\356\034\274/\267\036>\034\275\252\27426y=\014Pl\275\366\341\262\275}?\267\274\3655\334;\n\225\233\275\\S\025\274\235r\232<d\261\315\273\365\334K=\310\226\322<\262\205\246\275\177\305H\274\231\202\001\275\300M\206\275\3129\371<\212\025\302;\036\254\223<W&\322<Q\274\003=e\001a\274\270\022\001<\366\007m=\036Jq\2741\211\210=\334\030\031\275\0327\222\275``\206\275\333T:=\207(6=\204.J=4\222/\275\002g\037\275f\215\257\274\355\010\313<\223= \275\037\035\350=\273\231y\275\213\177\335\274\331\2324<\311A\035\276#\222\272;hI\343\274(\017\010\274\306zK\275\260\201i\275\324!\010>\375`\035\273\226D_\275\327\341\244\275o\226\205\275\275\2347\273\020\342\r;D\236\216\274\213\353f\275\314\275\245\273K\232\321=\342\240\210=\346L\034\273\336\241\217\274\213\237R\275\0027r\274\214K\345=\354m\335\274I\317}=\001\363\035\275b\260\216<\352\244m=E\377\261=\247 \244=\025\364H=Q\031\346=\217i\031<i\341\233<\361{\325=\231Z)=\366\272\226=\227\017\274\274\205\023\220\275\362m\300\275\203j\377<\260{\355\275D\307\215<\222\372\325=g\n\276\275v!^\275\300\263\355<\037\371\301<X\372\221=#\250\360=\242\275\234\274\001\214\025\275\245\343\304\275\\b\023=\341R\026<\354\366\014>~\201~\275&\260\301\275k\206\352\275\246\321\214=\262\227D=.q\241\275;\016\354\273\213\262\037=Z\373\340=\327\347\265=\251\3503= \027@<\"\036\244=\332\344\225\275p\272\014\275\337{e\275\253\246C\275)_>=:\036{\275\025:\227\275CR\037\275\314\335\003\276\331\010\243\275\241W%\274-}!\271UO\211=9\010]\273\336\336\216\274*\223\320\275\310o\220<K\t\r\276SK\247\275\022\325`\275\033\026\202\275\341a\n<\331\260\370\275\205\216^\274\366V\000=\212\327[\274\323`+=\001\311\206<\321 \352\275\247\225\025\274++\021<\313\021\007>c\353\037\274\320{X\275\343Bw=\211,\007\275g9@=\342n\215<\214\002\314=O\360\320<;\357\013\276\241\225\261<yF\206\275\371\277\303=\000\nt=,\256\241;f\033\237\275?\375\177=\204\030\326\275cl\266\273\306\254\010\276bG\357<B\310L\2731\016\034=\370\035\314\2759\005\224<\274X\005\274\037\030\263<\263\300\231\274s9\200\275n\255|\275\005\264h\271\307:T\275P(\213\275\310c\340\275\375\374d=\254\212\325;-\277j=\362|\002\276<\2777<%\361f\275\242k\010=\310\205n\275\253J$\275\237f\274<\355\376\263\275\351P5\274\306\321\024=\351g\033=`!\212<\330d&=u\342\326=\337\316+=\036^\264<\206\370\365<\273\362>\275\352\334\263=Z\262E=\032,`\274,\234\236=\230\234\267\273h\262\211=ys\340=n\304^\275\365\373J\274,\223\366=)_\365\274$J\251;+==\273\005\362\020:=\325D=\263\245n\275\344(\252\275\'\260\242=\330\347\377<K\311\234<\346\352>=\245\221a=^\352\341<\330j\005=\234\366\265\274\032\204\240\273\337\010\202\275\314\013\005=\001\\\274\275\001fT=d4\232\275\204q\000=b1,=\367\r\204\274\304f\326\275k\236\263;\014\311v\274\350/\367\275>\322K<\267\305\240<]\003\324<(\327^\275\t\017\266<8b\235\2751\301\'=\025R{\275\203]\030\276\035[N\274q\354\027<\037oL=\361r\274\273\211\374\215\275\201\030}\275\372{\220=i\325\352\274\334\205\262<b\357\266;`\221\257\275\316\317\325\274E\036\222=\321N\n\274\331w\371=\025?B=\022F\363<Qa\202\275\274\273\320=v\330\t\276#l\377=\\\023\323=y\313\314<\241\343\021\275\033\355\216=\306g1=B\323\263\274?\353\031\276o\2473\275\327\273@<\301\2247\272\256\\\002=\250\347\202<\311\325j=\237\242\325=b\244\030=\226o\316\274\236\224\013=\307\306\322<y\227\355<\265L\210\274\371,\200\275b\305,\276\212r\355\274\262\204\364<\366\254\216=\031!\327\275\236\2371\274\033\277\233\273Z\332\204\273\230^^\275z\235\030=\000{\225\275\210Wo=\230\026P\274h\202\324\275\367\274\376<\255v\r\276\215h\273\275\271 \232\274\274\376\253\275\004{\263\275\272\275#=\362j8=\022Hi=@\220\275<\004<\237=\230\025\244\275\215\361\340\275\037\322\277\275\026\302\321<WZg\274\304>\274\274\243\300\235=\357\322\247\275\1778V=\216/^=\322\263\360<\336\220\210=7Ej=1q3\276\344\034d<\036\006{=\201/}=\'\212\251\272.L\373\274\354.1;\310\203\"\275\360M\'\275pdV<\265\177d=\'P\224\275L\236\342\275\234\216U=\202\333\030>MW2\274k\227\366\273\357\256\246<\236\364\260=U\374\334=5\372{=\331\261\376<\242\242&\276`\200=\274L\212\025>\336\334?\275\213%\006<p\027\220\275\226\371\017=\"Yj\275\2435\007\276:\273\007\275\006\224c\274c\021\342\274Y\236\300\274\335|\340;\034\235`=\325\316\210\275\334x\331;\350\226\273;\252\200\212<\274\n\240\275~U&=\224\335\274<8\351\231\273(\324\240=\n{\207=b\260\200\275q\354\024>$\022\005\274!\177H\275\350\201\004>\253\035\222\275\207\261W\274G\3245<v\374\370<=\300^\275\217`\202<W\323\006;\221\204\220\274\007@\032\275.\315\010\275I\347\327=\027\215\222;\371\240\241=\024\361\371\273\245\251!\275^\356\354<\273\025\036\275\273\371\271\274\216\n\352=-]{\275x\262\241\274\220\312\330=\214\030\357\275fc\215\275/e\254\275\341v\211=2\223\234=\017D\030<\332\236\031=\025#\247;\3036%\275\340\022\035=@D\225=\347\363c=6\214\212<&}\237<!\277\005>`\233\212\274\272X\210=\367\231p\271\322_\201\275r\223\276\274\311\212\312\275\020\342\314=\336\321\213=x28\272\311p\200<t\252S\275BL&\275\344e\357\274\354\016\210\275\223\333\315<\345W\216<\362\215\021=q\022\005=\002~\002<V\253m=\202Vx=y\237\235=\013\3702\274,!\323\273c\210\232=\261S\t=\005\177\264\274\342\243\264;\230\327\206<\004\035\360\2745o\200=\177\255C< \335\334=\355\251\014=T\214\262\274\0133\342\275e\274\223=\326d\026=\362>\234\274\'\367\314\273L?o\275\311\226\334\274\014\007\212=\233(\036\275i&\034<\265\016\211==\361\257\274\031y*;4&\210\273:\214-=PR\345\274E\371\003\276\227Ul\275\315\"\247\275=\367\275<\2304#=\025m\275\275\262\324\272=\351\340\000<W\330~\275i\333*=G\313\207\272Q\026c=\321\2146=\377]\243\274\311:\200<y\032\301;\362\206\r\275\274W\220=<\214\010>\032\213g<4\233\247=`\013\001=\250R\251\275\327&\224<\250\210\325\274\351[\222\275\336\325\030\275\2173H=\231\356\001\275\2354\005>\320=\311\274w\327\346\275H\245^=\217\273\377;e[\203\275<\224\014\275\003\214T\274\264\230\027\2744C\331\274\306\252\024\274\311\223\302\275\345K\035=\257\311\003\276=\035~<\242(\313=\315\320,\275\307\316\274\275#\0222\274\3712\345\273\313\273\355\274\\\242\t\276\301\241\306\275.8\r\275\\\323\307\275\216\0025\274\323\3713;\310\277\314;r\247\316<X\031H\274Q\322W=:\257o\275\032`p\275\272\220\035=\260\256->6\374\226\274\301\347\336<5\226\314\275\376\372\263\274\332\262\254<\251\277\226<\237\037\217=\024\210\302\275{\'\r\275OW\037=\305\244\303:\016\314\010\274Dy\357\275\346\266\333=mu\320;\312,^\275\365-\225\275\351\345\312\273\346K\273\275\203\2611\275\315\312\344;\234\005\357\275\013\335\355\275\204\244\205=\225\241\202=\177\022\206=\316\372d\275q?\270=]\314\254=T\304\257\275i\201\264=\t\2701\276\201\265K\275\"\270\270=_\240==\200,\254\275u\357\342\274\340@R=\007\336\315<(\377\000=\315\245\257=\r\000\r=CYy\275+4\227; \000z\274\"Z\202=\246r\177=C\317\302\275{\234\002=x\177G=\307\200p\275\352\2146<\254UE<9&\322\274\356\346{\275\000\233\250=\220\205\310\274\312\251\305=!\321\240<t,R<\000\370\204=\253CS\275\245)%=\362<\006\2752V\354;\\\223P\275~|\002>w\037E<\241\025\220\275\227\314\000\275\314\367\315<B\2746>i\354\256=A\027\244\272\366\324\037<\307\270\206\275mq\027=\343\206\r=Q%t\275M\t\003\274\246j\202\275\206X\343\275\241\370\300<\321\215u=\356\336(\275\251\325%\274`\250\222={|\\=\017;M\275@\206f\275\270\374\255\275{\373)9@\320\346=~\260\300\274\223b\231=\007\2733<(I\314\275O\216Y=\307\347;<\002!L=\367\004\351\274o\034\326\275\257\277\274=n\016z=\t~\305=\211\364\225=\032\332\254\274wU\335\275\333\231\336<1O]\275\224v\356<\246\340\020\275\225-\036=\271\221\214\275\npP\275\207}`\275*X\315\274l\344\312\274$aI\274\254\263C<\302V/\275\243\235\243<.XD\274T\325\002\275N\235\036=\210b8\274\022y\017\275\210\031\005\2767\261\021<zp}\274q\035\373\274\301\300\005<zs5\276&Q\027\274)Q\330\275\203~<\275\340\233\211=:_u=\335\235)\275\2272\340=B\032\032\275\3346\272\275\372S\014=\351\355\342\274U\310\021\275k\357)<:\344\376\275\374\345\342\2756\3053\275\260N\217=\033\020\037\275\234\017\002=\347\302\242:\255\0218\275g\235\001\275\276\245Q=\224\266\017=<C\016=\247|:<5a\255\275\004\222\273\275\206\010\207=\242\213\2159\356\331\203\275\005\032\025\274\336\230o\275\203\317\215\275\373\274\t\2759\366\204\274\020\334F\275\323$\302=\333\031\326=9\303\003\275\354O\016=2&\227;u7\375:\357I\246\274G\343\003>\301\275\002\275\341\t\\\274\256\315\025\276\"\217v\274R\335\025=\345\355R\275\352\032+<+\340\333\274\266A\213=\305\300\033=\033\036\201;\245\2544\275B\332?>\021\315\326<\356\260\364<\376\245\214<\365u\\=Q\367B\2741\001\216<\312v<<\216\351#=\236\366\253\272\201\374\323\275\272\252o\275\277$\030=\345v\221<a\246\357<\373s==\"D\357\274\325p{\275:4\242\274\360\303 \275t\261\311\2751O\034\275\002i\220\275^(J\275K\356\210\275[\347\211=\211#[<\343\350\214\275\321\\\005>\352\3507\275B\364y=s\231\213\275GJ\233<\t\017\014\275\272o\266=l\240\235<%\367\304<\327\350\017\276\211\373,=\024\274\276\275Q\241\346\273\347]\277\274d2\222\274\347\222\006=\010k\326=z\252\244;\353@\016=\013-\305\274\277\225v\274^\376\036=\202=\365=\370 $<y\017d\274\306p?=\342m\207\275\261\341\004=p\256\224;6:\';z{\341\274\227\"\010\275\022>T\275q/\333\273\322\203\214=<}\344<\001\010u=5\220[<\361z\322\273)\371\204\275\2146\205\275V+\372\275\232\340\231=QV\320=\322&\331\274^1\026<\235\251\263=l\255\324<\\\323\223;Dv\330:\"g\207\275\016\234\263\274\320%6=^X\231\275\363\371\306\275\021\203\023\275\006{\014\275\362\205\204=\232\311\031\276ZE\350<5\010\343\274\221\327-=+\360\364<\322M[\274\232\355o\275\365\335\304=\323\260\271=\003i\221\275$&\270=E\373\220\274T\207\004\275\311H\313\274`\037\371=0\233\223=\333e&\274\213+#\275\234:\203=\231_\331<\352\031\251\275fCI\276_\264\217=\265\363`\275P\303(\275\013co=\346<\004\276\261\333\216\275\271a}\275\237\364\243\275\2632\231\274U[\317\275e\222\331;|\244\207=+\006\232=\364\320Q\274\367\365\r=\013\262\237\275\354@\227\274\204+1\275+\'B\274\3226j\275\317\272\332\275_\277\\=!L\010\275\342\275\025\274A\2424<\304\335\252\274X\366\273<\007\177\312\273{d\277=;N\326<\263\035\021\274\014\035n\275\356\271+\274+\243\022=\233pQ\275\314&\246\275\244\"E=\221\237\300\274\362\201\346;\273>\351\274\027`\203=\2456\365\274\231\017\366<O\276\252=\037\237\234\2743>\334<\200U)=S&\264;\243c\247=e\215f\275*\017\322<\231\352(=\005`\225\273\241\276\264=h\021\363\275\220<\025=\020\t\212\272\375@\024=\200\326\242;!\351\270\273\00565=\017\251\256=\355v\303=\373.\216\274Jx|=\367\244\035<\016\263B=\255$\177<)6\304\272g\261\323\274@,\311\275\207\305\312<\267\021d\273\'\346x\275\317}\224=g\000\035\275\345\335\327=\332\257\005=wM\235<)\270\020\276\352\023\004\275\274`.\275\310D\251\275|%v<\215\321A\275\260\005=>\360\207\350=*\336\251=7\'\337\274q\021\273;\355\220A=\277\324\212\275\246\032\203\275\225\345.\275h\374\345\275r\312\214=\343:\010\274\303X\273=)!+>\373\014\274<pmR>/\r\230\274\235\371\202=\211\204:\275t\033\241<%e\262<\024\033\346\274\245cf\275\231]\r\275E\321\257;\246\307e\275\267\004L\275#\215B\273}\t\224\273\204\214\340\275\005\340\227<\262]\n\275\315f\n\275\227\244\264\274\350\016_\274$\3734<2\367\001<\251?F=J\016\271\275\"\030\035<\276d\273=\377\200*>U=\216=\253\267 \275\200E\301\274\316\237\004=|k\177\2750&\323\274\201g&\275\3179\353;\016\274\261\274\232\277\227\275-\352_\275t\213\010\273\003\364L=r\206\350<8\006\235\275\357q\017\275\343\"o=g\202\207=&\274\r=g)\365\274\266]\222\274z#[=$}\322\274\245{b\275\233\353\317\275\377W\030=H\210\364\274N`\266<\322(\367<\223*R<0G\201\273>OY\274pg(=\301\224M\274\307\305\344<\225\301\017\275\226K\300<\353\034-\275\327b1>\344~\020<\216\'\243:\030\\1\275\356\225\010\275\377\253h\275\237\224,=]\262\213<;\331Z\275\245\302\032\275a\312]\275\356\323\220=\302\346\005=l\242\345<\360S\340\275BX_=Q\270\n\275\360m\006\276]U\321:\264w\022>\353\342\363=\217+r=\2563\"=\246R*=|\253}=\223\236U<,\347\302\275}\274\217<\372!\224\275\225\006\014=\207\242\361\272\226f\255=\244qo=\024ka=\244\270V\273\260T\245;\212\022\265<\013\372\352=\347\353\234\275\016w\230=\027n\265\275\263sn\274\245\251\'>E\353%\275Pp\001\275\010\304w=\214\236)\274\247n\312\275\362x\271\275\323\314\201\275;\255\315\2749\203\005=\233C\224=.xn\275\2415\033\274X\036\360;B\234\224\275\362`\243=b\345\227\275\004\365\276\275\213\0177\275\301JF\275\2235\260=\240\346\354;\355\322\017=\366-*\2749\023\241\274p\010(=\222\276\265\275U\216R\275b-\225;\240\204\207<\r\205\262\272eu~:5v\324\274\252i\324;\360\003_\275\276\0239<\345,\237<4@+=\363\3672=\035X\254\275\342\025\210;\027\304n=\374@\213=\316`t\275u\274\017\275\241n\204\274\326\206_\275\210\365\016\275lYq\274\013\"\247=\204\264\253\274.\254\003>\214\323\224\274S\030\201< \306\331<S\235\242\275RN\037\275\031\361\376\275\274 \017\276p\341<\275D\324f=+w\337\275v+\3609\261\241\257\275\'\362\231<\305\t\266<R\212\225=\374s\225\274`\007F\275;TJ=\311x\320\273\311\021K>\266\032\236=\216\323\263=\025\323>\275\3642w\274\275\227\232\274@\320S\275w\3544=k\235\352\273\021\273+=\260w\252\274\370\233\017\276\354w\225\275\265\320m=\246\201\271\274\'\305\210=u\272\337\273+\361-=\023ny=Uh-\275\n\035{<\363\006%=e\255d;/Y\376<\014s\013\273;\304\370<\267\300\325<\001\256M<+D\255=\006%\035\275\307\'\334\275s\202<\274\271\240\203\275\230\201\202\274\333W&=\262\263\263\274\267\254x=X?\344\275A\206p\274\327\031\323<\"\010\211;\324Z\r\2766\032^\274\032\007\332\274\010\247\024=\021\225\304\275\000-\341<\373\256\262=\212\177\003=8\242Z\275\232C\336\275>\341\366=\317\333\202\273\177\301\200\275\302\246\223\275L\210\022=3\252\221=\341 \271=\010\3101=O\250\211\275\017\352\030=\362\020\337<\023]f=d\375e<\240s\033<I\304\334\275@7G\273\325\364L=\333\302\231=\325\241\240;\302z\224=\203\345H\274a\350\232<\221*\272\275\370\302>\275\272^\361\274\335\300\214=\353IL=\243\252\240\274n9\237\275\2466!>5ln\275\203\364\001\276\0061\246=$gH=\377\001w\275=8.\276\302!\260=\272d`=9\323{\275\177j\330=\242-\205=\216A\277\275\205%\026\275\303\365J={\'\017\276\256\347\245\275\013\326\223\275\030\036\315=c\221\230=\332*[\275\213Nq=\372x\303\274\253\0217<\225\272\332<P\303\342<\224\024r\275_\024\034\275\335\327k<\226ev\274O\346\343<SQ0\275\332\366=\275#\313\022\275\330U\353<\327E\007\275t\n\215\274=Q9\275\300x\210=\3301\307=\005\nX=j\236\324\273\'\276\006>h\213\223;sP\253\274\231\332\220=\021\231o\274\257\376B\275\227oJ\275\022\004q=\276\353;=\215\313I\275#\206\342=A\033\207=\372\021\341<\257u\346\274\002\356#\274.\220+<\205\372\360\274\373\326H<\332\t\236<\\\202#=\273\352T=\317oO<\267\311\204<\016\013\246=Dj\225\275\263\177\313\274\205\230Q=\200\265\223=L~\201\275\212\214\205\274H\234C<\004\307\005\276\303\273\036=d!\207=\371\260`\275M-\001\275\207\314h=f\250\236<\346\330\265=^t\321\274>\316S\275z\234^\274,\246\316\275\307\236\305<\241|\r>{z\231\275u\302\305\275\247UN=K\027\327=\275\265\007\274\356i\267\275\316\362%;\205\313#<@R\010\276\364h/\275\033Ao\274]\243~=\241Z\023\275lV)<\327\374\251<Y)\310<\"\273D\275\031#5\275\3779\\<Mr\223\274Iu\260=fh:<\234\221s\275\346\035`\2755]\244<\017\312\274<\264\325\222\272\361\320\007=\030^6>J\276\217=\254G\360=\312H\270=\227\033\226<\311\243\260\2759\362\236<dDx\275z\262$=\241\227\351<\236\2119>\010\213\215\275\2677\376=\266*\217;t\205\037\275\376\273\177\275\"\221\036<\013v\331=\267\307\023\2751\024\331\273dUB=n;\263\275\342\315C;\333\305\356\275On\226=\371lr\275h\2579=N?b;\340\301o\274\352C\214=P\237\001<\217\205\013=j\252\017<\367\370I=A\273\235\275\302\355:=x\263\306=\346\004\233\275l\206\031=Q\032\276\275\214\345\256\274T\253\222=\303\232\210\274\336v\375\275\267\214\377<z\323\221\275\211,\210\275\3127\256\274\221F\230\275\332V\004;%\3143\274\226\313\316=\214\"g\275H\370\031<w\347\357\274n\'\251<\262\352S\273\375\367\203=d\013\000\276\346\177A=\030\013@\275\317(\233\273\202\245\317\275(\264\265\274\351\222\251\275\247*\231\274\277UH=\370<\326<\250?s\275p\303\313=\271\251\263=\177\212\262\275\342ej\275+\304o\273\033\036=\275\3679X\275\234(\344<\3141\315=4\225\364\274\376\021K\274wL\225\274\r\211&=nv\264<D\366`=\rc~=gu\250=!,4\275$\030\276=\177\355\021=\216tO\275C\021\203=\224\366R\275\r,D=\004\216\264\275\316!\230\275\2352\316<J\361\325\274\375z\222=%\303\336=\266\327\337<~\247G\275\254\267&\275\t\267\202\274\014\006\261\274\204\035\033=\231i\253\275e\225\313\275\303\210\035=\343\305}\273\2731\252\274\242\215\253<\343\236z\275\256\231\256\274\216!\207:P\237\247<\220i\303\274u#\"=\303\375x=\030o5\2746S\023;~\320\211\274\205\247\235\275\262g\330\275^\201\033:5\352U\275\232\317\231\275n@A=3\253\021\275\217A?\274\033o\317\274\275g-;%\257\213<\003\213\362:@\267\201\2752\263u\274PL\264<\336\225\206<[\371I\275\346=\204\275\325\2464=hp\242;b\2016\275/\251\306<\214w\350<\314j\325\274\004^\331\273\311^E\275\013\213\353\274\377e\234\274\021\031\320\272\302!\317\274\301\244\241=\344ZR\275.;O\275\310\007\t>P\345#=|#U\274ZG>\275\367\347\003\275a]\003=\245\263s<@\210,=\257%\356=\334v\022<\240\224\345=\341\310r=q8H=\276\261\314=\364\317\234=C#n\275OR\026\275\220\245\364\274\371\357\204\275\023\020\270\275\031Z\307\275f\036\250\275e@\304<\270\340[=\264\362K\275\332T\363<\300\267\221\275\364u\320\2754\321X<\266\232\343<\253o\346<\363\373\330\275\210\217\207\275\231\341\025>e>2=o\227F=\235a\001\274!\234*\275\022\202\036\275D\341\215<2\246\213=\215o\213\275v\234H<\203\300K=Q\254r=\252h\262\275\357\367\205\275\353\004\335=e*\257=\207\\\200=#\306u<,\005\300=p\356\017\276U\315X=`o\216\275\313&\014\275\013\025\005\275\327\226~\275\377\'==\273)\361\274[\311\374=g\345r=y\330\212\275\r\256\200\275\317\336\006>\223]\270=\355w\350\274\004\2415\275}h\002\275\351\002I\275\235\251\265\273\346\300\261\274Jj\242=\300\024\307\275/}\005=_\2050\274\340\302@=]\232\230\275\225!\027>\261\363\304\275\236\233\253=]\231\314<\034\267\221<\203:\206;\206K\014\276\362\264p=C\375\260<\333\033\025\275\2059\n>\250\264c<\306V\234=\323\230\023=|\326\333\273\236\357V>qp\251\275SVl\275\365\353\024\275\327\353x=`\272W=\271\360\017<\262iJ=\211\340\025\274t/\255=\"q\314=Q\032\214\275\373\256\275=n\231\305\274\236\014\014\273\274\237p;\022jx\274v\256\235:\325\364\023\276Z\274\265\275Y\271\261\274?\001\021\274\227\001\271=\010r\351\274_W2=\327\370\240\275\263q\272=l\320\221\2751I\200\272\331k\252<H\266\371\274F\214\201\274\017\237\220=9\033\321\274f\321{\275\242\344k\275\342\222Z<m\273\361\275Qd[<\026\n\222\275C\307\305=\265N\004=\026\227\264\275\212\311$=O\226z\275\013\003\014=\350\222\373<M\335\352<\254>:\2756P\020=\241t\n\276}}\027>\301\237\020\274\264S\217\275\274\333\321=\3647\362\275\335\036\242<\037F\261<\330`d\275\226\220.<\034^G\275\344\345%\275p\202\245=\317\222\246\275\324\330\003=\250\242\005\274\311\261\033>s\302\247\275\260]\275\275!g\273<p_\361=RF\234\275\247\373&\275\346\307\003\275\\\204\t\275\243A\n\275\241\335w=:\201\310\275\252\205\247\274\276\220\232=\323\307\340<\322\315E=Ve\026\276\237\233\016<\020\234\234\275\327Zr=\010\206\001\275\014&\312<rU\256\274\177\334\333\274\340\341\303<n\036\025\275\336\253T=^\200O=\312\206\315\274\373S\203=\360\227F=\327\004b=\211\277)=?B\273\275i\304\023=U\3337=L?[\275$\274 <Nz\364\275\270\205\371\274\025\021\006\2734\310\324\274\342:\207=\377t\263<\001p\211=\204\230\014<\005[\330=\355\375n=2\354\272<8\323\353\274\2032\217<\224 \203\274p\332\336=\032\'\330\275\2120s\275r\027B\274\276\254\313=)@f=xO:9\217;\177=t\333*\274\233\005\214\275n\002\263<;\310\225=\264\220\262\272\363\016\336\2740JV<9\255\000>\313<@\274\201\352\374\274u\002a\274\267\231\014\274\370M\205=\235op<\234\242!\274T\332\243=\003\322\370<\276D\203\274\020\233\244<\020\260L\273\016\020Q\275\243\360h\275*),=\365>{\275\267w\237=\037+\216:]<\274<\312&\263=\263\2450\275\334\332+\275b\352\261\273\376\374\252=\345p\370\274\274.\274=\n\273P\275\357\335\024;_@\214\275\324\r@<\340\326g=\202Y2=\034\201X;\355\311\004=#a\372\274$G\243=\225\233\360\272\264N\004>= \007<\246+6\275\224\265\264\275za\356\274\017\352\245\275\033\010a\275\025\350\244=g\013%=\342\341\267<\206\005\273\275\222\037\300\275:\244\000\276\236DH\275(5\024\274\026\212\227\275!\226\326\274\300\013\030<\0050\220=R\026e\272\021\216\207\275\355\327o=\366\277\204<\227\021\265=\220$\233=\342\002\211\275\372\311\330;\220\374\000\276\211\332C=\315\377\311<\373\325\255\273B\345\002\275G\304\264<\223g\206\2738\322C\275\001\374\203<q\3074\275\356+\371<\031}\276=R\023\021=\004e=\275\324\211\304\275;\037\005=\312\224\323;\344\256\320;\263\\\350\275\230\2710</\306\330\274\'\254\332<\373 \215\275\007*\021=lJZ=\363H\024=\007\003\220\275\374\374\200\275\271\324\230\275\317\373z\273\036\257\235:z\277\352\275\270~`\275\222H\n=Q!\234=2\204@\275S\200\237<\211@J=1k\005\275\302\302(\274\271\005\002>=8\032\275\314\322\251\275t\212\242=\333\343)=\372\217<<\355\270q\275\217\253\265\274j\321\013=\234\376\211\273_\341J\275\252]c\273\275\253\234\275\240\376\331\274\310L!\276\005\236W\274\240JB>xu_\275\266\2077;n\302\273=\314\t\345\274\270\036\023\275\216\000R\275\354^\332<u\024\341\273\234k\224\275\270\211\302\275\357\010\263=\337\326\227\275OKx=qZ\212<n\345\024\2756\317O\2754\tS\2751w\025=g?t<\004c\205=z\355\221\2748J\300\2747\021\332<|\247]=\017 \217\273\277\222\037;*\270\203\274\256)\373<~\273\007\272\223%G=1\353\026=\334\275A\275\201Rx=9\277\350=E\244\231=\007\307\025<Y\204\307\2756\322\273\274\354p\346\274\244S\355<\022\364N=\215{:<\032I8=K\266U\275\220\016%;H\327\351<\021\242\205\274\345\342x=k\352\005\275\274,\201\275^\023b:\251\360\252<\233\275\037\273\005:\200=C \236<Q\305\231;e\304X\273\321\352\266\275\037\341\223=\364\"6=\355\376\305=Z\036\340\274\344%\344\275\020\371<7\345z-=\321lZ\275\004\225\242:\206\246\212\275xX\020>\036\250\343\275#%\307\275\266\343\246=\366a\377=/fO=\r|\307\275\200V\021\275\365\355a<\311z\224=Y\260\356\274\\\240\326\274`a\365<%\2260=\266f\276\275{\370\274\275I\317n\275\374q\301\275\321\"\021=t\347\"=\266\256\003=a2\205<\272\240/<\225\202\202=\3040\364<\267J\030=\026\033\235=\363^\254=\364\000s<F\377\251<\200\243\277=\033\240\233\275\032\313\272\273\210\246\230=F\232\242\275pne=\251\212\307\273F\352u=W\331\352\274\347\366f:L\006\322\2756U\212\275\353\306N=\222*\337=i\373I\275\314\354\032>\274\236\014\275+t\200\274\355\2175\275:\313\013\275\254\233\024<\263\320\262\275D\367\246<\030@\330=\202Y\304=\315\023\341\274\233\023\334\273H\374\027>\201$\374\274I\304 \276~\341\222=\\>q\275\242\370/=p\252\366\273\366\233\n\272\324\347c\275\033\200=<\362\035\225\274o\204\262=k04=\215\006\032\275b\352>>\353a\323\274\337,\221<\237a\001\276\316\304\226;j\375^;[\374\006\276E`\206<W\007\227<G\000\247=\327\037\275=j\3058=\250\366T<\362\304\244<\237\014\007=\352\370\342<\244\377Z\273\002M9\274r\365\003\276>\370\005=-h(\273\335(=\275\020Q\313\275\027\032D\275FR\330=\345\242\247<\205z\265\275\265U\336\273}\273\026\275xV\370\272R\247b<\353j\024=w\305\267\275\302\205 =\270\246\t\276H\324\203\275#\257\021\275\332?\251=\033H\037\275\362\344\204\2759\266\211\274\277H\225<\324X\031\275\350D >Tqt=_\035;<yTl<\272\212\254\275\352\2453=\265\010d<\373\010\223=\217}\023\276&\371`\273\224\202\307\274_\352I\275:\246\026=\271PR\275\317\254]\275\256@$\275\335{\314\273\256\331\356;\007X(\275\333r\004\276\367\240\203=\351Sj=\214yo\275\210\025\217\275M-\033<w\213\242\275Z\215\t\274\265G^<\304\305\216=\3425V=\367\213\215\275x\322P=M\313\302\275\370Q`\275\242\320\324\274\257\375/=FE#;\206\215\020<\373\221\355\274\342\312\340\275Nt\326\275f\002c=\310\016\004>\261\311\364=f\367r=R\314\017\276\312n\311\274o\312t=\252_\206\271\007\343t=\3243\'=\316a\276<\246\233\210\275\327fk=m1\020\273\253\024\224;_\343*\275\301\272\242<\333\0025\275X\272&\275\340\377\243\274G\205I=\t`\246=\235%I=\311\243\025<\315\231\244=^\355\271\273\034U\023\275hR==hg\237\274j\301\210=\344<\201=*\322\230=/\235\330=P~\255<feq\274aBG\274\361.N\274\300\260Y;\311\3053=C\331E\276E/W=\250\325\332=\371\320\336\272u\332h<\372\224\200\274\313\365\225\273D\227\232=\213\362\255\274\200n\316\275k(\250;\207\264\210=\216\365==;\350\t\276\332\035D\275\013\\\210<\377=\304=\247\267r<\016L\256\275\204\201\251\275*\274\362\274\310\272}\275mzX;=1\241;\256\t\223\275k\350p=\370\000\254=\037:\222=\347a\367\274-\364\202\274\'Z\344={?m\275\304\230\003=~\255N\275}\201\021=\0101\373\275i-\271\275vPa\273\303c\033=\362\331J=\014\353\240\273Z\033M=\362\247\261=\026y\301=\323\204\025\276\037\3204=\327\2517\275\025Y8\274z\3642=\337*\246=\321?n\275r\341y=\371\373Q<\324\207\302=\360\203\214<\342\266-\274\264\"\016\274\037\037A<\374\242P=\304\013R\274R-h\273p\231\226\274\307>\3059PN\247=2\243\253;\016\213\217<\023\312\214\273 \025\262=\225\361\266\275Y\232\327<\366\032\262<2\214\273\275XQ\224\2747^B=\030f\014\275=\235\310<P\330\246=)b\221\275I\345\003\275\236\300\205=\302M\222=\263\216\237\274Y\347\327\275\317\n\027=\275\260\000>-r\351\274,s =BR\373<\021\347\252\275gc\240\273\231\273}\274\267\261\270<\351|K=iw\253=P\233\220=\'q\306\275\235\203\354=U_\300\274\330\241\236=\261\344\013\275\375\257\322;\307\026\n>\217\364\007>M\005\257=~\301\000=_f\300\274\030\276\301=\363\321R\275G\354\225\275\350M$\2750\305\226=\032\352\027=\013E\256\275Z<\346\275\274\245\225\275Vm\341\274.g\223=Z+\235=\263\351\214=H\304\207\275\237j\212\275\351\007\351\274\264?~\275\031\026)>I\347D\274\025~\252\275\317-7\275p\000,=[\204\365\274\242\222I=\004\347\037=\001\212(\275\027\240\213=\223vQ=~gg\275\324\025\274;\023\236\202\275\206\014\177\275\274i;=A\207\375\274\301\007\250\275\361\005\302<!\376\322\275P\264y\275\274\374@=\006\3740=XxD<\207\253\273\275\246\331\212\275\375\017\r\275\010\270u\275:J\332\2754H\210\275\206\333;=m/\214=\005\273e=\355^\227\275\300>l=\177\252\244\274X@]=\000\316\017=\013\214=\275\017\005\321\274\373\267\177=\262@\014<\365\277i\274\003\300o=PO-\274n\334\327\275\343\345,\275Y)\035\275\024{\023\275\337\007\240\273\007\262\302=\225\021\207\275_\273/=\220c==\323!\017>\335\314\272\274\007\031\250\275\223\202\211\274-3\025;\226\224\337\274\212\235\233=\225~\206\274\320\352r<\026\226\"\275\361\305\264;dh[;\237\032\014;\357\372X\275!h8\2742\345\261=+&\263\274\275i\005\276\\\021t=x\210\346<*\275\276=\'\200\314\274\342\256\211=7\021\022\273\224\273\230<P\223\237\275\005\270\217;\330\272\246=\225\245\275\273\275w\205\274\211b\306\275\226p\257\2748H\213\274\362\307\313=\307\352\237\275Y\366\200=\027\316\010\275C\274r\274\300\036\r>4dP\275oy\223\275G?\021=\266\366$>\263\036\010>\035\344{\275IZC=M\267\271;\236QW\275\271m\372;-\003R\275Y\260\334=\036M\252<\200H\273=\340^\202=\276\327y\274\334B\214\274Z|m=\r\3643=\317\211\002\275\202\225\234\273HU\"\275\017K\257\2741\003\037=_m\000=\266\371\'<\n\253\202\275\005\344\201\274m\376+=\033\262\225\273\312N\266\274OW\200=\355L\257=}\260\237=\323\300^\272\304\373\346<5\0356=\265#\302<\275\256\257=\231\360h;\002X\235<\226\355\215\275\217~s\275\215u\323<\212U\240=J\013\321\275l\244,\275@~\024<\361\201\206\274\n\256\034=\023J\227=\213\353\203\275#\355\010=\234Z`<[?\234\275\256\275\264=\322\237\270;\033\317\311=RI/=\010\341><\213\370\021=\016\217\034=\024\377\214\273\333\242\275\275\272e\260<5\020\344\274\203\234D=\336\000\313<\204\301\250=\267\036\266<\223\260\242=}8R\275\235s\024\274\\\336\241\275\361\312\014=)\237\354\275B\334u\275H\315\000\274\337X\323=G\000\335=\227Y\'\275\026\023\337<\244v\203\275\214\364\365\274\0375%=\222\037]\274\316q\210\275\355\245!\275Y\203\361<_\204\010\275\252H\030\275\227$\334=\0249i\274\255\302<=Ra\367<\301P|<\t\0323\275\365:\342:\207Pj=7l\267\274\326e\215\275T^\002\273!R\200\275S\313B=\244\250\003;\257\021\201\275\304\244\322<8\230I\275\276u\265=>*\242\273\363\341\334\273\022\206\027=+\337d=\246\260\2709\310&\021=\204\345\361\274\237\274)=\"\t\352<\352bd=\3264\027\272\037\220\204\274%\003\000={E\227\274(\237\254=\253)\274\275G\260|=\274\362Q=ir.=\331\372\312=\017R\312\274\014\370\271\275\204\274{:\357\276\374<\342\206\r\275[\366H<\254n\003<\030\304\264<>f9\275\006,\024<\337\0348=\222\325\r\275v\023\216=\235\323\235\275\201\326%\275\206.>=@^\275<\010\204\206\274\t\030\300<DM\357=\255P~\274\254~*=_\201z\275A\245B\275\322\000\225\275\027[\037=\224\221\220\274\344\371\"=U\340\213=_ \025=\013X\035=\331\240*=\213\233L=j\370\301=\245\177\254<a\033I\275w\372F<\307-\200\274;\312z\274\032)\372<\277#\002> \305\356\273Z\322\341\274\032\304~:\347Ow\275\016\222\200\275\276\315q=\300m\245\274\245\310\305=?\306\310\273\377U\275=\003aS=\237\375\270<\367a\333\275Z\225\'\272\211Yz\275\000n\242=?\223L\275\314\300\236;:$)\275@o\016=& \325<\034\263\362\272\317l\255\274\340\364*=\307\337\010>\200\321k\275\006\033.=$\023L\276\264\341\211=\273\364X\275\272++<O\230\177\275\025\026\005\276\314-8\275\013{\367\274z8b;1\362\255=\002J\311\275\n\350\321=V\rx<\244\307\245\275\265\217\321\275\264\177\243\275\177~\236<\024r\021\275\257\006\242\274\033\371\364=,\335\233=\014\332\003>\223\001p\275\260\321r=\217\350\217\274\240\263;<\010n\353<\322\335\013\276\232\0004\274\004N\024\274\203\224\013\276\242\3336\275\032\336D=\024V\350\274\200U\022\27537\352\273\225.,\275\360=o=\2727G<\024\005?\276\367A\331\275\260\360\340\273\3503\316\275\016-\017>\351\350.=\362\001;\276\330l\014=\321h\000<\351\033\354<\036*8\275\332\372/=\002>T\274\001\345,>\037\247\211;\351\200\033\273@\"\025\273\254V\002=oj\002<\263\272\337\2758\350\250=\rH\307\2727\375!\275\005\027\236=\373\346\321=\n\366\326<__\223=u\216\005<\337?\014\274\212\340k\274\310$\277\274\372\235\035\275#,\200<!\253\230\275l\237\330=u\351O\275\275\250\"\276<y\263<\253 \230\274n\271\273=\000\372\244;\246u\271\273I=:=*\261\233\275\260\355\274=Q\007\222\275\023\376\236=Y\216H<\356\301\007\275\356V\022\276:%\017\276K\036\233\275S\310o\275Ej\264:y\370\335\273\250DQ\275\252B\342<C\352\003=f\363\004>J\351\243\275\254\275@=+\274s\275\367\226\275<Z\372\317\274\354\241\235<\317Y\220;\200>L=\316\361_=Y\327\311<\374K\016\275\336H\n\276\257\341D\275G\035\307=\271/\221\274:)-\275\001\276\316<\245\n\360=\325J\212=\327\t\214<\357D\306\274\347\351\n>\363\302Q<\2245D=<#\026\275C\375\232<\2029\340<\346\315%\272;l\224=\023\"\204\274\260\255n<\215\364\253<r\024\017<x\"^=\231\330\030=;I \276\203g\030<\2552&\274\006h\207;=Y\210;\273]\302\273\325\220\035\276K\032?\275\037@J<\371d$>x^\305\274?\247&\275q\272\334\275\335\244\034<a\177\341\274\030\206\315;q_\363<(\211]=U\342H\274\206%\343=\036w\320\275>\216):\244\320p\274\331\242i\274\220j\300=\340Ju=\347\211I\275,$\324\273)\367\210=?\004\377\275\207\244\301\275)\354h\275%\262\224;\276U\210=c\353J=\321\207\t=\216M\004>\367!\022<\031Cl\274g\320\327\275v\347\222=Th\267\274n\333\277<\363\3028\2753D\017\2750k\210\273\221\347\036\275O#N<\240\t\251=\334C\243<\021\266\223=\207\256B=\266\347\200=\273\314^=\325\376\231=\032n\230\275?8~\275\360\177\007\275\000u|\275v\000\215=\363i\256\274\246\320\221=!\237}=\026\260\312\274\260\316V\275r2U=\227i\313<\344\006\254;;\320\344\275\242\317V<\335[\273\275s\316(=k\346\355<?\271(=\3030\230\273\222\303*\275\277\300\360:\365\363\241\274yEN=\377\r\262\274\375d\010\274;\213\217\274=B\310=\307\001\203=\306\006Y\275\234\201\253\272\004k\326<\010H\250=\322\200\r\276\242\254\362=%\326\231\275ms\037\276.\034\275\2746\273^=\'\210\243\275u\202\023>\363\315D\275\247\237)\275\351\260e\274\005y\240\275\275z]=1J\247<\362\037\347\274\213\355t=\340\206\241<I\220C\275\357\2459=\367z\032\275\223\327\332<\326X_\275\304:9=.\213\270\274\224\321\314\275\225\251E=kD\336\274pO~\275\267\352\000\275;0i<\247pV>\371\301\242\275\210\031\212<\320G,\275\376lF<Cx\311\274\316\353R>\344R\200=r\225\003\275\002\253\263\274\223\'\311<h\361\231\275\200\303\324=n\0370\275\237\364\362\275\257di;\330#\336:vh=\275\277Q4\275\"zH:\204\030\330\274,\241\303\275\371\013\033\275\001\304\014>\341\021\373;\tz\303\273\177\361\000\276$\345\275\274\322\247\365\275\036\225>\275\310\017\345\273\207I\207\275\342\303\271=Bx\223\275+P+=W\215f\275Xj\230\274\r\014\205\275\014\344\261=\344\303\007<\tMB\275\241 \\;\314cF\273|\277\317\275\227U\014\275\254f\026\273\3311U\274a\025\252=\003j\331\274+,\331\275\235\002\216<\375L\370\274T\tY=-K\246<=\3166=\0102s\274\013\0217<[(\314\275<r\302\275\200kw\275\371&5\274\256\322 \275\340^\321\275<s{<\221\0262\273\200\244\221<\214\271\213<F\336\351\275P\243T\274\333\210F\275\364-F\274\267\376\362\273\020s\262\272L\224\341=v\240\326\275\375\246\371\274\374\025_\274\005M\276<\003IC=\007\225\036\274\247|!>\214Q\202<\342\266\277\273DX~=\005\362\305<g\373\023=j\301\023;\002\2440\275\350\2311=\324\275\261\273NW\223\274\023\323n\274@\277\022\274\252\374h\275\323R[\273Ab\227\274s^F=\206{\215\275\r\362\243\275\233\202G=\007:\226<Kq\033\275P\307\021=\214rF<V\364f\275\230\244\206;iw\364\273\212\211!=\266\'g=49G<\273\035H<e\305\264=\223S\005=? %>\033b_\275\214\347\252=\306\351r;\202S\005<\030\337\376\274_\313K<HK\244\274\345\336\306\274\350\246\231\275vU\215\273\320y\357\274\217 \215<{\364I\275\240\243p<\376\336\216=\034\250\236\274o\022\374<\306\345\322=\0109\337=\n\246\031\274\242\247\275=\263\030\217\275`\365:<\254\316\205=-,\206\275\331V\264<+\034M\274_\351\235\275\264\330\274<|=\275\275\321\360\344=\204\330\256\275\331p\024\275\252\355I\274k\306x<\216V\210\275g\262\352<VZN<e\335a\275\275\256\335<\214\031\037\273\177\355\236\275\227\361U\275\257\202\252\274\240\302\037\275\361\021\347=\224\320\016\275\264XB=rQ\363\275P\354\3649D\205\201\275\225\356\256=m\034\033>\364\200\337\275\352=\023\273\005\220\331\275H?=\274\310\002}\275\340\303\223\275R\037!=\340o\217;%J/=\033G\212<\320\321\300=\317\0175=\026!\'\275fR\310\274\177\214-=\023\272\016>\322\001m\273\036{\023<\0014\022;u\245\023\275\2474\000=\3212A\275\030\275\211\275\251\275\233\275-\006\360\274\264\224\020\275\332\242\003>m\'\357\274\364\216\003\276\245*\300=\274(\304\275\343\204\312\275u\002>\275\351\2319\274\252\036\323\274\377lq=m-\337\274=;W\275\236*\223\275<\031;=\002\265\032=\2437\300\274\3117\026==\360\245\273\373\240\373\274\314\300\326<?\276\031>\246\013,=\333\216\236=\2409\372=\357\252\330<n\222W\274zf_=\202\215\271=\251E\255=\221\271\250=\320\3443\275_\037\265\275\242\321h<\246\033\251=9\317 =I\037\004<]\236\207;\261\205U\275\020I@=\222\263\002\275\332\025C=\351\032\265=;\372\336<R\333\316\275\\j\017\276\003\205b=\361\322\361=\267YS\2759\311\254<\310\333\356\275\365\n\032\275w\341>;<g\207=k\020\224\275\3436\t>V\211\017=\250\343\034<\246\014\371\275\273\375\221\275\365\352#\275\037\242\232=\003\335\211=Zw\206\273+\233\265\274\370\3669\275>\232\207=;\220z=U1\n\274\233\236\221=-;\247<\317\tr=.pB\275\305\243\372\274\001X0<_\274\236=\221\212\000>\003\202\327\275\224s\005\275\2528\255\275A\240\000\274e\250\313\275kb\374<\306\274\006\274\000\363Q\274\013\317\236==V\257\2746=\036\275TL\226<\371p\313<\320\206\017=10\200=qW)<\3348\270\275i\255U\273M\355\037=m\341r<LX\255=\233K\021<\345N\202\275\246\320,<3\335c\274\':7=8\262 >o\230,\275<7\251\275\200x\376\274%?\016<\367\001{\274\020\2167=\366\177F<\235\t\325\274\2707@=\014\261\264=RIh\274\253\205\367\275q6`;\346\t\205=\372\260u\275\223E!=\263\300\216\274]8\342\274\355/h\275G\306\373\274\234P\246=X\263!;&\351\273\274}\020%>|\205%\275\246\313[\275f\376d\275bo\340\274\235=\350<~c\325=\"\226@\274l\2325>\350H\273=|tN=\363%\'\274f)9\275\270e\364<`\343\026=\245\250\034\2757\030j\275[\315\003=\014\367\036\275n\001\313\272m\250c=\034\010\002=\233\317\030\275;Zp\274\272\275\237=m\323\3229\027\252\306<k\"%\274=(%\275\247\376\005\276\241\253\270=:L\232\274V\204n\275p(\256;:\n\264\275"
      }
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "LSTM_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/read"
  op: "Identity"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Square"
  op: "Square"
  input: "LSTM_1/recurrent_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_1/mul"
  input: "LSTM_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_1/add/x"
  input: "LSTM_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/concat"
  op: "ConcatV2"
  input: "LSTM_1/Const"
  input: "LSTM_1/Const_1"
  input: "LSTM_1/Const_2"
  input: "LSTM_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/bias/Assign"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "LSTM_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/bias/read"
  op: "Identity"
  input: "LSTM_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Square"
  op: "Square"
  input: "LSTM_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_2/mul"
  input: "LSTM_1/weight_regularizer_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_2/add/x"
  input: "LSTM_1/weight_regularizer_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/zeros_like"
  op: "ZerosLike"
  input: "LSTM_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Sum"
  op: "Sum"
  input: "LSTM_1/zeros_like"
  input: "LSTM_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LSTM_1/ExpandDims"
  op: "ExpandDims"
  input: "LSTM_1/Sum"
  input: "LSTM_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile_1"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose"
  op: "Transpose"
  input: "LSTM_1_input"
  input: "LSTM_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12"
  op: "StridedSlice"
  input: "LSTM_1/Shape"
  input: "LSTM_1/strided_slice_12/stack"
  input: "LSTM_1/strided_slice_12/stack_1"
  input: "LSTM_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13"
  op: "StridedSlice"
  input: "LSTM_1/transpose"
  input: "LSTM_1/strided_slice_13/stack"
  input: "LSTM_1/strided_slice_13/stack_1"
  input: "LSTM_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/MatMul"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/MatMul"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_1"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_2"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_3"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add"
  op: "Add"
  input: "LSTM_1/BiasAdd"
  input: "LSTM_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul"
  op: "Mul"
  input: "LSTM_1/mul/x"
  input: "LSTM_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_1"
  op: "Add"
  input: "LSTM_1/mul"
  input: "LSTM_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_1"
  input: "LSTM_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/clip_by_value/Minimum"
  input: "LSTM_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_2"
  op: "Add"
  input: "LSTM_1/BiasAdd_1"
  input: "LSTM_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_1"
  op: "Mul"
  input: "LSTM_1/mul_1/x"
  input: "LSTM_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_3"
  op: "Add"
  input: "LSTM_1/mul_1"
  input: "LSTM_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_3"
  input: "LSTM_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_1/Minimum"
  input: "LSTM_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_2"
  op: "Mul"
  input: "LSTM_1/clip_by_value_1"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_4"
  op: "Add"
  input: "LSTM_1/BiasAdd_2"
  input: "LSTM_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh"
  op: "Tanh"
  input: "LSTM_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_3"
  op: "Mul"
  input: "LSTM_1/clip_by_value"
  input: "LSTM_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_5"
  op: "Add"
  input: "LSTM_1/mul_2"
  input: "LSTM_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_6"
  op: "Add"
  input: "LSTM_1/BiasAdd_3"
  input: "LSTM_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_4"
  op: "Mul"
  input: "LSTM_1/mul_4/x"
  input: "LSTM_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_7"
  op: "Add"
  input: "LSTM_1/mul_4"
  input: "LSTM_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_7"
  input: "LSTM_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_2/Minimum"
  input: "LSTM_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_5"
  op: "Mul"
  input: "LSTM_1/clip_by_value_2"
  input: "LSTM_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArray"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/TensorArrayUnstack/Shape"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayUnstack/range/start"
  input: "LSTM_1/TensorArrayUnstack/strided_slice"
  input: "LSTM_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "LSTM_1/TensorArray_1"
  input: "LSTM_1/TensorArrayUnstack/range"
  input: "LSTM_1/transpose"
  input: "LSTM_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose"
      }
    }
  }
}
node {
  name: "LSTM_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "LSTM_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Enter"
  op: "Enter"
  input: "LSTM_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_1"
  op: "Enter"
  input: "LSTM_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_2"
  op: "Enter"
  input: "LSTM_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_3"
  op: "Enter"
  input: "LSTM_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_4"
  op: "Enter"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Merge"
  op: "Merge"
  input: "LSTM_1/while/Enter"
  input: "LSTM_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_1"
  op: "Merge"
  input: "LSTM_1/while/Enter_1"
  input: "LSTM_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_2"
  op: "Merge"
  input: "LSTM_1/while/Enter_2"
  input: "LSTM_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_3"
  op: "Merge"
  input: "LSTM_1/while/Enter_3"
  input: "LSTM_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_4"
  op: "Merge"
  input: "LSTM_1/while/Enter_4"
  input: "LSTM_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Less"
  op: "Less"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less/Enter"
  op: "Enter"
  input: "LSTM_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1"
  op: "Less"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "LSTM_1/while/Less"
  input: "LSTM_1/while/Less_1"
}
node {
  name: "LSTM_1/while/LoopCond"
  op: "LoopCond"
  input: "LSTM_1/while/LogicalAnd"
}
node {
  name: "LSTM_1/while/Switch"
  op: "Switch"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_1"
  op: "Switch"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_2"
  op: "Switch"
  input: "LSTM_1/while/Merge_2"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_3"
  op: "Switch"
  input: "LSTM_1/while/Merge_3"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_4"
  op: "Switch"
  input: "LSTM_1/while/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Identity"
  op: "Identity"
  input: "LSTM_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_1"
  op: "Identity"
  input: "LSTM_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_2"
  op: "Identity"
  input: "LSTM_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_3"
  op: "Identity"
  input: "LSTM_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_4"
  op: "Identity"
  input: "LSTM_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add"
  op: "Add"
  input: "LSTM_1/while/Identity"
  input: "LSTM_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/while/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul"
  input: "LSTM_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_1"
  input: "LSTM_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_2"
  input: "LSTM_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_3"
  input: "LSTM_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_1"
  op: "Add"
  input: "LSTM_1/while/BiasAdd"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul"
  op: "Mul"
  input: "LSTM_1/while/mul/x"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_2"
  op: "Add"
  input: "LSTM_1/while/mul"
  input: "LSTM_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_1"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_2"
  input: "LSTM_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "LSTM_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_3"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_1"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_1/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_1"
  op: "Mul"
  input: "LSTM_1/while/mul_1/x"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_4/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_4"
  op: "Add"
  input: "LSTM_1/while/mul_1"
  input: "LSTM_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_2"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_3"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_4"
  input: "LSTM_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "LSTM_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_2"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_1"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_5"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_2"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh"
  op: "Tanh"
  input: "LSTM_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_3"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_6"
  op: "Add"
  input: "LSTM_1/while/mul_2"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_7"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_3"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_4/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_4"
  op: "Mul"
  input: "LSTM_1/while/mul_4/x"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_8/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_8"
  op: "Add"
  input: "LSTM_1/while/mul_4"
  input: "LSTM_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_4"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_5"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_8"
  input: "LSTM_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "LSTM_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_5"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_2"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/mul_5"
  input: "LSTM_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_9/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_9"
  op: "Add"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration"
  op: "NextIteration"
  input: "LSTM_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_1"
  op: "NextIteration"
  input: "LSTM_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_2"
  op: "NextIteration"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_3"
  op: "NextIteration"
  input: "LSTM_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_4"
  op: "NextIteration"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit"
  op: "Exit"
  input: "LSTM_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_1"
  op: "Exit"
  input: "LSTM_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_2"
  op: "Exit"
  input: "LSTM_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_3"
  op: "Exit"
  input: "LSTM_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_4"
  op: "Exit"
  input: "LSTM_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayStack/range/start"
  input: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  input: "LSTM_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/TensorArrayStack/range"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "LSTM_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/sub"
  op: "Sub"
  input: "LSTM_1/while/Exit_1"
  input: "LSTM_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/sub"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose_1"
  op: "Transpose"
  input: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "spatial_dropout1d_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice"
  op: "StridedSlice"
  input: "spatial_dropout1d_1/Shape"
  input: "spatial_dropout1d_1/strided_slice/stack"
  input: "spatial_dropout1d_1/strided_slice/stack_1"
  input: "spatial_dropout1d_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/strided_slice_1"
  op: "StridedSlice"
  input: "spatial_dropout1d_1/Shape"
  input: "spatial_dropout1d_1/strided_slice_1/stack"
  input: "spatial_dropout1d_1/strided_slice_1/stack_1"
  input: "spatial_dropout1d_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/switch_t"
  op: "Identity"
  input: "spatial_dropout1d_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/switch_f"
  op: "Identity"
  input: "spatial_dropout1d_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/mul/y"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/mul"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul/Switch:1"
  input: "spatial_dropout1d_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/mul/Switch"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/rate"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/1"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape"
  op: "Pack"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch:1"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/1"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch"
  op: "Switch"
  input: "spatial_dropout1d_1/strided_slice"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/strided_slice"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/shape/Switch_1"
  op: "Switch"
  input: "spatial_dropout1d_1/strided_slice_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/strided_slice_1"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9329020
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/max"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/RandomUniform"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/random_uniform"
  op: "Add"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/mul"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/sub/x"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/sub"
  op: "Sub"
  input: "spatial_dropout1d_1/cond/dropout/sub/x"
  input: "spatial_dropout1d_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/truediv/x"
  op: "Const"
  input: "^spatial_dropout1d_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/truediv"
  op: "RealDiv"
  input: "spatial_dropout1d_1/cond/dropout/truediv/x"
  input: "spatial_dropout1d_1/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "spatial_dropout1d_1/cond/dropout/random_uniform"
  input: "spatial_dropout1d_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/mul"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul"
  input: "spatial_dropout1d_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/Cast"
  op: "Cast"
  input: "spatial_dropout1d_1/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/dropout/mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/dropout/mul"
  input: "spatial_dropout1d_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/Switch_1"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "spatial_dropout1d_1/cond/Merge"
  op: "Merge"
  input: "spatial_dropout1d_1/cond/Switch_1"
  input: "spatial_dropout1d_1/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2580051
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/random_uniform/max"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "B#\215=\220e\225=e\030\342=P\233\026=\016/\026\276J\002\257\275!\255\204\276}\364\370\273\270\240\341=|\331\316\275k(%=(\236;=\213\000\177=q\245\327\274\261\272\'=\242P}=\313A\277=3\351\032>\242\345\226<\2577\257<\302o~\275o2\267\274\t=Z<\255K\200=~=\221\275*j\217=\260\212\355=.$\221=\261\016\321=z\317^\274+\001\007\275\227\311s=\006c\361;\374\207x\274R\036\255=\343k\323\275;\261\351\272\321{\255\2752&\000\274K\311{=\341\362\027>K\312\231<\t\230N>!\212\004=y\303\372;\017\315\262\275$\350\035\275j6#>\3308l=\300\370t>Y\007g>\276V\035\276\200\235\241\275\343\324\031=\023V2<\307[\223;MrA\276Ko\206=\372\246*\274\331\265C>\023\323\026\274\237{\235=\331\263\266\275\'\266v\275\374\371\327\275\276\217\307\275!\212}=\265\203\256=\325\305\n<)\310\031<\\\344\232=\301;\366<\242I\303<\267\266\030=\210P\264=\014\024Z\276\337\325\023\276\366\370F\275\337\032\270=\240s\004>\031\243H=~9d:\301.d\275eP\237\274n.@=\223C\010\276L\340\177\275\347\372\033\274Y\373\362\274\004\t\242=\234\272\024=U\372<=\360+)\275\204\033\000\276DS\244;F\256\262<\260\347+\275Q\321\222\274\360\226\342=\351\200%=\'\205\006>\231v6\2750B\264\274\027@\273<\267_\211<\025\023\300\273\021w#=\200gl=\225\2420\274\037\247\306\275\316\323\257<(\313\372=\322;\252\275V\025\326\275\324\333\000\274\366e\357=,6\223=\274\022\353\275\341\233Y;Y\341\320\275\177y\370\2748\311i<)\272\334\275\222G\001>n\355U\275)\241\322<9\022->\316\236\263=\267,i=\010\220\270;\336\204\262\275\260\372\222\275J\367\354\275^\023K=c\t\031=\301\243\241=\221\027\000\276\342\224~\275\372\027A>\014\362-=u^\202\276\277=\r\275\237\035\317\275\204H\272\275sZ\340;m\231\032=K{&>\217\274\370\274\254\344\326<\010H\337\274Dw\216=\202t\376\275\244\271\231\275\016\267\216\273\350\370)\276ix\255<\037\347\312\275\315\002\325\274\367r\r=\350\272\275\274\005DD\276?\264\242=\033\241\345\273\037\212\n=\004\177\262<\240\355\002\276\260\354\005<\341Z\236\275\365\351\036=l\210\261\274\252\372\217\275z\016\345=\330\353\323\275\310\024\263\273\321+\272\274J\336\267<a\254\340<\021\001O=\r\226G=\253\020\223\2758n\234\272\246S0=\310\374\272=MT\033=\227\300\367<\271\013\035\275\271\273\301\273\201\303\017=nt\216<\341\337\323\275\177\346\265\274\266W\330<\330\315H\271%8\256=\372$_>\200\261\315=u\333\243\275,\r\260<\373y\260\274\250\2117\276ar\250\275\002\371\t>\327\303\032<5\025\251=\225\243D\274T\005\014\276\364C\017>7\334Y>-=x\276;I\235=\325\240\200=\tZ\234\275\315\233\367\275\3368\'=TH\004=L\030\031\275\016\201L\276t\365\r\274_\275\000\275\244\370\037\275\276\257\211=g\033\020=_\223\327\275\030\350\274;\231o\203=a\367\224=K\274v>\316\235\325\274\233\353\203;\336\354\210\274I?\024\275a\230\014\275:\037\240\275\227[\321\275\000\237\031;&\031\272=m\356\213=\315^\335=9GP\275\306\263x\275\213\366\006>\213\'\227\275\332zD;\327c\033>\240\312F\275\022,N=@\2343=\302\016\020\275\2675 \276\256\251\222\274\2200B\274\274\232!;\320\256\374\274\306e\214=\216\316\270\275\242\252X=\021\214\004\274K\331+\276\031\222\006\275\036z\323;\350\225\344\272\266\342\325;\334\360S\276q\241\253=\277\306\265\275e\016\207\275G\025\215\274<\244\211=\325\207\270\275rQ/=z\200\324\275\265\264\232=`5\027:]j\"=\344@\017\276\350\224\245\275\374+\237<\"xS>A\262\236;\307\260\335=V\234V\274\353m@<M\307\231=\355\370\2017M\354J>j\314\221\275\2544\331;\366\251\323=\264\312\323\275\032g\330\274\231/\256\274\255b\264\275?\272\344=\r\210\345\275%\027\316\275x!\212\275\026\323B\276m\303}\273(\014\242\275\371`#\276\021;\363\275\341\337\014>uB\222=9\335L\275U\327\237\275\3775\212\275\0249\207=\013\035\265\271\037\034{=\343\251\351=\005UH=\347\266\022>d\016\226=\363\330\304=\211\201\034\274\235-\020>D\224\223<\r\006&>\3547E=T\312\203<\374\222\203\275\313^\\=\'\023\202==:\025\276m#t\275E\344\257\274\377\257\261=\346\323\177\274\023\242\207<\257\315\005=\2743\246\275\013\253\346\275\002\373E;\232\213\336=\350L\362;\007\261\006\276|\177\200;\232(\205=\341\271\326=\3422\350\274\340\030><\370\244\337</\340s\275?\001\214\275`\233\244\274\312\212\345\275\225\205\331\275f\222\000>\261\347\203=MB\025\273\300\035\250=yE\364<\000\220a=\311\267!\275\212\004.=\24705<9\366\306\274\221\306\014\275\343\360F\275\363\273\253\275d\274\342<>\\\227<\261F;\276\2633\n=~\ny=\341\022\000=0P\003\276\244 \235\275M\312\216<\336^\007\276r\257\031\276)\363e\275\224\232\222\276T;(=K\005\232=k#^\275V]S>oFi\274<\3718\275\306D\273<\010\234\343;\347\373\206=\200\275$=c\375\304=H\223\t\2767\005b\275Va\232=\267\301\262\2752tT\275\331\354B\276\307\3659>\314\226\033\275x\244\006>R\372\025=C\375\004\276\0065\242=\257=\230=\004o\034\276\315\330q< >\272\275\221\362\030\276\210\347g\275\267\024\351\275\013\371\013\274\257\303{;8\034\265=\021\000\253=\370\221\351=*\257M=(\303\265\274\243vP=\323\255\323=e:8=\231E\020\275\027\201A=\313-\271=\361\006\017\276\277\342\331=\252\313:\275C\2557\275\276\323\224=\303\253\263;?1\333=\357\215\205\274pj/>\021\233\234;\201e\'\276\210<\013=X\027\371=\353\213\220\275r\234\340=\323gj=\210\352`<\316\360\002=\332[\373<W\212\215;0\031C\275\224\'\323\275\366@\2649\370\373\361=8\340{\275\311>\024\276O\203\307\274\037\006*=S\267i=p\345:\275C\232\273=\360\301\304\274\262\310*\273\260\352\367\275\276G\370\275 D\220<\270F\200\274\003\021K<\257\251\010>\234\250\323\275\003\230\324\272\017\317\'\275\246\013\217\275\013\214\205\276g\224@=\270K&\276h3\273=\217F\232\274\344\216\274=b\\9=b\223\336\275\212[&\274_;j=\322\202\257<\014\350\234\274\024\375\324\2749>\022\276\251u|;\362*x=T\027\255<Q\224\324\274$\277F>w\355\226\272,\307\346\275\315\202:\274\324T`\275W\313C\275e\027\270=\2015E\275\010\303\021=\276\261\363<\314\031\304\275 [\247\275h\201H=}y\036\275WR\240=\036p\177\275\271\352@=\357\270^\276\327\\\033\276\243U+>\241\317C<\350\202\320\275UP\355<\3148R=\026p-<\217/d\275\274\345\243<\241\316\273\275\347\004\026\274\234\353:>v\353\264=/\330$<p\267\253=]\312}\275Z\374K=\225b\203<\351\334\001=\001A\022>\316\023\017\275\0352K=\251\340\346=\351\"O=\271\226!\276\3550\031=A\177\t\275\352\224t==\264\330=o\025\247:t\235\317\273:wL<eS\321=\021q\007=\272\031\202\276\201\324\313=\305\r\250=.\306\177\274\227\330\277\274\277\356\372\275\254\211\027\276\005\013\314\275\251\322N\276o_H<\025\004\340\272\242\2709<\020\353\253\275\253h\027<\035\\\027<\2429\036=\033Q\214;\323\022\023>N\245\234=T\253\231=,\264N\275\226::\275\t\345\267\274\037\301D\276\373U\255\275\327\256D\275\312\033\221\275\217\010R>\355\253\326\275\323M\003>\244e\317\274591\275B\304 =N1\375=\267\003\276\274;\331\320<\316\200\037>i\371\246\274\220V8\275x\3571\275R\0355=\342\242[\276\251dF>\244\033*>w?p\275\n]u<\202r\302\275_\3344\274KC!<E\347\240=G\374\000<\335\0363\275i\247:>v\\\250\274\364\346\345=\2331g=\313\036u=\006\356\356\274\3333\240=l\254\321\274M\225J=]\027\250\275\027\320\257=L\275\206=-h\"\275;\364\352\272\\Dl\275\303\271\211\275\206{\370=\n)\212\273\\Xe\275VK\024\276o\264\010<\346\350\013>%\341X\274\032+5\2757I\230=Y\307\271\275\231\352\211\274\2474\304=\302\267\363\275\213\315\004<\277o\357<\341\335\204=\314*\003=O(\">D1\345\273\316\301\006>9\331J=\311\277\234=\3408\252=\230%\035=\340\031\227=\3776\027=\233\035!\275\223?n\274=\272/<\230\326D\274\217\256\r\276\213\317\215;\327\377X=\013\001D\276\t\304X\275%\261\213=(\312N\275s%\317=\205\225\332<\377!$>\220\250C=v\323\301=\212\321\250=0\203\'\276Cpu=\217\351\236=\016f\343\275&\252x=\316-\325\273Rd\216\273\234\025N\276Lz\354\274\251\003\223<\224\220\366<\221+\340\274VB\275\275\323Z\336\275\311\210\244<\036\327H\274\275\360\370=\010\327\276=t82>\331\353\347\275\\`\211=d^\367=z\024 \276\264\366\243=\224\306\254\27500\240\273\342\223O\276\351\237\216=\312\234j<\213\212\244\273\2578\224<\335c\270\275\370\367\000\276t/\237\275\034\262(=v\367\305\274.bj\275\367k\341=\2319\221=\314\341\034\276\215\3144\273\262\252\215\275\007\027e;\330\030\227\275\021\244\250\275\006B,<\274\306\342\274=\023\031>\305\204\343=\367p\216<\320\204\206\275=\232\344\275hbs\273[J-=\343a\017\276\205<\226\275\252\261\252\275\243|\252\275\261/\254\275\317W\243\2751\354$= }\022\276\267\014\352=\355j\224\275`\"N\275]\253}\275=\230\366\274d\203=\274\256\t\326=\r\225#=K\241\237\275\"N\010\276Hh\360=\032:J\275{\005\325\275\326\'5\275\024E\002\2751\2621>\367RG\275\331\rs\275\005\372\304<(-K;.\2564>\362]\016=\021\273;=\021\331V\276\021\325(\276\360\333\201=\323O\365;\301\223\253\275>\246,\275\033\364\232;\000\302\356<]\013\230\274#\326\266\275\261\020\n=\360\266p\276\260!T=z\360`\275\363\252\036=\204Vc\274U\365;=\342\3615>\022,\353\274\034W:\276K\3236\275\322\330\n\276\301\355\373=\320\323|=y\331\204=-[v=\332U\266=\204\324\313\2757\373u\273\322\276\016<\260U\220\275R\023\367\275\217}L\275\3578\r\275\032K\n=_\334\236;p\254\333;DE\030=\351HH=@\222\253\275\305\340@<\005K>\274f\212\\=\207x6\274\374\234\027\274\347v)\274\030\321\323=\225Hi\276w\264\n\276\301\353\341\274/\000$>\261\004\232\275*\305\236=RPZ\274[\177\273;\200t-\275\024\343\275<\314\304\334\275\226\350\317\274\310\2525\276\343,K=\037\344\000=\353\247-\272T\027\242\275Xs\030<\277K\277\2745\221\215=D\227Z\274\243X\020\275\223\231\346<\031\373\376\274\013%\252\275\3366\006>\253}\372\275J\005 \275\251\205\244\275\375\006\270=\037\226\203=\231)V>(\014o\275-\272R</\305J=\323\341t;O\001\335\275v\306\313=j\274\320\275,u%\276\230\221\004=m 2\275|\002\367=\301%\311\274+\352\230\274! />w\234 >[\207\320\275H(\332\275t\324\224\275,*\r\276e\251\033=\316\t\341=&\r\023\275\237 \316<\267\207`=\233\207\327=\205\372\273=\216\016\037>$\367\315\275\252\317\323<\217\376\252\275\334\265\251=\002\2007<\242\025\367<\260C\210\274%\277\302\272\300\343\373<\221\r\340\275\267\355\231=O\223\317\274\334\n\331=\225\340Y\275c\304\330=E2\320\274k\324\207<\302\210\372=\355%\363;#\331\305=\222\267\000\275\374b\372\275UB\t\275%\2103\2752\364)>\031\225\017>1\271\003\275\242!\323<3\337\251;\244|\245\275\201\3443>\254\366\267\274\254\037j\273\325\202a\274\214\346\"\2764\251]=q\262\212=\027\313\214\273\003d\331=\376M\377\275\305\231\007>4\327R\275}\257\242=\212x\"\276L~\251\2728\252\322=\010_\032<\226\332\221=\355\031\316<PRZ=,\310V\275\241\"\214=\211\245!\275\313P\005=\327\311H\276\333pe\275;\325:=\254\351\261\275\304{v\274\r%\237\274\274\247\335\275q\2306\275\217e\000\276\024X\260<\244\201X\276\270\321\250\275\327Q\230\273m\2664\276\275\363\310;\234\317 >uHv=\360\255w\275Ayv<1\275\245\2754\341\253<\257}\233=1\233\036>`4\375\274\373V3\276\332\266\215\275XT\026\276@|\215;.\226\200\275\022\206=\275!Bx=\004Y\225<\016\325L=\220rl;iX\216=\262\272\213\274\332\230\267=\321sw\274D`%\276RB\321=\300\343\373\274\214\362\t>\346\312\r=\312p\302=\222~\357\274\372ww\275\245f\035\276\276L\203\275i\014\220<\330\t\326<S\"\242<jwg<.\317\207\275\350\253 \276O\026\214\275R\252y\275\006\256\261\275\353v@=6 \214<\271\241\315=5\330\326<\316/\251\275\250\237J<\334\222\215<\244\004\274\274\345\363\016\276\207%[=E\335\221;\214\337\272=<|==\201C\204>\025\254R=\2523s\2757qx:\266\373Z\275\310[\360\275\177`R\275\350\274\201=9\300\010>*\240`=\'3w\2750\"7=\265\351-=\201\257\260=\352\363\325\275\225\204i\275\212\025\373=\337\227\370=\372\313\207=\274\350\250\275o\016\206\2757\270c\271f\357\363\275\324,\004\276\237\262\203\276D\246\311\275\033\343!\275v\2500>\261\336\004\275]\247z\275}R\036>\032\345 <\034Z\211=.\016\202=\")\r\274\310\334\276=\223\266\206=) \t\276\033\241W\274\276=\200=W`-=\245\353\377\274\024\337X;\320\271\027\275\n\317\306=\354\021F\275\303\305,>d\251L<\0234O=\007)\005=Wn]\275\301\263\237=T\217&\275]M\307=\215\217\260=\347>m>(\346\245=\t\202\004>\334\003\254\274\024\024\376<8\035\217\275\245\216\205=-T\333\275\014^b\275\243\243\271=\214\023\373\275\001z-\275\0337\211\275y> =\006\224\344<}\353\242\275\370\030Z\274\250\242\003>\026 |\275\377\217v<h\260\255\275z\301>\274:!\365;\005\244\372=\362\246\225<\003\312f\275e+.\274\327\234\303\275\262\210\004>P\272a\275\033n\241;\357\347>=\310\316\236\2758L<=<k :\222\345\230<u9\"\276Z\230\217\275\027-C==8\373\274\300\276\310:\274(\200=\364\263\210=\305\004d\276\306\307\001>\366(\204<\032\333\202>Z\033o=O`\024>\002nf\275\3141]=\204\312\325=\234\006\005>m\212i=P\376\223\275Q\316\r\275\206\200\261\275\250\317\n>svB=-\255\214\275\"\362\327\274t\340<\275\265u\210\275\031\374\316\274\334\000\372\275U\366\016<\277\334\177\275\222\257\236\273/6\305=&\001Y\274d3N=Em\357\274\362\2740=G\305\241=\271\246F<6\351\360\273\377i;=\333\034r=_\001!>E6\373\274\303\256\244\275<\260\242=o\337K=\031\010.\276]3\374\274\312y\242\275\222`x\275#d\003>\221\001\327\275\006h\203=\200UM\275\351\216\013\276sY@<D:`=re\237\274\200\022\036\276\220\371\323=\261\021@<\210j\333\274\214\301\213\275=\242}\276\300[\246=;\r\330;&+7\275\360\200\277\273j\321,>\217\002\276=Dk\221\275wh\225\274&b%=R\202\023\274[\273\036\275,B\032=\274\205\034\275\t#L=\"G\244> \333\"=d$\237=\241\355\t=\367\362\214=\022)\t\275\306s\r>\032\230_\275\r@\217\275\261\260\305\275\267\301x\275\302)\r<\006\267B\274G\005\216=\361\246\240=\027.\020\276k,Z=;S\214=\355\032\033\276h\037\312\275E\333 >\257#2\275_y\221\275\376\237\372=\264\343\036\275\257\216\212=YU\204\273`\347\316=\203T\350\275\302\343\033\276\340\355\377\275\300\365\025\2766!\334=\255&\031=\262N<\275D\241D<L\346\366=U\033\335;\266\210*={\236+<3c\352\272\275\357\005>\306uu=\237C\203\275\275V\234=\347\3421<P\235\335\274\341~$\275\337*,\275hi\357;rFS\275\360u\t\274\337\3065=\341\027B=\022\247\323=\237[\360<s\374\263\275IG\235\274\265\230\321<\327\"Z\271\013j=<G\"\240\275\262-=\274\323^\337\275\255\225I\276\332\276\244\275}E4\276\365\235p\274\301F\263\2757\350\242=\337\021\200=Ki\002>\344\027\211\275\'\265N\274E\263O=\030\342\336=a\274\037<\035_\335<\326\363\354\2747Fu=\"\240\035>\211pT\275\217\262\264\273\363c\227=\321GA\275r\332\031\275\242\305\275\273\364\364\016\275\235\337\205=\242H\037\275a\177\315=\002FF\275W\330\325\274I\315\203\275\326p\201\275\365\365\252=\244\362\026\276\260\007\t>m\224\003\274\307y\227=\334\312\001>7\362\340=\257\272\210=\262d==h;\344=\366\204\034=-\257\214\274\264\221,=l\302\322\275\362Ap>!/\307=\307]\215\275\326\232\315=F8\241\275\r\320\223\275h\243\341\275\000\270\034\275\032\2306\275\252\002\363\275S\033\212=+`\\>p\t\244=a\305Y=\204\325\321\275\345\017\217\275r\004\250\275<P)>\235\266I=\305\261\301\274\260\367\212\275\307b\033\275\356\237$=}\352\267=\211\264\016=\356\203\357\275SxB\275\373>\315\275\234\273\300\275\225\220\344\273\014,\217\274\233\035\270=A\017a>\227\255\361\274v\230\263=\261\363\020\275\306l\204\275\322XR>\034\031\340\274M\t9>\ne\353\275C\312\216;-\327\302\275e\330\256=Dn\221\275\365\364\'>|B\303\275#?\231\274\313\244\227=\344\303\261=\367w8>9+\033\274\271\222Q<\311\307l<\334\026\206=7\231o\275\262bD=\352\017\227\275\363\2151<x\242\303\275\360\t\345<\247\"\250\275\277\244:=\3154K>\353\202\301\275\271\346\260\275N\210\224\275Qx\014\275\246\356\210=\252\3454\275\327\200\204=\300\367\022>~\244\355\275\251\227\244=d$\235;\227\371p<\037J\'\276\345\3452\275\263%\217:$\026r\275H\306\354\273\316[\177\274J\2564\276_\255\357\275f\331G>3\004B>\340\322\235=S\275\203=\345\265\031=-k<\275\0355\010>\342\336{\273B\326\021>9\342\036\276\000\322\345\274\306\034\t>\201K5=\233\351\3229\231\005]>\243\001+\275$\0365\276\364\263\234\275\263\343\n=\010\360\260=\320\321\016\276\372\"\007\275\375P\023\276\0226k\274Z\332\037\275\337\275\3078\222\212\325\274\363U2<`L\233=\024\343$\275\t\2321<W\331\370=\374\351\215<\247\026\361=\311\220\245=j e=\025\300\253\275\213-\234\274\201\372\202\275(\t\344\275V\257\376=M\340\342\274\031\342\236\275\343H\260\274\234g\364<K\266\034\276\365|s<\0142\325=\031\0247\275\3602\217\275LS_\275\361N\351\275\"\262\265=p\375\276=\237\370\325\275\236\261p=\013\322,\275+\277\352=lH\032=\370\'\316=}\305\277=\335_\"\274\266\017}\275\213)\200=\216\260\205\274z\030\203=v\374\265\275\0366\261=q\033\'=\305\003\277\273\251\374\257=\210]\247\275\004f<\275\307\224\214\275\243\266\376\274\300\322K>\256S\320\274\217\267\220\275jI_\276n\r\226=#\206\202\275\317\337\014>m\325\200;\371]\342</\222\367\275a\177\223\275\322\373\031=s\204\201\272\002<\255\273\325\223\273\272\317&\236\275<\317N\275C\021\313;I\241\030>\371A^=a\327\337<\263\\,\274.\245\0319\023\307\324=o\274\327<M\\\007=\300H\000>\343\024d<(K\006\276\341\262\315\274\224\\\235\274\254\203\237\274\253\377&=MG\214\275\265\203\017\276\013\321\013>\214\030\252;Y\307\327\275r\001S\275V\335&\276\204\n\200=\245Y\025\275\246\326&=\267\312\034\275\340\301k\273qi\203=\344-\222<\265\375\251\274\3206\337=\212kD\274\214d\260=\016f\246=\326b\346\274\276g\335;\216\244\005\275\340\000\255=\260\222\337\275\345z\226\275&\324\311\275\207\222\000>\342\365\032>\375\3763\276\'w\203=\n\332\244=%\017\257=-Q\356\274\352\351\251<\3612\033\275-o\245=\001\274w\274?\352\217\273\354\310$=\355\225\316=\3278\271\273,i\350<\342b\332=\343x\017>\272\270\013\276 \024\226=\347\004\361\2756\331\266\274\214\321K\274\013\261\\<\342Gy=EH\210=e\3246\276\032N\215\274\336\344\001\276c\273\235=\304\"\033\275\263\025H\275\225\033\t=\031\3504=\352\256\303\274\266\322\023>\027\350\213\274\223\312&>\022\373\356=\310,\326\274\262:\304=GD\354=\333\037!>\306\006\303<|\247\037>\367w\344\275\232\250\270=\t\337}<\345\204\227\273\357\253\202:\304mC>2\023\350\275\322\211\212\273\260\023\326=s#\026>\241\273\330\274\r\211:\276\313\273\035=\311\2659>eWb=?\351\336=\3259\257=\201<\215\274\225T\245\275\213\344~\276j-&\276\325\360\236\274\244LR=\331Q\272\275\340\230Z\275l\324?\275\353\260\023\275\346\366\016=\300\327\207\275\023.E\275lzZ\275\022\037\236\275]\235k=O\333\031=\305/\244\274\036\272i;N\242\257\274\2252[\276\301\322\001\275\246\215+\275G\226\n\275*j\365\274\241\364F\276\202s|=\250\217\250=\256\030\002=\376\234\006\274\203/\263=C\371\207=\310\376C\2758\235\233<\334/\351\275\226\306\363\274\260\267w=^\230\271<\323\271\313\275\222\253v\275\257\337\207\275\340\026a>\305\033:>\2160S=\235kA<\374\256\023=4S\243\274(>\231=\320+\251\274\260\370\264\275\021\302\236=\211\261\254=\356!\000>\374]\201\275\236\255c\276>\223\245\275\271\347\324=\n\365\014>.\300\240<\t\032\226=\274\307\013>\275\341\212:=\033\211=\000?\223=S0\253=\034\342\004\274\256\304*>\310\037>>\217\250\223\275k\300\002\2761\232=\275\"|\205=\024\235\307\275\340#\216\275\375Ez\275Y\344\270=<S\377=\310e\227;{\326L=k\207X>\320\027\205=\337\324<>a\301\002\274\271n\324\275\027t\362=\222\326\247=\215\213\325\274\007T\211=\260\037\003\276M\035\010=\354\254a=\030q\306<\374\013\3149S\305\373=\253R+\275H\003\033<\342\360\354=\005\231/\276\233\2759\273\274\217\326\275\026\'B:\370\002j\273\320\314\311\274\241p\364<\254\312A=\250\024\232<\314\301\020\275\246J\030\275\237\313\260\275b\013\247<Z\r#\275\333\030\017\276\2742\001=~\305\371<\037X\366=.\2638\275I\014\n\276\240\275\374;\376fO\275\2378\270\275\013\233A\272\225+/=\230V\027=\177\342.\276\3760k\275!Gd\275-\"T=\376\320\211=\261<D>\322\260\210=\245\223\r>\321\005\010<\235W\t<\233\314#=\376\255\315\274\230\256\310\274\221N\030=\204aJ\275\362U\220;\354\254\236\274PB\270<\334j\253\272[=\353\273\037\203\r=W\277\000\276\177\363\020\276r\021\357\275\272Q\'\276\320b\007\275 6\376\275\225v\025\276,\355\210=XU\211\275\206\344\023>\342\251#\275\260\"\214=`Q\035\274\033\360\"\275\022\326\340=\036R\023<\260Z\010\275\345\222e:\200RB>\307\222\027>/_\024=\374Ad\276\313\020\021\276s_,>\351J\302\275\237q9=2\223\275\275\241\306k\275\315\231\371=\247\013,\274\316l\033\276`\341Y\274\322\253\330\274\027\372\206\274\256\235\211\275\252\013\274=!\3029\275\023\313\230\274\010\'\370\275\004\2448\275BUM=\3142[\275S\355\200=\tl\230\274U\246\241=\233xb\275C\330\304\275k\361\211\276\373\3272>\270\034\247\275\013\013\231=xy\013\275@Q}=\261qL\275!\010E\276y\307\024=\t+D\275\313D =\000\347@>\027\372\272\274_\021T<\307\335\270\273\320p\363;\264;\366\273\301\341Z<Y\243t=\030`#\275$\350\252\275\301\016\235=\231\202E\275\314\226\030\275\255\305\305=\250C\006=\316 \250\274\326\007\000\275\317\250y;O2\220\275c\351/\276\253v\201<g|\321=9\332\311\275\221YG=\032&\007>q\263\033>y\023>\275\225@\277\275\366g_\275o\037\021=\236\0178\274\202\252\340\275\262\313\002\274\276\264\004\276\225\252Y\274\332\323:=V\034\003\276\203\2069\275\326\211\265=\271b\321\274\207\365/\274\373\225\n=\276%\245\275\032\203K=O\037\315=\362\320\037=0\301\316\275\226G\303\274\240\331\313=\277\202\035\273)\377>\275\0271\323\274-\234\245=c-\214\275*\t\000=\363j9=\024gR\276\345\224\250=>\335\252\275\033\007i\273\347\301\317\275\355\257\342\275\367\202P<R\347\370=c\353\010>\022|\261\2752?\322=[X\n\276\303p\240=%\331\375=\206\000h=\316\276\203\274\360j\251\275\326nD\275F}{<N\004\225<\234AU<\035\252V\275X\206\017>__\224\275\004\326\236\275\356_%=L(\316<\311#|\275F8J=HIm=;\325\377=\334\014\236\275\225Mm=\370\222m<\004\002\334\275\r\037\366\275\336\226\235<c\265f=\024\350\t=fR\377\273B\367\360\274.\266d;K\300\024=\246\270\352=\245\246H=\334\315o\275\355k\355\275\320\3051\275\240n\177>\371\355y;\031\032o\275\305\272\313=\206\037\312\274\315U\303=\367X9\276k\337/\276_\376\274=\370\271S>\347X\301\274\302\225B\276\010n\207\275G\326\313=:n\r\275\306\341\035=\371\234\304=>}\037\276\036\301\325\275\333\314z=\020\314\245\275\2279z\2744\361\232\275\014\007\273=\264\213\206=\342\274\240=\264\300\224\275\017\005c\276.D\231\274b\357@=5\376\214\275\021\300\364\274\\\2343\275xR\035=\005\037\256\275\002\311\213\275s\032D=\215\315\217=X20=#\n\217;t\032\276\275#;\252\275\365~H\275\034\301\275=\250\370\027=|\347\266=+P\201=\006\246\303\274\024\226\272\272\347\340\327\275\377A\024=\253\244]=\177\2723\274o\372\'\275\301\356\352\275\034\307\355\275\367\327\232\275|\027 \275\002J|\275/n\214=\210\330*<\270\320+\275\356UU\2730\271\024\276\310\232\253<~\006\212=\227<\347<\267\2562<\271\271\334\275V$\361;3\006\315=\031p#\274\267\014\224\274Y\344\301\275k$u=\371\301+\276\305k\322=\"u\\\274\233\206\347\275\2651\007\276I,\311:\210\323*\276n}7=\312\304\016\276e8.=)O\000\276\317\006\255\274\033\263\244=\313\346!\275F\211\275\275\306t-\276\354\273\002\275\303\324i=\337&z\275G\243\336;\025\317~\276\354\3662\275;\351\250\275\353\263^=\033@\003\276\014\360$=\025\233E\275<\017\277=\025\200\327\274\031\357\317=NJ\207\275\374\370\301\275\210\355\332<\245\265\007=\310\026\223=XP\230=3\177e\275\375\320\351<\375\331a\274\332D\n>\013P\350;\206\360\231\275\210\273\321=\364\250\322<\313^\225\275a\233$\275#k}=\331w\272<\212\214\343<\275`\354=\223\200\266\275\313\024b=\323\374$>2\027\316<\0160\002>3.\346=\232/\204\275K\323\335\275\224\\\001>\263\321\010>\355\325G\272\261\352\332=nx\n\276\237 \242<\220\024\315=^\273\336\275\036\340y<m\027\032\276\231HP\275\005,\033=O\232\227\274\330\027\332\275\200\360\010=\311\367\001>\230\007\327\275\254\342\246<*!%\275\312\316\000\275\335\0319\275\263\204-\276\332F\210<0\022\313;\242\272\017>8\245\003\276\272\r;\275(\307s\275&\017\r>\307\360\221\274x#\306\275\362\3170\274.\335\325=\225(\322\274\265\232\323=\262\371\212<u\n\307\275\212\241\270\275\352\253\276\274<w\257=\320z\004\276\n;\223\275\200\274[\274\031Ad\275D~]=3\376\331\275\207V:\274m\035\205<\277\323\300\275\316]\201\275_\302&<\\\265\332\275\326\262\022=q\227\202<\267\013\021=\t\230\030\276\372o\213\275\265V\224\275\t?\031\276;\274\262=\344co\275\005\324;\275\266\370\031\274\010s\037>\227HA<}\3552\274\201\310\260;\005\004d\276W\250L=u\270`\275E\325!\276\302#\223<\355[\017\276\346\356K>\363BQ=J\036\363\275\031\205\021<\335\257\323\275\302o\031>\341\\\275;\355\036\035\275\233\365]>\'\307\320\274\220\233P\274\337\032\211<\317\036\327=H\354\321<\253\025\316\275\230\240\'\276\247C:\275\371\027\r<l\366\013\275\211\250\306=nN\001>\026-\032\276]a\027=\340\325\'\276rf\226\275[\255\306\274V\250\206=\314k5>\361\260F\274@\244.=n\273Y>q\246\023\276\354\204\370\275\022\027\377<\260W\370\275*\262\212<\375\026\263\275\001\260\035\275b`\"\276\254\t\305<\006\357\265=F\253\247<\177\031\021>\353\001\201\273}\210$\275\034Z\305=\361$7=\275\250\326<\204a\267=p\001\257\274\257\rl\2766\2342>\177\021\305=\315\265\256<i\247\031<Zn\021\274\346\276\"\275L\232H\276\035C\025\275\247G\206=(\323\232<\361N\224\275\3625I\2745\224\234=\2648\355<\374\356\005=3\337\367=rt\326<\251\325\255\275\354\n\243\275\023R\241=6\311o\275\355\203\017>\266\361\331\273\301(\206\275\004\322\363=\241=\237=\201\250\326\275Q\347\314\274\321\337:\2756\026\351\275b\223a\275\252\315\377\274\177\332\024>\013\312z=\266\216\317\275/\247\343=\323\235\353\274\324\275\033=5{\361=\033\322<\276\013hC>\350\307\326<\273,\232=\037\006\033>\227\351\031=\247\232\317\275\336P?\274p\314d\274\301\361(\274\321\374\025=\'Yl:S\354\266;\234\305h\275}yR=\221\016\320\275O\302u\275%\327\226\275\021\314$:\274T\264=\277\331Z=\352\334\t>K\222\023\276\224\243>=\035n\020\275hz\026<\344+\222\274u\364L\275n\234\007\275\305\233\026\276\024g\032\275E\250\022\276/\273\036\275\217L\252\275\245\244\343\274\203\212\223=\'\310\017\276>\240\036=\260F\335\275 \027=\274=\253K\276|\304\237=k\001\355\274_\014\241\275<\305\034\276\014\210t=\215\010\230=\2507\263<\221\354&\275\357o\212=\024\356R=\232\330\006\275*\016\331\275S\260\330=\327u:\275\324\312\240;\034@\231=\2624\312< \"\275<<mm=\303F\331\274\354\030\200\275\366\304\364\274\200)&\275_5\022>\270:4\275\361\257\327\275\264G\205\273\246#E=\226;a=\305+\033\274\231Cl\276\265\363\347=S?{\276\342\021#=\306\375\253\275\266\026%=\270}\205\275\334\270\275\275\030\026*;\006sl=\2314P\275\325^~\275\001V\350\275l:\270=\311e\004=\263Z\207<@\354\003>\346q\t\275q\301\306\275\215\252\344=\242\031\257\273S\246,\275W\232@=A\177,=\371\343\305<\006\013\225\275\346f\232=\256\327\310=I\245\216\275\207D2\276\244#6=\247V\216=\034F\203=\0174\020\276d\003\030\276\271tP\276\354\301 \276\226\214\235<\362m\375\274J@\312=J\342{\274\322O\235;\377\365\001\276\313N4>`c\371\272\220\364\306<\273\311\n\275\007\242\273\2758\"\301=v\201\244\275\207\017U=*@5=\311\236\357\274\221F\223\274T\366\270<\211\357\003>b\010 \276\317\302\006=h\303\257\273\335P\035>\322\025\341=\316Q\251\273H\324\021\276@\251\244=Q\264J=\3136\347=L\334/>^`\254<\272\302\230=\260N\034=-\202\316=\235d\271\274\021J\366=\"\2356\275\365\007\026\2756H\214=\241\225\301\275\314\357\357\275YXq\274v4Y=N\347\317<7)\202\275`\313&>\302\203\023\275\332\355P\275P-\030=\274\325\r>?\321\306=1&\243=\202d\262;L\266\024\276\257\230a;B_>>\230_\362\275\364\361\215\274Zi\350\275\361\3270\275\265V\227<\262#A\274\314\3352\274\2200\020=\376\306\225\2759\013:\276w\276\334\273\n\357\010\275\312\3321=\2021\037=\370G\224\275\302\313\324\275\257d\210\275\363e\226=\275\351\237=jD3\275%\204\215\275\032[\207\274\310\334)=u8\211\275\317\037\327<\334\361y\2733\327\354=O\n\351\274_\035\272\275x\231\331;\237\207\200<\277+.>\222\374\304\275\342PD<8\371\245\274)N\302\274\354\326\265;\330\276\352<\276\217\362\275\375@\372=&\307\336\274\213EZ\274S\"b\276\250\337\366<\214\240\202<\210\210\336\275imC=\337\347}=\372O\004=O\240m=N\367\013\275\221\314\'\274\255D\177\276\016\261\001\275:\253\013>\032oz=\322-\\=\000\020\323=W\003\336\275y3\317\274\327\374\372=\322\256\236\274\216\024\214=\035,\222=\330\260M=EW\276<B\316.\275{Y\303\275\266\344\021\275a\362\013=\327|K\275J+H=TWB=\265\200\270=\350|\237\275\034\203\211\275>\r\330=\302^\312=\023Z(=\033\220\304\275Vh\006\276\256n\031>\026l\352=\300#\311=\316:^\275_3\350\275I\243x;yqO\276\241\232\005=\351\031\305\273\302\300\031>\357\203\030\273\024\340?=\243>I=H\235o=:.\317\275\267_3=\226@O=\333\336\257<\007\372;=\220\305\364=\0227n\275\310\260:\276x\007\260=r\340\037>v|\235=P\353*\275M.\334=p\'\030=I\010\326\275z\003\235\275i\0260\276*\361\225\274K\256\340\275\235p\003=\273K\304\275P\312g=\365$\202\275\324L\255\2759V\235\274>\263.\275:\372\001;nuW\275]w\024=\026\264\264<!n\226;\025Z\r\275\210\2250=\027\032\255<\020\211\247\274\223\372$\275\0323L\275[\336\264<\303\373\247\275\2108\032<\221Cm<\255(\300\275\r\211->\353\323I>SWD=\227\323R\276\255B]\275Uj\350\273\200\037\231=\371\251\217=\263\236\204=\250\027\202>\311\227\202\275\271\344u=\250\334;>\305[\211\274\262\326\233\274\200\007\255=\352\233r=\365}\356=%mA\275\340\006C\275\254\201!=\001\367\000>Vd\331=\177+\267\275D\214v<\317&\303\275eY\264=S]\337=\302\251\243<\217\'\006>Ip\315\274\262C\237<w\236\200\275\320\335\212=\313\245Z=\216-\263=4H\255=\201\215H\275D\r\"=\354hd\275d\027\275\275\273UQ\275m\205\020\276\376\246\264=m\276\003>q\217E=\372\262&>\311/B=J\231\337\275\347\304\340<k\224\320=\206T\217=\320\010#\275?)\327\274\343\205\207\275\t\266\255\275\204\306\231=]\263\232=.\204/>7\215\002>\0354\300\274\326\206D\275\036\376\013\274n0\000<\233\2220\274\214\350\n\274o/\t>\177\375\205>5%G=\322\203\010\275\215V\262=4\322\020\273&7\240=\351\366\243\275p\021\274\274;\241\265\275\374\356\200=#\237\232\274\034\333\001\276?\235Q=\245\177\030<\340\363\371=\024\213n<^\203\021>y\354\306\275\235J\302=\r\000A;\3757\237=\265\356)=\324\210\177\275Z\245!\276>\201\212=\325\256`<c%r=}$V=\237\025\346\275\233\253\036=\310\252\r=\036J =\330E\321=B\245\n\276V\314\005=\2707#\275m\013\275\275k}/\275\363E\362\275\271=\261\273\323\034l:\266\300\356;B\227\201=\352a\316=+u\002\275A\r9=\231\353\312=1h\021\276\242\206\354\273\036\271\345=\006\253u\275\0328F>\375\030\321<\304+\336=;\224 \276\341;\"=\354\020\206\275|\300\316=\205\013 =\230\010j>\335!)>\333\267\016>\221\353\340\275\316s\215\275vES=\315\211\024\275\233_\242<t\312\027<\262\366\303\275\302\300%<\306MM\274\226y\004>\270]\252\274O\214l=`\370!\275\251\203S\276\030\005\372\275\232\350\265=\222\007\204\275\212\346Z=*\335\302\275\024\232\\=\303\001\263=)\274\224=\210\223\013>HHj>\"\327C=\272p\335\275\315x\0049\307\353n<\227\326E\276\037\033$=Y\374\n\274\037\261\261=\252\212\243\275\n\347w\275k%\221\273eTv\274\322X5<\311*v\275\255\335\256<\000n\306\275\377\203n=AD\007\276\214e\247;7\340\022\276E8\356\275!\316\302=\245\350\023\275\207\317P\276FXb=Ldf<`\337H<nr\305\274\272 \306\275\342W\364\275\310\262\227<U\362\255\273;\346\241=\262\322&>\033\277\255\275\t\r\237\274\252\313\303\274\207\236\315\2731L>=\347\253\357<\200\255\266\275&\223z=40A\274\37766\275@\201\004=\313\226\300\275\253\355\002=V\0307\275I\260\310\275\240\317\201=\314\375\263=g\356\022\275ji\215\275`\236g\275\214?\013\276\247\310\026\276\'\242\260\275iR\300\275~y\006\274\031\242r\275(v\t\274\'\021\305\273\217H\206<\307K(=\037\201\035\276\206\356\342\275\001$\010\274\344\022\312;\347\375\217\275\241\357\257=Y\345>>\314o\253\275U\221R<W_\235\275=O\325\275\016\226\363:\226\272\023>\253a\361=\317\333\200=A\356^\276o\261\265\274\331\377u<\353R]\275y`I\276)M\227\275\301N\177\274W\002\300<\013\253\223\275:\322\">q\0257<\205\345@\276\035\340\027\276\243Bo\275:\240\324=\\ 2\274\205\317\037=t\241\216=\006\314\267<n\016\362<\226\014\003>\237\035\342\274\342\241\266<\242\3376=\323\245N=\337K\331<\275\337\352\273=\035\227;\274\336>>z3\256=\324\363\351=? \240\275#\327\274;\323\220\221=\2324\212\275\354\313\261\274\336p\256=\274\2262>j\362\265=\377\225\255\275\204\214\377<\367\2629;o\251/\275,\364\267\273\352\326\177\274\343\271\n\276\311\237\013=O\002\313\273Z\363\r\275\253;\302<\225i\014\274\357\360\205<\261ab<\377\245\017>\333\262\357\275\3631M\276\005\362\240=!\276}>\353\245l\275\277y\033\275Z\204+=\301~\023>lZ2>\320\212\003\275\210\345\366\275\337\017\215=_a\300=\320\014\026>\264\304@=\007\351\201=\333\n\n\276i\217g;\215\022\323\275\276\262\201\275x\326x\275?%\030>BbO\276\233\217%=\221\245\231\275\205\261w=\005:\341<\236B\036\275C\233\002\275\347\'\004\274\217\t\234=v\337\013>K?\253\275\005HJ=\324\324\310\274\212\324\005=\251\274\277<\276D\340<\376w1<@\023\250=F\201\023\275K\215\326\275^\020\223=\007y\213=\263\254\235\2758*-=\314\333\351\275h\205l=\034\270\000=\300\275\022>\347\262\214\274\'{\223\274\305\177\315\275\216\364\023\274\322^\n\276{\016`\275\376\365\205=\260\t\t\275/}\220\275o@\205=K\220\033>\037\001\224\275go\215\275\352+5\276\263\205`>\200Cs=n\014\024=\225\221\036\275\241T\302=\261\276\n>\374n\225=\327\243\321\273\2271\215<%\332\363\274\354\341\204\275\310\0348>\275\250:=LM\353<\243?\336\275C>.=\177E\313=\006\030\007\275\2622C<{=\331=\354_X=\317\273\261=_t\304\275\360\021\006\274\005\007\003>\2721\222\275%>\013>\344\030J\276#YX:\202\346\354\275\241\362\353<\n\020\n=\317\327M\275\354\303\214\275\317\231\215<Wx\204=Y\247r\2750-\246=#Ey>\026wK\275\366\033\311<\177\303\350;\210\331b\275\236\360\247<\270QJ\275\237\357\205=:\323@\275\234\323\025\275\021s\304<0\253\224=\025\3025\275\357\201\224=c_\250<@\322C=\327\343Z=\357B\217;\324\'\224;2+\343\275\300^\210\275\027\026\220=\314\033\030\276E\374\013>P\316%>\'\"\355<R\320\365<\324\367==q\251\324\275\255\341\200\275E\212\254\274\216\227\023\274\236\232\244=y$\023\274^\213{\275I\265\253<#n\211=\351\304\252\275q\202a=RC\336\275&\374\005=W=\006=\233(\307;\300\362O\275\"\341^\276k+\314\275\245\007r\2745\374\346<\216a\255\275FnF\273p\027\200\275\311\037 >n%\227\275\030\010\307=\253\245\315=q1\347=\326!c\276\032\355\324\275\377\014\244;\301\250q;!\205\251\274\367\317z=o\321w=\340A-\276-g\034\276\275\271u<\tu\n>0\013\'=\247\235\372=\345jZ=\360;6=\223l\376=\210]\236=\212s\332=D@\025=]z\207\27402G>\014\241\350=\013\277\350\275\217\241\310<=9\336=Q_\207\275\335.W\275DV\250=M\032\013>\n{\372<B<@=\274\0203\276\304\246\313\273\315\033`\275\247\245p<\334m\260=-\274\271\274|c3\276\270\3238\275y\027\027=@\203\210\275\2716\204\275\264\343\266\274\004\340\336;\275\311\204;\016\332\024\275]y\330=T<a<Qo+\275\300UL>g]\211\274\300\223R\275\335,n\275\344J(\275\214h\031>\264t/\2760\200\377=\247\315\242=D\346\304\275\r=\276\275\225/5>\343T\224\274b\000\323<\337h\013=\265\210t>\212\245^\275\275K\020={2\253\2735\3767\275\232\315<=s\215\254=F\250\252\274\275\\\027\274>\322&\275\254$T=`^\274\273\216b\n\274\251\315\246\274\336>)\276\374r3\275.\247\034\275\2412\362\275\314S[<\255\220\255<\006\263i={\246\217=\002\010\325<\035FA\274N1\333\275Oq}=\365\357\002\276\240\315?=\t\267v\275b\330(\276\'\034\351\275j\r\200=\332\277/\276\242]\232\275\022\261\257\275\'\222\222\274\030\201\017\275\355\010\002=\301\317-\275y\351e\273\341`\300\273\276w2>\277\221\030\275\261\310\201\274F\220<>\346\344\037=Z\232v\276\007\264D=;\n\342\275!;%=\037\346\335\275\233\304\r=\255\231\026=\017\263s\2759&\016>\315\263\201>\347\177\257<{j{=\023\260\327\275\312\324\026\276O\216\263\275Q\307\272=!\002\216=\306\273\320\273\210\211\025>b\023\351=\217#$=\031\331w>u\036[=E4\231\275\355\356|\275\212=x\274|Y\214=\240\216\337\2759\304%\274\312\202\317<H!(=\343\270/<\315\204y\275\0171\322\275\305\212^\275\203\376\267<\234\305+=K\n\212<D#\261=\272f\236=\206\312\266\275-G\263;\343\034\201<\3274\312=\013\267\267=\205w\245<\001F8<EOo<\323\\\342\273=\010\347\275\301\300\242<K\315J\275*O\352=\351G\350<v\274\r\275\264\026_\275\210\207\276<\353\320\'\275\243\r\206\275f:7>\007\016\210\275\243_\001>\005z\230=\007\232\033\276\346\305[\275\204\364\036<a2R<*\325\351;\372\245L=\352D\260=@W\342\275\305\247\024=\207\220(>\376\007X\274\362\264\357=$\370\343<~wv<\003t\036\274\263AF\276\214\272u<0O\207=*:\233\275\304\272\302=\"`\006\276\033\303~\275_C\231<]\251\017=\255\r\261<\342\024 =\037\254\300\275\t\230\323\275uwi\275^\313\'\275\354\221p\273VN\217=\303SB\276\217Z5<{%\372=\246r\010\276\204\270\234<\2723\226=W\035\341\275\353\217\223\274\301\035\360\274\236Z\237;\373\037q=\322*1:\213\326Z>f\005\377=xTU\274\227\307\346\275,l\266\275\'\264;<\227\327)=v\327\014>:\356\272\273\272\264\262\275\022R]>\311W\t>\000\005\301=\034\372\r>\206n\010>\037\243\232\275^\342\300\275\355\363E<\025\001\021>\310r\362\2754I\003\274\352\345\317<\206\314$>H\223\035\274\037\346\353<I\353\332\275\235\355\017\274L\302\333=\362\365\307=F\332\210=\355\223\316\275RqR=6\014\275\275\217\201\277;!\261\027>\n\234\233=\316\302\":\310FX\273\366\237\"\276\021\r]=\200DU\275}\240\300<\346\342p<\260E\251=+\177\253=\037\034\231<|\260\223\275\355\341\215=\336+\020\275\331\000N\276\316iP\275!\364\014>\234\030y\275\330(M>`\275e=\243-N=\272\300*=\330`&;@\016\215<\223\324?\275\023\347\255\275\021/a\276}\237\014=\343(l=\365\3001=T\304\376\275\243\233\226:\022-\023=\236\230\306=\354j@=\354|\333;\317\333\216=\244\310\'\276\030 g=\346\330\004\276\030Qg=\017<\006\275\351\355\004\276\274\215\344<\032Q\005\275\275]\221\275\n\242\250\275\205)t\275\021{\202\272\356u_=\025S\023\276\037\201$\275\261\0043=n\325\337=\312\306\240=\275\325E=~E\250\275\303\247\347\275:[\327\273W\343\025\2768\027\360=\300I\010\276\333\346\304<\305\210\232\275\356x\223\275\000\350q\275\177\004\205\275\336\3667\275\245\0174\275\276\274\022\276\343\'\244\274\354\007\001>(\262\234\273\311\275\220\274\263\261\213\274\'2a=\302\247\001=\005\024\305=;b\351\274\311\016\366\273>\001\241=7\017\217\274X\325\361\272\226]\022>\362`\001\276\033\332\353<\267I\270=\256\366\317<\231\246\035>\241RL\276\210S\323=\244Z\235\275X\t\217<\226\034R>\231*\273\273\300\315\325\275\365=\273\275\001\272\203\274\035\364\317\274 \362\001>B\237\223\275\347\270w=\001z\027\274\314^1\276\370*%=\211\202\224=\360\'\303\275[\373\272=B\256\337=b\360b\2769\374_=\342\2200>\252)\036>Y\036\177\274\353C\374\273\264G\\=$\307\370\275O\326\236<u\353\210\273E\304\235\274\007\025\031\275E\223Q=\264\3205\276\252 J=\322d\272\275B\240n=\337\307\353<|!\t:j\334\335<%\372\254=\233,\317;\324\226\207<\021\371\301\275\223\333\253=\207q3>Jt\257=\200\216\373=S\307\245\274R\330$<6\024\203=r\035\020=\371i\016>\024\374\030\276\371\364\032<0O\310=\202\370\206=tl\312\275Lb\310=;*\250<\0308Y=\2209t=\342S=\275\245\304\252=\360\037\367=\264W_>bi\257<\274\256n=\274\231\365=%M\251=+l\007\275W\366\031\276\257P\202\275]\rM=\247\232\014=\222\273\313\275\267\257\202=\007\353\223\275=\037\205<Q?\311=\372\350\233=\203\330v\275\013\006\026\276\'\207F=\246\330\325\275\261\"\276\275\3421\033>S[p\275.\2042=d\363\224<\"\271\265\275\244\335D9[\006\354:\332\315\205=\265X\273=|b\365\274\305\246\367\274c\240\031\275\005\210\030<\301\232\016\275v+\250;\246\'\351\275\216\210\211=\013=\374\27497\353\272\355\020\273\275\323\230\240<\276\177\246=\300\360B\275p.B>\214\327t=V\271/\276\344\026;=\036m\036\276e\014\271<x;V=Y\002\374<y\335m\274\370[R=\341D\177\274\351\304\021>\223\307\275\2749\261\312<\346-F\275\371\241:<5\331\014\274\274\226\021\275\314&\033>\316;\232\272a\032\224\275\006\223\340\275| \034\276\t\325\255<\267\302\346\275\005\234\034\275\313a\360\275\340\n\260\273t%U=a\353%\275~C(=J]\327\275T\376\214;J\233\360\274\231\367\031\275\013G\003=\2602\001>\223\003\376\275\350V\237\274\r*\271\274\317W3\275\034W:\275\337\031$>\273\332\251\275\265\220\300=\264u\330<a;\346;B\031\252=7\246?\275\001\374!>\377\214\266\275\016Os\275 \373W=C\244\236<\365\370\351<\220?\311<\326\270l\275\216\366H=k\"\363\275r\324\273\274\177\243\315=O\016\257=\364q\272<\375\026\305\274\266\334\330\273\007\210\034\275\031\036&<ks&\275+\274I=\337P!\2768NB\275h\362\010>\301\276z=y\277\227=\n&k=U\027\260\275\037\005\251\275\n$\257\275y\270i=\307\035\227\275\2132\262\275\212\353\006\276\005\215\212\275\337\254g\276\037\226\302<N^\002\276\320\375h\275\262\305\325\275B\r\204\275/\216\027>\232\322\003\275(F\252\275\221\302\020=\263\340\221;f\345S=-\336\376:\006<\326\275\016\312\343\275|\254\005>\030\036\021\274\342h\246<(\r\260=\026q\226=/\177\276<\221\017\365\275K\220\362\273@%!\274\336wW<\035\336\211\275\362\251\250\275^O\026>\321\261\014\274\336&4>E\3070\274\001\221\207\275?x\r>xzd\275f\314\032\276\tF\337\2758\204q\276\0245?<\362\330\252=\205u\321=~.\014\276d\n\024>\007!\024>\233}b\275\024\361\256\275%\226Z=}\246?\276\230\207\204\275\356\0366>\203\244\000\274\372]\220\275sR5\275W|N\275gO\307\275\365\000Q\274%\335\013\2755\324\001=\212\205\355;\250\3305>\221\227\372<\265\376\212=Bu\233\275\335z\243\275\261\343/>\331\272\240\275L\264\263\274*\304\313=\224Km\275y;\361\275C\261_\276\223\343\244=\353\232b\275\330\230\231<\224\0009\275,\006\273\275mw\317<7\211y=\246J\325\275\352?\013\276=B\032\275D\014V<7\2469\273\007\300\302<\250\t\272<\363u\214\274\235\274\274\274^\361\364=\350\010b\274\310\331\206=\237\361\205\275\000\370\221\273\234\205\277\275\307\355C>N\221\234=]\217\004=\3318\223;n\"\335;\201\000\023\275\377\347\222\275\007\"\010\276\342.\036<2{X=\275\322\036\275\213\320\021>\033\355.\274LV\330<%,\351\275$\237\021\275\024Sg\273\270J\034\276\324\233\n=\021\034,\275\3049\203=f\302\376\275\275[@\275\370i\363<\315\n%=+\375q\274?h\237\274>\277A\275\367e\257\273\014\304\266=\300q\210<\344l\214\275\245\364}\276\372\205\257\275\352\"\340=\211\025\320<\343\264\002=\224+\234\275a\306\347\275\375\023\232<Z\313\021\276TN\230\275\016\310\224\274\256\220\007>\256m\017\276\007L\032\276> \215\274\302\210\244=\000`)=o\201\271=\366\0343\275\340\277\003\275do%\274L\3333=Z\314\231=\0237%=\322`\223\274\345\335p<r\254b=\002|z\275\257\213\205<\201a\354=z,6<_(\226=\226i\235\275\266\260E>\334\224\254\275\336\027\310\275\342\017\207\2755Y\237\273\013\314\237\275\223\310f=\370\236\010=\365\\\201\273\323t\325=\324\363\203\275\307\346S;\221cw\276\356\206\007=\374\373\252=\233\206\234\2739\321\210=\241\344\315=\0268}\274G\347\243\274c\375\005>\331\324\302=@\032n\276u\2102=\355A\203>]\311+>\000\316\366;\257\317p=\221\221\342;$8-=\230!\034\272\275q\351\275\262\232\330\275k=S\275\'^d\275\376\030\037\275u\237\013\274r\245\215\275\347\220\305=\362\005^\274\301\317}\275\364\'\032\275\275\000==\300h\022\276\340Nf=\020\037\020\276Y\244\034\276\341Y\306=J\240\326\275z7\256\275\355}\305\274`\360y\275Xa\222=\034\275\347\275*\365y\275\355\031\217<\335\264\322\275\256k\261=\344O\033\276LR\016\273\337\037\014\276\237\305-\274\373\243\205=\034\226\273\275\356\311\000\274\217\016C\275\370\231\372\275\277\0040\274&\205f\274\240\230\224<\327\016\344\2757\032\300=\005X\302\275\\\221\346=\270 \314\275\204\236\211\275\025\341#=\232\244\344:l\021\010\274\026\320\320\275\217N2\276\027E\216\274\355\372\314;\255\022k\274\035\"\320\275\002\356;\275\344\"\377<}9\360\2758\336\024=\\dX\275\214e%=\267UF\274t\307\\\275\"\312~=\013\240\243;\355\351\020\276%\311\303=\370+:\275\255\272\t=\225\200\004>\231\220c\274\177\021\355\274e\t\331\275%W\274=\n7\020\276a\210\215=/e\013=\231H\021>\352\017\373\275\355e >W\214\177=\215\231\004\274\216\035C\275pI\205==\257 >\'\217\023\275\254\333N=m\r8\276CF\367\275\277U\240\2750\360\253=m\021\255=\355U\340=\257V\014>0U\216\274\227\301i\276\307\002D\276\236E\327=\213\242\023=\322\004&=kz\222<\221\321\001\276p\366\257\275NU\200;J\312#=+\317\317=\215\364Q\275\311\310f\275\230h\314\274\354\355\027\275\261\211\200\275\347W\004>b\236\327\275\232\342,\275#\020\366;n\t\377\272\333h\203\275I\201)=oM\265\275\350Ar\275[\020\250<{\004\033\275_\301\253\275\021\220f\275\211\301\373\275@b\n\276\314\242\006\275QQt>Tj\031>\025\322H\274<\225\204\275[\323*=SX\241\274\207\212u\276\205\372\205=\367\253\336<\316\220!=W\273\371<P\242\346=\002\362\201\274\250,\023=\267\312b=\371\352>\276,Od=\263Z\235\2751\2712\275\215eb=$\211\274\274\251\207\260\275 \234\037>Dm\324\275\336\333\332\274\326?\347\275\020\"\255=\2252b\275\321Q\022\2754U\327\275@\250\262;\247\350\213\275z\311\227=\350\014/\276\353\035\347=\t|\210<\030\033\327=\rW\207<g6\322\274\222x\025>\300\216:\276K \265=Q\241\350\274@5\225=\375 u=\036OH=\241\334\222\275\365,Z<\235\372\317=(\020\301=v\226#>u}\t>J\367X\275\341\324v=6\032\t>\005\264G\275p\343j=\317j\354\2748L\333;W\025\361<D\206\007>*=\023>/\210!>A\310\306\274\001P\352\275\275\372\274=Ms\200=#\177\005\274\2048\000;\202\331\242=\234\371[\275\016g\005=\347\220\317\275_Ay=\323e\"=\352\\$=\310\036\r>\327\206*>\232{\211\275\330BH\276\201;\001=Q\366<<\233\030\002\276\336\321\342\275\323\002\211\272[\200\232=J\222U\275`\r\007=$\370\023>\306>\315\274iz\301\274\317\322&>\253\266\r\276\345\211\257\275\374\026\002=r\304&\275\365\367\316<s]D\274E\022~;\025\004[=\t+>\275\302\3478={\"\217\275ka\245\275\'\232|=\247\354\301\275\006.q>\005\201\200=\365\221\311\274\333\206\363\275\204\343\310\275(\321\204\274_D\236\274\236|\256<$\'\312\275\352~\351<\362\210\263\274\372\343n\275\211\225\375=\247,)=%^\325:(tO\275\005\352L\275D\340Z\275U\277\350\275\036\377O\276\373C\252\274\206F1\275c\371>\275\033,3=\024\276d<\010.\304=\375\372\217\275\323\225]\274D\014\205=\277Rk\275BMI>qJ+=\2155\034\276\031X\320<\311s\373=\000\207\201<\234$\244\274\000\272.=~T\305<:e\325\275\277a\322\275\357\'2\275-\211\242\274\253\301\237\273y5)>\024\254\324=\0002\222\275f\212\233\275{\0335=\367\n\010\276}ZC\275\022z9<I\244\364\274?\206!=\220\225Q>\302\350\357\274\220\020\031=\017\337\026<\222k\202=\033\003\235\275\235\220\331\274n\'\020>U\220\222=\004\256P\275\214\244\032\276\365u\266=\007C\370<\n`\311\275\366av\274\227\214\304\275\241\227Z=0\303\010>\236\206\220\275\202\022\026>3[\025\275\372\327H\274~\245\314\275\222~\241; \256g<\367m~\275\256\253\005>\360\031\220=\233{\3206\354D\222\274\002{\002\275\000\372Z\275\224\2358>?\016\002>\230\267\316;\232\365^\276\217\326\200;\r\267q=\317\373\314=\t\245.=\355]\225\2753\262\327\275PN\342<\353\230_<@%\340<\377\247T\275;\203\244<\306\334\255=\310X\312\274\270\266F\276\304\216:>c\263*\273_\025\245=9\3467=\022f)=\216\232\327\275\312\225\221=\026V\202\276\226D\254<x\351\311\274+H\344=\353\216w\275\230?b=\313\201\002\273\323\241\313;y\036\360=\372\234\253\274\006v\302\274\271\233$>\016\256@\272\035lU\276\'}`\275\210&\000\273\246j\267=\002\205{\275\016\325%<n\211\261\275\266\352x\275I\014\006\275S\247\245\275\320Z\001>\330\342*\274\224k\240=J\237\243\274\202\305\217=u\241\034\275\245\262\221=\362\0251\275\347\234*=\245\221\265<\260\345Y=7u*>2\275\\\275\226B6>w\224\333\272\342\273\360\275\357\033\304\275\025\352\334=\267{\201\273]+\260=#g\t>D\352\301=^\367\327\274\331\372j\275\215\330\027>\371$\224\275\177\352`<\336\206>=Ky\014\276\237\207\353\274\261\r\006\276Q9)=qp;\275\0218C\275R\006\026\276d\007\017\275\240\246C=Oc\350;\271\202$=\303}\025>k\276@\275\234\033\323\274\220%\201\274\246\200v<&\373\037\2763\r\223\275v\305\303;\352\355:=\307\337\241\275&\237\226\275$J\356\275\217%.>T\r\355=K\261x<<-\237=\301\233\024\276w\327N\274\322#\255\275\036\036\302<aB.;\314G[<\261\211L\275/\262,\274\236\2316>\244\326\"=U-\030=\335.B>\340g\365\275%\300G\275\272\307\347=A\234\024\276K\347\344=\214\353\002\276Z&\376=\022\351\225\275\211\024/\274\032\210\017\276!\202\r>\370\303\300=\033\234\007\275\212\224\224\275\332Q\335;\364MZ<y\255/\275\220h7\275F\325\337\275\330\372\336;\030\217T\276U\307\263\275\020\353\206=\262H\331<\222\327\353\274\337W4\275K\326Z\276\007\020\243\275\346\346L=Q<&<(\325Q\274\224ZQ=\376\230\n>\371WE=\3572\002\276\221s\204=\375\226S<\254:\215\273\0019\246\275\321\314\037\276\251\222\010>\270\271\027\276\343\251\'\274\035\372\251\275!1#=\001\202\245\275\300\337\277=\014\007\230=\314\003\272\275\207\325\250=\251\306\276\274J\200\217:\341,\217=cr\210\275[a>\275y4\270=\365|\233\274D\003\037=\271\244\313\275&\372\024=\351?1\275\032\315\250\275\320l.\275\225/5\274\030\225\r=\030\300\325\275#\252<\276\301\213a<\\\267\210\2757\177\375\274+\372\253\273\277\247\247=\344\307\270=n\271*\275\210\320\216\275\t\264P\2758\204&\275\021\352\037\276\221\271\334\274\264\237<\276E;\367\275"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8943727
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/random_uniform/max"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\376]*\275\220e\234=\241\337\304=\200Z\000\274\373|\312=\254\364\346\275\235r\024>xH\002>\n\235\303\275\216\277\376;\223\346)\274^\231\246=r\240\020\276\205)\034>s9\217\274\024\226\215=\254\\\362;)\267\317\274{\237\222\274D-\221=\225\033\277\273\014;\224\274\244\034\314=1n\275\275g\264\277=\035\340\345\275\017\304\017>s\265\257\274\246\222\357<v\257<\276\030o\364\274p\351N=6\306\203=7\n\376=@\260\200\275[\346U\275>\237]=\346\275\212<\311\306\321=\303=\\\275\257n<\274\030\245\231=m\227\013>\005Z\365\275\213_\332\275\275\267\003\274\01380>\222&\225\275\347\332 >\367\231Q>Dj1\273\262\236\256=\351\341T\2759K\251=\017u\206=c\267M=\271\207^=\237J\235\274A\200\305\275\022\010\227=\272\355\374\275\330\3359\2757\2271=\204\014\366<_\337\222=\364\316\276=\277\311]=\032\256\022>\337\000\201=xh\253=\246b\314=\343w\225=\300v\232=z\325\236=:\217T>\230B\024>>\357\247=xK\r=c\006\311\275;\354\201=r,b\2747+~\275sX\003\274k{\021\276\327\035\024:\3505\225<:\2169\274s\026\266<\257E<=\225\263I\276\003\313\031>]\362+\275k\342\245=\"\363S<\372u/=\351]\001\276HC\233<\013\r\362=DO\201\274/\026\211=V\337\347\274\373\331\034\275i\326\227=)\330\240\275\274\307\347=5\345\254=\317\360\217\275\333\376H\275\312\"\253=`?*>\037\257W=\262p\314\275\005\350\003=0f\300\275Y&\371=\326 \200\275\262\023\252\272$`\332\275=\307t\275p\t\370\275\373\370!>\232\3108=\223\r\313=.\370\340\274\270\267\002\276*Z\023<\271\021<\275=-\277<\271\363n\275\256\251\r\276Ngg<\3353\331\275\0043\021=\250\305\236\275\266v\n>@q_>\345[\221=1\377\255=\220\367|=\211\262\027\276o\325\237\272x#\026>k \372\274yv\227=\254\254\273<\312@\313<,\210\004\275\300U\204=\010\373t\274<\366\'\276\207\r\305\274\230\250\235\273d\326\252=\023\311(\275\274\016\254\275\013\343\323<wO\004\276Bt\356=\251b\206\275-\320#;r5\036=\277c]\274m\264\373\275j\343_=\267\017\251\271f3D\275\013\034\003\275\234 \016\275\361\032\004\275U\211R<C~\275\274`\362\026>\"~\311=\355\301\330<\214\300\264\275\016\204,\276\214\263\352\275\364.8\276\\%?\27539\217\275\276\374-\275\016\315\320\274 \030n=\034\225\276;5\275i=\206f\241=\231\225\014=\356 E=\016\361\n\275\334\354\373=\231\261*\275\246\214\301=\273`\212<\033\266\021\275\201Z\325\275\305r\234=\332\257\226<\013!\372=\366x\251=\274\342\302\273\200Q=>\213+\222\275\315\236\205\275\360\0378>\2048\003\274*\357\035=\025.\357=5\277\017\276\030\223\247=\367=\200\275\263\207\351=q\224D<2^\224=tg\373\275(\240\246=\240H\030>*\234\274=j\263\303\275\366\256\364\275\256\370\220\275\351\202\307<F\270x\275\346\237m\275\200N\350\275\265\216\001>\221\307\363\273\305KU>\257\010\">\364^\235\275Xv\246\274\215\004;=\357\215\030\2759\244\252=\336\023\346<\321J\240\275\200\221\316:\r\300\340\275\243W\313<A\020\262\274\010\200\030\274H\324X\276\005Vt=\345o\315\275\275(\253=3|\337=\3525\244=\001\0168\275\002-\322\275p\316\016\276(E\013\275\214\2535\274\303\273\354\275\337\273\310\275U\025)\275\334\231\213=\231\275H\274\372xF>H\234\241\275\260^\316=\255\'\227<J\226C\275\302\312\006\276\025\316\031;\034\t9\273\211\274\234\274\360\313\325\275\246\313?\275H\233\244\275\306s\216<g{P\276J\350\360;k\311z\275\224\327\304<\260\206h=\002\262\206\275\027.K\275 3\271=\221\237\020\275\021\264\237=\177\007r=\376\027\213=[\217\221=\023\235\320\274\313\275\252=\003\324\020\275\210\014\310=I\235\243\275\1777\002>\236\206\217\275\"q5=\3528N=h\313\247\275T\251e=\335\320_\275\343\237I\275\025\373\274\275\323H\235\275\312K\321=F\'\033>9\001==7\204\255\273gR\351\275\326\344\213\275K\354u\275\034<\320\274_\021\314=_\202h\275%\350K>\320\323\361=h\262\315=\347\346\206\274F\301\200<I\253\372\275\202;\347=]\277\311\272\026z\004>\277\251)>=\257\302\273\355\271\204=\222\204\217=\321\355\303=c#+>E\262\341=\021`\010>\021\336\261\274VJ\340\275\001e\021<\204B\226\275\213:\232\274\003V\324=\372d!=\016f\325=<\'T\274\036\241\355<\340:\223>\213S\001\273\242\035\201;G\335\207\275\342F\320=\331T\177=\022\215\221=\243\232\207\275S\226\254=\216d\002\276\207\327\274<\316\2564\274\261\326\363<\"\006\337=[/\022=\254\225n\274\362\365\241=\304\331\336=Wa\235\275w\233\257=\2758\235=\247\000\305\273\252\324\005>*A\025\275\311L\362=\265\267\000\275\312.\016\275\361\204A\274m\206\377\274\274\215G>\324V\'>\373\307\007\274\276\266J\275\250\250\235\271}t\210=w\351\003\276\350\305\307\275,\2245=\301\351\036\275\311\r\372;o)\304=4g\274=\332\234\366\274\224E\245:|V\036<\240KJ\2760\033;\273\361w<\276X\330\n=\364\305+\274X\004\210\275\312\356\003>@\216\'\276n\017\205\275X\242\362\2758\017\024=\337K \276g\342\227=-N_=\006+\246=0\374\211=\031O_\275\251\217\003\276\355&\033\276\333\277\242=\301\350\276\2730\243\265<\373\345s=\330\021\013\275\272V+\275I\337\347\275cGu\275\272\232M>\004\241\244\274f2P>\336\231]>\025\307,<\021\356\251<\306O\205<\022\304G;tQ\351<\261\240\275\275\315\001\241=\371\247\007\2765\365X=`\345\360<\312a\325=\325\301\221\273!\t\203=\220\206\322\273j\346\242=_\313\352<\3759\366<\250\257\004\276\006\256$>\220\'\222:\007X\n=\357\240\201=\241(\364\275w\233F\275\242\013\375=\'\355,>)k\037\276\242\301\010>\347\210\260<\237\305#\275m5%\276\n\341\356\274\243\n\343<cDC=\244w~=\236/\221<\024\250\327\273\024\022\321<\245\225\022\275\260\220\007>\242<\265\275\216\033H=\335O0<\017[Z=\226U$\274G\002\367\275kbd=\372ph\275\275\354\370=\014\263d=tS\206\275\007.\276\275\251(\306\275\374\210\016>]h\375\275\362\275T>2\0346=Y8\r\276\204\313\030\276\205 \373\274-\242\250=\324\366W=e\304D=\\<\030\276\325\256$\273\262\264\254\275\356\363#\276\316fZ\275m\001\005=-\333\324<EZe=\351\313>=[P\r\275w\377==\"K\230\273\033\315c=jo\257=\231Fp=\326\373\244=1\372\320<7\005\301\275K\020c;i2\260<X\034\251<9\247}=\001\025\004=\\\037\204=;D\376=\201\033\006\276\275p6\276,\264\211<\002\016\245=\254C\227;\322K\376<\345\212\312\275`E\262\275K\240\304\275\200\tp=\201\305\270<\260\262\347\274_\037\202\273\n\253\031\275<L\002=\177M\002>z\335\347:EA\335;\305\303\203=\350W\305\275M\324\231<\364\2272\276\251\020\226=m\263!>\0336\310=\362\375\331\275\314\027Q\275GU\244=?\270\371\275Veg=SJ\340\275\363s\257=$\262\000>\2415\213=\033Q\363\274\274\004\331\275\335\274\247:\315\261\243\275,`\360\275\360CL\275\263i&<3\360}=1\227!\275\0231\005=\025\323\231\273\005\020j=\"^\305=\233\355L\275%a\000>\263\014\005\275\212\rz;\203\336\371\274\024\312\013\275`\301.>s\014\324\275\2234\247\275\201k\347\274\322\036~=\366\363\335<\256\205\262\275\210\326\371\273\202d\261\273$C\201=\210K6\275O,\353\275\222\343e\276]7\334\275\357q&=\316@^\275\312\331\361</g\263\275^\222/>\262\177\344\275\036\000<\275M\302\313=\226\327\322=\272)O>Fa)=\320\260j\275a\n5>C\244\027>\014L\332:\320\360j\274\210 \271\275SS\274<\216\025S=\267+,>v\032\023=\3241\254=\r\277j\275p\215\276<a\230\271\274\314>\253\275\231\263Q\276\r,#\274\025=i=t\361\317=s\224Y\275g\311k\275\367\t\016\276!?\240=De\201=a:K=2d\014=\327\350\255<(\033\223\272F\215c\275\236\024\341\274\223\037\223\275d\r\346=\365\276\231\275xV\033=Y\030\372\275m;\263=P\357[\275p\3514\275&F(<\225d<=\323R\347\275\360\247\301\273J@\246\275O\254\304=\200\334\001\275\0337R=\235\205\351\275\"\334!\275\344g\207<\360\t\321\275\007R\305;\030=]\275\337k\337\275\373/\232=)1\351=\317\346\217=\271\177\004>\256\313K=\372\223\366\275\213BA>\024c\004\276\375\250\204<#\2308\276w\337\034\274\227\306q\275\234\223\307=~x\005=\236kA<\005y\371\275`\242-\276\321\313\260=\360\2733\275\254\013\'>\255\315\367<\264\266\252\275\2242\201=,{\n=\352\376\241\275\343;$\273\310\321o\274IK\000\276^]\001\276\221\030\251=5\274R<\243\314\253\275G\336\340<Z\323\035\274\303\244><8\260\323\274\212\025\373<\261\3063=\227\305\355=\256\245\311\274\243\010\240\275\347R\017\275b*\226=\324AH>\201\361\033\2759\3612\275\257\331\361=l!\333\275\276\316S=\202Wd\274\213\007\017=\211\206\306<\2524\374\273\371w\025>\257h\031>\"\234R\274\331t\270<\032\232!>\372\362\254\275o.\216=\2313\267=\360\237\206\275,L\243=v4T=|\027\016\275k\264\026\275v\252\256\275\352:\021\274U\346&>\'3A>\\R\356<\2116\277\274\3561z\271\204\341\263\275\005\377\354=k\367z=|\265\304\275\220\250\007<6\005)\276\253f\023\275\0238q\275a.K>\266)\352=\353\272G<z\217\205\2763\337\316\2746P\n=.\306\240;u\234\213\275\351\254\261<\300\263\346=E\303\223\275x\214B>jT\206=\320w/=\235\364&\275\311]\237=f\273\032\274\207\211m\275&\370\016=\203X\210\274\374\306\206\274Z\322\240\275\rA0\276\023\361\206\274c\034\230\275d\335J\276\362wL\275\270\353\341<\027t\275\275\360\246\214=t\304\233=\352\337\007\276q\231\311\274\241\316&=\317>\010<{\375\374\275z\224!>\332\333 \275AU\310=\020\016\213\275L\231\217\275\361\221\003<\306\273\250<\245;\234\274\236a\000\276\277\3431>\211\277%\275\275\303\200\275\225|!>!,\033\276\2362R=\347\027\344\274\177\254q\275\307\276i\275\247@\251;0\223%\274\014\244\337< \234$<*\250\210\274Vh\302\275,H\201=\222\177\343\274G\307&\275\317R\t>\306W\n>.\235z<H\273\227\275E\201\225\274K\347=\275\033\337\261\275\350\277\264\273\004\007\360=~\215\272=\014\250\330\275\304\256E\275\334\252I\275^\265)\275\2035\021=\300\215i\275\366~Z\275rV\030\275\231P\021\274\335\377\215\275?\007\033>\n\216*\275\357V\243\275\3611*>\222\035\274;b\220\026>\031\037\360\274\363\274\365<B\347\334=\001W\341\275o\223\353=t\261h\275\262\2107\276o\234\022\276)\232K\275\001\2022\275\320\241\361=\221\033m=y5\261\275U^e\275\255\223j=_\344\r>\321\370\\\2749\257\313:+\3516=\255\214\275=\262E\237<\244-\265=J\344\347\275\n\364\005\2765\367\217;\355\271l=\344\301\233\275\300\205\016\276b\351\335\273\032\312h>\253!\214<Zn\255=\3706\321=\367\305\000\275\372\tQ>\022{\000>f@\354=\024O\005\275\004&\223\274\345\2061\275P\341\257=\273+\031=/(\372\275\216\261\301\274H\002{\275\254\236w\275,\246\200\275\263\347r=\007}\226\275\2712\240\275\302\333\312<sq\232=F\037\033>^\245\204\273y\276\374<\343F\353\274\304YV<{a\307\275=4#=$O\242\275s\360\302=\217\223\361\275W\212^\275M\005\033\275W\245\246\275\344\033\201>\376vH\275>\362F\274\031w\353=\007\t\362=\213\321X\275\030\330\216\274\')v\272\335V\024\276Y\376&=\214 \224\273:a\366\275\353gV<\200\"\232=\237\365\246=E\267\210=\014\244\346=&\026\004\273S\206\217\275\243\\\222\275\201\3460>\336@\225\275H_\'\276a\307\321\274\n\321\215=,\332H\275u\2006\276\247\227\264:m\305\002;q\r\032=\271\007\010\276\177\254\244\274p\323\275\275\303 J=\355\007\305=\324\023)\276\233\371\265\275\035\221\257<\327\002\335\273\312\237%:\024\\E=\177\374\231\275\206x\244\275\261\016s\275}P\343<\377\202\306\274\313\"\372=W.1\276\240\002\277\274\321\300X=j\006L\275\265*\327;\302\373\311\274\373\313\206\275\357\275\001\276\220]m\275\014\023><m\317\016\275\245,\227\275\022-)\275\313\351<=\216\201\361<\003\247\300=\300\212?=c\276\326\275w2\330\275Be\237\275\270\030\316=M\254\342=\334a\274\275\020b\211\275\013^\210=\237o\223=o\333A=\311\347U\275\004B\030>|v\364=\026[\n\276\024\205V\275^&\277\275y\251F>u%`\275\036\014\002>\263\177\002>*\014\'<\005\224\022=6\237\210\272\320+d=n\240\230\275\027\203\002\275:\034\013=\r\342N\275\020cm\275\277B\327\275\203\024\217\275\245\364#\275M\030\007=\301\344\337\274\020\206\345\275\003\372F\274\027\242\231\275\247\300\n\275\360 \006>+w5\276\340\265O\275\020v\010\275n\363\341:\243\306\310=\377^W\275l\361;\275\270\337\354\275Yv\247\275\277\037\025>,H\354\274\214#\271<\370\303x<\2339\244\275N\016\037=7z\010=cdm=k\036F\275\316\243\\=\222n\205\275W.Q>C\255\026>\305\205\265\274g\3357\274a\263\037\276\340J\367\275\221\320\t<.\255\320\275\203\270,>\372\246\370\275\\A\370=J\221\317<\273\250\276\274\037\252n\275\205\025\026>\017y\036<\224\013O=(\223\243=\0229A=\243\243m\275\307\227\200\275$\035\014>\273JE=\372\346\216<mm\235\274f\030\036>\203\251\200<\203\342\'>\352\262\216=!\217C>=\035b=\340\343\027>s\262\370=\341\016\222\275\271\255\265\274o\342\206\275\264\264Q>\367n\357\274\244\245\305\275\260\335\027=\375n\267=\006\233A\275VaC=\3462\027>\312\025\213\275,4\003=\316\347b\275\367\302\250\274\004\262E=\207\342\234<1\233\244\274\022\345\035=\317\265\322<,\263Y>\223\nF\275k\200\017>cM\363\275\n\352\030\275\314\023\244<\000\316\307=]\2350\276\201\370\240\275|\016\253\274\260\326b\275n$.=\356\230\007>\370T\004=\251\031\235\275R\034s<\t\354\377\274hv\036<\3304\020=d\262r\275\340\032\345\274\274UG>\313Z\252\273C\323\203=\005$\353<\272\366\010\275Eea\275!\362\316\274e4Y\275\343v\036>\263\236G=\343.J<\321\334w\275\365BX=\314\220\000=\000(}\275\305\345\274=\005+\023=)0<=\257\342\037>\031\261\t>\017AS<f\233\243\274P\203\036\275y\253\220\275gjF=\260\373\331;\345\331 >:F\261\275!\374\240=\335\275\344\275.N\'>\335\351\"=\347_\311<_<\274\275\201\022\210\274*\365Q\275zR\364\275~\261\220=\207\211\334\272\210f;\274\366!\214\275\322\214\246\275\304>\302=|\350\024\2752p1>i+\217;\327`\337\274\334\264\232=\2044\211<\230\216\256=\203M\367<\030\343\t\276M\276X;Tw@\275\212IO<\017C\277=d\360\345\2753c\232\2751O\226=\237 \270=\366\006\023<T\343\006>\315\275\356\274\247\226\237\2758\277.\276\342\277\205=H\276\350\275(<\327\275|:\263=\267\255\275\271!A\255=#\303\217;\267\260\r>w\177\262\275\331\231-\275\327Z-=O\310\251=\200^\217\276*\306\272=\353R\307\275w\322\225= \262\024>\027\253\254=\302-\256\275\'\0007>\023\2639>\253.\324<\311\243E=\024\307\212<\223\237\266\275\3239G>\216\000Z=\360\265\031\276\002\263\360=\313\325\200\2741\350\003>\264\214\356\275\177l\224\275c\246\201=:A\222<\016\330x\275\032\027D=R\262 \275:\263\351\274\366\334\224=\266\257L=\352\315\004>\222\366*=\272H\251=!=\002\276\345\265\377<6\354\365\274\025\342\277=\032\314\201\275\017\240.>\355\316A\2752\335\013\275\232\321\215<\200\377\023<\353b\034>zJ\001\276m\017`>\342\357\270=~\224\311\274>\260\342\275\265q\331\274\024\360\\\275\262\307%<e\300\233\274\t\207C<\243\200\351\275P\314\320=\235\217{\275\257\235s\275\325\241\204\275\2675\377=\276\230X=w\3110>\247\220\030>\350\253\245\275\rc\034\275UC\002\276\241\244\024\2759[\201\275\252G+\275\026\364\241\273%\214\231=\0332\265\275\022q\\\275\365\351\361\274\362\230(\275\204\004\231<\375\036==g\251\261=\253\312T\275M\266A\275\361#\002\276\235\206\264\273\275\201H=\331\270\037=\350Pq=U(\364=`\271\254\275I\207w=\370\005.\276\017X\204=\312F\016=Ymg\275AIi\273Z\351`>\031K\240=tLM=y\333)>K\"R=\245\341\030\275w\321/\276\315(\255<o9\240\273\220.\014=\230\021*<t\247\334;,;\r\276\263<\335=\252\330\037>2\200\027\276/\037\330=/\367\210=\01025\276?\321\262=\321\205\033\275\351\242\376\274\303\3567>Z\013\035\276\341\320{=\n\377\313\274|\3325\275\200M\204<\021\007\375\274.\210u;\321\365^\275$\022i\275\210\341\267\275\205\261!=u> \275l\013C=\013\214\273=\0376*=N\245\027\276s\010)\275\227\002\321\275\330\252|\275\003\360+=\372\371i=@\351\341\275i\3503=;\246|\275J/\222=\"\301`=\336\0315>76\027\273\t\2040=CX\n>\251\345\255=U=\230=)\314r=\374\024\224\275\266\027\207<`\206\232=1\202\334=M\251\004>\303\264\021>\014*\366=M\212\032\275\217\343\260\275$\'\'\274y\330\302=\207\262>\276\0332\314\274\372\343:<\203\345\034\275\343q\005\276\377\376&>\345\365\035>Vb9\275\226P\335\275\000\303\202=\255\220\"=\021U\034=4s\024\275\3716\020\275\375U\251=\377\311\300=H\\[=\334\017L=\242H\014>\240\210\300=\356\332\314\274l\010\326<\304,\205\274\311 \037=\216\303\026=\204\232w\2758\026\237\275*\261\363=\"\010\355<\245v\006\275\224Q\026>\311\343\264=y\332\221:\256\270\205=Q\343\017=\tI\326=\345\211\375=\261\312x=\222\010O\274\206*%>9#\352=\262\306p<\241\204\264\273\346@W=\001\333w\274=<\311\275\365\330!\276^\263\003\275ba\353\274\334\340\252\275\246\366|=h\345K\275C\230\r>mF\023<}\251C>\306\266\320\275\205\001\221<~\004\375\275P\202\240=\'\177k\275\026\233)\276P\016w\275\215V\003=X\200\021>h\206\367<)\220|\275\203\n\006>}\303H\273\334\241%\276J\276{=\202\262\177\275\364\254\236\274\272\300\314\275\324\223\300\275\277hJ>\314-m\274*\020\004\276\235\265\226\275\2000h<\025.S<j\301\276\275E\033o=\035\017\"\274T\311Z<\250\037B\2752\276}=v\377\260=u\312\272\274D]\000\274\276\227g\275(qC>\013\352\000=\235\271\001\276W\271\270<\364\377\005\276N\327\r\2761@%\276\301\2537\274\302\016%\276\020\253\217=\200\251\341\275\216\227\271\274\002\023\026\275Z^\207=Mu\224\274p}\273\275S\203\277=\343\\<<\004\261\242\275\007e\227\275\200\256_\275\021F\252=\241\365/<\226\325\273=!\034J=\242\223\n>*\200\375=ZD\255<\302>\262<\010x\322\275\030\270\314\274\367\235\022\275\310\330\215<O\000\362\273\337\234\232\275\255\322\010\276[G\303<9\363&\276\n//<\266f\024=\342\315\016=\213\335S\274\223\236\316<\302\331\313\274\201\n\024=Q\223h\274\2370j=]\034\007=0\321\021\275\253X\366<\214\332\n\275\000\235\215<\366Wp\275)\367\235=[\227\016\276\303\267\213<\330\343|=\276A\026>\257\337F=\362\317\274=\230OQ=Wj\302<\341b\374\275\216--\275rHE;/\001(\276\357\243\035\275\377\016\003\276]~\331\275\350\326\307=\247\013\335=\240C\262\274*qa>_\240<=\363\306\212\275D\334\336<2\005\324<\224\304)\275G\265\301<\221^8>\202\"j\276\210\341j=)N\202<\013VP<,\340\016\275\333\2332\276\260\254\021\275w\367\256=\324\203\321=\301\311\020=\2362\376=RVY\275\230\033\313;#\314\314=\025i\036>\300\356v<\377\016\207>d\037\024\275#{\201=\003\362\326\273\361+\236<\016\027\023>\302H\373\273*\335@=(\263\026\274\'\037\367\2750\004\322=\257\350\302\275\370B\252<\1771T=\345_\200<\006V#\276\306RG=\243\277S\276\303\324W=\301vN\275\023\242m>[K\270=0\204\002\276\350\0263\275H\317\004>\241\226\240=\353\255\002\275\371_t\273\202\206\306\275\253#\272=\004\024\370<\2736A\273\317\314\304\275\244`\215\275k\014\272\275q\303];\226\3423=\365y\217=\355\023\253\274\337\233\001\276\227\371\030>\333p>\2751\212\025=g\337\025\275C\205q\275e{\252\275\017r#=\326\360\372=]N\270<m\227m\275~\200i=\251\345\361\275\026?\307<\307P1\276\356\'\326\275/\370?\276\264\307\301=vN\200\275\300So\275\317\341Y=p#\020>&\302\320\275\224\025\035=\222\321\032>\200\241k\275\206\207\021\275\344/L\274<z\'\275\t%q\275\236\n\277<L\222\317=?1\253\275%{\251<S\021\005>\3004\033\276\364i\277=\264\034\211\274e\266\326\273a(\376\274\001:\002>\332a\267\275\244U\236<\200~\'\276u}\031\276Q\304\236=J\3608\274\036#\377<\326\336\036\274\206\210\005>\306rs\275\031/h=\025N\032\275\204\271\272\2754<\256\275J\206\310\275\361\350\230\275\3103\232=\002\264\205=\222wz\275\3327\204\275\177\313S\272\006\303\023>]f\337=\205b?\275\024\023q\275F\272\344\274\327\343/=\356\360\346=\370\364\265\274r\215\330\274\037\'\346\274\277\031\025>\372,\303\275k\216|>!N\262<~\310\347=\337\211\234\275\235\000+=\201\242\233\275\363C\031\275\222V\036>!\274\014=! \251\274\331\\[=\370|\021\276Y\317\204\274\235\336\354\275\023\322\304\2753k\020\276\200\310\254<\243y\232<\277\313\027\275\031_u\275\213s\r\276\370\241Q\275\343\306\257\274Sk\001>~5\007\276\032\324\234>7=u<\267\3521\275\007.\030\276Z\021\226\275R\270G\275\321\325\304\275\342\r$\275\025\007d\275D\360E>C\021\342<#\313\3629\244\327\220\275\213\251g<1vG\275\217g\262\275\243\305\243\275[d\326<\374j\225\274\260\261\375\273\252\251\017\273*4\030<\335ZS=\320\242:=$\273\217<)\327\300\275u\323\004\273\314\326\353<)t\351\275\232\323\245=H\256i<\3000\277=\321@\320=\347B\210=\222\314m\275\t\3759\275~H\t>\322,\\;.p\302<\262M\337<\263S1<\t\275\240\274|\300\242\275\251P:=/\273\224\275\267r\206\275-^\020\275G\355\251<\220Oq<6E\203\275\023N\017\276C\017\031\276\324\022\222=\334\354\004\274e\031\211\275\027\265T>t\340\353<\'\315\006=\303\245}=\021\207\320\275\260J*\275\340\224\221=\201\342\333\275\025\255\362\274\224z\250;\224K\224\273\264\313)>\215\030$\274\264\367F=\361\271\315=g]9\276&\214\325\275({*\275\026Gv\275\365\2220\273G\030\342=\217\221-\275\027\007\201=\232\206\006\276\005\264\302=\265\177\215\272\326\332\246\275\377e\337=\353\013\004\276\023\221\272=\237\347\357\275 \344\272\274\341\345\250=e\022L\276\313\273\004=\tm\322\275\221\3341\275:g\033\276\276\245\t>\021%\351\274\304&\025\276\253\177\245=\357\345\240\275\3125U\274\242\346\375=\262\257\326\274\205\371\253=c\222\210<\313\231\010>\177\216\323=\266\231\010\276}\032`\275(\306\'>D3\351\275\023`q\274J\217\304=B\261\300\275\000Y\236<\270\035\003\275EyD\275_/\372\275\204\033\227\272W\223H=\375\335\222=\016YT=\376\234\220\275\332F\200\274\254\211\316;Q\224\342\275j\200(:\216\267\211=\367R\001\274\021bk;\243\003\250\275\243\271\365=J\230\243= `P\275\313\331\211\275\3049\024\275\"\243\367<D\000\233=o\027\266=\251\256\002\275\247\332\'\274\353{l=`\025#=rLO\275\r_\256\275h!\233=\r\332\037\2761\312\017>K\311\207=\357t\241\274jYi=?\372\356=h^\034\276/\366\203=\235\343\005>y/\t\274\243M\n\276Qp\221=\355$\227\274&\030\035=d\363\323=\2741\354\275\025\006\256\275\270X\275\274t\253_\275\331 W<\334m-\275\010\223\264=\307$+\276\243I*;\336\014l>\353\265\315\275\262+\244<\224\332\371\273\317\335,=\005\223\336=\345R{\275\2620\3019\006\322D=\356w\321\275\360\313\200=\352\3601=>OF=\257\262\332\275\345=\'\275\301%\250\274\022\214\030=\361\231\302<\031\320\014=\221PL>];\203=\302?\016\274@\361\324\275\356\246m>:E\206\275$\262\002>\246\274\016>\330\245\203\274\227\242\275\275\211=.\275>\335\252\275\365a\016\275\204\231\367<i\304Q=C\201\355\274\037<4>c\220)\276\'\375{\275X\334!>\035\276\371\274\217\242\344\272\346s#\275\301\373\364=\242\311\222\274\244\215\322<\222\343\252\273\243\352\023\276O\317y<\217\371\204\275\255`O\275\315\377\273=\241U\"\275\354\326\t>Z\013\221\274\216\r\010\276\276\317\340=\301!\371\275\330\007\004\275\200cp=\240\010o\275|\332\325\275_\224\246<\263\271m\275\256\2634=\305h\035=\223\375T\275q\270==;\347\020=\325\376\276=\030\261\222<\243\271\030\276\277\002?>\223\2726>\35786\275\275\224\311=(R\360\274d\305\322=\262\257\010>#M@=@\300^\276b\200\335=f\221\224=\270g\313\275\232\364O\275[\221\340<\355\007D=\304m\253\2742\265k\274!\372 \274\220\177\024>\026\370\226\275>c\270=\323:\035\275\211|\313\274A\340\023\2753\264\234=\016\361&=_4*=N\322\033\276\272\354\r\274\264\220`=O\032\t<T\362\260\275\344\374\225\275h\205\357\275+\214=\276>O\274=\255\202\341\273\"^\333\273\232u\334\273\344\330-\276\213\265\324<\207\250 \275\321P\243\274E`\232=\377\375\313=\031\242\225\275\324F\263=\231\266\350<\020/W=k\2040=W|i>\013\2509\275\203\272\\\275\356\263\201\273T\361\223=\313\271`\275t\371\271=\341\021\333\275YP\014\276\336\214\'=\027\251-\276\016/\335=\273\303\333<\251{\230\275\177I\254=h\014\332=\261\302\026>\013\014\301<\357\303G\275\235$\000\276\260C\322\274\211\237\271=\265S\255=}\231\330\2754\271\024\276=\3008<(Ts\275\201\034\250\275M}\221\275\235\316\304\275;2\223=FE\346=\354\017\212<\250\036\035=}p\365\274\240\2150>\300]Q=y\225J>\267\010c=\026\236\363=\362x\276<\312\001\243\273\233\366\267\274\323\241h\275\320]\n>\001\025,\275\237\306\212=/\270\362\275\330\316\307=D\013$<\212@\270\274#\203\260\275\004;\264\275S\270\243=\035)\360\275u\2135>\032\334\033\275c\251\023\274\"Z\210<\220\302\226\274\226\000\263<\227\000A\276~\375\220\275%\333\227\274r\264\224<\345\356\370<6 \312<L\003\204\276{\232\212=o\344\373<\254\350\004=R\242\324\275_\312\327;:\321\217\275\t\t\324=\332\004:=\304\227\342;rv|=<\003\302\275O&\026<\205\262{=\214u\344=\225\020\006>\177c;<\342W\213=\304a\247=\017~\355<\221\271\r=\311\355N=LU\320=\211>\265\275\377!\276<$Ts>q\367f\275P\341\006;\322\303-\275\300\351\204=\210\344O=\346OF\273\323\273\325=8\010\304\27461\241=\333h\343\274\206\370\341<*!?>ko\221\275\020\250`\275}3\007<\035e\320\275CI\306;\267M\375\275\ng\364\275k)@=\217.\266=\000\2572\2744\353\344=Q\034(>N\301\315=8\233_\275c\273y=\267\357\320\275\340\272\217<\321[\022\276ly\265\274tMq<\312N\275\275\374Y\344= 3\366=\236P\002\275W\245A\2752\351\324=\346a\354;\n\374\334<\354\303\245\275\346\374\013>`%\276\275\254o\337<\323`\330\275-b \276\300\321\211=\235?\017>\006A\020=\260\256><J\320\246\275\323\375\205=\225\244\037\276\326\273\004\276\277+\373\274\000\010>\271\340\321q<\230\316\037\275\r\016\220=E;P\275\263\025\017<\017dE\274\316\373\316\275\272\317\023\276\230fY=\211\236\306\2758\215\235\275.|\217=T\371r=p\342\232\275\274\327\331\274\327\224\344\275\354\037\003=]\364\235\274\352\332w\275\321\334\221\275\260\324\\>\212h\225\274\251\244\266\275`\352\216\274\023\203\255\275ck\032\275\036v\325<\020\211\031=|\240E\2750\320\224\274%k\346\274SG \276\013R \275>\214m>9uL=\310\272T\273\254\354\257\275\020\220\021\276u\022\203=0\021\361=\236:\272<\331\032K=|\236\362\275\370 \201=\331\273\322\275z\201\350\273\235fS<\271\027\240;\002\226G\2750w\t\276i\323\010\273\210\234\242\274e\361\266\275\001\014\333\273m\030\003=\374p\231=\023\231I\275(\247\221=\037\231\322\275\007<p\274h\370\314\275\360\223\032>\207\344\004=\356.\212\275A\342Z\275\"Y\221=u\336\250\275:\327\302\274\213\'\210\275\013G:>,\244\024>\036)\240=\322\033\365=\343\200\261=sXT=\212\301\315\275\245v\005>\255f\257=Q\376\353\275A\314\\>\207/Q=\3605\323<hK\207\273\310\233G>\210\254\001>jR/>\253,x;d`O\275\215\3037=m;\255=/N\332<\202\322\364\275\265\236\342=\211\036\3339\324\021\266<eS\004=C\322\270\275\306\232^>(Gr<\370y\323=\354\322\253=,\021;\275\366\220G<h\276\314\273\177\017\213\275\266V\007\275\006M\274=\3723\333=\275\302m=\021\340j\2750y\234\274\352\260\365<\306\271\022\276\201U\346=#\221\033=lM\255\275\251\374c=\277y\300\275I%\215;\270-\032\2761$\247\274%\2166=\337\302 =\321\234\275=!\202\223=\363@\327\273Y\310\031\275\274\'==1\215\020>\312\200%>\360\267\006\274\250\025O=G6\376=\276^\227\275\030\313,>\201\024\\=X@\016\276\333\005\222\275\177\334\\=z\241n\275G#\321\274k\341M\275\202\310\270\275\036\364g\275\361\353\257\275\271w\362\274A\372\032=\r\006\361\275\252\037\321\274\366\002\372\273u\346\323\275\345>\216\2758-\304=1\263\345=\270\260\177\275\205\321\300:]L\367\275TBU=)9\247=RA\024\275\242d3>\21767=o\243\333<RY\343\274F\336K\274\n\374t\273\333\231-=w\302\254\275_!?=Y\243T=}\364M=\326\224\321=2\275\021;\t)\203=\323\343I=i\211\t\275n\371\372\275(\005\333=c\251\037\276)\243\032=:WZ=\237\353\023=\023h\006>Q\005\"=\027\032\373=\222\032\201=\220\'\324\275\371\257.\275\277\337P;\325\2573\275\276\3433\275@$B\274-F\226=\351\203\024\276\313s\"=\207\203O=c\242r\275h\356\363\274\3308\n>\210\026.\275\326\025@\276\277\276p\275\224|r\275eM\213\275F\211\230\275K\"\214>P\312\311<Z\321\301=#\031o<\235\006}=\351\234M\275\"\227\030\275\010\335\002\276\241\216\007>F\244\210\276&\352\344\275\1778#\276\205J\347<}\370\241<% \\\275\202\361C=\311{f\275<:Q\276\371\331<\2766\225\332<\261Y\303=\322\222*=\342\325\210\275}\007z;\032z\271\275\351#\264=\332\337\036=\3043\027\275\016.\341\275}We\275\313+\206\275\370\337w=\365\231\026>i%T<:\313%=\247=\235\275\226\365\253=u\237\263=\206|W<\014\341\320<\340Rl=\326-i\275\321U\250\275\231\303.\2726\003\247\274\321\305 \275\001\245\275=\361\373\356\275\303\336\343\274e\207\016=\247\002\r=2\375\247=\331N\246=0\021\207\275rN\343=\371\263\031>g\250\227\273\244\036\002>\250&\220=\367\237~=<\330\026\276\253|\273\275\311\010\035\275=!\372=\263%\241=\332\r\322<E\346\"<\377G\321\2745W\007=\225\034\203=\361\273\262=\301U\036=\264\226\273=z\362\024\276\300\177>=\342e\002>\035\264r\275\236S2\275\025d\300=0D\240\274\374\247\224<\005\264\232\275^8\372\275\305\363\326\275\311\216\370\275\201*e\275 \202\n>\253\370\372\275\222\346\221<~~\355\275\024l\242\275\264I\014={l\005\276\276\007h\275O\264\334<\021\301\225<K\226\311=\332b\201\2769|\213\275\340\311\001=\336\254w\275\001\242\013\276\363\304=>\010\236\201\2757\225\202<\210b\227=\207\334\206\274\222w\270\274HC\2109\200H\305=\364\302\030>eRS=H\321\006\276_\326j\275\347\016\204\274\344!\372\275\001v\215\275\227/\021\276q\025\233=g\335\223\275\303\363\\\274\204>3\276/\032\006=\363\000\036\275\275\302\305={\327\340=\246\274\005\276\005\272\267\275S\030.=R\346\347\2752q*=\223\007\032>wr\217\275\240\357\'\275\233$\257;\362\263\257=}\r\347=\265u\r>\037\246\236=\275\242\223\275\355\216\345\275\270\264H>\253\226D<D\323\217\275rY\016=?\251o\275\337\002!=\361t\010>\303$\233;7-=\271D\250 \275dKg;\241h\034\275\301\213L\275\274O\311\275.\002\244=\314]7\275\025\242#\275\224mO>%\314\263\275\214\250\201\275z\361\r\276\\\275\016=\245\354|\274\331Bn\275\350\221\225\275%j\306\275\332)\323<{\277\244<2\245E\275\207\023}=\2256\307\273\374\264\226\275\354%\243<\237\034\246=\323\354\301\274GF!<\252R\020>\244\246*>\372\374\266\275\307\351\251\275\001\261\"=\003G&\275\003ML\275\347To<\341\000\210=\217Q\363=K\013\032\2760\367\242\275r\301}\275\326\347\340\275\215\001\363=\223X\224=g%\341\274\313\337\240=\322\207\022\275\243\376\307=X\032\265\274\324LW>\3504\025\2747\211\364=\251\330\233=~\002\300=ku\360\275\252\337V\275G-Q<B\352>>\240f0=\301\212\037\276\367\223\361\275\303[\346\275\330\362\363<\274b==\200\216\212=\')Q\275\2017,90\336\213\275\205\201\311=y@\207<J\021\244=\210\345\252=\236~\316\274\3749G\275\350=\274=\255\231\t\276\277\0317\274\331\206Y=%\246\251\275\203r\007\276\3229\r\276\266\342\022\276\276\251\024=\245\236\033\275>R!\276\302\371\370\275\206_\233<\216\340\327\274Y1\353<\374L7\275E\372q\275\035\302\203<=\306]\275\265U\006>\021\370\270<w\276\207\274\007\224\231=\014\223\030=\373\327\321\275G\020Q\276+\204y\275\321\336\236\275x\026\265=N*\370=&]\247<\212\014D=\262\261\t<\243\356\300=\266P!\2763+l>\205\200\207=\3024\027\275Or\001=\202&\275\273*\235\277\275\314\2427=\376\300\210\275\221.Z\275\031\037\343=T\035\026=9;a\275\350\335\206=\3129\272<:\202n\276\351\255\246\275:\262\030\275\037i >y\372\320\275K\311\013\276\307b\354\274>\302\227=9b\316=\274-O\275VM\266\274\213i\020<\246*\211=60\312\273\257\344\351\275\324\316\014>\252\332\265=\221\355\210;\024\377\203=+\251\230\275g]\353\274\377\216\021\274\230\007n=\371K\252\275\342\302\252<\373\303\022\276\362R\013\274@%5\274\200\272\260\275/\345}=\311\373\"\276\370X\247\275h\200\037>\263\251\030\275\242}K\274\236\247\r\274\311\204A<\330\010\005=\252/\372<\277\255\225<~\2420=\226\343\n\275\314\014\267=\230\007\233;\200\345V>E2\242=(W0=4\276\352\275Ef\231\274\\\254j;=\032@>\332\274\225:\370\263O<|D\271\274\374\n\244\274\311o3\274\355\'\007\276\316c\350\275\360w\352\275\224\347&\275\036~\016\274W\322\223\275\216\344\330\275;V\235=[UY=\265R\211\275\005f\020\276lv\036>Z\007\201\274\372\243 \276\264\301\244\273\247\327\370=\365c\006\276\357YZ;1\263\216\274Z{\252=\207J&=\236\016\340:h\177\010=4\014\000>\301_\315:823\276\320}\005\276\365\265\264\275\356\361\322\274\320\247\271\275\243\352\'\276\347*>\274\333\240V=\376)c\274\266\241n>\002TD=\036\010\243=\245\016\020\276U\270\366=\213.\005=\262P\021>\246#\332:\r\302\307<\220\254\034\275v^\301=\336\344\200\275\232\230\026\276\203N]={\000P\275\241\226J<|M!=%\030\356=Z\026F\275\010K\266=VU\177=\025\377\305=\0201\013>\231z\006\276sma<m\342\212=\253\367A\275\0049\250=\246U\310\275\340\002]=\032\007\205\274\025\346\260<C\273/=\217!\r=T\032\265=\223\321\311\273@\026\177\2759\261\033\276oK<\275\016\236\334\274\216d\320\275^\360s<\305B<\275\373#\016;\t\223\r<\003\207*\275\016\235\035\276\247\277\243\274\247\271\376\275s\256#\276\204\275\326<U\250\033\276,Y\310=\320\rT\276R\327\037\274\302\t\220=\326\234\033\273J\365\327\275YMg\275r\235\265\274\255j1=\304M\013\276\031\364M>\213\252S>\223\371\317\275\001\347B>Ul\251<7\376A=\342F\243=\270\346\211=qrZ=\225\343\206=\004\303R\275#\035\365\275\005\036\013\276\342Zj=\373`\355=\177\321\364\274\351\357:\274\323\346\222\272,\303\257\275F2\021\274\306\240h=f\305b\275\t6\221=\027\221a\275w\311\337\275\370\210o\274\235\314\002>\247\003\361;\017\352\222=\232\354\210<\212\204\002>\311\356\001\276U8\237=t\034K=C\247\267=\352w\205\273\346(\202\273\315J\031=\214\016m\275\275\332\345\274m6a\275D\0055\275\320R\337\275\037H\005\276_\r6\275Ui\350=+_\206\275\201_\307\275+\356\017>\3701\031\276\213\337\\\275\256\026\331<\262\025\334\275\336\333\377\274\024r\360\274$\240U\273\353\317\004=S\264\244=\322\031\031\276b=[\276M\355\377=N\345\330\273\203\207\213\275\336\033\322<\201\302\244<]\304\325<03u\275\030\010\300<\215?F\273\231#\005\275\350o\252<-\250O\275\307W%\274\316T^\276\nX\014=U\"\034\275\256ux=\2656\237=( e\275%\314\032>\030\235->0s\247=?\\\217=^\363\317=\352\240\232=\213*\370\274\013/\220=x\376\'\275\257qd>\021|\027\274\332i\356\275\t\216\201=\275xF=\303\311\241\275\023\234\240\274\241-\024\274\343\010\000\276J\333K\2748\226&=\212\250H\274\247g\233=\023\275K>\254\262\213\274\177\036 =G\033\201:?\004\030\275;I\227=z\264\214\275MD\332=\002\200\013>4\254\350<%\030\237=\305\347\243\275T\375\353\275u\025\212=\376`\356<\354\311\214<\353\234\311;\001\235\n=\301\232q=|\r\004\274\267\033P\274\026\234Q>\301\375 \276\276\003\214=&/\313\274\243\014\344=\215\230\221\275\272\315`=+\307\314\275\357\276\300\275\226+\340\275\264\006#=\242\275\200=\326e\274\275\212\234\002>`\255u\275\3038\234\275Z\370\357\275\334b\331<KA\377\272\014S\034<#}p<\377\261\372;\013\274\206<\300\375\345\275\000\277}\275\353\233E\274l\227\230\275}\374\310\275\027\001\261\274G\242\003\276\200\237V=\0271\223=T\250\000\274\317\237,\276NR\002\276\256&\232=\237t\221=\313&)\276\307\252\035>q\216\212\275\316\361\025=|a\340;I_0=rs\013>\017\364\301=!\353\351\275\034\3279\275 \322\032\276c\240\222\275%B\306=\304\204\235==\371\355=jQi\275s\"\032\273\367TK=u\241\010\274\355\t\253<\"\377\030=p\036d\275\212\221\377=Ju\211\275\357\311C=?\323,\276\"\203\006=\035b\364\275`aF>\nW\037\275\261\013\206\274+\246\013<\031\245@\275\332\342P\2768\321\261\275\342\216I>\240\366\240<\345\366\023>\327\361z\275aZj=\034\275\035>b\2146\275\230\357a\274ir\352=c|\231\275\321\003V<\300.\214\275\022)\030\274\303#\304\273\303e\030>\000\342@;n\212B\275\212X\200\274B\362\305\2757\316\323\273\036%8\276J\364\242=\304eC\276\246[k=\372\004\277<\333\217\013=\211\265\340=\230\205H=\221\032\350\274\305t\003\276\351\253\343\274<\262\006\275\020\035F\275S\334\001<\201=\370\273\000\312+\276y:\331;1*\007=\353u\t\276H\017l\275\346\345T\275\026\227\230=A\266\303=q\332\332=\212\276\235=\331J7:p\034\307\275\303=m\276\307Y\003\275\303\235\020>r\361N=\362wA=\267\350\270=\320\335\256<-\266e\275j>^\275\227\3340\275^s\271\275\200\357\214=_\331<<\337\366\313\274\027$@\275\266\2217\274\211\304\213=hr\347\273\26045\276\257\377\274=7\237G\276\200\273\267<f)L\275\342\313\010\276\366\025p=v\341\006\275\230\241\201\274m\250\265\275\345\302-\276\322}\276=9\255Y\275\205\376p=\024\327l\273\031\305\254\275,\226\255=t\267P;e\2776=\006p\355\274\347\005G=\205\206\255=\356F\000\276\230\0258<\3033u\275\\\035K>\227.\264=\024L\254\275yf-<x\235:\276\301M\216\275\366=\007>*S\373=\036\245\344<\r\2140=\331\241l=V,U=\201\362\006\275H*\177=\005\256\231\274\007\276.>\226`\253\275\225>F=\363\324\211=\262pn\274\303\351\272\275K\316\376\275\277n\017\274\"\237\327=\352\300\267\273\217\315\236\275\030\231\343\275\361\204\017\276N\004z=x\204\252\275\264r\021\276\300\301\263\274J\337\343\275\003\223\334=^]\233;\357\\\030>\350A\323\274\254<X\275a+\270\275R\221)=\346\026.\276V\210\215=\220\326L\275\226\326\263=\325+\245=0\255\272<\357;\360:\032\000\233\275\253I\222\273\"P7>,b\000\275T\350\016=\206\353\227\275\244\337\200<\036f\024\276\225\314o=82V\276\347\323z\275\031\300\337=\222\301\007=\276\3075\275\025\027\246;l\027l<\2731\177:\r\374^9\337UZ\275\253\313\260=\220zg=\177\271\232\272\372\226$\276\200\242\307<\016C\346=\373\370P\275G\013\257;\210\367\310<\225\016\302<\035\010~\275\0033S\276\274\374\026\275=\340\033\276\020\271\340\273\rb2\273\265\231\020=j<\014\276\237\3033;\373o\207\276\273N\256\274\325KI\275\"0\256\275x\210-\275\324\271O=Q\032\215\275\313\363\271\274\351M8= \035\377\273\321\020\246\275&\\\277=x\223b\275br\237\275M\224\366<\017\321\301\274\003\034\373\273\324?]<7\345N=\266\243\224\273\360\303\003>\032\371\317=\222\213`\274$<C\276O\374~\275)s\254=\270ks\275O\023\205\274\273\312=\275l\331E\276\245\241\n\275\237#\323=\0279^\276\261\270\343=\024\206\"=\244\374n<L\202\017=y\302*\275Y~E\276\033\366\221=+\351\001=I&J=\223\030\232=\221\373\240\274*\335\252\275qz\365\274\235\032\242={\346\367=\310\223\224\275\020\004\002\276\254\254\221;\024\307\211=\337@X\274P\025\241=u\002\252\275\010\243\224=\204\231\367=6\206Z;&\007\350=\343\367\347\275H|\343\274\217q\302=\204\233l=\202_\240\274\306\261m\276|3\271\275\234Ha\275\204\377\201;y\365l>|\364\214\275\206\200\005=r\010\"<\212\327\365\274\002\351\242\275\235(d=\254\374\211\274\316\227x<\305\002\373\2746IT\275\023\302\237\275\243F\215\275\305\365K\275\316\212\223;\r#\211=\357\251\321=\256\215N\276\337>\317\275wVG\275\264G\010={\301\357<\373\251\014\276R\010\306=\263|W;\237F\342=R\220*\276;C\033\275\305\nl>\031\316o=+\266\206<\212\003\227<\221j\267=\233b\300=\265m\035\276\362\214\025>\312^\t=\260xK\274j\355\255=Z\213\247=\352\033\204\272\371G\226=\360O\256\275\365\010\210\275n\212\037\274f\275\251\275ZD\013>Q%:=\304\004\370=\001(\270:\027K\226\2750\317\361=W\224\346:,-\020\275\267}\252\275E\004\367<\312\010\007\276\210[\000\276\312\302V=\251\343u=Z\241.\27527\014=\326z\037=y\027\237=2\347\344\275]\r\252=L\024x=\345\364\325\275\236~\257\275\300c\037\275N\266\331\274\037Sc\275\227S\"=\335\322\305\275\2529T\275\277\235\255=\306\206\343=\311\373E=\3161\023=\364c\207\275\301}\031\2756\303\247=2\245@\275)T6\276\"\201\235=\225V\353\275\000\205\004\275P\224\032\274*\360\310=2\365\006\274R\024\200:C\030X>3d\364=!\261\377\273\000\213Q=\271\031\373\274\224\202D>I\327U\275W ?\275\311\3163\275lW\317=\274\343\312\274\330\371\026\2765Y\206<\315\223\022>\272\264\273\274\002\024k\275\217w\243=\305\001j\275I\037\327=\364}\201\275\263M\312\275\000\323k<i \310\275\225M&\276\244\000\213=\215p\\=\304\300:\275\362\013>\275\205-\"\274\2007\014<\231F\220\274G\027\001=\315\034\277=(\230\323\274\013\244?>\"a?=; \355=\002W\211=\264OC=\000\304\354\275z\216\000>\316\267\340=\275\373x=\272)~\274\221\263\200=\271\306\030\275\377\247\224=\367\206?\276\324\031\221<\266\314\035<+\323\242=\331\267\236\275\272\030\023<\236\303\001>N\373\005=\027\261\365\274\036\331\013\2756\010e=W\317G:K}7\274T\036v;\342.\354=\2042\223<\213-\005\276.\251\231\275\245\314\324=`\356\">1\303\016\275 \177\001\275P\373\025=(\177\226\275\321L\336=]\313\255\275)\302\r\276\320r\270=\334\242\231=\254\230\005\274\305l\321=\272\2348\275\225~\351\275\315l\305\275\236)\251;\213\335G9\233\365\327<\t\371\377=x\037@=\330-\337=\257\027\312=\253\010\211\274\376CV\276,\322\r=?\037\332\273]\353\010\276j-\271\273qd\032\275\256$\272\27527\366\275\260x\250==;\313\275R\356m\275l\036z<\034\265\223=T\331\024=\037\216\340\275\r\316B\275\331\270\214>\303\340\373:\270\311\253=\001!\354\275\037.\007\276.d\325=\366\036,\2743l[=\261m\222\275m\003\260=#\271R=\356r\342\274\002\010\375=\033bF\274\265\031\002>\373\003\177=\227\267\307=\230|\214\275\020RW\2745\251\233\275\357\363\221<\272\202G\275\000\300%=\226\274\365=x)\335\275$\227\265<\274\333\001\275\007\274\221=uI5\276\r!i<\241\001\264\273\006\237\217=\237\236>\275\037n\346=[\315\355=\324\355\"\276\335\245\334\274+\267\222=\260\364\235\275\323\336/<t\031\323\275\227\377\344<3* \275t\253\215\274\3614\250\275;6\242\274\177\2717\275\251\325\367=R\206\"\275\326/x=\215\363\020\275\336\317\006\276\261\361J\276\200\017\020<\257L\"\276\204\367p\276\224\r\274\274T\342\t=\351D\345\275\354\272/>6Su=\201\241}=\205\342\222\276Q.\367=>\354\262\275\001\025\276\274\002\027\312=\357\226\037=V\301+\273s)\035=\346\353\374=\221(\211=Q\350\365\275\335)\025\2753\243\211\275h\231@=.x\241\274\326\003\277=*M\266< \347\372<\\A\344\275\372\003\231<f\020M\275\220\313X=\371l\001>\364\230-\273r\312\261<\347Xr=e\3046=\273H\002=\265\332\246\275\325\350\005\276\343w\"=2K\237\275\357D\210=\017^\273\275\340\376\254=qt\323=\3153\317=i\310\202\275*\370\310\274_\374\226\275\006\006\025>z\264\203=j/v\276\257\037\215\274\362\262|\275\255\"\213<\327k\270;\241\342:>\253\027\026=\267\221H\2755\252g\274\315\321I=\264M\246=%\000\237=\353\344\357<\306\215L\274\354a\013>\203\300\340=\256\373\243\274h\001\322=\305\020\343\275\035\005L\275J$\244=\370\254_\274\022U\363<\3409\007>\364@\023\275\207\035\t>\031\2136=\033\362\270\275\236j&;_\244\205\271\313\313\310=\035M\370=\341S5\275w\237\362\275\340\322\303\275\205\'\364\274\244\243w=Hxk=\321\331\250\275\345\312y=/\200\275\275\007&\375<\202\034@\275y>\013\276\031\373\201\274\201\337\301=\301\367\314=m\003\257=\000\274y=\204\216p\275\376\000$=\321\026\037\276\2720-\2752q\t\2763\356\201=\234\206\203=.(e<\277K\266=\260\325\342\275\347\366*\276\237\361)>\373\240\327\274\327&\226=\n\001\020=\355G\312\274Y\376\374\275~r\221<\322\034\006>\032\026\215\275\213\243J\275C\244\231<\026\272\227<\034\366\254=`g1\275\266\351;\275y\t\246\275\214i\'<\367\300\211\275F\225\033=\340\375t<K\316,>\377\272\350\275\324\301\350\27523\022>zU\t>\300\235Y=\021\330Z<\362o?>vo_=\347\"\240=O\301\036\275q\322\203\275\375\\\027=;\016\345\2747\014==t\213F\276\035+$\275\211\211\307\2748lA>u~\323\275\254\343|\275\355Q\006\276\340&\332\273J\357\037>\001&\031\275#qR=\226\031\367\274[\312\307=\364\240@\275hi <\254+\177=\363\000\031\274T\177\022\275\345\t\364=\214v\317=\215\371\316\275\262<\215<;\313B\275\231\366\246=tof;h\177\254\275\303H\350=\253^\276\275\250\272`;CO\024\276\377\t\335;\000\307\220;y&I\2767rc=1]\326\275\330r3\276\373Y\231\275\361\027\250=<2\r\276\014SI>\333E\010\275L\262$>\330_\n>\267\270\224\275%\020\333:[\266\t\276\217\016\033=\003\342\307\274G!r=\032\000<\275^\363\324\275\333=\255<\271\017\340<\2032\301\275\253\233I\275Cy\241\275\033\3470=wx\213\275\3725\321;9\377\263<9\370\361< \342\330\275z\355\323\272\275\235\356<\225\263\001>X\220\231=\324R\336\275\375\254Y\276P\335\334=L\\<=\351\333\305\275\267=G\275\241\020\373\273/\306\330\274y\213f=\200\031\256<\212K\212<\346\272\230\2755\325\017\276\313\025\225\275\\\3533\275=7\213\275\331\2454\275\253\211\346<8\031\362<\020\336J<\367z\225\274\315\316\274\275p=\234=\033Z\001<\267\326\364\275g\020\314=\230\351\210\274\214\240\246=\033\334*\275\253.\307<\336\206\224\275\267\341\363<\316\351\263<\221\021v\274\321\305\206=\214\342\352\275C*d\275\232\246\357\275\016)\277\275\'C\205\276\257\251%\275\314\215\022\276\003E\244\275\326\317\010\276\001\320\035>\036\310\324\275l\251T=`\215d=!^\000\275\2216~=\345f\035=[\375\222\275\022\0360\275TLU=\016\264N=\220\001\255=\271\276\014<Uo\326=\237\342\273<\203\033\177<^\262J;\360w~=\02016=w{\035\276\333\034\r\276N\311\252\274K\313\333=+.\354=\354\n\323\274c\230\224\275\360\242q<\"\245<\2746\246\304\275~\260\204\275\341\353\005=\300\023\204\275\353\326c\275\275#\035\276G\2269;\220:,=\273\024T<\347N\211=\r\034\262\275jIu=$\232\002\274\\\372>\276D\262\303=\246\223o\275X\210[< \177\013=\336-%\275\257\371W\276\333.\305\275RR@\273\303\357C=\337\207H>\216\353\327\275d\025\372\275\244:\341<\236\202l\276\365Y\256\274\273\'\034\275\250M\217\275C\032\237\275\363\223\272\275Q\323\036\276$x\341\275\367\303\326=\252\340\017>\247gb\275\364\003\000\276\'\255\340=\240\2742\274\242\203\213\275\326O\205=7#\236=b\352I<l\306\322=z\036\007>b\335\177=\233\"\376=\314\335j\275\213+\343<f\305\242\275`\016\371<\306\364\346\273 \203L<\257\033\333=\244\224/\275\030\037&\275\354\207\232\276@\320[=\020\354\232\275\035\313\213\2736\373\321\273\2658\263\2754[\241\275\213-\006\276ow\246=\362`\271=VW\220\274\230\243\t\276\331\260\316\275yY\205\275\336\374\220\274\272(\206\275\350\302\206\274slq=\202V%\2746\305\336<^\332}\275\316{\206\275-\377\027>\026\324\255\275\200Z\302\275\305Z\235\275L\271+=6\256\265=\302\212\374<\t\033<=U\366\014>\243I\225\2750\274\'>\335\371\360=\r\310g9\374\241\314=\311\254V\276+\304\204=g\211\027\275\030j{=\226\341\357<\367\017\313=\270\234\353=\0354\306=\345a\307\275U\031\372\274SHX\276\020\202\004\273\030\245\037>g\220!\275G}\270=\007\003\320=R\330\223=}\'\330\274{\373\005\276\374#d;Y\372\215\275\315qi\275e@Z>\346W\211\274AuJ=\330\253`<\304\014~<y3\204\275p:\335<l\2227>\"\233\026=@\223\336\275k\260\262\275\306L\254\275\023\003\227;W.\"=\353r\207=7(\254=\347K\326=\264\345\312=\000:Q>\272\327Z\275\232\253\352;zj\364;\373J\023\276\031\237\350<\345\022\230\275P{\220\275f\244\241=)\355Y=J\325\034=9\362\202:\365\335\361\275Rg\347<\320\304\220\274K\206\300\272\027~\024>\243+\216\275*\224\223<fs\361;\236\232\362\275+\013Z\275\232c\023=b\027\t>\226E9=q\372\260=\243*\206\275\023\277\361\274\234\252\352\273A+i\273\025.\233\274M\252c\276\230\267A=\304\347\253=\237bT\274\'Uo\275q\273L==\252\306=\320y\227<_%\342\273\264\211\232\275\373{\034=\252\'\334\275R6j\275\010\210\305\275\246\351\232\275T\016+=\323)@<]@\244\274sJ\263=n\366\371\274\241\302\021={\312\005\276\201#\317=\371\310\311\274\235=3=`\"3\276\304\310\264\273?\312\n=w\013\355=D\237q=\000h\001>\2428\373=\3719\031\276\354\227\032\275\276]->\247\250\305\274\370\203\222=c\204q=\2229\376<7\311n=\305\327\247=\030~6>y\210/\275\025\034\245<\014\246\013>!\"J<\363\3621<\300\326$=p\357\022>\342vO<\035\027\336<\243,s\275\326\263\263=\306U\357;/\\z\275\262\321\230=\033\022A>6De=\025w\026\276\352$\367\275\344\032\223\274m\336G=5w\210\275\362\032\344\274\274G\247\275\245\260\256=\347\365=;*\304><\373\370\217\275%\341\366;\t\241\361\274W\230\204=\303\203\366\275XvS\275\257\217b\275M\222&\276\217Z\327=\345\266\031\275\274\201\">ni\033\276\340\372\010\275\335\233\335\272s\305\023=\353\313K\275\273\317\276\274\315gS>+K\230\274.\362\033\276 \317\352<\326\215\217\274\214\272;:\242>\266=$\364t=j\027\244=\3013I=\327\364\342=\026\243\n>\337\255q=\267|>\2755\305=>E\204<=\264\335\215=\305V3\273WF\213\275u\274\323\274#\316\336\275|M@=\346\375Q<R\236\026\276\r\317>\274u2\222\275\023dd\275\006\246\016\275\261\361\255\275\267j\336\274\016\330\305<\334\250\221\275\320\355\243=\346u\215=\234*+=\312\027\000\276e\030\202\273\263\206)\276\347)\332\274\341T \275\025n}=b\224\256\275\264\224#\276\375\"\366\275\"PW\275@\237\006\275\365<t\276I\033\320<\362\344\022<\250\035\025=\236\340\241\275;,\234=\245\2453>\231\257\256=\266\274\356\275_\371\213\274e\240\327;\301M\026>\236\375\201\275\017\347;<\305@\004;\022\026\377<\274\235\304\273\357\3761=\274\274\010\274\255\341\031=)\300\177\274\021\256\207=\332\310\220\274\361\347\362=\210\321\320\275\201\"\235<\3224\214\275d\217I\275\004o\316\275\331}\331\274\2405\243\274A]\257<\222*\313\275\322_\006=g\313\326\275\322\036\t=\257h\232=\364\307\363<K,\242\274\273\311]\275 \036i\275L][;\'\264\034\276\205\375\325=\372\365!=\321\\\014>\272\301\213;X\023\\\275cT#\276|\376\311=H\377\300;\010\362\300\2751^\200\275\340\035\323\272\004\272S;\200\345\314\275\252\tN<^\212r\274s\336S<\024\374\227>y\363x\275\014\024G\276E[\273\276\356\345\227=i\022H\274\202\n5=\3337\235\275\267\001\303=<w\261\274V\300\372\271}0\021<\205\370\352<\336\273<\276\220\227@\275I\213\321=`\341\037\276\037`\200=\236V\017\276\246\311V=\036\323\037\275\341\0100>j\211\222\274*X\370\275\357\325\302=\201\263_\275\351t\337\274\317\007\002\276\027\tY=\350\340\320\274\362LX\275/\306\327\275{\342\373\274\333\302)\275\271\233\350<\277\016\026\275,(\271<s\372\014\2761\345\325=\277V\017\275x\315\n\276RX\211=\264b\022\276\rj\r\275]\217\033\275>\\\000=py\031\276*\365?\273\263\005\r;\r\211v=rm\000=\323\230\270\275 \0001=YLN\274\304\275\255=p\272\206\274)q\026\275 i9<\211^\001\276]\247\203\275Ja\271=Wm\226=Y\264\010\275\314m\022\275&\362q\274oP\273\275${*\2751\231l=\304Q\007=\333_E\275\247Kj=\035\230\001=GQ\340\274\004\325\216=\236\371\330\275\020\306\031>\334\003\311=\276\224\035>\177!C=U\033\351\275\214X4>\207\'\270=\316Av\275"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "spatial_dropout1d_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "spatial_dropout1d_1/cond/Merge"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value/Minimum"
  input: "bidirectional_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "bidirectional_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while/Enter_4"
  input: "bidirectional_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1"
  op: "Less"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while/Less"
  input: "bidirectional_1/while/Less_1"
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/LogicalAnd"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while/Merge_4"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_2"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "bidirectional_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_4"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "bidirectional_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_8"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "bidirectional_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_9"
  op: "Add"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit_1"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "spatial_dropout1d_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "spatial_dropout1d_1/cond/Merge"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_3/Minimum"
  input: "bidirectional_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_4/Minimum"
  input: "bidirectional_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_5/Minimum"
  input: "bidirectional_1/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_4"
  input: "bidirectional_1/while_1/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1"
  op: "Less"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while_1/Less"
  input: "bidirectional_1/while_1/Less_1"
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/LogicalAnd"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_4"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_2"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "bidirectional_1/while_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_4"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/while_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_8"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/while_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9"
  op: "Add"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit_1"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_3"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice"
  op: "StridedSlice"
  input: "Flatten/Shape"
  input: "Flatten/strided_slice/stack"
  input: "Flatten/strided_slice/stack_1"
  input: "Flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/Prod"
  op: "Prod"
  input: "Flatten/strided_slice"
  input: "Flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Flatten/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Flatten/stack"
  op: "Pack"
  input: "Flatten/stack/0"
  input: "Flatten/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Reshape"
  op: "Reshape"
  input: "bidirectional_1/concat"
  input: "Flatten/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.02159671112895012
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02159671112895012
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6890894
    }
  }
}
node {
  name: "Dense_1/random_uniform/sub"
  op: "Sub"
  input: "Dense_1/random_uniform/max"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform/mul"
  op: "Mul"
  input: "Dense_1/random_uniform/RandomUniform"
  input: "Dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform"
  op: "Add"
  input: "Dense_1/random_uniform/mul"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12800
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/kernel/Assign"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "Dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/kernel/read"
  op: "Identity"
  input: "Dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Square"
  op: "Square"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer/mul"
  input: "Dense_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add"
  op: "Add"
  input: "Dense_1/weight_regularizer/add/x"
  input: "Dense_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/bias/Assign"
  op: "Assign"
  input: "Dense_1/bias"
  input: "Dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/bias/read"
  op: "Identity"
  input: "Dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer_1/mul"
  input: "Dense_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_1/weight_regularizer_1/add/x"
  input: "Dense_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/MatMul"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/BiasAdd"
  op: "BiasAdd"
  input: "Dense_1/MatMul"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_1/Relu"
  op: "Relu"
  input: "Dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29925280809402466
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29925280809402466
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5596412
    }
  }
}
node {
  name: "Dense_2/random_uniform/sub"
  op: "Sub"
  input: "Dense_2/random_uniform/max"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/mul"
  op: "Mul"
  input: "Dense_2/random_uniform/RandomUniform"
  input: "Dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform"
  op: "Add"
  input: "Dense_2/random_uniform/mul"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/kernel/Assign"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "Dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/kernel/read"
  op: "Identity"
  input: "Dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Square"
  op: "Square"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer/mul"
  input: "Dense_2/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add"
  op: "Add"
  input: "Dense_2/weight_regularizer/add/x"
  input: "Dense_2/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/bias/Assign"
  op: "Assign"
  input: "Dense_2/bias"
  input: "Dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/bias/read"
  op: "Identity"
  input: "Dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer_1/mul"
  input: "Dense_2/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_2/weight_regularizer_1/add/x"
  input: "Dense_2/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/MatMul"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/BiasAdd"
  op: "BiasAdd"
  input: "Dense_2/MatMul"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_2/Softmax"
  op: "Softmax"
  input: "Dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "Dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum"
  op: "Sum"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv"
  op: "RealDiv"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub"
  op: "Sub"
  input: "loss/Dense_2_loss/sub/x"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Log"
  op: "Log"
  input: "loss/Dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul"
  op: "Mul"
  input: "Dense_2_target"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/Dense_2_loss/mul"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean"
  op: "Mean"
  input: "loss/Dense_2_loss/Neg"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "Dense_2_sample_weights"
  input: "loss/Dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Cast"
  op: "Cast"
  input: "loss/Dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/Dense_2_loss/Cast"
  input: "loss/Dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/Dense_2_loss/mul_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/Dense_2_loss/truediv_1"
  input: "loss/Dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/mul"
  input: "LSTM_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "LSTM_1/weight_regularizer_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/add_1"
  input: "LSTM_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3"
  op: "Add"
  input: "loss/add_2"
  input: "Dense_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4"
  op: "Add"
  input: "loss/add_3"
  input: "Dense_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5"
  op: "Add"
  input: "loss/add_4"
  input: "Dense_2/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_6"
  op: "Add"
  input: "loss/add_5"
  input: "Dense_2/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "Dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "Dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/bias/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/kernel/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/bias/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/kernel/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/bias/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "Dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2_target"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/Dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  input: "Dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional_1/concat/axis"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while_1/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_1/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_6"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_2/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_3/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_7"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_8"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_8"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum_1/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while/Identity_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_8"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Identity_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  input: "bidirectional_1/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_12"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_16"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "training/Adam/gradients/AddN_21"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_6"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Identity"
  op: "Identity"
  input: "training/Adam/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_1"
  op: "Shape"
  input: "training/Adam/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros"
  op: "Fill"
  input: "training/Adam/gradients/Shape_1"
  input: "training/Adam/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad"
  input: "training/Adam/gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad:1"
  input: "spatial_dropout1d_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/dropout/mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Merge_grad/cond_grad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape"
  input: "spatial_dropout1d_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Mul_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Sum_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape"
  op: "Shape"
  input: "spatial_dropout1d_1/cond/mul/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape"
  input: "spatial_dropout1d_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "spatial_dropout1d_1/cond/mul/Switch:1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/dropout/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Mul_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Sum_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@spatial_dropout1d_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_7"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "spatial_dropout1d_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Identity_1"
  op: "Identity"
  input: "training/Adam/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/Shape_2"
  input: "training/Adam/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/spatial_dropout1d_1/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "training/Adam/gradients/zeros_1"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/Switch_1_grad/cond_grad"
  input: "training/Adam/gradients/spatial_dropout1d_1/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/AddN_22"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "LSTM_1/while/Exit_2"
  input: "^training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "LSTM_1/TensorArrayStack/range"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_23"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_8"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_24"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_24"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  input: "LSTM_1/while/Identity_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  input: "LSTM_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "LSTM_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  input: "LSTM_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  input: "LSTM_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_25"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_26"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_27"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_28"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12800
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0002\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12800
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "LSTM_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "Dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "Dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "Dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "Dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "Dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "Dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/Assign"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "LSTM_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "LSTM_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Dense_1/bias/Assign"
  input: "^Dense_1/kernel/Assign"
  input: "^Dense_2/bias/Assign"
  input: "^Dense_2/kernel/Assign"
  input: "^LSTM_1/bias/Assign"
  input: "^LSTM_1/kernel/Assign"
  input: "^LSTM_1/recurrent_kernel/Assign"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^Dense_2/Softmax"
}
versions {
  producer: 38
}
