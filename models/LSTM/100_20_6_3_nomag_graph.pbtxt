node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "LSTM_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "LSTM_1/kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\300\310\304\2743\220\212<\340n\275\275frm=\027\274\330\274C\203\213=-\377\340\274\331=\237\274\355\267\351\274\257\253\221=\230jA\275\214\326G\273(\353u\274\031\\\247;\220#\212<\214sp\274\224/\243\2758\003\261\275\214\274\361\275l\000\031\275\262\327\273\275RG\304<\264\013H\274?\'h>1\203\034\2755\330\032\274\233\267\177;\254\217h=\357\201\340\275j4s\2756\365\210\274\264Z\016\272\216\002\241\275\030|\314;%\355\020\275\000\345\030=\200\357\254\275\352\306\207\275\375{\037=\265V\031>\205\236\363\273h\213\255=N\326\027<\333\n\250\275v\237t=4\344\033=\n\326\224\275\002\235\260\274\351\245%<\346\261u=\311\256\007=24\216=\350\330\233\275\254\216\r=k\254\300\272\344\"\374\273AJ1\275\036\337\327\272bK\347<\036[O\275@\017\300\275N\201\273\274\332)\002>\303vR\275\325\251\300\275\021\177\025>.\317\255\275\212\235\203=\021\326I\275<\010d;\236\213\225\274a\007s\2757\244\202\273\261\341\226\275u\272\240<\227\306g=\332\330(\274~<\031=\326D\323\274\324[\004=a\256#=*\3026\275\260\256\"\275D\\8=\274\206\"=\222N\250=\324\035c\275\273<\331=\207\352\214\275\371\rF\271\367\251\226=TR\274\275\266V\274=`\022u<\254rU=\361\353d<\241\246\222=\034|\202\275\027r\n<\207,\220\274\301\307)<\306Uy=\207F\021\276\261\313.<\210\302\306<\377A\311\275D\n\200\274S\033\'\275#\354\344\274\277XN\273\024#\235\275\000\021\371<\216\360\374=\256\356:=\310\220\201=\004D.\275\023\307\355=\324\315p;B\215\010=\312r\336<\022\202\347=\256\311\\\275\232\006\n>mB\262\275\217\260\'<\250\004\271\274\026\200\322\275\314\315\306\272!iM=\210\205]\274\333\032\202\275\016&\231\275\2475\341\274$V\023\275\355\005(\274s\036+=\202\332\200\275\251\316\352\274\327mb<ji\310\274!\306\207\274?\276\222=\001o\227<1\330_=M\"\352\274\020Z\021=\321C\216<\304[\">\377pF<\200\325z\274\274\300\340=S\354\364\275\362\221\334\274\026\3500=\274\001\222\275\327\301\276=\300\346\023=\020\355\244=`\314\220=[\306\254\275\376\257\030=L\276D=5\371f;\323\222\223\275\271|\244<\227pA=\360JS\275\330\017\346=6Lp<+\371\303\272\351\031\200\275/\244\245=\340X\035;\030\234\370<\301d\005\275\264\317\221=i\254W\275?\302\357<2/\355;\3751\260=`\357\244=\216iI<\273\n\341\274\241\0131\275\355/K=>`\364\273\315\'\353\274\304b\n=\363\340\016\276\362\031\226=%\377]\275L\026\333<y|\232<\313\361\363<\255\344\275\275\005H<=\033\343\332\275\260\335~;v{}\275\362-\'\275H?\260=\227\312O\275\262\002\250=\272@\216=\325\025\362<\277\370 =\262\020\366\274~\017\026\275\223\236\003<\312!4=4\377\233\274\244m \2755\223\307\275^H\205\275=\022u\275\363v\241<\005\376\020\275\351\t\300:*H\210\275\0008\002\274\274\271\215=\371\341\325=ug\220=N_\362\274\014H\325=*\301/\275$\374t\274\310\006\345\274\273A\026>\267v\212<\002C`=`\000\271:\377\266b=\005\371\001=R\307\243=\017\311\345=ny\212=\316M\305\275\023\037\031\275z\307\342\274\237\277e\275\365C\316\275(\306\025\274\221\222^=\367\256A\275\021\240\210=\010\276\315=d\352\347\275S\0140\275b~\362\275G\273\232=2^\032\275w7[=\364\214\027\275\033\247\345<z!r=Rg\244=Tjk\275V&P=\274j\234<\334\270-=\240\177\306\275\354\257\251=\274\325#\275\256\213\032\276\204\n\337=$f*=\320\213\343\275\016\210\211\274\300\241\261=\375o\332=\347\226\204\275\266\333\r=\224\234:=:\020[\275\204\3610\275\314\033Z\275\013\305\233<\226\305\217\275cl\317\2742\026\224<aF&;\013.\025=\200\333\233<f\032g=\211BP\276\246\271#\274\361\223\302<\007\317\215\275P\326H=\243L\031>\2470\214=C\272\232=K\334\033<5\210\020\275\025B\312=\2517\000=e\303\254\275\223\312C\275\234`\353<\004\207\372\274u\2577\275jF\032;2\002e\275\2741L\274\034\350\004\275jq\227<n/\207<\214v=:\005_\214=\023K\206\274\013/\231<\254\360\335:\315t3=\003\031)=V\336;=\235|\202=\206\2510<{\257\277;\256\033B\275\243\\\034\275\024\236!=4n\266\2755\017\255\275\021\203\000=z\300O\275\276\376^<R\216\010\276\300\216,<S\026_\275e?\356<\240Y\022=\315\271\311\274Bk\002=o\362\034\275\256h\335=\352\254\317\274\254\211\225<\312\020\"<\006$h=\203\266\002\275\034T}=\203\242*=hA\251=\356\177\317=y\203\362<0&\273=\217\347D=x\223\010\275\301\033c\275\267\000\253\275\\\337\251\274\213\323\353=\207\'{\275\016\242,\275\244Kn=\321\006X\275G)9\275\237\312\256=3.\233\275\377\271\276<\376\223\310<Z\360\223\275\250\2378\275\276 \302\275\244\303P\275n\306\276\274\376\351R\275\370p\025\275\2231\177=\343\350\377\275C*\r\275\261\312\203\273&\223\342\272\224`\334=\014\227\330\275!<\205<\205P!\275\274\350\304\275r1|\275@;\006=Z\275\241<)\224\000>\202\025\300;\331\221\234=C\237\245\273_<\214\275\233\245\233\275\305\340O\275\031\303\002\274\250\372\256=(\266\223;\224\274\265=\'\\(=}\343\345<\325\363\036=~\225\342<\210\nQ\275oQ\367<p\037\223\275,B\274\275\243\370\026=\263\236\004<1;\241\275g%<\275\254:\t\275\273\t\261<4\350T={\366J\274:\273\n<\3762A;\313n\354\273\374\025\255\275\343\017{\273\024\020;\275\267\013~\275oR\376\274\234o\351=y\342\001\274\262>\231\275\313-\t<fy\377\274\227\331\352=\324V`\275\266\362\\<\314\346\206\275\364\324\010\275\277N\004=g\n\313\275WW\366=\247C\372\274\313\354\332=7\271\242<\350\304\006=\017+\227\275*\304\233;\205<\326=~\304\353=\273bq=\027\277\231<y\002I<\212\346E=\255\2150=\360\200\207\275=\200Y=C\262\277\275G\005\327<\302\301{\274Y\341\251\274\302\014\322<\304Z\242;\321\025[\2748?\375\275\207\205\243\274\261k\200\275\320\035!<\'\214\240=\330I\361\275\343\"\360;lI:=\010\022\266<w\212q\275\321\0053\275\177M\304\275\234\251C\275\255\212\300\274\213\357\365=wU\341\275\262>\217\274p\355,>W\271\276=:3/:\315\220S=2\342\013={\263T\273Q\347\r\275?\320\301\273\375c:=\2305\305=\344Y\371<\002A\">`I\345<\'\311\256\274A\301s=\275H\343\275\010[@=\231sK\275W{\243\274\336\224\364\275\310^\265\275\213\231g\275\245\260\316<\252`\034\275\237f\267\275\254\271\232\274K\371\365<\335h\236\275G\002?<\225\367\265=3A\007\275\020\225\345<\016\315`\275\320%\003=\344\342\345\274\233|\003\275I|\343\273\034\213Q\275r\206\036\275\223]\034\275\332d\307=\036\333C\275\217\216\264\275\212%\376=6a\273=\n0\340<\233\326y\275~\233\270\275\247\344\235\275\205\263\216\275S\177P<\235\016E\275\242\221\200=/ki\274|\323\336;\333E\t\275[\217\271\274\355\322\372=2\001k=%e\026=2h\n\274\361\265\353\274\274{\247<\322\220\307<\'\210H;\243\020L\275\034\004\354\274\270\232==\274\013\361<\336\276\373\274p\253\204\275\270\367\210<\220\304{;H$\235=\305\257,=\255)N=\265\310\354\274X\334\007\275\222%\014\274\322\025\370<\203\241\007=I1\036\276 l\'=\000=0\276&\267\t<\3511\017=\'8\362=\310\355\364=\337\316R=@\246\004=\240\313\271\274\006H\202\275\2568\005>\324\003\330;\250@\275=l1\035=gU\356\274\304\303\323<qT+;\245K\t\273\315\301\222\274\3472\204=\024\034\"\274\304\335c<\372\312\245<\224\030\035\275=G\337=\030\264\271;\037\345\252\275\332\245\221=9<\217\2759\227>\275w\232\224\275AQ\035=\362\2139=C\037a=\024g\327<\224\305\217\275\300ub\274\006\316~<\225\227\035\274\325\214\276\2742]\213=\306\246\237=\262\215\315\275m\264\310<{\035\033=^7\364=\237\315\333\274\003:\206\275\246\334\013\275-^\346=\322\267\314<c\325\206\2742\377B=\031\222b={S\214=w0u=\232\214\275\274wY7=\214\214\373=FX\203\275M\340E=\311\221\354<\014\022\232\274\030\326p<V\355\240\275\024\315\247\274\366\020\275:16\320=\237\264\201\274Y\310\340\275@\242\330\274\203\257M\274:\030\225<J\2049\274H\010\010=k\031\242<PN|\274\206\247\022=\254\364\341=\234\r6\274l\004\270\274\005\025\264\275\346\253\267\273\034\314\302<\274\006f<\254\316\224\275.o\373<\376U\334\274]\230\306\273qi =\331\330T\275\250i\351\274\006\347\376\275 \201\302\274\014\027<;\025W)\274\177.\222=\265\261I<[\320\244=\372\367\207<\030\325\205\275\032\177M;G\221\264\275[\3307\272\320\247\242\275\212\254e\274t\371\237\274j\237,>3\206\001>\013\374B\275\261*O=\313w\004<\332\200\375\274\024\201\242\275)w\231=Z~Y<\322\376?=\267\022\357=2\226\260=\017\025B\273\360\362g\275\204\335\235=\016\367\316=5\233\002\274\251\200\271\275\336\r#\275[\262&=\213\351m\274\2275f=\271Mg\275(\240\332\274\216Rd\275\200N\t\276\003\326\204\275\314)d\275\261n\374=\320\363\236=\022\376\n\274\374\002!=\252rH\273\254\266\261\275\203\326/\2756\241\275\274T\323\036\275\230\331 \275;R\244<\206n\261\272\215^&=\375\346\215;\352 \261=\333\261\270=\014\013v\274\231\273\357\275\215 \243;Y\210^\275S\377\351\274\004\357\233=s\236 =VSO=\212\373\177\274\026\356\020>fC\366<\363P\212=\034\2134\275.\203\021\275\320\301\323\274\r{\200<\200\0226\275\367\274\245;{\273#\275$\216\022>n\3038\275E\375X<\366\365+\275\264\336\301=\026h\213\275\230b\220<\373\320 =\302W\202=wX\247=[?\307\275\244\033\260\275!\226\036\275\316\241\205<\214\325\226\274\365\3105<\014\026\320\275g%\007\276NS\265\274\260\014\037>J&\001=\354\347N\275\324\"\254\275\022,\243=%\337(=O\366\225<\201\376>\275\256\302!\275\261\247\200=B\211\266\275\023\003|<@\002\226<\217\021\211=\342\231\324;\022\236\203\275\262\372 \275\022\204\260\275L}\266\275\300\030\002\276\006,\005\275\367\370==t\016g=\371Da\275\020\260\313\275CK\333=\326\235\333\274m\020\343=\230\345\361<\214y\205\274u\261\274=5\353\216\273$\324\020\275\352\036#\274\374\r\201;\252\347[;\253\333s\275\202\363\025\275\306\227+=Q\'\212=\344\277}=\266\177\205\275J\374\321\273H\370\252=i\n\322=\"\326B:ut\311<\217\310a<\231\tA\274Lw\305=\021JD\274K!\257\275`\340\362<\356\365\333:\025\217\313\274\253\247\274\274\233\236m<r4\233=\377\352\2719\257=\233=v\340\273\274\n\230b\274\262\261 >\020J%\275c\212\217=\361\177b;\247\332\002=\361^\243\275\271\r\351<\253[2=\007\027\332\274\214\265\246\274{\354\215=@\027\334\275\025\020\340<\226\305X=\177-\005=\241\037\005>DFi\274\360\274]=A\201\353<\037[B=j#\220=\252\031/=\212\n\013\275\313|\275\273\031X\340\274\362\276\271;\327\314T=W>\212=\243\'H=41\262\275\270\345\312\275\213\023\276\274\263\360\032=P\342\036>\277i\343\274\362\323\017\275z\373\342<z\' >~\"\277\274Z\205h\275\230n\371<;\324f=\344\212\311\273\242F\344\275\265\222 \271n<\224=\237R9<#]><\330\360\262;\325\353\301=?v/\276p}\341=\260\222_=v\375\262=\002\206/\275\'\303\007>C\016\355=Y\321\223=|m\017=\267\220$=:E\344\274W\205)\275u-\232\275\357\361\254=\006t\304=\032\203k;\033\225\244=\276Q;\274\275\211^=e\007\223\275\337#\234\274\270\361\342<\377\021F<`\256\225=-\300\312\275\033]\001\276Z/\004<K\254\037=N\300\337\274\257\2765<\021?\213=\\\270/<\003~\205=\212\372\022\2762>\317=\341l\247\275G\264O\275\200\274\253\274\002\350\353;\214\332-=\204By<\261+\220=2Yv=\025\235\243=Y\344\232\275\257 \316\274\356\261\217=\200w\253\2756X8=\344\347\337\274o\'\010\275\031\021\313=:%\n\274\024\255S:\3653\243\275\026xt<\'\277\263\275\366m\355\275\027\300\346\275\313\367\207<\371\351I\275\360\232\030<\030\027A<\242\372\274<z0\315=Gb\206\275\000P1=\257\243\272=\3744\301=\223\306\n\275\035\243\202=\301\330\034>p*\333\274 Jg\275\363\021e=\326\tZ\274\rG\\=\3736q\275\007V\202=\337w\325\274\347\025\241<\251\234&;+\324\177\275\177\241\365=w\036\003\274#\244\240=5x?=;X\242=\217q\317;?\355=\275\277\002\330\272\225\307\n;q\017\262;\370qY=\343\247E=\362\311a\275\373\266\200\275\217\375\303\275\021T\021>r80\275<\r\341\274k0L\275\335\2556\275Wa\311\274WlZ\275\324\241\231<\231.\266<\256\032\247=\313\322\272\272\200j\316\274\347\227%<B\255r\275\316C\257\275\272\257\343\274\274\316T=b\310\226=\0228%\276\203q\264\275\275\240\027\2751\267\215;s\314\237\274sXZ=\276K8\274\030\037\225\275s,\227\271\223,\013=G\212\313=\001\227\335\273\205\243\226\275@\302\255\275J\302\315=\310{\334\274\314\277\024\275~\210\211\275\305\267><)bH\275-\373\261\275K\014(\275\247\032\000\275\222\311;=\367\375\002=\001V\273\274\251!8\275~P[=\226\3104<< \206=\301\333\006=;|+:\314\346-=\361\355\006=\365IS=N\025)=\235 \211<O\013\271\274\274\013h=\332\376\316\273P8f\275\304+\254\2753E\010\275\370^\220=\255\216`\275DB\024\276\366\274\244=\357u\'=\246\362\213<[\313\350\274\325\265\023>\245\022\203\275\2725\237=\032K\263<\355\300S<r\311\372\274\3359\215\275\0232\005\275h\030\030=,Y\255\273\347\350\031\275`k\002\276\231\334_\274\363[n<\317V\t=\275I\n\275\277\021\232=\014\224\246\274\240\013f\275U\030l\274s>\377=\306w\032\276\005\277K<6u3\275 \035\207=>v\243=g\\\022=\016V\006=\230\"\024\276{\224\220=\265\357\377\274Y\337\236\275Q\317\315=\213X)\275\232\262 ;4a\244=\247`\206=\001\343\354\274\312\237]=\301\300\354\274\366\276\211=\364,\312=\340\214t\274P\245\203\275FVc=\355\002N\275\237\027f\275h\357\006\275\350\227\201\275!\327\205\275h_s<F\337\347\274\242\264\262;aF\264\273X\035T\274\201\360\234=!\003\242<<e}=l\272\037=I\030\256\275\020\2450<f\255\310\273\006\263.\275r\n\264\275\0355,\275\257\005j<\221\317\002=\034\245\003\271\347\376\327<\240.@\274Zma=2\031\307=I\234><\3001\320<J\037\364=\010\316\266\274!\300\024;f)\254\275\003\023\023\273\226\211\340<\204x\016=#\346\005<\306\244\274;2\001\257\275\267\312\031=\334\252s=w\"\217\274\270\241\205=a\230R\275<=K<\207X\002=\246\354\273=\014^$\275$\274\324<?\264\027\271\365\206\353\273\355b\203=\343\023\267\275\313(@\275\247_\260=\3737\t;7\377\316\275\226\247\251\274\037\253:\274\010\201\r=\377~\017=Hw\266=\261\315x\275\344S\321\274\347VV\274?\351\010>fI\027>\201a;=\347\201\234=D\267\217<\263\353\257\273c\227\000\275G\347A\274Eq\333=\366\007\253\272\032\230\273=E\010L\275p\335\360\273\3649\261;\333\001\237\274\032\250\211=~+\211\275\301\231\323\273\317\352\324<e\365J<\023q^\275V\205{=&Cv<Bd\013\275]R\211\275\013\256\023\275.\270\013<\341U\204<o\333\016=\214\361\037\275\367#\254\274yH\254=\242\365a\273g\337\262=\246\020\303=N\'\021<R\316\202\275j\0057<\306aE\274\204\'\374=\003d\305\274\242o^<\364\253\214=\337M\244<\215[x=\310M\316\275\237\330*<-\231\265;\360/\'\276\301\316D=z\323\274\275\375\2139\275rW\010>a\366>=m\255\352\273\223\323\\\275n@\313\2751E;\275/^\252\274I\340\247=\351\327\316<\374\343\226\274.\365\025\275b}^\275\372\220\003\275\311$\374\275\352x\261=3\023b\2741O\326<\236\373\264\274\314\336\010\275\031rJ\275n\327\022\276\3302\211\275^f\374=\251\3235<5$+\275\224\371\327\273\332s\002\275\353\210\220\274\244\360T=\331\274\017\275\025\021\322=\240+\342={jG\274,\217\031\275c\264\030\274\341\2039<V\220\207\275\244\342\316=\276\225+=\243\005?<;\261\270<\254\200\325\275\232V\265=\367q8\275%\301\370<Q\331\265;O\327Y=O\307\203\274\234\000O\274\026A\356\273\006\372\247\275~h\265\275\355\317w<\031er\275+\315\252;\031$\000=\213\033\354\275\265\205O\2751\036A<\216 \265\275m[6=\353\214W=O\270C;:I\257=\t\275\233\274\345\204\021\2761\220\373\275+\276e\275\336\026\266=\377\353\226=!\034\210;cS\022><\n\243\275\rt\321=]w7\275w\346\231\275r\247\317\275U\326\305=\306\305\305\274\1774\216\274\250f1\274\310\230\276<\352mZ\275\306\375\266\274\266\025\240;\3378e=Z\020\004>@R\005\276\270O\035>9b\203=\202\215s=\006{-\275\253\376\311\275\331\375\222:\036\323*\275I)=\275\234\224\253\275\204\025\211\275$r\3208*\267\361\273@o\217=y\301\225=\306\3105=\360\312\356<I<\021<\240xV;a\032\207;)\255\222\275\333\345\221<\332&J\274\371_\241=\021\310c=\276g*\275H\361\272\274z7\210\275\262-\265<\312\277\023>L\321\325\275\000\324r<\322\370\221\275\025\235\203=\023~J\275\273\260\227=\334c\201=R\306\213\275\302\243\323\275\331K\266:\r\332M=LI\000<5\030\216\275lD}\275\ny\201=\376k\"=\251\250\206\275$\233j=4Ki=\326\017\233\275\275\346z\275\327\\\342=\326\370\222:\223\243=\275=\277\236\275\312\274N\275\022\311\031=\251<E=0\253\201\275\347\036\023\275\021f \275\301o\263\275!\271\361\272\2411\217\275g<\276\275\017\010M\275\274\027\n\275`\020};\262\212\374=\330y+=d\336\314<\322\2235\275\346j\344\275H1\200<f\254\010\274\361\222V=$\204\247\274\032d\275<\234b\220<\345\036\236=G\255\342\274\324&\014\276\302\336\213\273\373\265\377\275\037NH=\250k\243\275\350\252\027\274\311\316\006=\270\370~<h\305$\274\247\310\225\274\272\242r;H\177\224\275]T\222==5\277\275\214\250Y=\254Sv=\231\016%\275\234\231a\273Sa@>\n\320\273\275\207\204.<.\363\266\273\321C3\275\244IO\275my\260<\326\266\315=T\236\352<\226Lv\275&{\216;\241\373\031=\213\351t=d\317C\275-,\266\274V*\345\274\243A5\275o\216$<D\355\225=\311r\207\275m\341}\275\220\226\240\274\007\322\024\274Q\246t\274\267*\247\274\'t\216=)\340s=LE\260\275\360)==\235\261\004=\340W\236<\t\351f\275\000f\373\274i\336\304<\372\262\036\275\215{\327\273\353\317\330\275\327\007f\274\2203M=\001\331j<\203\230/;5\354\274;n\370\002=\304N\201\275\004>\"\275\304\206\207\275\360V\317=\341n[\274\010\177\260=\271\244D=z\270A\274\030\003\224\275\250\241\203\275\366\275c=\300\372\350=\273\r\002\276*j\220\275\365\002<=\375\257`>\037~\203<\375\207\307<\361P\030\275lQU\275\325\276f<t\275D=\273\275A=\3716,\275{\365\003\274\264\377\003\275\264M)=\367\022\021\276\263\372\344=\005\275\322\275U\370\342<\004v\377\275\254\r\235;\211\200\231<\rY\250\275\234h\251=\3613\274\273\227\234\256=\276\034\025\2754\314\216=aOs\275\n\243\205\275\326k\275\275\004Hg\275\325M\277\275\ra7=\246\002\233\273\033\211\301=\341\344\206\275\236\271\232=\376\373U\275\223c\234\274\220\362\324=\3125E\274\020\021f:\212N5=z\220m\275\n\253\302=!\254/=\345Z!\275\013\217\036\275\350\232\017\273\246\244h=\025\365G\275SF\222\275NX\000\274<\021>:\3703\205\275\317E\271<\274\361\275\274*M\035<.D\325\275\2518\006\275\347\352\335\274\230\254\036>\232\313\325<s\366r\275\260\021\275=j\230n=\212]\022=j2-\273F\301\360\272\365sG\275\353\331.\275Z\276_<u`\\\274Q/\007>\204\034F<\336\344\244=\031n\327\275\251\344,<\202q\271=}\206\023\275\251\2649\275\200DR\274\221\367O=\335\000\217<t\357+=\254M\230;\322\376\n=r\204,\274\022\032\204\274\327\212O=\211\266E=\232X\200=\235g\037\275\351Eu\274\3350\343=\'[R\275f\327\256\275g7\027=4\261:=d\203\230=\021fT\275\373\376g\275\277\237\202={\243g\275\013\033\026\276\372\372\034\275\216\306!\2768\345U\275\346Y.\275\"$V\275\226\014[\274\014\241c\275C\207\204\275\341\354\030<"
      }
    }
  }
}
node {
  name: "LSTM_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/kernel/Assign"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "LSTM_1/kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/kernel/read"
  op: "Identity"
  input: "LSTM_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Square"
  op: "Square"
  input: "LSTM_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer/mul"
  input: "LSTM_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer/add/x"
  input: "LSTM_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\025\333>\275\363\366\016=@\304\231<\334\271;<=F\362\274\010\311\320<\017 \004\276=M<;K\001{\275\352b$=\234\035\214<\222\354\366<\277r\350\274\277/J\275\377\227\305=VL\033\275\262%\202=Q~\233=THV\275$\005\253\275;\213\361\274\233\217?=\376\242)=>pL\275\n\215\r\275\354\264\303\274\305l\211<M\200\201=\272\252\024=\342\214\001\276\307\367q\275\243Fp\270\271\305\002\275j\264\216\275\3153\350<\245\277D\275\310=\252\275\206\263\026=\275\245@;c\016\253\275rr\303\275\310\315v=\233\357\250\274\274\261\337\274=\026\347\273\226\216*=~\353\227\273?\221\031\275}\215\241<q\0258\275\330\370c<\'lA\275]`D=\264\231\322=/[\220<==Z=0\275\244\274\265\352\263<`Rx=\010w\313:\272\310\t=\247\271O\275\031Xc\275&\223O\274RH\224;\277\260o\275\264\005\201\274\214\276\234\275\222R`<;./\275\354u\037=1\253y\275<\275\003\275\232\313_\274\014\205\031\276\232\300g\275$\225W=\214\324\314\275\027<\301=6\246\242<_\252H\275x+\007=\006\330z\275\026J\234=\302\025\020=\323JD=D\032\306\275g\356\247\275\354_\215\275ls\013<\373c\363\274\347\022Q\275\031\n\032\274]\201\"\275\312\310\224<%\303\215<\323?\366=\270\2457=\233z\214=0\0030=\314\\\201<3-S\275@O1\274\354\362\016\275v\002\272\275\365\244\304\275B4\301\275x\211\275=\220Q6\274\3362\000>m\3168>\377\335\322\273WR&\274\231\2761=Z\207\351<i\271Y=\031\352\315\274c|~\275\217\312_<\326[,=\200q2>\305\027*\274g\304y<\330\037\234\274\034\227\356\275i\337-<\026\257\307=l\216\002=\274\235\235\274^\335\313\274\274\033[\275\351\025\237\274\376\026\340=\360\367\226<\037t\211=i\331\304\274,\r\211\275\262\257\n\276;.\317<\237U[=mKy=+.\016;\356\204*\274P\317\003=\205C\200<\241\265\t;\376\346S\270\362W\236=\364\352\337\275\257\344\311\275\242\337<<\2440\235=\275\000\226=\355\306\361\274\010\355\263\275\301\013\201:=Pe<L\254,=\025\037\333<L,R\275\346\033\216\274\207\341\227\274\377U\204\2758m\025=\032\013O\275P%g\275C\023\337\275\022\216\t>h4\207=\327O\343\275\362/|=\233\346\000<\327\014\312;\213i\211=\212+\315=\360^\'\275A\201\3708\376a\225=a\034\243\274\013\337T>hFz=\217\216\007:\242[)=?\222\037=\347\3111=:L\264<q\265\266\275\300 \357\274\215>\225\275\017\365G=\222\216\004=\267$\235\274EC\360\2749N\375\275\r\030\364<\tMP=\235\204\302<\351\n]=\t\217\325=&)\263=\352d\314=A-\022=\354\347\n\275\275\031\213\275\035\221a<\272\320\357<\317\nt;G\220\250;\340\177\206;\307\375\250\275 \325\340;o\221\223=\010\322K\275\207F\235<\217\201\025=]\000D=.k\324=\034%;>\202\032\355\273\006\000\371=\313\214\023;\307c\221\275\2164/\276\255\343\230<i\347#=f\260\203\275\355uq=\352\364p<\024\367K=^)w=S%\337<\275\263\315\275c\305\\=1o\362\2749\205k\275\274\374\271<|b\254<ZN^=\221\305\020\276vci=\300\234\235\274\371t\210=\247\035\035\276,\003\036\275\177\002N\274P\322>:I\253Q\275\216w\224\274)\242\232<\310\367\372\273Y\0071=\366\221\014\275L\231\301<\314^\234\275\225\024\211\275B\215K=Ya\331\274{E\277=\223\267>\275\261\261W\2747Uf\275\251e\355\275\240C\272;#0\343<\0071d\275\240b\033>\337~~<\270\317\212\275*\273L\275F1\306\275\033h\301\275\344\356\337<\n\024H\275+\370q<,\272\314=iW\303=\354~>\275!\036\000=\021=\347=r\r\241\275\271s\330<9\303\247=\310\322\260<~\0376;:\206\266\275\034\373\320\273\0372\214<\001\316\202=\331\225\206\275lsH\275\371\016\363\273\\Z\254\274\233`\221=\023s\n=s\032z\2747h\350\274\337i!=%\315;=\217\263w=@\357\013\275\341\310\247<\207\016\356<>\314\333\275h\267\204=\303\327}\274\271\327e=q\220\341\274\357\020\245=\312\247O\2732\371\304<J\376E\275H\301\377=\200\316g=(%\364\275P\371\251<\231\264\250=\037%\367\275\217\221\362\274b&\276\275\026\345\200=\253i;\275\234T\021\276\275J\037\275R\263P\275\177\320r\275Q\351V\275\363x3=W|\310\275\r\313\026=F\261l\275\364\306\027\275\327\212v=\310\264\034=b\306\037\274\342\003\023\275\030\003\265\275\022\001C=\252\022\216=%>\307\275\002T\254\274\214}\245\274\236F\264<\310L\342<\371\231&\275\316\266\255=\327$\033\274R\030\224<\257\251\237\275\324F\376<\354\226\240\275F\261\235=V;\342\272h\277\030=\t3J\275\314\312\335\274\336\305B=2+\371\272<\"Q=\232\206\027\275yBq\274!\270\233\275N\374\">\306\317\224<\260\006\302<Mko<\"ZT=\024\373\253=\372X\224=\237\364\311=K\215[=\250!\255\273\307\317\026=\266\322\326\275\201Yd\275an\001=\263\370\226<\231\010\267\275\266\214w\274\315\325\214\274\020\351\351=\\\236\210=\222V1=Z\355\303\275\361Mz\275\265\215[<\250K\253=\300t\332\273y\027\004\276\\\031\266=\274WR\275\320\222\026\275\201\376C\275\3353\204<v\2701=e?9=\323#)<\235-\253=;O\200\275 m\013\276\214\367\263<^\244\251;dU\026>\360t\016=\030\257\244\275\2704\323<\\1\211\275M\026\242=\232\272\301=!\017o\275\244Z\201\275\253`\374<)\021`\275\232t\200=\026\334\214:M\304\220\275\016\215\246\275\205\314\315\275\300\014\204\275\311g\217=\375\306\001=\'P\301\274\204J \274\231\346\355<\260\232\021\275\260[\\\275\316\212\000\276Z\036b=\233.\222=-qE=V\006\216=\372H\025<hm\233=\003\252]=\255\205&=\230\030p\275<\377\351\275\255t\267\275\310S\326\275\215\236\234=_\343\233\275;\260\350<\303U\207=1\017\335\275d\302\021\27474\206\274F\300\353\274\332.\230=\023-\221\274\013@\005=c\340\274<6\330\010>\276T\021\2752\360\031\275W\271\207\274\261w\347\274\306G\356<\2173\177\275j\270\201=\"\241\367\273eb]\274.\273\200\275\352\010#\275qN\201;h\371\017=\024*\017=1\212\014<\016\370#\275#B\234\275T_\301=\200\006\251;\365\006\226\275\276\304X\275\336\264\335<\214\232\020\274[\244:\275\262g\n>(\223\370\275\266?#\274A\245\036>\230\244\331<\2148\037\274+\265\375<\212\0037=\270\353\272<hY!\275y.\035<\340G\253\275\004\016\215\275\264\2301\275\257\231\222<\002L =\367\3242=n\376\235\271U\024\252<&j\r\274TG\324\274\"\322\232\273\010\265m\2759\341\313\274E\242\246\274\201\224\001\275\'\262\261\274\337\241\305\275\374\227V\275\255\024J=I\375\325=\2474\321=\301\027e<\307\005\177\275\026\255\300=\372\025\341\274\317\371\004\275\375\266\003\276\347`P=\216\260\231\275\032\021+\275e\251\361\274\024\321\224\275~\241\340=\250\316\202<`l:=UN\354\274\3468\025=J\374\247\274\217\200\364\267S\3127<\225B\245=\223\r\204\275\246\306\224:uN)<5b[<\\Pv\275\376\217\261\275\301B~<yB}\275\256|\364<)\372\326\275\215\032\213\275e\376{<\341\333\035=\003e\365\274\361\352V=\307\237\371\275\226\365\t\275tWw=`\365\272\275O\006\204=\354\026\224\274\340\274x=\213\205\336=:\177\021=\237\245\021=\020\373\322<p\236\216=\224\230\375<\na\263\275\006\273\342;\014d\312\275\346:\177=\270\025\243<\223\3462=$~\t<l\016\017=\232v\312\275\365\341\030=\200\220\234\275z}\233=\225\271\016\276\273\211]=M!\034=\031\323\214<M\211\'\275\n\214\021\273\021\202\251\274\240\204\234=\210\030R\274\221\005\326\275$u\000\275O\324_=+B\001\274z7\233<\322)\010\276\321\202@=\010\372\265\275\244\231\016\276eW\222:\251\340\232\275\203)\205<f\337\276=Y=\037\275\341\304M\275\036ak=\002B\037>\312c\301\275.N\265\275\n\211\t<\343\273\337\274\356x\217\275G \254\273f\205\206=\360\325\230=\377m\213\275\265)\220\274\350\330\257<%\331\275\275vY9\275\261\370\251\273\371\364\233\275\020\211\241<]\205\266=\325\004~=\324\243c\275ju\332\273\262?\242<l\335\230<\032\367d\275\265\274L=\365l2\276\322\361n=\232`\365<\027U\210=\255\300\033\276\335,\251\274|\244\353<\000\232\361=\2656\001\275\266\305\324\2744\2610=\254\236\240=\355O\032\274\246g\225\274\374\013\204\275\221\361\017\275\330/\233\275js\341\273.\264\003\275\326L\210\275~_\262\275\366\267\347\275\3158\271\275\230\320\257=\262\243\357<\347\354\001\275l\315-=\370\275\206=);\212=U\313r=*;\367<\271\002 =*\005\016\275U\202\206=\n\254?=\236F\257\273T\347\252\275\255m\214\275T\370\242=\227\001\227\273\t\tp\275\013\026\253=\'CU=\037!\270=9\212\353;`\330\270=\013\310\276=\210\326\r<J}C;\007\r\021\275\321\253\353=3b\002\275gvf=\204\002s=%\337\222=\354%\024\275\374\237*=)\326D=\337\033W;\224\212\026\274\311\016i\275n\037==\266\030C\275\363h9\2730\215R\274\340\323\250<\244(\243<\363a>=\231\351\007<\243\006\344<B\317\034\275\322k\235=\364\014J=\272\225F\275\224\317G\275MO5\276\326U`=\370\305\214\275\225\204\220\275\251\253\234\274\304\3679=\257*Q=\004\274\271<\343\245g<p\3555\275\354\320\322<4vz\2757)\364<S\333\357<of:<\301^\310<V\366\022\274\207\342\177\275m\377P\275C\322\322\273\340\273\223\275\356\273e=\3753\242\274=%x\275$\252W\273oF\203<RZ\036={|f\275@\260\007:\373q\256=\265@`\273\362J\246=\247\315\221\274\301\353*\275\336\033\207\275\003F\n=\006+\246\275\274\025\374\273\036<3\274SCc=\351Bj\275#\235P;\346\361\027;_\340\211\275\311 \345\274\344\352\030=\361\0349=\344%\211\272\r/\346\275\267m\214=y\235\371=\345\235\311\274\\\354\320\274j\005\271=q\256\220\275B:\277\275c\263\252\273\303\271\255\274e\370\374\273\\\3224=\031.B\2744\0347\275V\346\211\275\343H\356=,\n\"=\2237\000\275\220\226R\274I\032\004=\241\207\347\274\331\261\260\274!\360\205=#\250\372\275\246K\332\274\214\343\223\275\373\334\000\275\236\255\201>\312\252q\275\372\034\300\271\212\243\222=$\002\376\273\252\273\001\275U\352T=\'\227\336\274\350\353\220\275\366m\006=M\205\221;\346!\237=\370\322\020\275\257\214\003>\026h\365=\033\253\267\274\335a\343\275\256\310\260\275\316\203\014\275\273%\343<\300\213\260=\261\317_\273\222\377\206=@\204\244\275\264\000\212<\002\001\006\275h\276\301;w\250Q\274a\363\025\275\323iq=\356\"\000\276M\260\016=\375\311\207\275\006\227J;\325\352\237=\233<\233\275h\242^\274\233\236\200=\357\005[=u5:= \251\005>K\265\023\274T2\241\274f9\001\2764|\235\274\204\362-=\245\002I\275\007\037\036=oB%;\213M=<%\267\203=I\350\213\275\365\202\307\275\032k\010<\2450]=O[\266\274\345\254\275<#A=<`\007d<Q\013\306<p\232\362<\273\233\321<\032W\330\272\225\330\330\275x\252\357\275\302n\356<d=\006\276BG\202\275Fs=\274\251G\253<\246M\316<\242\235==\271\223\271\274\257)\342\274\274@\211<\245]@\276*\n\266=\217%\375=\225\036k>rr\207\274\371\242\311=\322\025D=^\375D\2740|\204\275+\350\204\275i\020\243\275\305:\367<|\342\n<c\343\026<\375s\266;\325\010w=\360t:\276\252\257\035\275hY\263\275\327\254d<\247\372\010>\005\345\202<\321\347\\<d\241\220\274%\352\373\274\327\254\304\275\202\324\032\275\333k\350<x\325\221<@M\002>\030\261\262\275l\006\360=y\227\253\275Np7\275e\200\360\275\313\3641=\362\006\372;\215\232\"\274\264\230\267<\310\363#\2746\254#\275\241\320\204\274b\3101\274)\265\335<\305J\204=S\310Y\275z\324w\275\363\304\317\274\377\364\255<\215\276\003\274P^\222=DL\020\276\214!\354=\037\207\022\275\271\265\237=V\211\234=\245\220\t\275\362\0131=\361\214}\272bP\331\274\231\rP<\347\276\016=ZE\333\274\257\254e\275\261n%=\270\\S\272\3012\226<Co\322<\302\367\215=\375\035\333<\335\3170\275\322\361\001=]\312\222\275\202!\313\274\230B\200\275.TL=\202p\000\275]\025\207\275\006`\344=\003\223\362\275\027j-\273\200\356\305\275,p\377\274\323\247\003>\013\347r\275\037+N\275\t\246p=\006\312I\275\205\020\r=\3515\025=\225*j\273\362C\354\274\253~\210\273\240\233H\275\263\313\'\275\356\312f:}z\014=\323Rk\275z\226z\275BN7=6[\347\275\231I\005\275$\010\300=\312\3521=\035\013\317\274\223\330\035;\332\233L<\010\351t=\3135F\274\377q\253=\257\262\023\275`\276\212\274\340\242\343<\252\351\310\275\241\263;\275O\351\310\274\323v,\274\370\331\220=\000wP=d<\303\273]\206(\275~\314U\274v\202\254\274,\324\373\274\312\315\263=\315;\t=q\333\316<\314]D=\211\007\027>\277\317H=I\256m\274\20110=U\316\374<\367\254h=\204\2349\275\334J\245;\2039W\275/\300I=\333A><q\372\026\275\301\">\275\316\037]<\t\340\037\275\0203\035\276\322)\312=\206\2151=\007\312\205\275\001\337\225;)%g=\304{\212\275GJ\262=\363\224\264=\373\240.\274\261,K=E_\010=\301\"\250\275.\320\242=-\245I\275\n\303\343<\204+U\275\016v\002\274\026-\356=[\235_\275\355\235\262\274\002\\\376\274\007\354\234=\204v\245\275\021X\242=\267@6<;;<=\226\017\306;\270\377\237\275\356GY;\254\032_\273\361eR=\376-9=\037[\276\275\341nr\275\302-^=evR\275DI\253<j\200\030=\341I\240<\374\036\216=\361\016\244\275\311l!\275\203K\023\276=yb\275\301}e=_\322\355\274_\277F<\0322K<-\305\253\274^\305\252<\322\271j\275\025\223b<\006+\270\275\007 \004\274\232\025&=_j\377=\234B\321<\353\3752\274\270\234\004\275f:\230\274\227\2738\275\303\326\346\275\254\246>\275\365#\036=q\377\314=I9\221\275\214\255G=\356m#>5\333/=\275\034\275\274\305\325)=\213k.=\244\347\376=\337\312\266=\334\215\216;xx\271<\'z\247=3\213\241=/\251\254<\372\n\350\272\326a\022\276^i\'\275\261\370t\274\322^f\274y\224\212;&\034\325<\312\rm=f_\200<\324\231\017<\273\023\314\274\352\003\310=!\221\307;\216\257\017\275\371\250n\275[\337\016\275M\022\235=~\002\004=\304(\275;\267\215\204\275\325\002J<\375\213\200<\032F\350\274j\023<\275\"}\233<\213[\256\275V`e=\t\260}\272\231\363s=\3635\316<\232@\031=\276\330\217\275\036YE\275\274@\266\275}\250\027=\"\227\206=\241\326\257=l6\250<\376q~=\325\341\000\275\2149\260=p\353\023>\2371<\273;\317\245=\036\230y<3\211g\275<?\215\275`\027}=H~\201\275\262g\261<\t\206\307\272\345\3419>\373\236\222=I\355\332=&(T\275\230\320\005=\305\275\320=\203\306\210=%<$\276\354il=\017\351\215\275n\360a=\327&\010\276V>\231=\215\377\025\275\337\377t=\020\240c\273o\005\227<\r\306e=\240\2205\274\363\207g=h|B\274\266\314X\275\263\341\255\275\343\225$=e\233\233=\305C\226\275%\262\350\273\340/\246\275\nv\377\274\316\007]\274_L\275\274\035\330\255=\224Z\236\274E\r\235\273\357\027\265=\032\330\250\275!z\'\274\210V~\275\225\013\254=\216\376\034\275Z\314\336\274\273H\223\275\037&\200=\033\335`=\005@;\275\"\206\230\274\270\256\311\274K7\372\274\305\215\376\274\014\036\201\275%v\031\275\226\024\010=\220^8=\222E\032\275\335\240\367\275G\333\020;\241V\326\274\037\004\337\274\327\227\037>\347?_\274D\267\305;\\\223\357=\355\034\307=\210X\013\275=H\315\274\354\376*\275\263\307\361<\231\032\211\275[\220;\275\326\025n\275\n\351L\276@ac<\251;A;\220\254:\275s\243\207\275\220\333\335\275\303\377k=\373\005F\275\302\243v\273\3438\274\275\010\035\256\273b`\205<T\377\022=\0059/\275\303\231\365\274\367\313\374=\243&\206\275\337\366\373\274fv\317=l\376\250<\251\245N=.W\247\274\267\222o=\307n\r=\0059\255\275d3\266\274\236\345\236<\244\020N\275\022\276\373\271-Z\264\274\325\255v\275\355\212s=\364\031Z\275\303\273\321\275|\ru=\023v\n\275p\323/\275ft\207=\265]\311;\216<y\274\205(\317\273\177Q\220\274\342\255\203=1Oa\275\367\342K;\237I\234<\214`\352\275o\264\032\275\006\202[\275w\033\315\274\031\302\272\274\252Tk<V\025\236\275\365Y5>\243q\240<\020\035\217;\024\353\314\274\206\247\213<\374\363\252=\205pX=\344\351\270=eC\014>l\263)=7\273\312<FI\021\275G\341\253\274\261\321!=X\347\032=y6&\276F\002\220;E\233 <\240\346\014\275\251\347c\275\335\212I=D)t=\036\266\013=8\364\262=\210\027$<\254j\243=\023\343/=\024\346\226\272\262E\022=\0002l=T\274\355\273\t\252\356<5/q=\236\335\021\274\327\246v=\263\276\335<\341p\273<\305U\333=\363\203L<\254V\204=\317\366\021\2755\371,>\313\340\250\271\374\272j=R:\017=\321\"\346=2\317\000\276\037\367\307=\035\034X\275HpA\275\306UF=\"o\230=\262\024\026\275\213\233\256\274{\021\232=\207sc<\325\223\';\356\347(<\023\203z\274\326\372\327:\247U\266\273\221\200\026\276b@\300\274\352\210\243;0\272Q=\033\2674\275\314#\254=I\222i=f\374\020\2757L\230=TI\256;/\003\366<9\265\322<\335\202\013\276\334$\204\275;\304>\274\237\273\372\272\037\340\377<\223B\315=\351\035Z\275\337\267T=\210\262\201\275\010\333\356\275\007u\272=\334V\002\274\335 \357=\207!a\274\256)p=\023\320A<\242\371\342<\212tf=47\230=\362\334\207;K\210\n\2761\255o=\004J\226=\321/\017\2742\260\225=.\336K\275\277\237!\276\322z\224<&\000|\275V\364\010=$\300\266\275\010\354\026=\030\343\215\275-\362^\275\005\376\336\273g\372Q\275\337\334!=V\003\316<<5p\274\024\266\307\275\374\177\351\274M\313\242\273\200\240\226\274si\332=X\3400=+\023\214\273\361\036\335<m\334\031;\227\247U\275L\372\243\275Tg\201\275\3031\255<\306\n*\275\2030\251\275\2135B\274Qq\261\275\303\206%=|\010\215=$\032\013\275\022\370\375\274,\035Q\275\312\036\250;\262\013G\275\210{\215\275H&\026\275\371\266\330\273\t\303\324\273\013(\366\275B\335\361<\235\030\357\274iea\275\014\'\214\275&\270\203=\260s4\275\214~\201\2746\273{=\276~8>\366\266\364<#\364\333\275\035g\013<\023\010\205=\2545\026\275<\324\337\273\247\322_<YEu=\007B\201\274d\300\352\275\332\331\340<+J#=/\262q:\243\302\366\275\310\203\273\275\210\367T\274{\r\301;A\000\227\275\244\343p\275ZkE=\2646\202;\335\376\226=[\231`\274\220N\203\275\300\236\n\275%j\271<{@\260;\366n\217=\260Ae<\324\327\353<\370\365\013=\273p7\275\023c\337;\202>\315\274#\242\220:\267\211\230\275\330\013\241:\252\022\231\275q\272\035=\324^r\275\333\334\262:\017b+\274\312\225\024>JK\323=!\233|\275\352\356\022>\257g\264;B\225-<FQ\273<;\027\232\274\r9!=j!\206=\212\"_\2753W+<&\330\206=[\301K=\022\210:\2755$e\275\n\364\217\275\237\225\020\275f\306\301=\245\332\307<\206\260n\275\320\374i<k\246\r\275\261J8=C^\203\274\321D4\275y\240D\275\257_\312\275\213\017\202=\007\273\204=\250_V\275\007\017S\274*\215\371\274\330\225`\275\001\343\002=kv.=\323\367\270;)\310`\275\035@\201<\243$j=\256\2372=\366)\204=up\263\274\241\224\002\274\023\276$\276\204\341G<\226-\203=\361\337\r\2743x&=\203\215\353<5\233)\274\024\373\315\275\227|\276=B)%\275\323\302?\275>\304\225<p\nY\275\357\263\201=\334\224\272\275,+Y\274\227\365\341\275Ey0\275\t\232\233;1I\265=O\006E=j-\314<\2458o=\375I\364\274Fp\007=\014\245G=\246\301?\275\202\004\323\275u\302\212\274\236\254I\2755\352\331\274\336E\325=\301:\207=!\352\321\274\352\231j\275F}h<q9\336\274\362\273\264\274\325\230\304\275\255\322)<\367\331Z=\220#X\275\201\301\263\275$+\024=-Xx=\331\220\324=8\326\366=\023!\353<\326\330\225<\260\004]<\365\332%<K\007\250=>x\223\275\213\326\222=\002\342\000\276oa\010\276\006\2436\273\261\003Z\275\241\001\360<\303\227\372\275Ny\033\276j\200\250\273t&P\275\321\004\205\275O\0355=\177\304\026\275\n\177=\275\353\352s\275~\320X\275,[\236=z\307\253\274i\026\222=\254=\333\273E\201\024=\345\"\300\274\251\016\266<\211\025\326=\337\256V\275\346\205 <z\034I=\025\327\004=\356\211\345\273\222\234\261\274\315\312\243<\232\343\274=\233W\312\275C\312\017\276\250\204\220=\005\210`\275S\216\312<A\262O\274M\3622<\327\026!\275a\177j=x\300\306=\233Sw=An\t\276\032\006\001\276<+\006\276}sg\274T\315Q=\225I\303=i\026\'\275\322\237\335\273\0177\320\275A\355\223<\347k|\274,\264\340;\202\251\312;q\374\324=\316\325\336\273\360\273\216=1Ga\275\020\036r\273q\rr=\331fY:o(\251=\345\007c\275sf\212\275\235\310\200\275\277\263\261\275\243\312\370\274\351\323\026=&J\217\274Q\034\275\273\303\333Y=\342b\226\274\312\337\002=?\325\207=:\036\256<\214\243H=\212f\221=D\035\021\275g\247\257\273\373\003{\275\204\326\235<\254\271\232=\350h\260=]\236\030=\210\272\177=\'E7=\254,\226=\326K\354\274\351\352\005\275\201_\277=\203\261\245=\031X\304\275!b\273<\301\353\251=\255w\371\2747\2519<\032\010P\275\334\006\'\274\354m\261<\267G9\274~n\033\275q!\276\275 \032\345\275W\370\363=\321\322\311\275\346L\022=\334{\312\273RX\367=\024\347\232\275i\007\234\2741G\257\275\001\211\310\275V\305\227=\212\2203=m2\265=\214\232\322=\336\200\337\275M\277\252\274R\355\204<\303\326\314=\254DG\2753w\016\275U\257\262\275\332)3\275\262\315\213=\\[\307=\333\203\245\272\220\2538\275\306\210(\275 \353\254\274\355\235\334\274\273\323i<\007{\"\273\325\345\213<\362I1\275\320\342\264\275\244\330\265=\337\304\204\275DA,\275C\211\315<W\352\346\275\014\225\000\275m=2<C \240=\271\023+=\366s\304\274\305\250\211=k\323\256=\3330\007\275\357\366\021\2752[\275\275\267\340\236\275\362\007\024\275\356\264\216\275J\310?=\377\377%\275L\216X<\323\243=\274\247\222\221=<x:\275\260`\301<\301\td<\311l\356\274\264\t\377\274\323\005M\275\274U\022\276\244\322`\274\034\271\243=\205CR<\0260i\275!\222Z\2753\211\350\273\253\350\200=\332/\256<\022\213e\274U\270\274<\3741\215\274\020\025\303<\336\3666=\314!\327\274\300W\370\274\326\005\t=SE\010\276\317m\232=\224\265\300\273Y;\370\275BX\323\274q\037\356\274\371dN=\314\247\345<3\326\247\275\243\323y=\260\030~\275\017}E=\336zL=\311\241j=\277\323\251=%\036P\275\315Fs\274\353\370:\275\206\355@\276\251M\254=\373F\362;t\027\001>\363\021\326\274cM\330\275\343q\362<eyG\273\034\'\371=\002(\307;\016\247f=p\266\037<\355b\304\274\340\210)\274\007A\004=U!\262=\036!\230= \362\225\273\253\2571\274\r`\214\272\037\341}=^\253j=\236A\336=z\244\362;Ds\002\274\331\035\206=I\274=\275D9K=(P\210\273.W-<VO\312\274\322\365\360<5&\274\273\r\367\361\275\nl\232=\363\343\303=\323\n\274\274\217\304\255\275\016\177\006\276$M\346;\313\352\227\275\316\030\375<\242\340\252;y.\310=\376\020\024=R\\\363=@\202\013\276f\225\016=\272~;\275]%\326\273\225C\271\274\366\366Z=\313l}\275\257\360\227\275dD(\275\005\213U=\006:\225\275dP\232=L\256\244=\026\227\217\274\023C\301\275\203\274B=\307\370\317\275\342P\376\275\216\304\021\275\031\033e\275 \265\224=\231\234~\275\341\204\':\035\264\343=$\177\300=\262\333u=\274J{:\334U\301\2750\026\367<\025\355\026=#P6\274\027\306n=/\362y<t\361,:@\035\310=\266b\210=\254\022\316\275\376\260\244\275\273Dw\275J\202F\275\tA`\274\326WT\274/V\000=/\234o=v*\325\274\337\331\332:Q\352)<x\377;\275L\274\232=G\356\236\275\'\025)\275\301H\256=:v\225=\211\360\204\275\243\334`\275\200\373\241\275\373\337$\2755Q\315\273\225\264\211=\240\361\026=\346t =\000\372\265<B`b\272\227\025\301\274D\031\372\273\242\312\234=\224:\243\275?V\350\274\355\000\361\274T\272\007\276k\236!\275x\235\206=\207]\276;\376!\232\275\351O\224=\236\326J\275@\215\214\275\014\217\352<\r`\271\274\251\327\335\274A\366H\275\346\331(=\227b!;\245}\207=sE\303\272\276?\210\275\213Ia\274\337\020N\274\223m2\275\\.\226<dj\205=\326\016h<\336\315\264=\212\350\215\275\324\007\366<E\037*>\304\332\031=\354|U<\017\013\016\274\314|\023>4\027\214\274\342\334\344<\242b\366\274u\311\326<d\241\207<\213\014\256\275\037\260\230\275\013R\252=B\325\360=\026\\]\275;\030Z;\\\017\317;X\222\005\275O\327\265\275\004x\227=c\0351=\336\021n\275.\035Y\275_\361n\275\n8[<\236\223&\275\314l1\274\375\371\316\275\363\000\245\275\236\363\022\275u\245\005=\027\376\246<]\376\217\274u2\034=\310\033z=e\001\024=\210\334\227\275\266*\031=(&\204\275\247?Z\275<\031/\275\233\351\344<\325\237\022\275DY\017=\242\376q<\316\245\305=\236\206\005<:\343\210\274\031\017\322=\204\355\216\275\312v\t<\356\024\224\274\t\201\266\275\344=\260<6\204\303\275\246\200@\275\352\242\264<\267\251\230;\210\217\210\274\002\036u=\276,\014\276\005\302\244\275\246=\213=}D\360<\332\333\376\274-\352\250:t\347\344\274\026\272L<\003\270\222=8\300\220=\251\n\200\273g^X=,\365\340<\032\345\010\276K$\227\274\305 2=1\374\263=\034\330\005\275\204\306T\275\'j\262<\241v\314\273\200\230\226\274H}\001\275\\\335\025\27427\206<\346\244\010\274\263\207)\275O\033\302\273Y\350}=\246A\206=\262\3117=\326=\031\2752\312\345<K:\305\275\233<y=\266\226\267=.\252\363\273)\344\035=\330\242\203\274\306\212\332\275\325\316\310=\247\243\200\275Y\2746<\n\010\356<s\3435>5\006\332=fE\224\275\020\024\377=\032\016\234<\345\310\300\275\306\255/\275\203_\271\275W,\241=U\371\321\274\365\033 \275~;!\275%~8=\224\355\020>\305\005\022\276ACH=\263J\244\275\327\360\021;^\324#\274B\026\027=\257l\206=\205>\245;\214g<\275\005F\246\274\254(\323<\227\202\231<\273M\365\274\375\332-=\261. <R\310t\275\032*-\275\264\250\247=\243\201\022>\010\246{;W\217\311;,\n\206\273\300\177\226\274a\364\000\276\245\"z=\206\342\367;X\260\301<-DF=M{s<l\341\223\275\362g\205\275\360\314\264<\342e\221<\'I\004<g\026\222\275\205\236\214\275\224\355H=(\177*\275$\017p>w\302\374;\320y\032\276\266\235]=a\376q=\311\320\311=x\354\275=\235l\367;\362\210\354<\033E\213\274\243\271\240<\016\023\021=\231\'\227\273\003v\024\275z;_=\302\246\000=\366\366D=K\255\"\276a\330Z\274tr\226\275\377\004\002\275\324\365\260\275\030\233t\275k\216\345<\362\232\025=\367kP\275\255\362\200=9xF=\343\273\000\272lH\305\275\235\234\354\274\324\353\211=z\010\357=nj\220\275_\265\350<\312\351\232=\020\312\237\274\274|2<X\345\004=\275{C<\354\242\204<}\360\324=\256\365\241\275MX\237=\303@\213=t\215+<\2219\021\275A\036\215=\314\3045=\006\017#\275\241\036\022\275\343;\242=\226I\235=\rF\211\275\\\242\331\2739\356\353=fs]=\3531[=;\262\334\275\237O\020\275\355\364F\274\227\241;=\020\014\222=\202\377\272<\014\235\306\275\224\247\3439\324}\016\275\327\326\014=4&\010=J\310\304:k\247\301<\300N{=\276\021\336\275we\203\273\225\340\006\275\215\344x=\306NG\275\316\345I=\220\016\270\275\255+-\275T!m\274\220\363\320\275`T\216\275{\277G\273\027%\250\275s\261\215\2755\211d\275\303\204\375\274\324\247\217\275qE\007\275\310j\002\274\332\014\203\275\2079Q=\353kx\273\364\273\266\273\024\347\324<qn\352:\003\240\376\275\356%l\273\031\213\254;\334\314\235\274\2127L\275\226IO<\"\247\016\275\206\312\233\274(\271,\275\241\310\315\275\315\'\032=\225(o=0\360A\274H\177\273\275\373\243\315\271\310\200\205\275?M\017=\351\325\211=\237\215\267<\0078\353=\226\\U=\271\231n=\346\211\350<\022\376\207=\256+U\275\005\277\324\274\336^\233;\320J\246\274\270b\224\275m\2424=\336\224\255\275\300\311\226\275A\t\030\276\010e\373\274\345\306\010<\351\253#\275\347\365\277;N\260\217\272\261\314\203\275;\010\255\275\\\360J=u.]\275x)\327\275\203\206\335\273Dy\026\275\030\273\232\275\202\034\315\274\3553&\275w4c\275\003\317H=\264\320#=\372f\206\275I$f=4\300\264=5\032\367;\276\333\002=K\334_\274\330@$>\313\370S\275\235/\377<\260\242h\275\253\345\305=\352!@\272!W\361\274?\307\323<\233q\303\274\255\331\216=>\025L=\312|\221\274w\313\262=16\221\275\3532W<\324\360\337\2749\326\314\275l\242\323=J\336\000\276}{\266=\377\020\237=\177\217\205=\352t\344\274\331*/=lo6\274\261\223\341\274\203\262\337\274\007u\023=$\270\350\274\350$\326\274f\246\345\275Td\241=\251\233i\275 f\317=\377\201=\275\211\356\037\275\240F\232<\273\016\022=R\374\221=YV\356=\212\230\233=\335:m=\325\247\013;\226x\216=\256\007\306\274\220FV=\207!\"=x\353\005=\014\231\210=--\017>\360y\273\275\242\347S\274%\340\276\275\201\'\242<\377y\003\275\272Q`=a\342n\275h\256\324\275\370\017\037=\220\010\037>\317\201\325\275\024\327\304<S\275\247\274\300(I\275\337%\253=!l\216\273\203(A=\246)\310=7\267\244\275%\016\363=\245\333\236=%\177\361<{\352\212\274=k\303\273\rg\246\275.\343\307<s\270\\=\205\2500\273\010B\234\275\373\373\336;]rP=h\347\034\275\036\344\310\273V\220Q\273\317\3204=\254bK\274qoN=\261\031I\275\300m\320=5\216\272\275\377\3502>\300\212\000\275\034\310A\275c4\216<\360\025<\275X&m=\313\313g=\254\377\226=\235\360S\273\264\177\377\275\365\007\306\275\013\177\246;Hy\t\275s\013\344\275\335M\336\275;\303\232=\271\201\t\275\245Yp=\363\376\236<:\226\356\273\231\023\244\274\242)R\274rd\257\274\377v(=\207\013\036>\025\014\360\274\214G?=oZ\275<&\223\\\275a\213\265\275_\327S\275\3636\316\275\275}\332<\235T\371\273\320&\250<\r\024\253\275\"\230\032\274\000\255\177\275\240\263\214=\237\013\'=\367\\\256=\032]\'\275\316\3169=\206\247\263\274t\366\303\275\375\221\265\274\342\000\004\275\200\230\242<>\223\375\272\270\276\357\275\263H\003\276\366d4<\203\026b<\023\036v=y_\311\274\336<:=\347\034x\275\257Q\003=\351O\341<\367<\336=\301KU\275\214\243b\275\n\027\304<\360\311!=te\006\275\375\213\353=\006d\301\275\315\"a=Tr\254\274\272\000>=\306\034@=fF\001\275\002\271s=\002\010\211\274=g\030=\250\256\226<8Tt=\"\242\263=g)\210<\010X\246=\324\250o=\220\036\211=\204\030\226\274\340\365\010\275\356<==\223\025\037=\226e\261\275$\204\343=t\201\315==\205X\275K\373i=\350w\007\275\366\324\227=TV\205\275\226\253\024\274\021\021\337\275R\254\377\275\335\265;\274\351\202.=\327Y\240\275\204.\036<\346\231\203=\304\226\276=\200\017\363\274\202\216\255=\033\336\277\275\353\017e\275\031N;\275\327\274\037<\265\330\177<3\372\006=\344\007\215\273\231\366\212\275cs\005\274X\003\202\274\207\021\301<\203\274\006>\261\327\223=GX\220\274G\355>=\256\014\241\275\345\274A\275B%\340=@\n\272\275l\313\025=a\033\002\275g\252f>M\340\334<s\344w=Y%_=9\022\032\275\274\327t=\231+\014<\271\'\203\275\025+\311=J^\330<!o\241\275eeM=\264\274+=\031\213\343\274@\241\321=\336\370!\275\232\r\252\275\316\257G\274k\373\310\274&\240\217=\r\327i=\321\211\305\274)\232d\274^R\246\275\257\377(\275\020\207p\275\222j5\275zI\206=L\316\r\274Z\270\374<\252@R\275B\031\244=%\365c\275\217\306\264\275\001\222&\275\034h\346<\322tt\275\220\215T\275\371\020N>}\301\023\275\3417|=\222\236\322<\216@\277\275\215O\301\274\361)_\272\344\"\003\276\026\377\370\274[\354\211=\222\004e<`\251\273<\275\354\020={O\r;\003s\375\274_\315k\275\202\005P=X\204\261\275j\354\251\274\0023\333\275ho\262<\313IF\275\345\205)=\031\n\033\275\326\330s=\027\t\214\275-\267\211\275/\273\021<\025\354i;{\344C\275*\265\017\276B#\351=\034j\010>~\274\313=\362\020R=\021\260\227=\263\322?\274\232\200\036<F\267\313=A\300\375=|8%=\274\024S\274\233r\253=\017\352\257\274\230\363\266\275\212$\265\275\300\355\216=&\317\352<\376\373C=N\005\220<*d\244\275\177\202E<L\026\030=\336\242\243\274\352\356m=\301\363\004<\252b\334=\242*m\275\252\003_=\202\3607:\177\037Y=@\034\366\273\246.\342\274JrP\275`:\353<\331Z\227<\031\275r\274L)\027=\006q\314\275\014x%\275\022}g=\025\262\037=\204O\241\275\236\270== ~\237\275\357\356\232;\010$\227\275@7\025=nu)<\322\030\265\274\3730&=\271\223\023>\247\332f=-Hf\2753%c\275\245\3606=\324~\031\274\223\263\021\274R\370\257\274\2460\213\275\014L\371<4\2065\275?\366\023\275\233D\345\274o\024\231\275?\243(=]\037\222\275@\342%\275u\004v=L\203\206\274\362w;=\026#A\275\212\020u;\372\'\277\275\033k\313\2743B\262=P\326\311\274\226\364\314\273ASa<\242px\275\2704\270\274W\221\312\275o\031N=h\257\216=\206S\223=N\377\263\274\006\'\256=\210\306\271=\371 \201\275\251\343b=\262i\026=\352\332Q<\027+K=\300\376\227=wk\313\275\331Z\270\274\301b\275\274\316\013^\275\037L\324\275*\347x=\236\272\350<J]\311\275\203\2721\274u\336q\272\321!\331=\014e\200=\337n\210\274w\017P\276\350\243\376\272@\335e:!\275\373\273\324~\230\274\343\376\335=o)\014\275(W\306\275\245\300K=\231Qw\274\273fT\275\017\326\r\274*\346\277<\037#\233\2752\n\306=\317\2127\274C\241N=\231\333C=+\"\315;\223b\n=\225z\002<\235\236\212\275\347\246\213\275\214\215F=\022\005\344\272\036\260\262\275{5,=\346#\223<O\223\213;\330\322B=;\010|\275|\227\304\275\317WL\2748\023*\275\201\361\226\274z<\334\275\277\030\263\275q`\263\273\232\025\254<\210J\303=\025Y\004\275\032t\201\275\312K\307=G\0366=\304\312+\274if\252=\232\026G<\270\214\274=\233\300\205\274\n\r\323\275\364\\\257<\243{\334<s\266\242=R\211\'>\273$A\275d\250\220=\235\3433;\333\252(\275\2363<\275\242\016\241<?\217\272<;?\216=M\331E\275\272\026b\275*\317\006=\316v\336<\302\325\340\273n\342\\\273\3273\250\273\227\3638;BW\303<yK\200=\030\356\325\275\361\3250=(\251\030=\353\277\344</\234\243=\315\315\026\275\302\354\314<\375$n\275\310XI\275\264\272\013\275#\336M\275j\3350<\036\027>\273Qi\r=Y\033\315;\323\257\221\274\352\353H\276\310v\252<8\200\224\275\320{%=\375\227f\275\356cJ\275NR\241;\2119\352=/B\340\274\212\300\002\275\'Ft=4\203\013=\021\242\255\273@\306\315=#\217\205=\'j\006\275g\002w\274\236\"\364<\303C\301\275l\231\356;\323f\260\275\374\325\277\274\001\"}<r\264n\2756\010:\275\353h\005\274\013\250;\271s\342\202=A1\256=\272\321\260\275\270$\366\275\330l\214\275\336(\006\276\257Yj\275\317(.\274\214\247\237= \361\023<\327{\r;\033\325\010>\204\326\007<Uf7\274Ke\303<\336K\034>Mw^\274\031\2156\275\224B\223<Q\013Z\275\256\301}=R[\014=\273\027\275\275\265\022\030\275\237\360\364=\230o\215=O\002\226\275g\247\271<\221\021)<\205oH;\204\327\226=\203\320\002\274\240\'\216=\312|\337\275\265\362\036\275uk\272\274#\035\211=\265\352]\275i\240\266=\356o\343<\\-\234\275\375{\223=\013\223\357<\343\254d=\304H\0229\215nl\275\017\365@\276\305\361\352;\216\321y=s\022T\274b\301\216<\322\022\241\275\r$\200\275g\260\247<r\343\224:\213\371\003>T#L\275\t\0025\275$~b;\020u\374\274\365\262\252\275\355\306\222<\331\306Z\274\375\372J\274\021\0213=&AY=\243\212\177;\217\010M\275+2{\275\r\367\034\276\333\342u\275]\3263\275Q\206F\275$~\306=\263\241\251=\256\001\256=\304\337\263<T\335\203\275\310\303\342\275\327\261\223\274\210\337y=w\360\005<])\260\274\352W\247\275\367Su\275\331\301\375\274~@\214=\235\325S=\261K\036=\260\246\022>\264\331\236\275\336\\\307=\237:\221=\035)\002<\376F:\273IA\204;\242\331\\\275\271\346r=\023(\032\275L\337O\275#\237\365<c\016\210\275T\342}<\006\215\242\275\311\315\002>\232x\325<\362:\001=\344\217>;\024G\361\274\237zN;d\256\271\274\260\241\231=@\337x<\215\362]\274\367\363:\275\2019\375<B\313\n\276&\352n\275\t\340\353<V\210\325<\\\302\337\274\335\373\216=\225m\220\275\352\010u=Q\343\245\275\000\310[=\204\346\231<\262\267\226<\037i\300=+\'\213\274\303\021\222=\354\233\202<l\254\375<\366~\230<\326\301,\275\200T\362\275\031\356$<b\034T=tC\207\275\n\310\307\275\n\302\243=\243_\370=&\247\261=\344\000@\275^3\034\275<\355f;5\311\316=\022J2=$\002\020\274\'\340i\275zE\243\275\360\260\355=\262\207\213=\243\226\336\273\356z\331\273H\317\310\274\350\254\355<\207\017t=\177\315\026\276\373\266q\274*]\t\276\307\363\'\275\220\030\265=\252\271\366=\n\227\335<\323g\276=\001o\207\2753\346h=stU\273\307\2508\275\2228\324\275\242KQ\275\005m\370;\206\"\240<\021)/=\177\025\215<:j\177<\260F\033=\324)\032=\356\373r\275\315\322f\274<\330\026\275\272t\000=\033h\242\274\341H\n\273\260\327\036=>x\020\274\355:\354<\013\250\240<,\017\311\274\372n\252=\217\351\351=\312\033\202<\213\037\332=\\\266\223\271y\226\201=\371T\231\275\220{\004;\354\226\343\274!\236u\275\352\230\006\275|\3042\274\006>\216\275\326\245\212=#0{=Kg\007=\265\263\306=\034\345\220\274\226e\261;\323\022==\306/1=\317=\342;\021\231I\275\376~+\275OP\220\275b\227\375\274\304\322\'=O4l=D\377-\275\232\3567\275\357p\001\274\302\014\210\275\314\177\317\272\206\205\305\275\005,Y\2746\221\026\276\302\252.\275Ukv\275\264\260\220=\210|@\275\236\006\032\276r\362T=\032\235\273\274\025B?\275[\317\207\275\337\306\216=\t\'\223<m\337\014=\230\356\233\274\345\n\"\275\217\260\306=\023]\r=\010\023\017\275\260,L=\014\201\233=\2551\033< \240\315<\002`7\275>\263\202=&6\366\274\270\202\237=\355JA<X\317\213=\230\244g\273\225\224L>\254\320\207\275\362\204S\275]\234\"<\201\334\027\275\036\223\250\275\277\316\227=\013\020\234\274/]\006=\346V\306=t7{<\220\257\n\275\353P\226=\246x\233\274\224\345\277\275L\307\306<\014p2\275{\336\227\275\312p[\275\031\213\261\275\371\370v\275\355-\033=\237\234\231=9\017\346\275v@\267=$\327\221\275\'\376\223<u\020a<\306\327\010\275\004\001\276\275\035G_=\373(\202:\024\325\233\275\314z\233\275\370q\301<>(\226\275\220\241z\275\024x\356;\213,\314=\"\010\216\275\037\301\243=\216\003\334\274sb\201\275\257\020K=\225$\013\275\242\003\252<\245=\254\273\266q|\273\307]U=g$\224\275,\217\220\275\211\357\r<\241|\356\273V\360\2469hu\260=\354\303\032=\337\333p=\350{\360=\232u\010\274\0225\267=\030\361\274\275\240\351\337\274\272\325%\274;\3016\275TT\306\275\002\216\233<\347[\242;\020\301\214=\204)\354=$+U\275\212\270=\276,%2=\343\271R=\201\210!\276\037\210\221\275E\r\033<\356\323\002\274\246C+=0\300\005\275\031 \327<\003\017\000\276aU\r\275\'P\324=\r\257N\275\032\342\013\275\020\226z=sO\355;/\335B\2746\354\207=\n\330\266\275yK\352\275~s\324\2744\224\232=\rs\030=\362\237==R\014\205\275\216\311\307\274\322\006\323\273\225\021\006\275\031tA=W\211\025\276\317\003,\27509\256;\307\361V\274\024\224\206;\372\372\311<\300$\227\275\374\245j\275\276\300\201<\217)=\275\020\233l=\237\240T\274\320Db\275I\371\225\2757\216l\274%\240\261\273\005yN\274\303X\272\275\365\250\303\275\032\241\352<\364\261\257=x\006\207\275\037\354\005>y\'\334;\000\322\303<\004\301%=\3044\016\275\344L\323:ov\203;(\345\217=\363\276\271<M\276\007=\357\321\037<a\232\225\275p<\266=2P6\275h \204\275\212\251e<\243\035\234<;p\346=\300\374\025>\033@\t>\352\2324=\202C\236\274\222\205\247\274k\010\036=\311\001\313=B\033\016\273\351\212}=I2\337;\253\nZ\275\250\235;\275\037@/\275\310\371\260\275\241\321\013\273\245\222\211=z\334\231=sq\334\274\352`s=4\343\025\274\335\'x:\370d\300=o\304)=\264]\234\275\256LP\274,\323\020=\336m\343\275\336\331T\275*\257\200<\335\253\323\274\2066\\\273\202S;\275/\207,=R\325\232\274\t\212(\275n\205\342;\337P\n\275L\232d<j\277\205=\222\356\027=\261\354#<u_a=\354o`\275\324\371\276<n\221\261;\344\003\223<#\t\325\275a\364\245\274\312\004\332\274\035\334\231=\001\315%\274\332\016\223=y\014\253\275j\221\271<\277$\222\274\250\215\265\275\272\315=\274\220\230\267\275\246\2034<\243\267\035\275\347\340O\2751\240I\275\332n\212=t\256\322\274AO\201\275\257\251.=/\204?\274\213\377\247=\362[N=\206\275\261=+hM\274\237\304\241\274\361w\335<\366\270n=\372\332y\273\027\331o\275\323.\234<1&\234=v\007\035\273\301\353|\274\005\004b=n2\235=\264{L\275GX\253<\032D\343=\262q\r=Wr\246\275\246i!\275\261\005B=\215\312\310\275\325\023\035\275\255H\251<\341\301\245=\353\361\036\276\035\307\026>\037\036\315\272\341.x\275\026\362\022=\314\r\217\275\013\312\350\274\031\334\n\275\247p\032=\335\335+\276T=\325=\351&3=\0025\256\274\216VX\275Pv<\275\024\207^=\013\020\226<}\220I:(\331+=\346\372\">Ru\313=M\000\207;\325\333\027=(9\237=\'\337\013\275{7\310<;T\023=0\t\355<\357e\036;u\006\020\275\027\021\206=J\004\316<\236\342\'\275\366\016\310\274\322\3352\275) \263\275\0324\210\274\373\251\025\276\257\316M\275\264|\365<l\243\036;\000\211\010\276\177\371\266\275Q6s\274Z|\373<\013#\302=\337\002%\276\360\211 \275{C\034=\223d0<\n*\335\275&\233_<\276qb\274`oy<\177<\254=\267\257\363<E\0360=X\274\221\275l\243\032=\365\211\274\274\336\037\000\275\226*n\274F^\026=\250t\\=\315\365\217\275\236L\026=hi\216\275\251IT=\263\365\307\274\021\344^= I\337\274\217\335+=\356\007\274<\351\246$<e\'\371\271\201@W<\335\r\035=\003\201\301=\001K =\223we=\324-\306=\276t]\275\210rl=\300\320]<9\n\352\275\274\247\312\275\007\375%=-t\327<N\200\200=\204\234\232=\014yR=\307\033\267\274CN\240\274\204\316\016=\365\253\267=&\200\226\275\270@\002\276\267\216\324\274\364\027\006\275#\327\n\276\203\213\212\275P\231m\275X\222\356<\245\035\027\276\256B\273<\020\255<\274\245g\250=\354\322\250<:}\177\275\376\023\200\275z\345\027>og\203\275\306\230\253<\207\355\005:]3\230\274\323\220\255;V\332\340=\334\351\013\276s\205W<^>\340\274\256\217`==\207\"\275\316^\220=A\007\227<\201Y\037\275}k\020=g\237`\275\370\216q\274tne=t\214\246\275\r\305\344\273\343\266\301\2747\365\272=eR7\275\203\0145\275\216QX<\306\024\205\275\367\343&=q\231\001=7\326\220\275\302\177\210=~\200\">\272G\314<\316Rz\274\311](\275\252?O\275\304u\307\274Y\202\312\275\305>l\275v*\003\276\201\244\254=\016\226\036=T\244\301<\363\337\254=U\272O\276k\307C;\004i\207\274p\363\014\275\'\234\221\275\300z\204=\247t\033\275\017\014\201=:\037\022\275q\334G\275!\330\017\275\277\200z=\242Pi\275E\201\010=!\021\237\275[\234\215=\020\312,\275;;\327=\265tW\275)\302\210=\346\371\262\274L\007\207\275(\270\322=\204K\031\275\324P\205\275\230\005\374\273.\247\013\275\316\362\231<U11\275{\205\250<AR\t=\276\000P\275\n\"h=\362R\247=\030oM\275\222\366\017\276R\253\372\274 \211\265\275{\232\251\275\255\036\251\274o\251\227\275\235b\n\276\352\304S\274\253\300\014=\210\205\314=\361\320/\274\270\326\240;\320GH\274\036\276\233\274~\t\211<\222\246w=\310\0054\275\374\362N\275\032\014\263\275}\240i=2{t=\177\331\331<\371Q\211\275a\354\275<\373\221\242<\001\231\235\274@\210\230:|\242.<\314\302\027=\353\352\314\274P^O\275\317\364\216\274\004\000\233={+\212\275\240\332\264=\250\3629\275\227\250\026>k\263\020>\361\004\\\274$\270Q=\3748\231=\262\312k=a\000)<4\250\365=\232\303\000>\335\376\301=\'\216\204<\r\213\257\274\232Y\246\2741\360\001=\245\253\236=Q\201l=9>\223=Q{\374<\030\276\220=)\037\365\274\354\331\332\274?\236\301\274\307{\010=\352\321$=8\213Y>\375\241U\2757v\035=\313}\021=\342\313>\275\267S\247=\233|\000\275\331C\345\274\230\273\025=\207\222\337=iD~\275\341\2663\275f\200\022\274\2118z=\333\241k\275\033\035\227<\031?\t=f6f=\020\203\340=w\333\220\273\225\360\037>gn\232=We2\275\304Sn\275!\343R=\345\211z\273\001bo=\355F\372:\261\276Q=p\377\354\274\365\251\020\276l\202\372=M\032\331\274\242\006\256=\360\017\227=\367\314\332\274\\\234t\275\215\337\030\275\270\312\226\275\245\207\263=\211\211\213<`TS\275;\253m=\177\237\230=\227\242\241=A\001\300\274\'\207h=\264\324\321\274\246\342\347<7\037\261\273\354\375\236=\372.b\275\231*\032\273\363y\334=\374o\253=\037$G\275\237\3263<?\355\350\275\217\317\257\274\347$&\275%\320\310<\356\354i<\333-\347<E\237v;]#\240<\205>1<\241~t\275\251\322\001\2756\312\022\275\000\207{=\034\240\213\274\226\377\211;\325\000\262;u\035\360\275\222\336\n\276|\274\223=F\002-=\214\272Z\273\261\363\253=\210\236\025=\345\2137\2755@\221\275\353\'Y\275k\232S\274\265\371\206<\001V\374<T\344i\272\361y\277\274\026\273\036<\220>\357\274\264y+\273\311\352.=:c%\275\211\202\365\273)#\324\274\341\256\222\274\337t\031\27632\245\275\245:\221\273\224\213\014\275\014\236\357\274\223~\277\274\253[2;\237\214\366\275T\217d=Bz\270<\026\311\006\2749\333H\275\025\355\232\273F7\264\275\235\272\272<\341zC=\241\241 \276I]$<[Ql<\372M\202\274\307(\370<\302\337B=E\243\333<5\257\214=\331\273\342\275\013\256j\272\377\373\213;\264\030+\275F\223m<\201\004\333=\2332k\275\306\350\247<\307Z\365\274\212\tV\274E\024\244\275\177\373\320=\251\"\233\274\201\370\002>\272\020\370;H\216\3029\337\300x=\361p\321<\314\'\254:\021\237\001=l\2672=\276\372\326=\377\327\007\275 \264l\270_O\335=oF\264<\315\266#\275\256!\006>\332O\304<W\032\273;m\351s=\036\3638\275*\201Q\274_\004\272<\"Y\306\275\321ow=\210\301\316\275\370\010O=\312Y?\275\251\036\202\275\223\346\310<\366\371K=\202\\\201=\326\320\004>M\225X\275U\300\024\273L\021m\274\303\353\202<\315t\232\271V\020f\275 \372o=\036\315\316\275K|\306<#;G\275\356\202\265<F{T\275\343\310\221<\206Hq=o\035:=$t\324;\256\371,=\010\273\231<\320:\301\275\3357\247\274\207`\302\273\355\2762\273\020\016\303\275\246~}<d\301\212\274\311\r\027\275\212\324\312\274J\2305=\247!\241\275\013\200o<\200\311|\273\312\210\262:]F\020\275\237y\372\273S\0020\2750\330\255\274\033\211\003\276\353r\334=Q\001\255\275\277\373\235;\316\205\264<L\353\361=\231xl\275:xR=`\2530=M\177d\275\232\250\234\275o\375\n=p\3664\274\215\314\277\275\346\253[\274/Q\271=\324#\002=\276?B\276h\274\273=o\303\346\275\265\256@\275\365\2320=\000t\246=\221\215\254\275\263R\210=\272xm\274\224\301\013<\364\254f<\266\204\240=\257\246\006=t\242D\275\2615{=\263?\306\275\303Aj\275,1\217=F\2541=jk\003\276\005\312A<\327\025\250<\036\214\320\274\366-\312\267e\007\'=\316\021\352\273O\305\027=\022\n\201\275\243W\365=\310\344\037\275n\351\231\273\021\251\253:\336v\017\275\317\220\314\275\251}\005\274\014U.\274Q\024\355;x\212p=}\255\372\274\275\317\207\274G\020\225=?\002&=\352\007)<j\200\241\275\000\222\311\275u9Z\275>d\206\273I\021\271=\304\227\257\273\350\261\263=Z\311v\275dV\003=JJ\037\274\003\356\030\275*N\321\275\0362\357=sj\370=U\200\267\275vg\014\275;\366\204\275{\327\244;\200{k\275\246\264\217=\232\274\202\274\3732\034\275\313/\226<{\235\206=+\267\367\274\364\004\000\274)\345\025\275\356b\241;v\227\316\274\250)\357:q{\231\275=\313\240\274\212\006\246\275\021+\030;\325g3=\365\201\026\275\222\2548\275\300\3738=\375\316\004\276@\256\245\274~\273\202=\206O4=.M+=\234\344\200<\000\255*\274\277\250\274\275\370&\223=\354\034\353\275\312\013\201=\371\347\212=\364\010{\275s\333\274\274[\014r<\010\300\320\274\366\023\261\275Wp\006<\360\345b\275+\344\212\274rL\357\274L\370\340\271\"ZP\275\0179\254\274\010v\235=\033\2548\276\276l/>\267\256\302=\207f\213=O\214\202\275}p\020>uQ\210<\2238\276\275\277\271\210\275\322}\261\2743\242\230=\220\231\215=\230\363\027\274\005\333\340\273\270p\225=\017}:\275\244\250\266=#\307k;\376\340|\275\254\226\331\275\003\276[=\007\026\003<\261\205\213=4\023\031\275\034\250\313<\025?\326\275\231&\274\275O\274e\275\327\313j\275C\256F\275\335\322\001>>\036\374\273c\357S\274c\003\016<\266\231i=\006\307\261<\223\243\003\275\222n\322<\266\303\'=\201\231<\275;\351\330\274\025\377\n=\002\374\030=>:);\217\316S\275\266\212y=Pq\034>\216J\346;z\237\023=\222\266\337=*\270\006=\230\370*=l\203\335\275\020&\026\2746\030d\274V\371\003;g\367\254<\266\372\372\274O\321\251\2751E\232\275\216\013\227=\237\216\241\2748D\307\275\024\233c<\\\216\363<B\211\030\275\302-_=q\270\267\275\227\323A=%ty=h\244\207\274\200\306\373=\033L\324=\377\342\244\275\361\367X\273\233\004s\273Q=\336=\375\2367\275\305\242\213=\243h,=\000\230\307\275\2009.=\351B\314=\303X\243\275\374\371\243\275+k\344\274)>\334\274\242\350\014\275X<\230\274\255\263Q<\036\"\335=:\216\362\2738|\007\275\366\273\020<e;\202\2758\0060\274\342\253O\274\256\003\021\276Rd\337\274\027\273\240\274I\241\350\274\272\226<=\r\257\337;\024}\004\275tE\267\274\276\025\221<#h\306\274\271\315k=\227\251H\275v]\207<\022\014/\275\236\003\322\274\250\277\304\275\274\356\267\274\027\343\337<t \313\274=;\'>P\205\014<\013[\021>\320\230d=\340w^\275\347>\361\275%$\262\275a\'K\275\352\316\233\275\323eK=\300\317y=\306\357\027\274G\315\010>\363\277\250\275-\343\002>\215\366`\275<@0\274\247\341\231<\326\341\371<\300\305\372\275v\177\321<\3465\261\275\351T\211\274\234\372\201\2756!=\274q\240\215\275\200m\345=\002\366Y=_<\214;\311\027\312=D.\207<\205\'$\274\356\373\231=\222v\002\276Vz\001=*\003\020=\222\324\026=>\216\253:\302\037\003=\313x\017>t\t\362\275\224;\"\275s\265\256<\344.\026=\255\217\260\272\350\314\275\275\303\215\243=\025(\322\274\252\274\014=\347U\214;j2\274\275\307W\215<\352\324::E\033$\275;gd\275m4f\274X\276\032=\265\217\321\274l\262\322<\222F\271=\027\2170<&\367\033=.U\260\275\341\334\351<\370\035\207\275\265\026\004=Q[\220=\2239\347<f\017r=\376\325\255\275u\033\225\275E\306\327=#\211\337<~?+\274\350\320{=#zK=KH\263<\003\211\305;#l\n\275\207\303\261\275\267$D\274\321\037\341=\036\236\347\274\r\227&;\266\371\\\273\201\271\361<\203\233p=\377E\005<\201\035\031\275\237y\005\275\3253\310\274?=\027;\325\336S\274\034\222\336=\253\006\347\274\311\025\343=\355\\\010=\352\017g\275t\007@\274\002\036p\275\321\203z<\022\315\316\275A\317O\274qb4<\335\227\375\274\037z\231<zOP\275\243\301\317=\036\341\322=\252\363\205;\271\013\010>\034^\036\276\341\267\375\275t\320~\274\226`\346<\355x\"<\033X\342\274\3125\265\274\256tW=\335k5\275\242C\247\274,T$\275\253\276\347\275\215\254\313=\347\010\0309\302\"\314=\261\250\001\275B&m\275T>J=\374\007z\276$\374\354<\241|\257\275\t\002\376<\272\003\221=\256\245{\275\332L;<\236\343?<\313k\243=\007qJ\275\225h\204=R?\274\274\303\344\023<t\t3=i%\213<\202\236\236=F\003\240=R\256\230\275\t\2434;\210\025\247<i\247\237\275Z\t\201<{YC\275\026\243t\274\303\332\320=\236<\005\275C\217\245<\231\342\357<\274,\r\275r\0017=>\351\352=^S\331\274\237d,\275\255\333}=\247\333\\\274\325~\247=+5\355=\204\213\254\273\372<\250=)\256\253=\210\021U=\225\033\247\274g\221\361\275\345\235\004<~\363\262\275\276\230&=\027P,\275\270\256\020\274\202\\c=\355\027\\9tF\212<O\370e<\2108\320\273\016\024\223\274fn\203\275\203\321\205\275v()\274\003k\263<f\255h=\352\301\353\274\034\0025\273(K\340\275LG\037=\311h/=\273>!>1]\242\275\275\0337=\223\303_=\254\234g\275\242\003>=S -\275\266\020N=\273|\002<N\366&\275\335\371\263<\204r\024=\0002\273<i\370\000\275\305\007S=W\033\210\275\t\302G=c&\264=B\035\235<\034\300\023\275\000\337\222=\'\367\r=s\2521\275_\037\325\275;\214,=6\354\t\275f*\362<<>\206=\346\035\'\275\267\207\352<\351\222\332;ln\014\276\302\021\256\275\257~\023=\201N?=\327d\\=\327\251\232=\024\343I<\267\024L\275\267\221b\275o\216\n\274\027\221P\274F\366\270=\352\250\210\275\227\205<\275#y\253=\247M&\275\027\343V=\254\212\036\275\263\2577=\310\227\030=\361\240G<\367tq\274\003\207\032=\335\n\341=@n\013\274&\314\315=\204\237\357=9>*<\2524\267<\364\210\220=\037J\n>\231\267\207\274\354\271\035>\007\022\372<\306\004r=\207\021\202\274Y \034=\'\005;=\300\010\031=\264\351n9\247\321\273\275\370Y\022\276\214\013\355\274y(\317=l`y\275\251T;\275\353\211\204\275\224\210\354;\244\217\027\275\270@5\275\203\370\021\274\270*o=\304\016\227=\342\232\266\274Q4\033>gX\247=-\'\250\275\356$\341\275\225\001\272\2714\0327<\305S\342\275)`\344=\235\"E<\000\025\303<\277\261X\275^M\001\276\217\310\244\273sx\344<\266\207\217\274U`\003\274/}\375\274\351\313\230\275\267\352\222<]\302\206\275\356G)=p\305\034=4\306\221<\010y\334<\324\247T\275\302\310\013\275M\242\366\275\265\221\252=\326x\333\274`\357c=\277\370\023\275\006Zx\275\300\356\215\274\022q|=\216\317\303<\330\254\315<\373J7=b~<<\266\227\344\272\252\334w=\214CP\274\305\0137=gM\224=e\237\311\275\211\332w\275\324\314\314\275\332\327\261\274\342\214\303=\270\215o=\352c]=\031\301\260\273x\375\026\275}i\030\274k\377\212=\207OP\275\322\020\"\274\3322\177<6\227\267\275\020\007z<\247>`\275+\375\220=bO\013\275\311\217Q=\\\264\030\275~\352\236<\016J\366=d\323\206\274i\341p\275\255_\307<\307\226\204\274\250y\310\275E\177\343\275\3377\300<\203\245\200=\037\324l\275\026\236V\275\361_\254\275Zgh\274t_@=\211l\372\272#\203\262\274\265$\220\275#\377\375\274\261i\220\275u\237p\274\342\357\021=\016tP\274l2\006=e\304\354<\323\227\247\275\252\314+\274\241\323\210\274\014\256\250<\034\021x\275\302L\330=#^X=\030\367\354\275}\340J\275c\271\263\274\234\361r\275$y\226\275\270\014B=xt&=\025:9\275\350\273\005=\000h\302<@V}\275\261/\325\271\211]T\274TWA=\017$\240<\021\357\014\275\367\020\034=l\230\212;\000d\236\275e\020\"\275\26421<\024{w<\003\351\013\275=\344#\275\361\000\272=\340C\022\275P\034V=\023\247\313<L\251\035\275Zc\314=`@\263=\007a\235<\217\254\303:tG\331<0\323\322\274\374\215\270<\230\201\333\273\364J.=\357\366\034\273\204\220\370=\372\317\207\275\363\212\242;hN\2738\323C\274\275\246J)\276\300Do\275Bu\023=\360I\207\274.\022\207\275\020o\003\276\207\304\031>F1x\273d&\252\275\026n\200=8f/>\337\'\264;:\207+=\312\344\346:\313\220\356=^WX=\\\222\211\275\246\262?<)@\013=\035`\023\276\027\000Q\275\'s\241\275\335\323\270;\244\321\241:\202\306\254=\263\034\242=1\016\212\275\310\003\023\2750\004<\275\r\212O=\252O$\275`\217m\275%\032?=C\2272\274\331\'z\275\265g2=\021h\020\276\366\277|\275\362v\003\276zS\237\274\313\236\013=\243\245\371\274Sx\360\2759|\221\275.\327K=1\320a=$\307\203:\010\302s=[\302\362=e$\213\275\n\372T<\255--\275)\373\316<\212o\375<\242CO=\014\220\007=K2\007\274\371@\341<u\247\260\275\'\264\341\273\363%\001\275\242\224]=\364\325\314<\216m\356\274\003Y\253\274Z\371\005>y5\370\275\304\217\374\274\\\323\277=%\037\3749\374>d\275{\247(\274%`\210=vz\211=\253Mo<wHw=N@\2479\020!\202=F\362\270\274\371\356q\275Ge\204\274\346vp=\263\300C>\264\316\244\274\265*\020=z\251\360<c\265;\2759\014\365==uZ\273\341j\017<$e\352\274\017\274\033\275\363\215\030<\204\233\231\273\352\267\324<z\245\247=\204\217d\274\316\360-=\314\026b=\025\270\247\275S\301Q\274#\307\313=\231\244\014>\001|\246\275\000nP=\216L\247\275*|4\275\305_\374=\\A\240<\321g\373<5\274\013=\312\000\007\2766\036\270\275\033\317\211\275p\200_=f\207\225=U\310\236<K\r\204\274I.\362=l~\212\2757\216e=y%\030\274u\355\264\274<\213\256\273\324\367S<\276\367\204=\010\275\020>n\034?=\303\303\206\2755Bh<\275\354\212\275e\013\211\275\206\270\204\275\263\334\211\274\332{\354\273\337\241\r\274\362\367\216\275\225\361\236=+f\211\275\211\373\350=\334\006\016<\221\213\006=(\331\341<b\\\022\275rFG=\234\0163<\244\230n\275\255\334\200\275\212\342J\274\226\025\001\275\245W\204\275\021\034\322\274f\266\t<\007\370\255\274Y\227\332\275bc\231=\026\t\375=m\000\254;OC\270\274/\317\035=\335i\223\275\312$\205\274d%\230=\346V\342=\362\020S\275e\024\365<:D\264\274\273e\265=~\230\227\274\272\262\355=\025\271\030=\227\240\306:B\204\t\275\372a\005>P\021\206\272\017~\271=\007\027\211\275\200\034\222\275_\007\214\275\030\003\032=\273PX\274\272SY=y\366\316\274F\323\246\275\310\'F<k\\\207;\206\031\247\275\032U3>\202\3744<\2206\204;\036\014\023>\032\342q\275\342\211H=\263Pw<\321\266\3568\275\243\233=3\221\222=\030\221\201=\370d\260\275\274 }\274h:\203\275^\201\266=@\2570\274~\376\023=\256%\200\274\010y=\275\316\002\360\274\000\201A<\313.\312:m3\252=\177b\025=\336\362\270\275`\370\265\275\326\n\276\275$\356\033\275\321S\t>\267\317\220\275\026\264 \275k\004\275=\372\272\302=V\032\375\274\204P\207=d\265#\275\001\270\210\274\267\335\024=P\206J=\016\317\241\275\371\t\221=\343\362\331<\355\210\273\275\272dr\274\0046.\275r\303\216\274\312\357\326=\002\237\267<\255;\205\275\313j\207\274\264\375\264\274~\315\226=\2431\226\2755x\244\274\373l\"\276J\311\306\275\0273\237\275\030C\r\275R%\037<-g\336\275x:\217<\354%\270<\277\321$\274UG\036\275\272\274\246<l\"\353<\331\367\003\276\177\360\247\274\203z\200\274\274\214\227=\275\032\265\2755a\016\275\365\204\274\2758}\t=6\234`\275Y8u\274\0309]\275\n\372\'\274)\340}\274\202l@=\257\374W\275%\327\333\2752\r#\275\360\010t=\307_\226<e\353\026<\347s.\275_E\006<L\216\222<\343\024\217\274\224\203(=\316\342o=\315\330\341\274>\362j<\211Z\346\274\211!\347<\033N\303\275\312\276\256\275@P\233<\235C\010\276\247\364A<d\255\210\272\322\246\262;\004a\036=\220\320\340\274\253\211(={\253d;\302\250S\274\037[K\275-\340\t<TL\245\275-\240/\275\314{\225=\340\364\030=\351\373\276=\375\347\247<\337pU\2750\244\360=u\224\231\275\203<-;\271\377\215=Y\260y<\2750-\275\026\245}=\317\327\205<G\343\342\275\177\242\332<\374\254 =vGh\275k\207\016<\2423\027\276l6\205\274\017w\231<\271}\216\274\352\006[=4C\343<)<u\275*bv\275\212\212\326=el\302<\362\361[=.\313*=\326H\211\275\304\002\'=B\353\320=\354.\037=\24234\274\207\2720<\240\310\253\275\254L\227=\300a\316\275\266R\026=7\341\275<\220r\210\275s5\316\274\246\363\240:\272\201\372\273\302\364\304\275\271\2135>{\270\354\274\337H3\274\254\337R\275\262\217\t=\212\034\223=\236\032\026=\210\377\270\273\242\27656\272\356\213=\"\024\271<\225/\300\275\267\305\002=\277\261s=\317\305\002\276 \362j=\312ot\275\376\022\205=\'\350L\275y#\224<\360\335\230;H\r,=\363\204\315<\335\001S=\"#\023<\352<\257\274c\2640\275P?\326\275\273,\026=\327V\201=\255s\247\275\027\002\364=&7\217\275\001\224\023=\010\324\n=~\275\323<\304\3477=_\017\345\275s\024:\275\024\247\'\275z\255\304<aj5<\212\313\000=#\361/=\216RD\274k\023I\275\353M\'<\217\035\211=N\360R\275\213\021\225<\360n\326<v\273o=\014\020\017\275\0045\221=\367\370\353\274o\005>\275\346*\r=\017\016\216=9\226\023\276\345\030\353<J\220\247\275\307\020\327\274<z\265<(o\003=\237)\313<\"\236\006=\0102}=\221s\233\274Z\327Z=#f\376<3\235s\275\002g\001\276}\tZ\274\325y\246\275\336\035\210=\325\333T\275\351\023\230=\267]\377\273\2049^<\330\243\200=m\037\206\273U\034$=.*Y\275/g\377<\347`_\273\002\030N\275E\324S<\002\343>\275f\331<<G\244\252\275m\205]\275\036W\253=jtn\274\363\003\277\275\364\375M<\363\330\200\275\344\006:\275O\367\377=\374p\256\274\357\2564\275\315\226\002>\033\365\372=\374*-\275\007\253\251\275R}\225= \210-\275\217z:\274G\322Z=.G\002\276N[\226=\2738\224<\327\177q\275\003G\256<\201Xs<\276\246\004\276\014\231\371=m(\323\275\214\235\367\274M\300\214<eb\256\275ud\220=\230\376~\273s\020c=\2724\342\274\nd~\275,\306z\275\0210l\274\022h\201\275\264\2376\275\177E~\274p]\301\2756pm\275\013\306p=\364X\305\2735N\331<\324Ao=(\r\013\274\343\2271\275\276S\247\275i\2640=Kc\371\275\372\210\376\273!\347\177=\232\204\275\274\022\234\335\275\337\307\325\274\004\357O\275D\343\334=\023/\230\275R\373\364<X\220c\275\031\262k=\344V\005=\323H\024=\004\212\254=\354\363\200;Fj\323<\341\326\313\271\267\t!<\267\352\n>\3250\035\274\001\331\250\2753\304\240=1\022\260\275\336yT\275\237\265+\275\027>\000\276\345C6=\360\022\215=\207\326\037=+vB\273E\222\002<lL\225=\345\236\272\275\212\240]=\024t\325<\314\331\275<6\306o=\355\373\371\274\332\226\010\2768\260+=\276\314\000\276fe=\274\343\033\267\275\377\326L=2T\206=\247w\202=\300\020\265<\000\363(:C\t8\273\331\322%=\272\362F\274\225\335|<0_\267=#\276\376;:\177\003>\246/\030\274ai\340=\325\245\000=\331\372&>\177\377\004\275\313\007\206\275\355\244\035\274\330LW=\241\225\214\275\2727\2608\3020\205;\307\235\014=\365\300\322\275IA\003\273\303\315\026\275\204\306$=*v\001<\320\365\272==\223\262=\371\213l\275\364\244\222<K\220\243\274\202\372\216=\246)\307\275\223\\\315\274\355a=\275<\303f\273\025G\303=\314C\022\275{\377\211\275ep\375=\025\376\035\276\001\211/=GkV=\275\031\234=\246\205<=\022\252\010\275\374\344\202=yot\274\203}\222;\022*\316<\024\362|=3\037\014\275^W\200\275\274\364\275\274\244{*\275\201\245Y=\023\r\216<\026\210$\276-t\370\274\311\372\363\275\355r\223<\334P$\275\240\303\362\274\343\310R\275\272\n\007\275!\3019\275T\267\032<+\315==\357\327\373\274\274\020B\2744-E=\365\003^=V\224/\275\254\277\n<\2667\272<,\340\363\275\332\020\317<\315\334>\274\327\326d=^\251\251=eR\277\273GP\256\274YlB<M\204\030>\343\310F\275)\277\250<Lc\344\275\375\225\353\275{=\323<\rGB\274\'\255\311\273<\\\221\274i\317\215=}r)\275&s\272\275\356\344F=mm\005\275<\006D\273\342~\321;][\227=\032\222\264=P\223\303\275h\325\231\274\260\0062>\016\317\234=\254\030\305<\271\341\200<x\260\037\275W\207\202=\355\273$=x}v=l\337\200\274v\3421=?\\!\276\260>\321;\312\271\361\275\325\314\013>\317\215\333=&\373\203\275\225\020=<\361\013\245;\226RJ<<\360\222<\314E\010\275\214\255\372<9UZ=\3424*\274\013\031\262\275\002T/=\200r\306\274\020\312\023<NS\033=\313(\301\274\236\270\305\275\260\3331=7\250\004\274\333&\212\275\324\347\370\275\352\326\243=\310\243\344\275\355\036u\275\357\322\023\274\244\323\213\275,rW\275\310\224\254=A\341>\273D\365\264\273}\366x\275\276\014~\275-\025\201<\262+M\275M\000\223\274\272\024\'<\0347\337=\360\227\031\274\200D\303<(X\345=\220}\350\275f\224\250\275j\310\240\275.\274Q\275\'\323\213\275\273\371\232;\271I\n=LS\206\273\337\233(\275\311<\032\275N\323\227=\361\305k\275\367\332\230=~\264\340\275\273$/\275g\324m=B\332\205;m@\200\275\'\261\032\276CJY\274\246\300\270=&3\031=\272r5\276,\331\245\274\377h\227;X]w\275\212\256!=Hw\204\275\"\013\350\274\270\367\220<\253\311\275\275h\t\271\274\207\321\317;\020\005U\275\036L)\275\3575\213=s\320\224<\241\347\224\274j\213\222<\310i\2708\037\353\331\274\026\371\350\274\037\347\337\274\217\205\004\274\275\033+<\245\366A\275\356,R=\022\2205\275\330Z\231\275\365`d\275\031~\'\275h \305\275\026|0\275\242\361{\275\016p\031\275 \017\225\274\240Vh=(\227t\2752\241\213\275\266\311@\2750\247+\275\217\246\214=F\336\234:eP}=\361(\323\274\257vm\274\303\237\376\274,O\211=f\234\003>\362\010\203\274\207\227X=\034\226\225=+JM\276\rO:<h\014-\275\250\370\017\275%i\216=^f:\275\230\325\010>\002\337d\274(ZZ\2750\364O\275@A@=A\352\016\275NL:\275\264\316\021=\237-\325\275\310\360_=\275\205\021\276Gy*=E\346\277\275h\246\202\275lH\355\274\t6\033\274\262\033\311=\363b\211<L\324S=\314\177M\275\2134\232\275\260\302q\274\370\377\343<\366\002\220=\205\223\230=\332\377j\275\312\"\'\275\233\2271=\273\374\377\275=\362\342\275\323\256{\274\330 q\275\360(\023\275\301R.=\263\037n\271\360\014\204\274\317\202\205\275\354e9\275(\260y=xQ0=\337o\253=\301\273\025\275]:X=\021\256\360\274\301\351\022\274\341\025#=\201\254I\273nP\225\273\233\356Z<\333^\300<\n\311\t>\356Q\266\274\267\201P=\262\n\010\275&\007h\275\302\341\254<\262:\354=YG8\274\211.\027<QZ\320<>\301_;\300\351\333;\213G\274\27587\221\275\211\240x=\246\272b\274\374Q\344\275B#:=/\315\003<\321\204c\274\310\272\213\275f`[\274b\374*\275\003bv<\016J\263\275\212\253\345\272\224\020\255:\314\224y\275\266\211\016>v\346\273\274\343\360\250\271\260jK\274\241\250\344\274y\373E<\236T\000=\256\3559=\266N\021\275\330\320\264=\230C\363<\371\256\261\275\245\367\352\274X\3615\275Y\330E\275\254\353u;\262<\345\274\221\221\260\274\004\270K=-\005(\275\2024\225\275_\342j\275\2370\037\275\277\233\370\274\363L\225=\370\307[\275\035\271U=\236\346\300=\253\370\232\275\250qI=\334\250\220=\332\236H=\213>\223\275l\204}=\344\252\t\275\005\212\266<\234\356C\275T\001n\275\335$I\275\244kx\275\032\350\274=\031-\312\273\314<\032\274C\001\251\274~\014\350\274\201a\306<\374\361\021=i\2019\275q0\035=M\032<\273\267\235\006=\376[\032<\230\020\224<G6\027\274x.\302=\005\016\026>\037\027\333<>&\017=\303A >\264\276\337\275\346\025\352\274\236\222\256\274\016\014\323\275M\334\256\275\215\322\203\27425\242<\266\017\343\275 sQ\275\271/\275\272\343\352\233\275\266\013\223\274\262\361G\274+\205`<?e\230=\302\026\006\275S\246N\275\373\336\250\275\260\377<\275\231\370\302\274\027oi=\365\371C\275L\232\320<{\n\214=wH\374;\261\013\262\274\213\000\331\275_\337\001\275\023\373 =\032\0355\275\t\257\340<,\343\025=<\271\225\275\330\260\177\273\373\302%>\344ku\275\257Q\310\275\375\016\020=04\032\276\\\223\343<\276X\311=L\237\000\275\022\031\374=\306\313\260\275\023\246\212=\276;\244\274\013\3517=/\272\361=\361V\300\275\242n\227\275D\224\246\275\373\276\020\275\324%s\275ei\241<\306\001\323=\320\202\005\275\334\017\333\274\374\316\000=z\326Q\275n\210\016\275US@=\323\267\241\275\326\014F\274\370\277(\276\305\251u\273\001v>\275\272\243B=\200Z!\274|\242\262\275\013N\207=\361\302\365=\371\365;\275Hz\244\2759\232\362<o\342.=g\300\001\275\247\301!=X\366\323\275\302;\310\275e\021\315=\307\030\317<\005\323\321=\"}\231<5\250\010\275j\326\200<\345Cu\274YiB\274\261\255\323\274\376g\025\276\343\352\006;\347Q\300<\356}I<\374\025\235<\031sU=\307\227T\275\\\217\272\275\354\206\024=l\226\210=d\243\\;\035\277\245\273`\364\354\274\306\2534>v\265*\274\253\236\216<\023\345\315\272\035H\246<\211Q\'=\314\333<=\353C\010\275I\316A\275 =\211<h\020\213\275\343\277\301=\364\363\034\275\245\206\336<\203\2326=\327\304\224=k\342\204\275I\364%=\361\316\222\275\353\357L;\367\024,\276\217\246P\275\373\374\237=\327%\017=z4\212=\260:\252\274\360\376\270\273\372(\264;_\272\030=<\007\223=\340\\\223\275M\266\002>t\371k\275\302\033\212=\234\257\321<c\273\031<ve\227\275\215\271\002=I\010\374\275\245\236f<\005 !\276\203\335\264\274\363\232\263\274]j\254=\372`d\275q\034u\275\333\203h\275c\223>\274Kl\271\275\324\373\341=\342\025@\275j>|=\261P\274\275F\007\252<w\365\272\275l>\212\275\031\031#\274\350@\216\275N\270\252\274\247\365h\2741cU<7I\214\275\017\325\326<1\277^=\355|m\275\265T_\274>\021\252=\034\365\362;I\215&\275\375\\\372\274\340T\024>}\001\301<k\222:=c\202\272\274\037\204\307=\0333J\275Y\216{<\365\nf\275\205\213\300<!\210 \275Z\236)=\243\327N=O\323\006\275\037J8=u\325<=t\246\251\271\273h\t=U\010>\275\222\343\231\275\010h\227\275\036q\306\27340l\275\320\246\201\275-\244\025>\265\260\315;\3117\334\273X\222\037<s\314\027\275\025\373\254\275\271a\217=\333\221\r>\376\036u=\3770\017\275x\354\224=\336<w\274\205\275\340\275\205\371\214\275\341\\\334\275\221\224\204=\353[\255\275\273\205O=m\014\007\2753\235?=\245\rj<\234\226\005=\357\327\202\273\003\357\332=\237\367\226\274\007\027\005\274f\363\340<9\020\305<\274\026v\275\340]\217<X>\005\275\324]\243<^0B>\257\316\375<\007\000\031=\352A\274\275\355\341\250\273\266\022\025;\034\030\034\275\330\365\224<\340\347\254=\007-6\275\372\2446\275\346\177\276;\200\\\377\274\221-\241\274\025@\223\275w!\030\275\364\021\212\275[\372\277\275\271\216@=\226&6\2758\020\242=u_\214\275\314,\020\275\312]!=g/I\275\354\2017=\326\370}\274\023\031/\275\332\006\271\2756\026\333\275e\221E9\326\033\231=kP\200<\177\037\270\275\310]\241=\025f\314<4\220\024\276s\272\r=\342\246\222=\353eh\275\224\252\223\27485\213\275\310\367\214\275p\244\215\275i}$\273i\375,\274m\020c=z\003\236\275\350M\n\275\346>m=l\023\304\275R\032\030>\312\367\224\274\350F\356\273O\220\177<\315\325\224<\354\2632=\027\323\351\274N\336<=\212\316\275\274*\303\032=\237\311\274\273\026\007\356<\014\001\215=\304\207\242\275}\340\204\275\204!A=\247\037!=\321\321O\275\177\373\320\274T\372T\275\322;3\275U\302\005=\267E\216<\307\022\256\275\331\267\235<\206\264\245\275*\301\305=\246\210\003\275\233\353\371\275\302\335r\275\262\016\204<F\230\367\275\377\213\374;_\334y\275\212\244\323<1\205\275\274\032\037\376<\"J\036>\266\330\263\274S\300\365<\030\2026\276\213\236\275;\301\217\212=\247.a<\321$\230\274l\322e\275\tB\364<_\026\007==\305\357<\026\361\300=\021\010\262<\204!z\275\\\327\267=\372*d=\345$\205\275\237\242\226\275B\223\037=\"N\036\276\346\014\267;{(>=\250\237\343=\3604\322=}\312$\275#\005\031\271\357?x\274j\002\260\2759(\361=Z$\222<%\245\316<B\022\332\274\354\333Q\275k\267U<\315\255\331\274+3\354=\275RQ\275\377a\317\274\363\310+<\302[\342\273h\323\221\274\251\212\273\275\203d\373\274\374\235\230\273\3374<=\260\276w\274*\270%\275~\341\034\275\005\354y<eh\212=\215:\304\275}\202\311\274d\267\207<!t\206\275\242Uo\275\017\231\374=\343c\251\275\014|\037\275\020\025\204\275\177]\262\275\037\261\371<\035i\361\275l\021\t\2739\207\336\275\204\345\322\274]l\227\275\361\366\260\275K\374\035\276)\263!=\235\034w=\256\216\246\274#\256\357\274([\203\274\362v\321=*6?\274\364\313\003\275x\023\210\274r\3123\275\014\'\264\274\370E\035\274A\367\301<=\212\230=\202\177<\273\261\r\333\274\3057\263\274D\034\234\275\313/\014\275y|\301=?D^\274\004\364\317\274!\343\350=\225\255\253=\n\036\257\273P9\017\275E\206\036>\244P\275;\026\305\022:\334\177\177<\250\022\240<\324\266\222<\376\332s\274\256\014\271\275\234\316\200=\311\224\351\274\334F\r<L\230\301\275\276\005\030\275\265\2324\275\253P\375\273\275\347j\275\202\206.=\036\237-\275\3611\260<\322\301\251=*[=\275\253\335\216=\t\316\003>I\334w=\352fw</_\221\275TO\240<h3\240<Y4\343\274k^\010\272o\026\364;\206\370/=\372Z\205=\334\244\333\275ncX\275`*\355<\225\313+\275\031\205\310<\025\030l\275\r\205\035=\351\241;=Hu\253<+\251\035<\305\336*\275+\3023\274wXi=P5E\274\366\223\344=\250\rP=*/\316;\270y<>\272\273f:\346=\006\276\3024\022\275(\247!\275\265\231\014;\202d\356\272\027\211\264\274\030\330\355<\036\332V\275\013\323*\274L^\311;\240\257\340;\327Z_=~h\214\2755\377\243<m\226\306=\342\373%\275~\214\201\273V\004\303\274\007]\315\2741\353\305<%>)=\361\377\225\274\223xM=\360zy\275cK\354=\022\364\201<\211\230\037=\3708\233\275\033.}<\270u\273\275M\346\222\275QY\311=Rx\307=\241\007\304<\001\021I\274\273\361A\275\255\022\002\276l\335\331<\361-\001\274V\232\352\274\317\027`<\370\310\241\274\t\253U\274|Gn;y\335\022\274\262\362I<\320{\r\275\260\375\024\274f\2631<\275\303\024\275.\313I\275\314\262\255\273|\n\252<\002\376\372\272Ov\367\273&\252&=\2727K\273T\326\035=AbW\275\t<\263;%\350?<H%\216<}\267\307<\323\216.\275t\016 \275\226\235\265\275\344In=-\2608\275\212e\242=\271\200\252<^\200\355<\003\214\352\2756\025\315={\034\013<.\311\213=\203d\260\274=\210\265<\303\207\316\275\306\365\332;!\351\330\274\301>Y\275\320\035\035\275\312\237B\275\022\214\343\274\002\350\211=\3275\344=\272\014\275\272\034P$\275\300\227\373<knA<\203\n\032\274\246\202\275\274\345\035\n>\315\324\256\274\022\267\273</\250\203\275\031p\201\275\206\201\027\275jee=C\264\262=\005\250\001=\252\346\342\275\275\355\017\276\243\202\215;\251\306n=\037\341P;kS\341\2750\037\265\274\301\236\032\275w(\261\274y\326-\275\337\205\253=\3324\253<\353k\006<6\232\325\275\312\r\017=\315\316\372=0\376\220=\357\374\'\275\250\r\024\275QSd<[\014\234\275\241\336S=\277\\\241<\261\034\025\275\r\324\"\276h_\346<\273%r\274\036\233\n\276\3569;=})\320\274\036\225w=\033$\200=a\341\203<\304\266\270=\364D\351<\356\2621\273\314\316\033\276\262K\036\275C\233\327<\274G\255\274\354\302\300<]\3415=\324\266\037\275\337\2047=\017^\256=\274\263=\275\026)X;+\231\006\276In\211=\256\231f\275\217;\367\275ho\002>e\227\366\275|\257z=}\315\272=\204\036b=\030A\333\2745R\240=\345\327r=dZ\245<\n\274\247\275\351\247\237=e\014+\276n\244\335<F\361\022<\3708\206<\351\022;=\n\\\233\275\217!\275=O\213W=\241\201\247;\215A\212=\205\2402\275\312\330\r\272\304\357\240\2757\343e=\332;\031\275\323\214\231\275\357/\366<1\334>=epW=\023\325\205\275\342N\335<N\326\277\274\262R\356\275bM\220<yq\341\274\033k<<\325\253\230\275\300\224.\274|\021\014=.(\254=\376\320\037\272\264\346\225\275\214Z\342\275\305=\202=p\207K=2T\250\275#\017\032\276c\347f=K\006m=@\234\013\275T\252\211\275\306\216}\273]0J\275D\267P=\024\316\215=\362\014t\275\241\234^\275\353G\212\275i\002\016=W\377U\275\261\252\024\275o#\260\275\025\024\201=L\320\t=\004\370x\275\272r\r\275\240\352\'=\266\363\370<\270\331&\275\014w\211=\\\000\326<\330\242&\275\034m\310<$\351\213\275\005k\277\275\262\377Z<\000\204r=`\255\257=\247A\253\275\220K\214<J\206\221\2730\234\220;r\255\037\276u\322,\275\232\225T=T\233\220\272\251<\327<\222\323\307=\376\267M\276uB\240=\000\355\223\275b\247\221\275\271\211\230<\022\253\273<\242\3160<\352\033\'\276\361\357\016=[\330\002\276\223P\200=\372%\362<\377;\320\275\005\255m=\033\366\323=\252\361z<\006t\332\273\306p4=\302\177\213\275\0023\232\275\375\334\274<_\345\037\275\240\204\220\275\177*?\275J\036\004<\232\356f\275\242u\000\274\270\254\226=\344\367\206;N\3174\275\2472\030\276\260\311F\275Y3D\274Li\200\275|\206;\275\026c\325\275\260X\017\2759|\035>w\263\266<+a\212=(\202\317\275t\262E\275\307\302L=W^3\274\344J>=z\t;=e\224\224\2744\003v\275\031\216$\276\230\203\214=|\222\262\275\021\324\266<\215\177\320=^T\373\274\213Dg<R\351w\275\251\221\033=\330\352\003>\377\3439=yg_:\327\317\014:;\351\325<\305\257\227=\300[g\275\354\227S=\321\323\312\273$\352_=g\364!=zY\271\275\202\305\363\275|\250\222\275\244\242u\275\263\333\037=Y\363\266=(F\310\274=-\227\274\215\023\370\274uh\337\275w\343j=R\315\010\2754t\211\275\253\262\240;\332]1\275P\323\321<\204\2649=\007\206\250\275\375\002\264\274\374)/=\3520\335\275\234,\247=\'\327R\275\346\202\207\2723\346\207<\304\200\254<u\021\205\275\347E\320\274\242+c=\321\247\021;\254\317\257\274\361t}<iX\251\275\235\310 \2742\200\373\275\022\304\365<E\225\026\2755\274\325\273Q\254\276\274\320\n\245\275\260c\226\275I\017y=\304\250\327=_\257\177\275\201\221\227\275\303\353\311=\331\263w\275)\347c\275\241Rc=*\225\"\276\212c\332<\200\"{=\3514\032\275\002\031\032=\231\345\035\275\256\305\201<\317\202\217\275\005+\027=7@\267=\242\230\277<\340\376O\274\204\007\265\274\315b\234=\260\261R\2754\377\335\274&\363a\274?\007\007\275m\233\177=oF\333\275\346\276\t=\371?+\275g&9\275.\213\212< )\010>g\204\021\275\321\3641=\364l+\276H\274\014=J\256\202\275k\255\360\275d\020o\274\202\2236\275-\353:<\311p\247\275r\353\005\275\304!f\273V\240\000\275c5\232\273\016\254N\275\224\313h\274\256S^=\022M\277:\002R\222=\3137\013\273\241[\250=\021\365i\274@F\210\275n\332\'\275+\335.=\351\342\375\273$\2653=\367\035\271\275\333\033\006\276\003G\037\275u\032\210\274\245k\227<\3622\375\275\261\023\227;\020\\\214\275\3742\026=v\276%=\351\020A<hN\376<a:g=Y\350\374<\242\034\347\274\250\031E\273\'6K=\023\365\246<\233\361\231=({\253<\267ex\270\2718\345\275\rj\277<\241J\334\274}\262\013\275G\2728\275\225,\366\2751\016\"=\317\314$<\250\177\210=\002\013\313<\353\325\306\274\246\366\236<,W\032=4\203\241\275wH\270=\355\022\227\275rw\255\274j\327}<\301\255\335\274\221\017\027\276*\252\256\275\240\211`=dc\265\275\215\316\214<r\376S\275R\331\260=\332\035\265\274\024a\001>@\016_\274p\324\321\275\035Z\233=\000uS=\2666\026\274\237p\333\274\216\202\370\274\304\273\373=\234\241t;}.\020\276\223S\337<\363\003\210\275\214@)=\001\201M=\352\036\322\274\330U\200\2751\275a=vJ\216\275\242^\003\275E} \275\251\364\001\274\177\335\264=[\313\373\274B,M<\224H\216\275V\260\264\274\304\344o=\366\205\212\275QL\304=\363\027@=\2659b<*j\321\2734\332?\274\246]\310<\330\301?\275Q\035*\274\035#;=B\221e<\317\027\274=K\'\312\274\203\210J=\346x>\275\345\025\275;.+\352\274\217&\240\273)\220\203<&v\326=\026H\r\275\376[\017\275L\336\206\275_\363;\274`\024\223\274\270\026{=WY\331\274\\\256\344\274jd\256\275\315\241\250\275\213\221\310\273\254\240:=\371Z\211=x\'\345\274\000\357\332=5qC\275\037\216_=\022\345\234\272B@\271\2747A\233=\333\321\210=\0244\031=H\252\034=\031h$=\032\361\231\275\305\0036=\320\020\367\274\025\224W=\227\254x\275$\016\253<\254Ln\275n\317s<\372\022\214\275\230\254t<\372\001\223\275<\235\365\274UZ_\275L2\001=\2430W=,\374\216<\216\211\303<\203\2622\275\013PB=f\275\304\273\267\355\003<u\013\213;-\222\020<\362\323]=k\\\360\274\030\321-\275<\250\274=\357_\275\275\227&\247\274\007\345G<\364(\204\275\266\242\037=\303\337y=\201\006{=\246\326\331\274\245\023W\274\247\3078\275\245\224\242\274\216>A=\204\307\031=\377\343\302=N\265\032>\315R\234\275\346X\260\2741\307#\275\244\264A\275\350\004>=\274\023B\274\257\351\324<\303\267-;d6\243=\177\021\301<cR\203\275\2452l\275C\247\306=\310\374\200=|\216\246\275\217F\t<\271$\312=\222{\267\274\030\002\026\275x\205\034\275\233\346\275=\377\371\017=J\321\3439\373\304\033>\3269\207\275\336\336\260=\035\334\330=3\362\210\275\261,-\275K\004\352\274\276\376Z\275\342\345<=X[F=7\206:\275a\266<=\224\"\313=\240@i<\030\3408\273u\255\256\275\372`\003=\231\036\372\274\251\303\242=\366\367\252=L\353\005>\376\007\016=j\246\277\274\034\254\255=cmE\274\t\331r\274\372S\312\273\215\333\014\276\237\241B=u\370q\275t\245U\273\033R\330\275\"\205\360<F\367\207\275\254\247\363\274k0F\274 JL=\320\234\266\274%\014\234\275\214\013\354=F~\377:k\347t=\004\231`=\021\230\224=ngh=t\302\204<\222\275\325=\226$\214\274\\k$=\245f\224\275>\230\233=\021\032B=t\336\215\275\264\3158\275\355\231\017>\333\250\311=\026\245\276\275pq\267\274IR\322\275bh\335=\205\032\006\275\007.\r\2769\033#\276j\036\300\275\3454}\275\272\301\224=EY4\275;=B\275\177A\237\275\300:\221=\017\311\027\274\203\350F=\356\2723=\244\277\264=\036\037S\274\274\260\021\275G{\021<\253M\n\275a\240K\275\262\350\213=\267\036\336=\277\223R\274Y\236\n>\340\013\247\2755\312\022\274\231\256\226=\277J\242=PGm=&\272\004>I\346^;\014O\002< \177\320;EE\236\275\nn\252=\037\233\250\272\364%\274\274\024\261\222\274\216\234\\=z1\014=\301)y<b\377\023>Mg\241\274\020k\244\272C{#\276\240\014\367\274\242\345\246\274_>;\274\303\245\204=\201[\244\275p\217\034=\352\2549>\027\307\321\275\001Q\030=\305\210\021=\377-\221<\033\241\334\275\017\224Y\274z~\200\274\301\n\022\2755\213\350:\324I\377<\273\350\234=\370\337\300\275\311\376W=<\220^\275\3158\253\2730P\233\275\036\003\251;\361\262\243<(\001\366=\032\332\357<\362\355?=\027\372\320;Ce\320\274X_g\274\331\272\215\275\371\327\\=\177d\304\275&\370\341\274V\314\033<L\247f\274\242\215\327=KA\361<\256|\006=i\233\340=\246\276\354\274?\320i=\200\365+\275\215a\017<\266\250\355\274D\242T<\264\247\273<\352k\316;\337\272\305=\023\230+\275\225Q\'\275\231/3=#\343T=RD\271\274\230<\330=\225\323\t\275\324\202\232=&\227\224=y\230W\275S\002\022\2756\270V<\0335\n=\374\237\024=`l\246\274\030)1=\355t\364\274p)\306<\232g\372<\3212o\272kJ,\275\2122\221;Fv\277=\333=^\274\226\265\227\275$\026B=S~)\275d\246\313\274x7:=\201\341\230<\177\242P\275\360F\023\274\205\344H\274\'\033_=\246\374\020\275\224\244\006\276\316\307.\276\363q1=\027\371\375\2746\301\264<@\226T=\3450\3118{6]<a\361\212\275k\032\007>\203-\033=\336b\267\275\345e^\274\177\220S<u\0010=\342[e\274Nv\377\2751t\002\276\014l\231<6P4=\345\033\207\275[\3159\275\033\205\320\275\344L5\275\010\370\244=\3728\003=\266u\277\275\373w\225\275\263\344\225<\362\226-\2751\365\243\275%\312\227;G6;\276~\215\027\274\357\033\037\275+\225\301;\242\2409\275y\216\230\275I\324=\272\357w\243=\357\334\370\273\277^\007=\"-\245\273\036\312%>\024Q\212=(\253\\\271~\322\250\274ey\030=\271}$=\350\372\213\274\303\363\203\275\206q\023\276\204\"e\275hcS\275\214\213M=\257\303\326\275Z\361\267\275\356E\206=\247\251_=\006p\340;\357\2252\274\343\202N=-\212&\274\353&\200\272C\252==U\035\236\271\241\326\007\275?\263\217<\352-z<\204d\352=\303\217\337\271\2657/=\375\2745=^\375\343\274\275\351\244\274V\376G\275\307\301\033=\343\222M<\025\306\032\273\244Xb=x\013\013\275\321\217J\275\t\356\331<CT\357\274\227\245\362<dCN\274,U\001\276\316\225\340\274>\021\031\275M\025\213<\201\372\271\275I\005\010\2746\003\227\274\006\352A\275\314\271\255=\314\017T\274\360\003\202\275\303p\257=\'\274\221=iZ\264=n\nQ\275*&\300;\360\221\202\275\243\220\010\275\370\270\214\275\232H\006\275\365\331u=`\177\240<\243\306p<\212\251\'\275*9\213=\0234\024\274\301d9\275,\353\372<Q\305[\275\350\325\330\275@}%\275\375_\030=\252\237\202=\'\251\265\2751\264\316\273\200\t\231\273X\022\203\274\035J\235\274&\007\243=\025\242\n\275\347\347\034=\334+\246\275h\\\025\275P\223\306;\235\2551=3m!\2752\033\233=O\326\366=o\1778=\322;\201=\001Z\216<|\022\331=D\300o=\271[\352\274K\033\367\275\274\006r=\365\3657=\177w?\276f=s;[\214\340;\371E\201\275\2075\200\274/\245\247\275q\223~:\275\350\343<@q\367\274\370\364Z\275v\035Y<\0135\352;\342n\013< V\214=\2370\226<\352\353,>\301\300\016>\315\257\342;o5x=\363\265\024\275\037\202\262;$a*>\021d2\275\026o\266\275\310S|\2750[\275\275\007\2471=\252;\227\274\312\244\016=\367\254\213:\331G\356\275$\234]=B\326\017=\257&\031\275k[r={E\327<\221\226:=c\006\337<\343\332\t>N;\034\274\rG\236=K\336\006\275\007\343m=\375\307a<x\234\336=\364\263s\275qe/=\247\217!=\237\"u\275k<\010=\213\306:=a\\\374=\037\242h=\026\'6:\254}\260\274\262\324\336\275\201\357\020=4\330(\275\'\337\236\275!\312\354\275\372&\317=*5M<\360P\327=\025\'d;\242\317X=M\256\215=\335\343\255\2749\001\223=\341\2671=C\rm<w\251\347\273$3\355\274\266\323&>\365\014\214\275\346\341\334=\355\221\263=}\014\310\274\022\3759\274f/\250;\002v\356\273\024C\236\275J\370\034\275\363h\231\274:)=\275EI\310={\331r\275\215\r\260\275\2142\027=gA\334=\347\037\002<-\004\221<dCu\273\304\210W=\005\247\214=W\300q\275\256\306\322=\007\345m=\234GN<\316\340\355<\245LJ=\2424\360<!\232\362=\233\0231\2753;\265\272\034I\244\275\232\324\250:\361\323\357\274T\221\204\274\244\320\364\274?k\337=\320\276A\275\225\252d\275\203(\261=\315\300\263\274\362:\027<\220 \r\2757K\'=\374v\273=\366i\324\273\t\304\367=\226\351\216\275\201\016\210\275\017\027I\273\264\246\200=\373\236\226\273\2306\221<\347\357\266\274\023\tf\275\352\\#=S\014\213\275\305\376\177<\330x\037\275\037N\361<\245\320\330\275\037\221b\275)\006\303<\355\234\023<\331L\213<\005\366\326\274\243%\255<\242\316\267\275$\034N=\242\030\303=\035\302\220\275\220\306\250\275\302\355p;\\\314\017\274X\022\207\275\232\213\306<D\363\030\275\241*8=\272\352>\274i \037\275L\222\221=?P\324\275\344\347\005\272t>\201=\376\337\014=o\262\274\275\240~\370\274\014\373\326\275\365\210\364;-\245\227\275\377\255)\275\363\373\034=Y\243\246\275\021E\013\274\340\035\223\275u\324j=\240\362=\275\343 \013\275w\001\270<\253\337\251<A.\315<(\316W=\250\000\344\275\277\247\222\275\2339\240\274\317\276+\274?\204\232\275\320\034\r=\257\232\321\275\313\200\n\276\246\017\n\275\210\022\262\271\310_\010\275Q\204\246\274H\211\031<\205\r\325\275\027wJ\275\254\277\253\274\356D\311</\302\334=\364.\206\275-\221F=\201\355\221=f\353[<\237\360\201=\252\270\207\2759\222\\=v*\216=\032I\210\275-\022\334<x\240k\275&\325%\275w\333\r\275\243UR;\362\363\'<\002\322\317\275\304\353\241\274q7r\275\361]\000\276\333,\310=f\005\214=\256\364#=\306I\370=\254\354X=HW\201\275g\275\260\2758\372\202\275H\204\326\274;\2766=\301Y\r\274\020<\033>gu\261<\271P7=a\034\271=\3779k=L\243\266;s\257\370=\322\213\354\274\326W\324\274V\353\205=`\233!\276\337R\301\274\237e\251<\345j\027\274\223\341\235=bi\251\274\307\037\220\275a\3151<\245\260\\\274^\010\206\273\337\334P=\374\366\223\274\357\032\255\275\273\257)=\376\372}\275t<\237=\25114=\323\257`\273X\363\335\275\312\276\366\274\354\210\206<,\362\004\275\025ZQ\274\237\371~<\210D\363<\3646\r=F\264\002\276m\003\277=\000\242\303\2759\230\'=\261!\023\275\356C/=\234d\362\274q\"\201<\272\004p=\232\364\006<\360\251\220\274>\213Q;\022_F:\231\251\002=\360\233\324<Pd\337=d\r\220={\356=\275\314\255c\275y\226{\275@\030\000>\370\262\017=\344F\362\275t\020u\275\315i\327\2752\214\216=\351\277\256\2753\334\235\275\220\255X\275\364\371!\275\002\240\263\273\276\217\242=\347\n<<\t\017\t\274\374Z\270\273\271O\235<MW\372=\203\003*<\250t\374<\356\362\312<5\317\245=\033\216\274<\202\004z=\354\230$\275\252;A\275\265\004\032\274 G\200\275\257\374\006\276\'\242\322\2732+o=\353G\340\273I\373\302\275\n<X\275\373t\360\274T\260\222<\322H?<\000,\247<\250P\204\274\3560{=\322\024v=\364Md>\313\347E\275\251\373\223=\206\242\277=D6\324\274\017\343\313\274\334\254\301\275GG\332\274I\262\272={\362{\275\341\332\220\275\202\003\027\276\242)\360\274\256B\210<A\202-<L\031\221=-\3535;v\n\000\276\"*\245<\230\310\t=z\267g\275\244\200\020\275\276\020\004\276\353(\354=dP\334\275\360\240\261=\323#\374\273\335\245\217<QO\370=\340\357\262<\310\262\220\273\253\021\263=\036T\271\275P\312/\275\343\224\260\275\331\206\006<\203\027%<?6\210\275\270@\276\275T\310u\275\013\345\226\274\274\311\263=\007\271\272\27592\361=2\227\344<\277\036\243=>\214\306\275\3712\234\273\026S2\275j\266e=$,\023;agN<f\361\013\276n\013\343<\351\242\230=\226\2179;~\364\331\274l\321!=\324\365\272<:k\323<\247Br=\'t\350\274B\003\273\275\020?\376;\237:\215=\227\272\004\275 d\275=77\317\275\351\0043\275n\361\304\275]\346)=\302\010\021\275\375\177\017=\357<\327<\302\361\023=\313\2679\275L {\275\341\\\254\272\340\237=\273IX\244\274d#\270\273\325\214E;\217\335\356\274\t\272.\275W\364\r>\021\302b\274\362\363\227\275\300@\212\274\331\t\201\2748\234\267<\333\261]\275\276Z\203\274\344\350 \273\007\030\200=\020\t{\275O\027?\276\270\317\362\274\0015\\=\254{\236\2753\343\256\275\257\255\326\274\274[\350=\314(`\275<\244\331;c\302%=7\030r=S\322\277\275\215\325\010\2743\266\254\275\252|\003>Ux\340=\217\317\016=\301S\r\275\332|W=E\223\006<\331[\316\274}\221N\274\377\205\333<\253)$\275\226\327\353<\375w\267\275\006\310\203=\235B\001=\205\201\213\275V\250\026=*\367\350=\222\275D=@i<=\341\224\234<\017\272:\275\246\313+\275\2122\261=\033\274\211\274\264\302\313\2745\241\345\275\277\374\000\275\312\024\004=\344\327$=\330Q\352<\255k\242\274\332\031\212\275\257g\010\276\305\374Y=t{\350\273F7\227=\323q\212=\213\266\034>\254\275\031=GHk=E\357\245<R\017\003\275\322\026t=\274N\355=\200\020\270\2749\343\326=6AT=\206\246\207<\013\374\237=\n\014\315\274r9\236\274\262\226\006\275\306\316\022\276\230c\034=\224\033*=\237M{;\205\017>\275\036e\365\274\321r;=J\355\030\275\377@Z\275;\235\303\275\023\220\305\275\207`\277<G\374\035<\314Z\322\274\337\031D\275]ON\276\233\256N;vNt<\2625i\273\033r>\275\3178\300\274`\345\200\273\277\"\371\275\325;+\275l\206\217\275\266Y\220\274\223\333)\274\241I?=>\022\250<R\013m\274\016;\254\273c\3074\275V\264\014\275CD~=\243\260\010>\254\266\000\275\246\037/=\250\356-\275\245\377+\275\353\222\243\275\342\364\211<,h\350<\373\272\232=8\312\244\275$D\347:\247p\360=\213`\306=\002k\000\275\272\337\235<\2767\213=\355wh;w\202\246<\270\212\202\275\n_g\275b\022\235<S\337\213\274rs \272\271\221\020\2756\266d\275\023\025\243\275\016A\217=<\275\301;0\201\000=\014M\234=\261\247\345=:\003\357<$\245D\274\257\3178\275\246R\243<;\225.>\211\354\022;xPd\275q\377#<\021o@\275\305\016I\275\261Tv=\255d\241\274=}\322<\365\260$\275#)g=\032\253\t=\255\236\272\274\313|\207\275\273\2200<\205V\303<\006k\320\275\261\246\304\274\246\234U<W\304\365=\3043\310=\332~\031=\345r\347\275(:\272\274\373DM>\365\310\006\275\347B\256\274h\020\026=8;\n\274\177n&\273S\313\377;S\344<\275`\266\007\274^\261:=I\273(<\016\312\351\273\375\273\004\275\030\301/\272g\354O=S\356\234<\366\270j\275\030\213)\275F\247\200\274\250\341V\275\262uF\274\215\344\036\274\337A\227<\013\010\240=Hs\203=x\301\261<\030\367F\274FTw\275\225\007\234\274l\333\006\275\311{\034\275\004>X;\333\332\232=\266\002\207\275\nR\236;\021\322\252\274\277\325\266<\317\360\347\272n\270\233=-\205\354=\300\265\267=R\351\023\273\312f\336<\270\260a<\237*-\273p_\020=\215\323\247=\035\242\215\275\2541\341;\377\234?>N\n*\275\250_r=\315\340s=\344\026\003\276J\255\214\275.\207\357\275\254f\330\274\035\236\302<\265 \251\274?\002x\275\343\326\027\276}~\026<\033AU;\252k\311\275\337\210\206\275\032\203j=\r\177\344\274\216\361\003<P\345\202<\332\246\245<\267UP\275\002\0279<\005\353\225\274OX\275\273i\202\377\2742w_;\306a\016=\275#\326=\327\242\305=Y\242\007<\314\026\346\274\337 \023\274\025\005e<\2213\207<7\257f=\003\373\246\274\337\321\006\275\352\375\t>\366<\234\275\216\340,\275\014u\350=\013s/\273L\307\376=J`}=\313h\277\273\022\263\331\275i\370W=q\006\313\275\017\277\306=\301.\314\274\367M\265\275\331\276\312=\367*D=\036o[\275n\023\370\274w\304z\275W\016\n;N\344 \275\246\375\330\274\"\240\256<\316\006L=\005\240==\342\014\'<\017\036\337<\024q\244=\005\242\'\275\336/\216;i3\200=\343\330\252\273h7\345\274\216\201\260=s\254%=0\275{=\211\003\326\275.\3311\276\242\266\263\275\347\335\240<W\000\242<\322\024\351<\"\312q=\201\305\036\275\225\223`\2752\232\014\276\243\272\010=\263s\200=\347\215\016\275\360\313\003=\310\342\313=5\345\033\275\213v\267\275\225\374\301=^\032\200\275\373\271\224=\252\'\270\274\rV\375\274\034\364I\274\332\356\005=\r\203\266=\371\032)\275\343\344\212=tP\274\2752\374\234\275\332\217z\274\2220\007\275\035K\230=\rD\024=\367\200R=\271\267\013\275\333\271\264\274\360[\241=\240?\367\274\276$m\275* \237\275\360<\270=\215\3500\275l#\314\275\2114\031=\361IX=0u\300\275\361\312=\275\373\214\375\2753\244\312\275!!\256\273\250\033\306<m\363\211;\210\361b=d]\324<\364\301\347;\313bB\275\'L7\275\toG=n\0015>>\305\223=i\322\006\274~\356\304\275$@\304\275\226\354\020=\344ff\272W\306\355\274O]~=\276Sx=HJi=YT\004=\017[\251\275\245\370\273<\273*W\2758\361\001\274\366b\037\275\207\235x=\001\364\205=\222\341f\2754\240\262\2732Gk\275\201\353n=\363*\234=3h\323\275k\315a=\250\223\266\275\355Q\262\275I1j\274\352\227\246\274)\r\355;\202\371\036=\345;\356<\342\335)\275\007\212\035<b\242\264\274\221\270+=\311D\344=~\331\324=\211\031\277\275\315:\232<\352>\006\275\003{k\273F\037M\273\244\'\n\276\213\2047\274\034K\202=\253\272?=\013\302\030=@\252\345<\ru\004=\031\223(>Q\\E\274\235|\030\275\353h\313;@\261\226\275\321\327\027\275e\215\306\274[^\013=e\310\363\274<\273\'<\032\245\233\274H\002\273\274\220\023\241\273\3273\340<BF\"\275?\215\213<\320\217\302\273\367\273\317<j\246\340=\\T\002=\013\317\230=.P4=\252\r\231\275\216\002\357\274\r\302\257\274\300\237\215=\311\331b\275-\361\320<r-\206\274\367\257h<^d\321\275lLG=\240\017\323\274,\240\r>\372\007\320<\301\370q\2751\226(=h\360s\272hh5\274\372\026\346=\014e\323=G\007\262=\217\247\276\275t\266\244\275W2\344<2U\270:\260\242\'\275\301\376\237\275\0236\374=q\025\225:>\335p\273\337M\260\275\252\200`\275\033[!\275\'@J=S\246\035<\201\321\220\275\200?\347;\001\225\323\274\354\246\320\275V\350Q\275\312p\206<P\260\336=<~I\275]\0244=\224\010\260\275\026\311?\273\224\202p<\r\315\271=\003\034\262;\362@\277\274\202\343\226\2758\241\346\273\330&\237\275\376\225\233<_\274\023\274wm\200\275\346\3407\275/\275q\275\350\026C\275m\"\327\275\022\016\305\273\257\203\335=&\334\226<\263\002\000\276\371V@\275\364\377\306;\000\342r=\341\307\223=X\244\210=\347\"\230<\006\351,<cT&=q\030\367\274@\005 \274\315\246l=\033\324\021\276~\365\256\274\270\365\201\275Jx\236=\324\2023\275\030\323\310\274D\027\212=\300V\353<\254\035\206=\310\rh;\237\314\202\274\017\215\243\275\332\2247\274\343\376\203\274\3705\221\275\260\274!\275\317\000\243=\022\023/=\026\251\177;OQh\272E\322\030\276\361x\321=\215\203Q\275%cp=\255\'\234\273\030\032\345\275\013,\236=\355\0037\275\265%\232<\020c\332<\007{I;\303w\255;\036b\322\274\000\377\001=\264\260\217\275\212!.\275\322#>\273e\034%=\2637\354<i\353\'\275\265\211q=\214\242\261\275)n\266\275\256X\201=}c\224\274\312\220\244\275G\357H\274\333\362:=\010\306v\275\226\022\016\274\372\276\277\275\271\0216\274[Z&=\364p\006=\367\020D\275\377\233&=\275.O\274\252\261\005=\236w\371<\263\373\224\274o\223\224\275~\'\203\274!+\026\275\2740\272;\222\327\210<~\356\311\274;\332\221<\232\036\020\275\334\360\322\274\353\265\226=\331\353c=\256\246\362\274\005u\222=\007\342h=\317\270\003\276/p\362\274\031\226\250<%\013\315<\352\315\231\274\352d#\275\341\327\260=_\376%=N}0=f\324\302\274\301\322T\275Z\021\366:\t\262\021=\333\265s=\333\242\027>\205\212K\275\3627\313\275\256!\214\273\224\240-;\356i\305\274\313\024\026\275\226/\351\275\234\033\010=\305Y\221\275\321\025\310\2736\300\354\275\n\211\211<\315\345\272<\336\266\253:\331P\257\275\3354\265\275k\363A\275M\"\226=\345\240\337=\300\324\202\275\005\177c\275\n\333\232\275\245\345J=!\224\202=k0\353\274\271R\221;w\036\216=\252\302\013\275;M\230\275b\315\255\272\253\213Y\275\374\220X\275,\230\334\274o\224\310=\330\355\222\275}\361\354\275\317\270\332<C\356\327\2751}\243\274\013Q\032=\236m\216\274\201\250g= \235\260\275\307\027!>\323T\223=\013\257\034>o\332\250\275LF\207=\257<\300=I\244\223\275\224\006\027=\0054\245=: \334= \t\254\274YtL\275+x\035=\242\264\337<\003\343J=\316\2208=\032-\220:x\316|\275\036\343\016=P\007\244\275\272\277\370\275\246\373c\2746\265l=\036\251\247=6;\313=<\322\267\275iux=\251\2318\275\336(A\275\262{\026\276U\302+\275d\020N\275\267\252\300=\313\301\226\274HEn\274\216\024\030=N\035\223\275\205*\241:\204_5=\2479\303=\257h\313\275>\216A\275~+\013\276-\034\212\274\263\370\301;\025\325\023\274a@~<\"\004\273<`\0055\275\316\034\215<g\010\251=\232K\017\274\234|\356<\265\274j\275\004D\330\275\225\262\026\275gn\024=\237]\332=\017\017\224\275\265\377*=\365k\317=w\3503<\201\251\017\275\206\330]=\230\311E\275w(==\255\265\276=\231\200\262=}k\350=C\032\002\274\265\230\324<\245\264\370\275\001J\205=\304\340D\275\334\225\215\275\217\374\225\274X\344\236\274\207\206\325\274\236\305\025=\305;\203<\207\034\261\274\332\266\311\274\261\360\250\274\212\255\367\275tt\242<\245q)\275\332\242\245=J\306\201\272<u\033<r\244Z\275\0140\321=4\037\031\275\336\0276\275\366\207W=\260\216\352\274\031\256\007>\354\210\335\275\231\341\237<w\377j\274\261\341\342<\263\304\227\274lc\255\273\230;\202\275\253\211m=\337|\001\275\265q;=\004G-=xS\226\275\025\003\372<]\017\023=\211\311^=~\245~=\2545t<DK\232\275\243\274\014=#^\347\274\023\326\344<sL9=\307\374\267\274\213\273\266\273/\333\375\273\007\205\202=\376\2670\274{\014\317\275d\320\036>\025\007q<\255\251X\275\371\2661=\214#\204\274@\245^=\333\323\227;U\246\230<\2074\222\275a\323%<\333\267\252;9{[=H[\231\275\362\201\007\276B\013k\275\221\025\365\275\251g\217=5\200{= \347\327\275\375k\031\275\023\236\230=\017\257\242=\014\3554\2742)\307=|\371\205;v\267\210=o[\371;\367\240\232=[$H\274\245q\205\271&\002\265<\237\025\032\275\266\262\326<XR\220<~I\023\276\270+\303\275\264\262\310=X\347<<\330x\212\2751^\243<\023\226g\271\035o\235\275l\350\303\2759\223D\275\2661m<kcH\274\346i=\275O\035\235=`\202\335=\313&p<\322\261q\275\365\262>=\353={\275\361m\271\275\254G\037\275R\037*=\016@\306\275\267\225\203=-\325-<\302\271\020\275\271\255L<\233LH9\354\222r;\201o\024>\251\262\271=\222\205\246<\251\261\277<`\240\002<.J\371=\337\364\375=\177IL=\341}\242=-/\277\273\366\2705\275\230\2279=\315Qt\275U|o=\316\252%=*2\235=\271`D\275\217~\376<\346$\246\275\370\036\312<\317\256\240\275c\351\222\275\342\362\272=\217\2426=\002\201$\275\262\316\210\275\367s~\274\316\250\010>\242F#=tV\027\274\270$\\\274\344?\221=\210\177\246\274N2\372<\222.#<\360\214B\275\034h\217=+\206l<\236\342\016\274\353\371W=\335b\255;)o\311<\317\237\265\274X\345\210\275\340\251\221=Y\275\303\2756\221*;\341\235K\275\314\267\254\275<\023\225=\337\177Y<\016\357\366=\270aU\273R\240\331=\264hb=\235\345\260=\034q\312\274Z>\204=\315\366\354\275\330\311\257\275K\273\000=]\372\207<\364\010\210=\275\336\016=b\231^=n\325\217=\364\020v<\323\3517\275\013\277Y\275\363\347\354<\326\307:\275mR\274=\2072\244\275\247\014Y;oY\260\2757x\247=DN$=\270\000\364=\224{\014\275\233>\366\274>r\372\275\262\027O=\332~\001\275bS\013\275\303\260\202\275\321\313\013=\336m\374\273\303Q\376\273|7w\274\366\310\213<S\330\022\275\235\224\217\275t\223\371\274\235\031\255\2759n\266\275\"\250\245=\217\354i;E\370\246<\250\345\017>\010\037\277=4\356\014\275\0057\211\274\263\t]\273\234p\330=;TX=\265A\207\275\003\211m\2751\267\231\274Rn\241\275\275y\250<\221rK\275\346\004%\275]\235\002\275\347\344\204<\"\013\022\276\010\210\362\274}\351P=\365\307\222=\355P\363=otx\274+\332\224<P\262\375\274\023\262g\275\245\205m=8\n\220\275)[\020\276\\s\031\273\333e\030\276\252:\327\274u\362u\274\200w\264=\027\372\366=2\033\006=\200\235\322\274b\262\340=\356\"\t>\237\251\243<m\0246<\245\324s\274*\025e\273\352\247-\271\031\027\334=Ay\317;\324\300a<lR{\274CEw\274G\017e\275\337\312\206\275\203\332\034=\366G\003\276Q\037\242\275\203\'|=,j\315=\002+\352;\301\016\272\274q\245\251\275\347\311R=\210\271-\275V$\276=\002\221\213\275\214]\026>\342\"\231=G\352\320;e\335\032\275\214i\265=e\321\020=\034\032\365<\023g\037\275\227-v<\312\306T\275~\003\271=~\320\034<J\341\342\275\252\361\316<\271\037\206;1\304\223=h+\234=SsK=\251[\364=Sw\266=\307\240\244\274\265\301\272\275D\nX\275.\340\206=\267\255q\275A\312\201\275\315\010\220\275\374\241$\275Zs\272\275t\"L\274\271\014\331<\275\274S\273(\212\236=\315\036\253\274\367\234\237=#\307\027\275j^S\275Q-\023\275\224\'\200\274\221,x<XK\212\275\254>\260\274tx\273\275\265\320&\275\261(e=\213\217\203=8\r\360\273Hm\220=V\346\036\275\212\370x\275\206\257}\274M\001\217\275\000\375\250=X\'{=\255\340\032\275n\220\207\275\010\352\320=\224\322\240\275\361\302\350\2743#\336;\372\2225=\037\347\222=w\363\224\275\253\022B=\035\265$=\314\277}=\373&\214=S\251\206\275\263R\324\275\355a\212\275a8\232\274\0315\023=\210\330\027\276L\206N\274j\343\030=\035;\r\276\227B*\275\256E\214=L4\006\276H}B\275V\025\241\274!\023\372=\355t[\275\255\275W\275O`/\275A[)=\234LZ<]\266\036=cE\r<+\336\000=7i\304\275#\220\233\274\233\216\231\275\361\232\216\274\036\330\350<\023\2074\275\223\221\234\275X\266\215\275\333\002^=\234\3652>\353\262\004>\227\231\337\275\313R\236\274\314~K=\032C\310\2745\177\004=\244^j\275\\W\356\274\335\377\034\274\260<\t\275\353\356\211\275\244\007\203=\t\002\300\275\355\261u\274OM\034\275d)\321\273\347\007\302\274\253`\223\275sag;!a\302<DJ\020\275\204P\026\276-\322\307=\317+\207\274\255\306\375\274\025|?\275\206\361\217\274\272\361\025>7\200\203<~\233\363;N\2637=R\245U\275\354\343\340<\031\240\347\274\301\356\177\275nc0=\354g\353\275\227+z=\313_\002=\340\3270=\200\255\364<I\316\260;\376BG=\250\357\007=\373$\017>\263\335\234\274\203\232== KQ\273\302Z+=\200\322\231\275\213+x==5\363\274\327\014\207\275\201c\330=A\020\2039\377)\345=\315\272L=M\234\236=\361?\303<\2426\005>Sk\311\274\323\327\211=\362\277\265\273\337\277\005\274\275l\"<\024\350\336\275\340\247n=\233\203\225=\321~o\275\307\367\365\273(\3416=j\250u\275W\233\t:\204\220m=@Qo=AoP=\220\370\337=}\211\234<g\006\010>\344h\032\274\t\357A=\306\241\025\274\247\260\323=\262r\354\274P\321^\274\365`8\274F\302)\275fC#=?\201\177<\231\025\311;\221s\001=`\365\300=\207\031\251\275\232\234\r<\263\227\000\275>\027(=\347\361\204=\232\001\316<l\327\327\2734j\002\276\327\327\016\275N\360q\274b\t4\2753\200\363\274\02226\274\374\\.\275\3504\303<\250\032\302\274\2479\321\274\305\325\223=S,8\275\204&\"\274-\311,8?\246\267=\377\276\037\275L7\261\275\374\024\254=o\337\261=\340w\341<\262\241Y=\264\265\222:Y\237#=\330\'=\273\004\211,\275\t\020f\275XJ\217=\352Yo<V\212\254\275\355N\004=kBf=\320\303\000>\201\031\\=\030\375\227=\244t^\275\203\276m=\024\037\253\274*\317\264=|\271\224\274Y\005\370\274\372W\200\275\332\013\003=Q\201\200\272\253\213\261;\202\253\205\274@\273\'=\212)r\275\334\022\022\275R\005\311=\036\212\315<]Y3<\254\266/=hx\007\275\277\340\247\275ZE\204\275\375\345-=\353\363\215\275\314\260\325=JTj\275\n\367\241=\035\316\362=\341\336M\275\201\250\312\274\230\331\215\275\247x\262=\217Q\275=j\207\335<g\037\024\275Q\247#\276\2150\261\275\266\265\212\275\235\376\001=\225X\275\273\335\036\302;\254@\372<^\341:=-\3005=\221\201\033\275,b\366\273\3463\037=l\310/=f\312\311\275\\OT=2i\326;0}X\274\035:\270=\203\376{=U\303\277<\245\373\221=\326\225}=\222\020\332\275W,\302<\200\246m\274\024N\227\2755#\263\274\315\216>\274i\202\225\275\352\003\227\275p[\001<\224\302\"=\301`\215=:\032\300=\220\tK=-\317\261\275x\301>=.tW\274@i\257\275\031\030\320;\017\356\323\275*w~\273I\333\255\274\016EK=_\2120=\306\231\244<5?\326<O\002\210=\366\253\210\275i(\232=\260\200C\274\232\346\032\275\377x\207\275\177M\206\275YC5>AY\216\275\035(\310\274\347\271n=U\023Y\275\241\032k=\264b\303\273@4\221\275\326\023\375\273\025L\373\273\256\244\273=4\003\334=\372\200\271\275\013H\177=\225\016\263\275\022\204\222=\316*\222=\304\246\234<\371\303\302;O\323\n\275\275e\342\275\334^\217\2757\222\'\275\211\366/\275\370L\r\275\336J\342:\266\352\240=p\233\216\275MX\016\275\357\005\241\274\257zU\2752=\337<\341\312]=+1v=O\304\014=o\351#=\257\271\022\275\366p\'<\256\013\267\2748Tj=\372\271\217=\202\227\013>\213%\017\276\304\206\226=\272\372\372;k\344i=\237\250\305\274\337\301\265\275.\026D\275dd\177:\000\200B\274\365K\244\275G[\352\274\025\375\376<QJ\213\275\341 \214\275\'\207\374=K\274\243\275g\341\226=\267\376\240\275\242X\033=~{\300\274i\275\230=\302\233\331\275\\\";\275\367\306\202\275\352c\t\275\220\221,==\345\246\273\270F@<\3323\036<\320(\225\275 \262\261=\274\212\006\275\223\340i=b9\013=\037\320K=\237\301\315\274E\330\266\274\204\223\320\275\303\336\020\276\010 \321\274\"/g\275\026\325\231\275\343\313R\275\303y\023=\013\270*\275\211\237\257\274\244\000\235\275\373\034x=\354\216\345\275\342[\351\275\210\217\025\276\346:@\275q\021%\276\036\361S\274_o)\275\344)\242\273w\010!\275\210\324w\275k0\020;\233\261\210\274\264rA=\004U\346\275m\364f\275\0340P=\267l\221\275\177\276}=\206\017\264\273\225\302\205=\007\377W\275\253 .=\316\221\377\274\245\322\335<w}b\275\355\260\216<O\375D==\033\203<\350\340}=\2655j\274\305\240+=\226I\216=\2161:\2750\256\030\274lE3=\332\217\315\275\246\305\210\275\311\000\331<\215]B<\031\376\357=/\031\253\274\271\251\273<\342N\022=,\267\005\275\r\201\262:\025\027\326\275\262M!9&\035!\274\375^w=\324\341\235\275\366\343\335=}\010\275:\345\260(<@\215{<\321\356\025=\345\177@\275\322\243\241=0\240\016\275_\355~\273T\254\032<\262\274\213\272\372\034\236=a\017W\274\323\320%\275<\233\326<b\364@\275^L\226=n\217!=\345\342+\275\215\267F=/Z\326\275\035+\325=m3\231\274|\222\353\275@\203n=\230\371\342\275\223\224\267<\224#\003=\003b\005\276c\014\240\275Q;:\274\252\331\023\275N\270\n\276k\311\326\274\241\336!=\177\2554\275\237k\177=\010J\263\274\207\224&>!\027\231\274\225{\241\274\2572\034\275\304A\321:\2153\205\274\327\353G=\234\036\336\275\254z\213\275\272\232\226\275\205\244.\274\313\305\002=\331\237\027\273\2658h\275x\357\334<\010y\214\275\331\201V<\300J\376:\202\256\240\275\242B\274\274\320\003\247\275\350\312\267;\036\257\206\274\234S\210=,\365\025\275\252\035z=Z\202\365=nQ\304=%T\203\275#\331\265=\022v\205=\301\025\244\274\230i-=\361\024\000;\2423\202=[\217\327=\036\273\224\273\322m\013\275\250\013\000\276\376|U\273\267\025\240=\242\364\262=aQ\000\275\307W\035=\314v\007=xj\200\275\203\264\n\275&\216\326<\212\231\361;=\271}\272\206\325\253<i`\366=KE\256<\347\r\333\273\352`N\275V\211\240;\236\371\330\274\014\202\243<Q{\345<\034(\311=\320n\247=\214U\030\275?\0074\275\374\342\034=\177x\234\275\363w\320\275/\3458\275\315\021Y<\242\254\242\275r&\030=\"\315\301\273\3354Z\275\023\374\332\274\010\2323=7\0222\276\262\327\007>\271O\213=2@\307\275\256\315\304=\365\347^\275\010\312\210=@U\353\275\344\016\364\274N\'`=\367\350\377\275C\236H\275\214\223\353<^\331\241<\325Y\020=}o\251\274\210:\341\275\212=\\\274\274N\313\275\244\030\002\275,C\366\274<]\367\274\021\250\315;)<\236<un:\274\363\236\177\273*\tm\275\216 \212<U\002\256\272V\037\030\272\253\333\243\274\355\360.\273\342\375\004=\001+\024\276\321\360\316\274l\016\244\275\311o\276\273\233\341\334\274\342U\207<\302\037Q\275CbP<\307\014\201=h)\224=\'\267\316\275D\211\017>1\326\366<B\3318\275f\327\n\275\025\203\r\275\025\000b=\016U\010=\374R\003>\227\212\213=H\227\336\273\nv \275\301\256\351=\020|\244\275\031\026\247\275\2020\300\275r3\263=\037l\357\274\217\264\001\275\305S\352\274\27131<3\346\254\275\302\3100=J\265\244\271u\352%=\315*\227=\325-\310\275\032\220O=\003v\004=\317\016\313\274I\343\261=\370:\r\276*\230\314\273\345E\271<\242\021\253\275P\016Z\275\\F\200;W&0\275\353\nH<%.\270\274!:\177\274\334i?\275\332\332\253<\177*\254\275\017\314\375\275\263\361\032>{\207&<\246\275\235<\326:5\275<K\230=\353\253\023:\206\0041\272%5Z=\372\267O<\270-\030\275\332s\001\273\242\320\250<\344_g=\253\242\302\273\241\004\323\274`\230 =\236L\210=\316B2\275C\2125=\315`\227:\311v\016=\307:\016=\017\313c\272+s\316=\276\"\003\276{\021*\274\341\225\200=\221\235\365\273\001\n\254=&\033\251;\207\251\210:\230ld\275\016\356\003\275\242\037\020>\324\305X\274\345\305\002>\243\034\355\274\037\253\330\273\360E\027=\317Ll\274\210\217\225=B\310\236;\311\020\267\275\270\200\t\275\004=\266<E\214\342\275(\227\024=\227\240\t\275\005\301\342=\"#W=\346\251o={rs\273\220m\231<m\251\244\275\024\347O\275\262\001\374\275\361\314\244=O\262J=Q4\266\275\004L\241\274k\037#\275\317\325\216<\204(\311\275b\376\002\276\322\2453\274Xq/=d\346F\275\006w\246\274f4A=\363\013\207=\262\340\205\275\232\2551\275\332&)\275\231\021\020\275\010\022\240=\213\260\206\275\n\177\227\274R\314\273\275\321D\202\275E\366\217=+\265\241=\310\006\356<\032Q\021>j\314\260=\030k\201\274\355\224\034\275\236%\250\275\351\234\341;\210\313\036\275J\026\376<\254\276k\275 \222\030\275\362E\177\275\020\037\300=\336b\003>z\316\323=\345\306\330\274<\021\234=\376\r\363\272g6\332<>\313/\274\257\205\005=/\354\352<(\352\346\274\021~\225\275\364\372\322<\342T\301;\364C\r=\355l\260\274\177\030\345<w\022\222=\224\374\257\275\363\314\201<\242\313\037\274\302\355R\275\324Xy=n\227\006<a\022\275<\231;\236\275\006\247\212<5M/\273.\207d\275\234)\230\275\3223t<i\371\260\275\232\3567\275|\\\267=\206Xc\275I\270)\276\231\326\035=/\355V\275{\311\003=@\316\205\275\341!\023\274\275M\324\274\374\353\027<\177\031\237=\232m\252\275#A/\275[\224\301;Er(=\372\371d=56\240\2757\000\335<<L==\262\242\013=\252\030\232\274@\276o=i\210^=&\3720\276^\377\027\273t{\350\274\364\250\254\275mz<\274\316\276\307\275\007Yl=.3\230\275\',\355=gq\032\275\262\324_;\372\244\323=\311hW=\241\326<=\357G2;ca\265\274*\034&\275\223\307\037=l\333\315=\035\020\331\274\207\362\342<A\177\n>\346\016S=\247\006N=*\032\000=K\177\361\2754J&=ZH\035\275\203m\216\275\363\301\233\275aI\304=>s9\275M\355\362=\001\230B=\332d<\274\023\365\310\273\341\322\230=\354\272\326\272)1-;o\010\240\275\344_\371=ES{\275Es\026>:\236!=\017\252\275\275\211\031\017=^\r\264<>\027\250\274\3017\024\275\256\005\222\275\235\035>\275\270Z4=*1n\274\330\177\277=}\377i=\316\025\201<dS\212=\3767\265\275\355\334B\274XI\037\274R\035s\274\034\266|\275\221\023\312=\302\'\024=\027\353\000>(n\207\275i\274\315\275\304\352\251=d\337\341;\334\306\010=\211\002\312=\237\352$\275\311F\311<x_}\274\201\213\342\275\344qf\275\226\247\037\274\000\270\364\274\3447\264<\373G&<\320Mn\272\321\363n\274t\217\014\274\316\021]=\004T\025=\325\202$<\270\233)=\347\211\370<\213\021N\275\232\235\026=\342\247@\275\316\225\010>=\'\206<Lp\243\275!\276\362<\320\245\001<\243\257\301<\277\262\010\275c\306\247<J\023\245=\211A\252<\2654@=\202\000\334<\200C\\=\207\035G>4b\330\275\206\227\336<\r\317\253=\367\311\364<$g\201\275f\005T\273\217*\201=o\311\356<\177P\014=W\306.\275Di<\274o\340d\2753\304\311=\2139q=y\324m<\213l]=\342\210\354\274\272\362\022\275\271\211-\275|\276\204=\017g\215;7f\333= \013=\2755\260\013\275\326\260\202\275\246\377\212\273\265\311c=/]\363\2743R\234;{\034\260:I\023+=\177Y\177=e\260\"=\343E\001\276^P\022\275U\037\361<\001Oe=\"3\325\275OhA<\345A\035\275\354\221\206\275\336\210\007>\242\242\351\275S\373\233\275|\327!:\016\215v=4g\330\274\351\243\306<\215\260[=z\035\213<\301t\265=I%\024\276\004\322\347\274\034E\r=M5X<$\233o\275\336\254?\2757Gb=1\305\300\275\345\363\333\274\376\303$<\'-\260;\226v\367=C\026\241=\034oA=XB\016\275\253\2621>`\210\254\274g\003s=\230\262\260\274\210EQ=yH\235\275\"\241+<\241l\302<xM\352<\267t\030\274\270\265\350:oR2:\214n\334=x\352\'\275\250\362\203\275\275\360B=\000\376\021>\257\343\002\276\260+0\275n\2634\275\013\206y;\305\2627=\216\212C\275\204\373j\274\030\226@;\220\007\200<c\005\'<\3722\250\274\3276\203\274\200\256\252=\210V\262\275\376!\215;\016\274+\275\265?@\275\353v}\275e\035\306=\324\305^=N\217\244=5\212\t\274{x9=.\366g=7\317\274=H\270\005\275\377\225]=V\271U=\313\203\223;\264\245\343=\276\244\215\275YD\324\273K\303\205=v\253\221<\356\027\247=\265\371\334\274\203\375\263=Rz\372;I\353\312\274Q\212u\274\332\255\003>\2561\330=\201\255\257\275\313\317\223\274x4\333<\013V\226<:\007l\275\030\216H=\022\031\372=\200\303X\274\261\344\006\275\310\311\340<r\247\366\2747\301\220<\337\334\203\275D\212\032>\215\020\204\275\203r\272\273\006V\201\274\023\367/\273D3\232=\362\364\037>\312_\246=\030\220\361\274b_P\275n\3207\274\264\344\365<{\034<=;\226\275\275H\n6\275\323\337\356<\222\231\031\275\332D\035\275\324\274\201=\320\214\374\274\r5w;\346\301K\275\236\273+<8\n\"<\302\010\352\274\000E\346\267\3107\204=\251sm\275\254\032\354=\325\361L=\327\300$<\236\257\034\275Nq\360<\374\357)=\000\322\360\273Vi\210\274\345\274\267\274\237\271A=r\213b=\277u\216<Hk\333\275\200\237\365\274\020\nY=2\373\220\273\373\317\004\275\353\327\254=\242!\261<\001s\353\274nF[<\035\242C=h\337M=\250h0\274\242N\360<\201\201\352\273\320e*=\243\340\337;Nj\307;\237\366\247<d6\223\275\262ys=x`?\272S\177i;M\277\256\271\221p\262=u\230X\274\034f\255\275R\272j\273L\323\237=\373X\332;_ad\275\255:\007\275\017\337\370=\034\222^\274\033\252x\274\323\265z\274Y\367\215:j\346\002=\245\322_;\267)\307;\325\375\'\275\325\225\016\276\231\0373=\264\r\217=}\362\277=\256\211\212=\316G\320\275W>v<C\004\306\273\354\305\"\275\346\336W<\177\241\324=`|\216<\022\206\024\275\233d\016\275\224\332\221\274G\225\275\274\311,\371\274\206>*\275*(\301=\366T\306=~6G=y\222#\275Y\022\212\275\023\234\225\275R^\226\273\332\237\246\275\177\177\332\275\301\371K=\264$\031\274\277\034\333\273\231\324T\275\317\227!:m\206\271\275\267\320C<4Q\264\275x\365\246\275\330\027\346=\037\275\301=E\216\263=p\263.=\225\306\253=,\320\244=\242#E\275A\220\266\273Pk\002\274\340lZ=\222\271i\275\255L$\275a\305\376\273\007\354\024>\201\202\242\275v\355\033\275\036\376\316<\022\375E\273T\352u\274\300\375\335=\217\276\177=\310\n)\274\227\350\355=\032\245K=\364\335\262\273W}D=\257[\377\275\021\306\275=Y\353\200=\312k\276<\203A\315<\377\355=\275z{1\275\214:\241=\031\351B=\222\246\322=\200\236\025<:\005D\276mJq\275\372\235@=\201c\206\274\010\203\362\274\361\335X<\335.U\275]\025\215=\217/|\275_\350\360\274xS\001\276r\375\225\275\036\346\242<\234\n\275=*\201>\275\"J\005\276\037\036\206<\264\200\317\275\013\212\257=\030\347\314=\013]\320<k\231K<\010K\027\276\r\032\002<GEC>}^]\274\233\365K\273\210\240\010=\373\030\367<\233S\246\274\301\272\313:\217\331L\274\272\345\t>\202\357\255<\001\277\250<y\3004\2757\270\301\275\207L\203\275\300\324\352\274\363\311\360\274A\372\200<9\017\236\273\326\337\225\275|\204\233<C\323\223\275\200^\332\274\020@\004\274\370\206==|\336o\275\rI\317\275\004\357\247=y\373\223<\017\2243\275\3178\211=Bn\307\275\263\355\367=\340\337\324\274$\013\274=\347\260\301\274Rb\211<0o\375\274<\265\311<k\367c=s\226\262=\n\024\267=Vw\207\275$L\242\275$\2128\275\303\333\255\274\317\306L\275?\tR=\210\230\377<\344\231\346\274\232ms=EL&=M\213\014>|\2572=Wa\n>\276\243\364=\304\256\300=\277\033\342\274.Af=^ /\274\257\314A=\235`\321\275-X8=+\271\320;\273/\312<\001\321\250=c\340\233<\231/w=XW\352\275\212\352\221\274\271\346\301<zE\024\274\367\356$=\240\350\317\275\235\315\376\273h\307\265\274\335\360\'=\347\325\271<\214\004\316\274\034\027\026\275`\234\223=-z\361\274\241\213\006\2757\353,=GY\273\274j\225\330\274Z\220\260\275t\227\210\275]K-<\277\203\004=qp\220<)\203\225=/j\r>\311\002\353\274s\314c\275\n\347\353=\340]H\275|\222\036<4b\215\273\255\361\214\275\375\305\346<~\247\201<\257\032\352=1A>=\203\262J=;\322\035>\314.\220\273\261G\266\272\010\345\206\274\034\036R\275\2056\363\275\256s\274\275\202\323?\274\026>\231<8\272\217\2754\373\014<\340\343\375<\274\341.=\211\371\314=\241\026\301\275[\253)\275H\025\301\274\222\320[=\206\324\252\275B\375\316=\025;\207<S\010\301\275\336\362N<O_\320\275\355\330D\275\'\354\356\275|y}<3\2339=4\245\205\274\270\364\005\275B\024\202\275\356\nB=\346G\216=\232\222 =\372\310b<F\311\203=\2060\005\272u\224\006\276\0004[<\215r\273\274(\321\337<\266J\205=M\332\035\275\253Il\275\177\331C=9T8\275\257G<=h\312\225\274\361\0356\275\r\205\205=g\321\351< c\254\274o\330<\272(z9=\010\201!=b\244\374=\260\\,;\353\275R=\370\001\313=\2501\233\275:\200\247\275\256\261`;d\215\367<ln\310\267\330x\210=\322\257\273\274\230\370\014= \334\225=\032\317\317<\0241\301\274\006e\322<\007\271\302\275\327\350u=\013\371\265=\016\000$<\315W\200\274\236\037\351<E\203\371<\223\331>\275\225\2228=*\220s\275\024%\255\274\270N\010\276qN\205\275\3714\304=\211\035\r\275\226\036\275\274>\212\266=n\007\375\272\352\250\215\273\016d\251\275\302\213\021\276\003\345\227\275#5\022<g\303&\275\307\267=\275=\232\313<\253\204\245;\312\003\222\275\300v\0249+f\323=\321,\215<\350\200\213\274\237-e\275;\232\340\274f,5\274\256\0037\275\252:\364=w\265\026\275\235\343\347\274\000:\277<\307\212\030>?\355\237\275B\373\212\275\202k5=\347\033\005\275\300\022\255\272\215f\222\275*\272t<\375Kt\275h\262\"<\310n\252\274\335\003\t\275H?\210\275\261f\303\272\303A?\275Y\010\332\275Q\270\225<\032\305\207\275$<B\275\213H-\275;_P\275t\004\025\276\256\365\326\275\251\237\247\275\347u\216\274\373\226W\274f\224\275\273\261\360\375<\260.\020>\300\221\225=\025(\370=}\273\237=t\330\232\274}\261l\273s\rP=\246\204^<\2714\354\274\276x\327\2757\256_<\2346N:\266_\024=\300\236\026\275\343\370\210<Z\333\227\275\250nn;\312\242\037;\025\302\275\275#\327\372<\206`\306\274\270\240\233\275\305\377\204\275\\+\360\275\017hl\275\257J\025=B\310\371=\373\315)=\331n\320\275]\\\374\274\375b\340;\206\353\306\272\220\256\361=l\237K\274\321\263M\275o\304\205=\344\204B\274\253\001.\276U\212z:\276\2028=\306y\253\273\225\252$\276\032\336`=\007xG<\n\226\322<Fm\347\274\030v;=S\235\226;6\216\215\275F\217/\275\222j}\273\217\204*=\313\206\010\2751\357%\275t\363\312\274\2527V=\006\\\277\273\253\330\031\275\240[\232=\212\341\264\275\221[$=\265\014\250\275[zz=\026I\032=\357\247\221\275C\255\r\274\377m\021=\340\375\017<\364]\207<\341\267\371\274\313lv=\303\325X=\300s\022=oT\255<\215\364\260\273J\344\302<\231\010\222=L\366\021=\255\353o<\206\246A<\351w\342<\253\004\372=[\217\243\272\367D\240\274\346\236<;\237\r\033\274\026\230\004=Z\362\214=\3555\241=B\223\021\275\376q\337\274\336|\244=~\353\265\274\'\332\013\275\035\240\270\275\237\3161\275x\341V=\004\301\313\275\240\033\201=\246)L\273\017\364\254<n\337E\273\016\"\222<\013\324\021;\353\242\206=W\211\353<D\345-<\317\360\005=\2400\'=f\272\236\271\204N\2749\334\251\037\274V|\270\275_\363\357\275\304\023\374<\326\006\004\275\264\330\257\275\326\212A\275\366\214\254<\202\250\354=\243\200\246=\023\007=\2753O\362\274\024a\235\273\266\375\'>\363\227\213\275A+\271;\017\010\364\274\347\324|\275\355\245\222\275\354\r\241\275\264\001 \2739\235\302\2745P\325=\215s\343=\352\351\331<\006+\354=\tU\235<=]\004=~\375\316=2\356\024\275\355%\360<\025\\@=\324\265\205<\204\370\004\275\364\345\003\273n\301\007\275O\3759\275\330\257l;\332\331\226=\350\355X\274\023\376$=\243\366\005;\271I\255\275g0\023\275IG\337\275f\302\377=\361\211\230\275\333hB=\314\r\272<\2078\300\274\024\'\333\275\267\376\303:\265\213^<\267<o\275\332\370\337=\262\213N>6\221\264=\370d\031\274#\3705=iU\005\276\257\023-=\t\037\242=c\004\014=\332\322\256<=\313p\275S\346/\275\204\177\300<.\213`\275\244\206\356=4\255P\273G.\275\274\007C\225;\333\320*=\025\327=\2732~\251<\211JN=q=\302<F(\330\275HF\330\274\275Y\246=\263\342\370<\217\014\273\275\022k\310<\367\343\311\273\362\3418;\304\317@\273\277\340\364<\266\207\246\275\233\200\321<\273r\374<\271\257\244\275\226>\301=\225r\232=Oy?\274\275\316\222=h\320\275=\213\235;\275^[\240<\315\322+=yD\352<\310\352\247\275\355\223\026>J\037>=\230_A\275\374\233$<`J2=b\364\224\274\275\025\014=\235\365E=kC\340=(JU\275\274\363\236\274\353x\3759\303s+\275\222-\323\275\375*\212==0\223<\027#\214\274\034\306\t\275\363\371u\274_&\271\274\366y\217<\211\344\021\275\235\211\223=\016f\217\275\277\304\350\275\270\025\330\274\211y\021\276\234\246\n\276\366A\377\275\252\'6\274;\236\312\274\247\232E\275$i\215;e\243\233\274\237P&\275\267\031T<\335S\267=[,\325\275_\351\371=\3243\374=\223~\370\275\0006w<s\345\324=\250\375\324\274\307\034\'\274\211f\300\275Q\374\036\274\226r\026>\0046\270\273K\013\346=\360\237><fj\014\275\312\032i\274\236\2438=\306&\250<\353\242\365;xK\365\275\211\361\215\275\212\303\r>\305N\234\275|)\313\274$D\220=\366\3333\274wTa\275\265\324$\274o\\\233=\351\201\214\274%p\032<\375\252\305=\210\323\325\275}\323J\275\217\266\372;\252\2019=\3255s=\nJ\354\274C\004\n=\227\266\364=\r\310\357;T0V=\232q\235\273\352?\255=\030V,<,\314\261\275\035\350\\=\344\274D\275Mck\275c$\214\275\r\343\347\275\304{\031;\344&\204<\025T\264=\376\221.\275\371\366\273\275\245\273?=\321\207|\272\0334\t\276\3378\244\275n\254\200=\255\251\264=\033\241\363\275F\2507\274q\242\212\274\026t\234\273\035\331\211\275\\\004X\272TD\303=\246\270\247\274\224\325\277=\027~\034\275;\252\263\275\2351{\275\273)\262;i\222S\2752*d\274\341\314\005\275\262\n\217\275\212.\343=\374h\022=\224\235\254=\203Q\204=\265B\r<\311\363Z\275\240\220\036=\\K\202=Vx\231\2757f/\274\252\204\302<\020Wk=U\254\254<\304\355\032=\307-\204\274S|\026\275\024^o\272\204X\234\273\031D)\275\\\005\241=\351\274\005=\367\256\313=\022\206\321\274FY\303\275+\036d\275\253\261\367;\266Ui=\020h\206\275Y\242\017=>\262\256<_)\275<B\336\025\275\232v\264\274\240\341\004\275\362\230\264\274\213\202(=\211ej<ey7\275\365\031z<\332\272\030=C\321\212\275\2439\220\275\261d\017>,v\304\275\230\\\233=\3346J=\275\361n\273\275\"\327\273\237\304\222<G2\233<7\322f=\211\340p=S\313\003>\321Q\023=e\343\237<\026\224->\334\336\025=\354\234;=\224\332\313=\245f\352\275\273\366\364=\312b\212\275\361\215\316<\316T\217=h\354\323;\326U\247=\031\263\212\274\247\314\362<d0\305\275COa=\225\225\307\275\220\3051\275\231\001\n\273lQg\274X\310~=\262\256t\275\330\245\020\275\325*\224\274\213\213\237;p\241\204\275EHV\275\314\026y\275\030\360K\275\372\314\036\275S\362\020\275O\232\277\275\032u\315\275\231{\204=P\027\326\274%\207\007\274\002I\016=\376\345\250\275\3521\007<\347\000-=h\220\221=\376\363\206<v%\223\273R\000\303\275,\330$\274G\033\260<\\\th=*\260\022\274_(\177\275k\365\'\275\362\351\324\274\270\330U;j\023\332;\271\371}=`\361\254<\372\241\254=}l.=\311\231\333\274S\340I=\316d\226\275\001\2262=\314\364\006\276\362\346\260=\236\341\255;)\300S\275\002\370\026=9\264\227=\010\2365\273\327\'+\276,\"O=\02531\275\301\330\013\276\024N\332\275\330\361\017=#\251\204=)\270\227=!\002\313<D\030\204\275\311\270\033\275\330\327\001=\313\243\252;E\3514=\027\222\324;\260\330T=P\226\256\275G5\016=\243\211\370=\334\331\221\274a\020\021\275j\210\226\273\237\220\331\275#\014\331\275+\010\237=pN\017\275F\275\363\275\321Q\235\275\354\350\322\274\002\026\212<h\215\301;T\342\330\273[\323\212<\0324s\275\266\221\314<l\270\316<K\356\232\275\2745\266<7\335\032=\"\014\212=|\221\234\275\230\336\211\275\350pF=\272=\234=\273~\325<\300#-=8\355\355\274\316\302\353<\3467\t\276\006\271\017\274\262/\262=qVB\275\033\213\220\275[\373v=\347v\203<\017\302\001\275q\262\254\275\001\345F\275\234:}=-\362\365\274\353V\244<X\303s<\370\375h\275$9s\275u\016\301<t\353\341=`\202\003\275A\363[\275-\374\002\275\271;F=\367\244\247=\177Q\020<\3118\'\273&(7\275\345\332@=87\000\276\335\n%=i\3000\274\020\027\013>^[R\275\221\003\257\2751\026]=\206I\230=]\356\332<Y\306\000=\220\265\241=/[\221=\271\344\307\275\014\331Y\275\3679\027:\013V\373\274wf\022\276~\262\370={\372\322=u\265\372;e\342\217\274\031R\355;\315\266|<\310\246\007\276\252\2551=\215i\022=]\347&\2751\211q=\235\016\007\273D\331\235=\242\226\271\272\035L\304<.\202\010>x\326N\275S\360\233=]\235\224:\340\345\267=1A\233\274&jS\275/\237\255\275Q\263^\275\026H\356:\263\247\222\272*\330S=\232\370\223\271-\037\010>\033\"\361\274\002\r\301\274:\251\310=\225\242\256\274\360\201\227=\274~\222\274\235\3776\276PU\217=\301\r\247<\235 \004>\311\340\211\275D\345\342<\213M\200=\357\313\202=\"Q\217<\201\203\232=^:>=K\275\265<w\307R=0\361\377\274\311Q\224=Mo\231<\211\272\212\274`\363\303<\357-\255=\023\3321;\365$a=\332\322\232=\241\224\033=\375\222\307\271\326\245\r\276%1\312\275VF\344:k?\323=\357O0;G!@<\307\332\201=\340\025:=\203\216H\275?_\r\275\300\355\373;-h\261=\333\0374=\277\026\005>I\246F=0W\201=8(\020=_\216\204=h\344\214=\343\3369<C\242\360\275\367\361\357=\000\226\272\275\372\035M=Ddq\275{\371\006\275h\312\001\276 -O;L7R\275\322\230\016:\357R\014<\341\261\250=\363^p=*\373C<\261-\216=\2161\315\275\246\256\337\274\310`\237=\315f\023<\222\250\231\275`\353y<\321+\235<C*x<gpR\275\355\260|=~\255\202<\263`\347<9\033\360\274\275`\020\2751}i==\025s<\200\017\014\274\255\242\201\275#y\302\274D<Z\275\213\013\237\274Pvy\275\317\315\010\274d+`;\315\207V\275\227\372\222\275\214=\226\275\342\372\352;\265\243U\273\332C\214=H\343\235\272\0176\036\275\373S\271\274\341R\234\275p\374\271\274v\224\221=gv\014\275\274\316\022\275-:\312=#T}=\351A\200\2751\230\365<y\0002;\300\231q\274\twC\275K\021\254=FK\254\273p \216\275\332\334\232\273\315/R\275H\220\260=\367\025\376=4\273C<\251e\014\275\327i\006\275n\377\301=t\300#=\201\225\333\275\366\3140\275\343d,=\274Cx\274\342\223\220\275\312n\005\275\362\013\333=\022\264\263=\355\302g\275\250\214\020<\214\233\237\274\3047\265=1V\372=`\254\263=\313\303\"\275\001ZY=J\305\305\274\367\273\271=\273\017\307\273\363\362J\274\0251\235=\377m\357<\214n\233\275\301>\227<\026\020\311\272\214\3425=\013m\243\274\345=(=\350J(\275\233\315\264\274\300O\301<#\315\275\275YW,=\022\271\222<\300io\275B\263k\275\375\203\003\275\252d\245=\304T\207\275N`\024=\021\367\375\274\262\226V\2754\2643=\337\227J\275\231\304\344<WF\217\273\"\260\246\274\375uH=\304\325\223=\246\322k<\356B\021<[\005\311=q\325\274;\331\305\272=\013b\230=\340\250A\275\312L\354\275k\344D\2756\031\020\276\352\364{\275\235\222\234=\372K\003=\362V\227\274\274\260\021=E\300i\274_\266\220\275`\255\244\275\3159\216<Hu9>_\361\341\275\365\261\'\275\370\013\345;c\243\311=\320b\216=\321\306\020=n\336\237=f\250W=%4a\274m\240\316\275\002\231\240=K/L\2740\243\364\274\333\027@\275x\323\322\2748\245y=ZS\201<\241\260\252;\0225\'=%\034\217\275.\206\013=\322\236\001>\241\031\206=\331]\234=:)\024=\'\303\301=\210,\266=\240v\217\275a0\320<\230\331\3609{[\340\275\003\241\035>}k\350\274U\3478=W|\254\275\033\016\200<\337\177\202\275\244\236\355<\272\"\366=\340&\231\272\232\334)=\017h\223\274\316L\217=\233\214{=\375y\222:\266fs=\271\007\225\275\2123/<\333\254\334=\035B\224=*\200\302\273-V\317=\232\311l\275I\3247=\371tr\275\345k\341\273\350K\\=\256H\250;ay\302<\313\0178>\242gO\274\363\220\322\274\300O\332<\276\213\270;\326\362\221<S\3460=\245u\321\273\331\221\270=&\010_<\3673Z=\3047\242\275q2\252=\326\"\203;\351\003k={\360\250<\035g^\275\2273e<\365\035\304=\024\344\327=\202o\231<am\375\272Q\203\214<Z\353\277\274\242\340o\275\037\373\016\276-RH\274<t\031=\3132\277\274\373)\242\274\004]i\274\316\323}\274ut\317\274L\306n<4\2573\275\366\370\307:l\261\373;Z*\310\275\305\302V=\002\276u=\342x+=\242\263U\274\367\"\221=\025R\356\274\274\377\215\273\252IT\274rj\202=t$L<\371\005\354\274/\371$\275+\255\276<cI-\273\321\333@\276\240f3\275\334\335\226\275/\323\032\275\330\321\200\274qW\203=fa\262\2755!`=UD\026\275\n\270\217={Q\304<\356\235\262\275&\242 =f\245\233=\035\2460\275\331\241j\274\312\227F=\357\023\'\275\335&\253:{?\331=`\022\350=n!\341\275Xs=\275\231\247z\275\037\024\024;\366\312\213\275\327\205\007<\251O\217\275\331\252\246\273\313\336\320\2738,\303;\350\367\231\275\234<\325<\204<\267\275\225\307\303\274\007Y\217\275\3572\277\275\375\257Q\275F\263\326<6a(;M\260\260<@\247\224\273\346\2216=\3678\373\2741 \334<\315\277\212\273^\300X;\274\321\316\272m\270\262\274\332<\261\272cP\005\276\226\366\224\274\324\336u\275\333&,>b\232\211\275i\034:=\257) \275\373,\013=\262\226\207\275\307<\226\274\220\0208=\"\207\271<\331\317\277\275x\263~\275U>\274\274|/m\275\205a\201=\241\216\023\275\010\0373\275\370\006!\275\373\361\001\275)\341\262=\364\217\223\2756\213\220\275\241\236\260<\363-\232\275`V\014<\261\211\270\273E\035\340;\344\2750\274]\220\037<w\262\037\275s8F:\265\306\360=\375s\302:\013\326\251\274T\331\325=2\021\360\275\210;\276:5\357\017\274m\267\236;\330\035$<!\025z\275\341\235L=.\\\272=\266\030\350\275a\212%\275\277\2104=\311\027\200=\237\352l=F\256|=\346\335\203=\010\313\356\275\371\347d=\324\334\203\275\003h\204\275\377\037\023<\310\323\234<\010n\335=\360\336\034\273\351\0342\275\256\2520\275\315\211\325\274\3708H<\342\032\312;J^-=\004\270\261=\306\256\313\2758\311\003=\371\0165=\223O\273=\316\\\322=\357o@\273\337\201\013\274\230\3775=\2732\256=\257:\326\274D+\265=\204\036\031\275(\316\352\272\203``\274\347\273\243\275\253\\ =\314\010?=\236\217\350<\030\242\326\273F\333\344<\020\376Z<@\016\205;\265\202\334\274\3769\"<z%\323=\217\260\333=\301\357d\275\207\361\232=\3244\r>US,\275A\336\237\275\001\017\355\274eq\007\275\337\200O=\005\220\236\275\036n\036\275\010\215\240\274\314VW\274+\303\230\273B\207,>?\212\203;{\250\276;\005*\013;\334JW\276\330\352\201\275\214\326I\273\325\006Q=\255\"\022=\000\202\315\275.G\330;\235\335\316\274F\217\261<\246\335\242=N\245\317=#\035\221\275\004H\004\276MD\235\275P\345\034\275\371\264\233<\243\002\326\275\274\003\003=\034\340\032>\3658\211;1W\033\276\2709\002\275\030\226\203\275|\350\301\275\250c\356=\262\227\232<6\330\021=.>-<\032\023r\274E\264\220=\276\366\300\273\337)\210<\234\030\n>\270\330\030=\245\202k=D2)\274\224\230\r>\177\246\235=\"\241\246=\363\204\030=\327\371\037=\325\374\371\273> J\274\362\230\235\275\213 \256=\351\342\234:Z)\207\275\022i\223=m\355u\274;\361\023>\352=\233\275a\226\336\274`\323\324:\231a\000=\022\203Z\274:\272\235=\334\211\336\274(\301\033\275(^\323\273Y\245\331<\215~\217=\251\2157=o\365\315\274\356\233\'=b\223\023\275\337\263C=E\227\313\275\230\010\000=|\220\371;W\363\264\273JM\346\275w\216\216<\275\315}\275Y\265\321\275\007o\347\274\021h\313=\262T\r\2747<\010=h\323\246<p\353)=\364`\212<+\305\037=\020\224Z\275\004$\013<\317JN=\262{\350\275\025\366\231\274\332L|\275\315\236\310\274\'`)\274H3\256;\256\245\">\021s\2219<\226L=\332VI=+\3761=\262\240_=\215\221\214=\000\341\261\275\"\2214\275\233\365\236=\363\346\336\275\2132\206<=\252\320=\211\037\207\274\375\224\244;P\334\233\272\002\030S=d3&=\037\222\312\273^>\225=\325e\241\275\301V\235\275A\310\231<f$\351<)\207\215\273\326\262\363\275L\t\360=\007k\334=p7\022=\225\254\214\275Y\332<\275<\225\'=\361=\333\275K</\272\036,\342<J\371\370;\000\273W\275\245f\243\275\246\017\260=\375\374=\275\233\n8=\3177_\275\345\030\014\276\264\215Q\275ss\267\274\233R\233=2Wj:\302,\357\275?\244\345\274\234\203\221\275\375+\266<0\226\366\273\212\232\366\274\021\216\243<\265?\233\273\014\001\252\275\002D\262\273\210+\233=\233\264\210\275\321+\0279Ei_\275\302\320\363\272\232\347o\275\t\333\252=.\230\304\275\203\277i=\272\237\336<7@\376=\363:E\274\301&\335=\363eQ\275U\035\261\274\000\337A\275\376\260\230=\010\377o=\221\343\014\274\3465D=\014\344\202\275{\331\204<\027G+\275\324\302\250=4\237\206=W\367S=\273\302\024=\027\342\223\275\021\037\233;{sN=N\000\026\275\234\230\204\275`\036\322\274R\327\316\275\357\000\223\275\324q\302<c\214D:\017\0258\276\322\322\252<\204\224$\275\337#\001\275\017\223\363\274\241p9\275Zz\013=\026\345\014=\215\322\355=\365\306\336;\317\274\351\275\223e\243\273|:\353\274\366\353\246\275%\325\t\275\375\260\243\275\327m\214\275eu\237\275\366\315\005=\340\026\275=\354\246\307\275\2460\333;\020B\207<\320o\233=og\220\275SBx\273vB\034>\022\207K=\"\245\251\274\2048\221\275\367|\201\275\252\361U=\323f\n\276\354\373m<\335I\233\274\206CA\2748\206\276\273$j\350=\227\330\021\275&J\273=\372\311\210=\t\031\007=f\313\202=;\256\212\275\333\022N=\364\356\355\274@\370%\275\246b\274<\371\036\274;\315\001\363<\332v\244<i\224Y<\271;1=\376iJ=\342S;\275\210\305\275;\007\262\337=\307\311\233\275\330\t7\275\220\t\035\276i\252\216<\360+\203=\024#\317=\377\3515\2759\335\237=\\\330\211=m\246o=\217\303\216=Y\243\301<\224\030\264\275\251\353\212\272\236\231\202\275\356*\246\2742\201!=hq\366<\360\272\246=\342\215\332\275\200\335~;%w\247<q\021`\273\273\224\351=7\363\277\275\361$V\275\305\225\032=\257|\003==\367\377\274\022aa\275\251\324!\274\323$\230=\253\325C=\313\350\017=\331\213\242\275X\306\033>\373\232\207;\246y$\275\031\376V\275\rr\356\275\245\301\263=\325Yr<\372\277\243=\3449#\275W3u\275I\254C=I\362&=\375+\r=(\3271=\223\216\340<\324\313\305\274X\310\267\275\245\274W=1\223\310<\226\334T=\032\262q=\255\314\312\275WAq=>\354\251<\376U\335;eH\257\275\r\211\333\273\265\234\223=\227\314\017\275\330\037\372=N%\2229\216\217\036=\371\335\373;\017\000\372<\334\"W<L>U=mj\333\275Z\252\367\275\252V\031>?_2<\227\372W=dZ8=\337\343\372<\022\2558=\322\360\261\275u^\003\274\251r\372;k\343\251\274\247\345\331\274\024-\262\272\342Q\212\274*?\004\275\370\0320=\024A\265=\377/\304\274\316\315z\275\272F\225=s\221(<\203\002\241=\036J\n>\\\251\024=\270\276\353:G\216\265\275z\245\010>\237\014o<\235p\t=?\337\324;\030/b\275!\371\">\377\177\372\273@\365\010=\302-A\275\233\035n\273/\0318\274\242\036\256=\357V{\273\021\276\004\274\3013\241=\010$\214\275V\240\3159\202\320\243\274\347\374\256=\305\245\341\274\034\220\225\275\204\350\265;\341\260\237\275\203Ui<]\177\006\276\247^5<jm\303\275(\351\256= \214\001=\376\267\000>\241\340\030=\032\275\365;=\354\341\275\276\253\221\272\003}\'\275\321\213\213<\344i\312\274\365k\253\275\014S\031\275:\r\200\273\332\363\331<Dx\222=\241!\367\274\216\237\250=5J\252\275\027\302[;\376\325\241=\227z+\276\005\212\267\275+\006\366<\234\301\206=\245\272\010\275\301\013\263=\322\375\316<n\322\220=\004cC\275\314\004\034\276%J\200=\237\r.\275\023\347\223\275`\036q\275-x8\275\022R0=\343\3705;p\352r\275\224\373\034=\347\353\014<(\327K\2750g\333\274\307\217\000\275\213\002\030=\257\177H<\304\340\375\274,\205\373<H\240\n=\360(\210=\314\341\025=I\257\335=\213\035\347;H1}\275\273\261\237=C\330B\274\026\327\371\274\304\211\220=*\2441>\335\220?\275h\243\352\273a\311\325=\311\367\262\275\311\332\033\275\367\230\022=\210h\222<\016\377\225=UQ\201=\361\207\206\274\224X\016>\203\250\305=\177c\026\275}\335\240<\\Q\231=\363\334f\275\204\027\216=\307Z.\275Q\221\202\274\220~\026\274\247\020\225\275\231\320)\276\237\353\303==R\254\275dG\'\275\332B<=r\225\035\274\"9\001=\023\263\362<$\260\006\275\274\276\237\274\024r\316\274\000\260\200=f\255\323\274\244\373\275\275\3648}<g\206S=\263B\311<\311\225\005<c\337c<\322\363\003<\"=c=d\001\320<\323\314B=\304\236\342=\366\017\024\274i([>\377*\021=\036\037\304\275q-\240\274\257)\243\274f51:\235\202\253<\340\0034;\265-D=\275.\007\274\243eu\274\307\257\236\273!\243W\275Q9\231=\033\257H<\016\244x\274\302\024\354\274$*\247;\340h\242\275r\252*\275\007\355\247\275\234p\245\275\221\330\365\274$x\371\274oN\022<\227Z^\2748\r\311\273w\252\030\275\313\340\224<\360\356O\275\357\357\235=#\217\221\275gv\345;9;\240=\303z\215\275\323\017\007\275M\327:\275i|v\275>\014\231\274PTA:\342\274\242=\350n%\274iM~\275\320\035+\275c\002\177=3\006\204\275+\0263\273\204\343\231\274\367[\304\275\034\251E\275\3552\r\273;c\256=9\216\214\274\r\337\352<\017\345\247=:\244\273\275\357\347$=,Z\272\274\025\025\r\275f,\216=\220w\303<\n\235\216;\325 \353<\355\350M\275W\245\255<\005\376\202\274\200\317\361\275\376\333\">|4V=\237\327\253=k\333\303\2745M\377=rM)\275`\240\236=r\301\257\274?\314\230=r\220\317\274\250\251p\275:w\227=\003\035\004\274c\004\214\274\326I\364;\023G\342<\276Xq\275\025\266\223\275t\275\036=\\Az=\254\373\371;\363\344 \275\017\322\336=\214C\252=L\035\351;Va3=\022<\203\275\236\236\220=\204\254\206\275!*\200=\364\337]\275\274\302\322;\321\324\231\274\270 \315;\366p\024=\245\017m\275\":\252\275B\373!\273\276\314\010\276#\221\271<\311\303\343;\377\244\017;q\263\013<\306\212\347\274\377yf\274,\320{\275\372Y\200=\225\230]=H5\334\273\341FD\275\347-\301\274\237M\333\2747\364\310\274\343\360\343\275)\031\312\274.Y\254<\027\013f\275\323|\032\274\366\034\367;\200\255O=\212/\237=%\222\262=\007\343\217\275o\366\243\275\377p\351<m\221\275\273\203\271A\275\037\325?=\001\023\222=\252\275\r\275\025\025>\275\234GZ=\037\214\335=\304\221\276\2751\270\206\275\"\342\226\274\347\037\267<@\034\217<\353\272p\275\300\016J<`\307\276=\262\253\007\275\322v&\275\330\r\r=\365\302Y8x\343\270<\016PJ=\026/\035\274Q?\274\275\234]r\275\266tJ<!\3061=\025\317\343\275\375\t\200\274a\006q\275\256x\232\271{\'\327=\305\213\023\275_\346\273\273\26014<\312\026\315=qY&\274\342\200\036\2748\3455;\331\000h=\306Dh\273\033zr\275\222 m\275\246\212\344=\014\236\323=W\364\340=\230p\341=1\355)\275\001\016P\2758|\266=\3401h=;\254f\275\247\032\274=\234\316\207=\275\235-=7\211:\274\230\260\032=&8\007=\311i\021<\246\342\211\274M\032\251\275J\312\247\275y\350\274;\215QY\275GP\333;\001\017\217<yA\213=fJ\237<Ql\222=\315\2732\274<\2326\274\247T\227=\243\220\333\274\331\035\254\275\372\034`\275\257\"C=\0045\367\275\353\377\017\275~\326v=\270\244\024\275\031\002\333\275\227\231\201\275\361x[\272\211t\265\275D\260\241\274\210Z\035\275g\255E=\311r\276\275k\267\036=\346\277\222=\312S\361\275\361\0270\274\331\\\223\271\031\317n\275J\334%\275\351\2050=\263P\360<\333\343\262=\275\214.\275p\001\260=y!q\275\314\331\355<h\223\202<\236\274C\274\020\261\243=\251\013\216=\356`\020=\334\2065\274\326\364R\275RL\307\275\034Y\017\274+c\242\275\362\315\254\273l\336L\273\337,W\274\224\026\001\274\371/\271:\334\321\354=\276\221\023=v_\364<\322\323\203\271\rK\231=\316\336`=\247\332\230=\365pt<\017P\335\275(\006\000\276\364\363\244\275\200\340\236\275\372\312\212<4k\310=\226k\r\275\201\002\272<\252\014W<\301+\203\275\313\360<\275[.|\275\272(\243=\002{\277\27435\362\274G\024\312=Yt2\275l\035\016=(]\261=\033\230\212=\201\351\001=\306\267\227\275\254\202\307;K\364\201\274\033\330\312=\002\255\300\275\037\2354\276\336X\300\2754\2413\275s\261\t=\252\2655\276\231\rR=u\014#\275\215\031n\274\216u\210=<;\272\275\232\250\003=\207\333\215\275\347I\275<jn\304=\330*\270\275\227d\004\276\001\203\355\274\324lG\275H\241\206\275\334\261\365\273F\247\277\274\022\274\034=?\036\304=A\010 =\3523\004\275\022zo=~g\305=\022d@=\010v\013>\206]\014<i\343\261=\214\350\227\275^nN\275 0\306\272 >\027=\"K\021=\374\302\'\276\023\033\276=r`\306\274t\375\264<\006\013v;\254\351j\275oW\034\273\242\374\223=N\300\010\276P\010\034\276X\351\203<Wy\004\272\327\361\355\275\335\3761=\271E9=R\036\025\275\240c\312\273K\211B\275\3144M=\310\262\352;\272\023\252\274\234\316\365\275\016\004]\275\324M\006=Dss;\253\037\273=\r\361\216\274\207\204\300<\031\311\205\274We\255=\2336\355\273\005S\271<~P\211=Oqe\275\337r\017\275Q/\242=\334a\024=\316\227\033=\376\231\304<\013n\t=\351(W=\217\0227\275\210\273\307=\262\355L=xd\003\276,[2=\r\365K\275U\232\'\275\252\321\273<O\306\216\275\255\227\233\274z\220\252\275B\001\244<\0043\341\275\355\323\343<\3535i\2753\266>=\001\374\247<g-(=\322\207\250=N`\231\274\254\360\324\275O\277\032>\241\217\233\275~G\026\276\352\025\200<\032\275\230\275z5\333\274:\201\341<\034t\335=\361\314\020=\232\004#=\372\344\025\275\334\214\227=qa\013>\271\335u\275+/\220\275}\363\230=\336\320\213\275\235\247\227=\357y%\275!\306\003\276\247\002\340=W\232e\274\326\314m\275\241U%\275&\211q=\210\370\226<\267P\373<\305Q\267=\\\323\247<Xt\376\274TT\221<I\230\n=\201\313\214\275c\311\271\275\221\304&=??}\275MJ\225;_\214\230=\335\270\315\275\256N\r;b\364\363<\350\231\022\275\204\341\352\274\255%\367<\237\001\034=\252\361 =\3723\177\275\310\375\346=\2266S\274-\376\201<\216\313i\275\260\243X<\243\330\027;R\\\300\274\357+~;\212\210\327=f\262\314=9\2473\275\365G\271\274\005\3068\275\003\230\307<*y\230\275\320\341\r=fER\273!\033\033>\341e2<\343\263B<\014$r\275\022\205[\275X\326z\273>:\024=1\352L=XL\034\273\213\200`=\202\225\300\274\312\250\003>\242H\241=\253\264U<gD\231=\265C2\275\227\262\000\275\362\0043\275\214 S\275%K\311<\321\240\334\273d\002\362<F\366Q=\346\347/\273\031L+=\034\001[=c\237&\275\221\013\016>\332\320\234\275\371\240\214\274\254\255_=\257\237\267=\235\025o=f\333R\275\365_\222=\241\211v\274i\320\277;\343&Y\275l\"\341\273$#2=\206<5\274\376\261\236<e\"\303<\332\341\240\274J\230\010>\375\345\023=\320R\002>\020T[>\030\374\275;m\247\242\274C@\300<\356\200t=\360\346\006\275x\346r\2746\271\302\274\004\272\036\275X\340b;\010\017\346\2750X\306\275\334\267\210=\244\323/=\202H \275\253\334\007\275G?\204\275\006\244l\274\375T\371;V\375}=\177\236\206=\017\026E=\004E\362\274k0\305=\216\277\202\275%=~=J6\223<\250\375\020=b\032\216=\340\230\355\274?\223\306<\226\007d\275FK+=r\377\033\275O\311L=\274\347\245\275\374-\005=\314\372\004\276\032\024\346;\356h2=T\324\260<\'\210\003\275B\212\273=\245d\242\273\023_\246=\360n\374\275JMN\275\035\306\211\275g\034\016=\257\366t\274jR{=\370\354\377;r\022\321\274\331\372\364\273\007w\211=\007\357\026\276F\014\323\2721\320%\275\261\306 =\230\007\272=X\200+<A*1\275\303\253\005\276+\027\220\275S\331\204=\346I>=\205\312d=\370\034\021<\310%\253\275\007@?=\24427=\344k?=\254\206<\275%L\273\275:\244y\275\277\345\360<h3m\274\314\016\250\275\220\014\004:YP\357\275C\374,=B\020T=\204\026\224\274\260\207\374;\233:b\275\227l\217\275(\350\202\274\277+\350<\304K\313=~\337\026<RK\n>DL\340\275\333k\264\275\342|\377<\355\031E\275J\377@\273\216\241a\275\204\342\371\275\206os:=\223\261\274\201P\311\275\000\256\354\275\272B\273=\353\242a\275\233\322\177\275\231\275G<\027\247\251\274\312\241\252\272\020\207\247=\027\252S\275B\344P\275\020\214\330<\td\242;\217\355\301\274\232\232\237=\250\371\000>Tu\037=\252E\267\275\020\360\264\275\022\010\350=\355&\326={\300)<\247\000\355\274\233\333\025\275\327\274\354;u\244\355\273\232\250\225\275\3322\220=\316>\354\274th,<\220\316g\274b\335\202\273\352q\n>\266\203@\275\331\215R\275&\312\365:\274\212S=\352C\300=T~\000\276\223T\"\275\341\226\227\275X\373\232<\275\177V\274od\304\275\275\313&;\027\025O\273\241\3159>\023\333\323\273\317\350o\275\357\220\200\275P\0036=\024\233\">\250\326\267:8\240\274\2741\241\005=\032g\325=\376\225\210=\023\033\342\274\024\036\210=LK\036=\031\0067=\374\273 \275n\216\276=\357t\216\274P\2672\275\345\365\032\275\213g\305<\370\235\002=\201J\353\274L\350\307<_\332\265=\211\017\333<\234\010)=\272\206\314=b\221\337\275\353\256\256<\315\3037\275>E2=\034\255\016=\200U\311\274\177r\242\274y\221\016\276,+\007\276\021Z*;A\316\032=_\213[\275\360b\305=&\364\311<]t\365\273\034\371\216\273\314\'\305;<\007\351\274\004Z\r=\177\362\276<z\222Y\274\236h\275\274\223\266\200<\251\325\226\275\225W\343\274\237\306\237:\366\345\242\275<\223:=\257\300m\275\326\004\001\275\006\031\256=\032|\250\275\\T\017>\033\245~=\350\206\216\275\341\374\301\274D\277(<\270\322\220<\270\240s\274\310+\007>Uc><2\242|=\010:6\273\330\216R<p\003h=4\031\272:\017UC\2747\\\264=\225e?=!\361\327\274M\304\232\274\247I\361;m\020\002\275\322\210e<e5&=\343\343%\272\224f\246=\360\027\325\275\316/\214:\r8\236=\003\021,\275wP\"\275K\003\263=q\026\232\2747\224,\275M\022*\274p\343}\275\375\343\217=\237o\255\274\'\005\013=\007\222\245=\030F\"<C\270;\275\200\372\027\275\337\304\346;\022Sy\275E\302\207\2740\0240=\327\233$;\267\340\371=\261u\003>\373\332\036<Rl\330<\231k\220<\226\356\262\275\342^\314\2756\224\352;K\352@=\273Op<;\351\251<.9\340<?\323&\275\027\271\236<\352\306\254=+\230\271= \014\266=\321\262\353=^E\250\273GOt=bQ\360<-\343\025=\2718\306\274Y\217\317<\235\374\220=\232\033X=@\241\326\274\243\315n\275e\324G\273\235\340\001\275\241\214\257=\367\340\247<\360\013\252\275\256\342\330\272\241;|=\005\036\332\272\035W$=\003\2151=;\340T=\024q\204\274a_P\274\305\321\001;\221\267\314\273\314\251\324\275\220\203\363<\005[\357\273jw\371\275\332\347\027\275wgP=\305^\301=\013\006\376\274N\255\321=\243_\203\275\244\035\215=x\247\r>\2303\232:I\032\222<\246H\361\275y\022\006\274a\335\013\276dp\221\275\377+*>\260e6\275\332\273\217\275\346\251\327\273\264\'\261=p\225?=\307(\215\275\262\344\177\274As*:\362aA\275\371\320\n\275\266\226;<\302H \276\311{\250<\225\337*=1p\300<\304\360\310\272\214\322\204\273\327\256\013=\351\221\000\276\262\221\330\273\316C\207\274\2353\245\275\354\233\245=B\010\261=_9\027\275k\250\315<\351\341\007=5\305Z\274O\241\\;\257v\375\274\247kv=/^\204\275\3153\357\274\':\037\274\307`\227\275!\236\342\275\0226\301\274+$.\276\362\305.=rh5\275%{/\275\257m\241\275\"\003\254=\361\232\225\275^\013\327\273>\0021=\230\2171;\230\351\263\275$\"\255<\037\0208=\327\312&=\273.\300\2751\240\260=,\036%>\235H\310\274\teX\274\274\264J=i\365\031\275B\266\264;D.\010>\320\244\305=\255\232:\275O\372\032\275:\306\206\27596\031\273\212:\235<+#\"\275\3412\227=\244\242\351\274\005U\265\275~\220\275\273EY\316<\340\001\376\273\'G\272\275\017#}\274\245\034\253;.\200\233\275\031 3=mY\301\275%J\334\274z\355\272\274\277\321\342\274_u\002<\222\236\n\275\225>O;\374\237\021\274\270?*>\333\031\375\274\242\251\201<\224\210\210\272Q\253\016\275u\0031\275\177Z\236=/\247\022<NC\230=\313\277\244=+\254\211=\356x]\275Z\030O;\004\264\036=\025\367\337=g\314\222\275\037s\"=\204\215\037=)-l=\2661\344\275\2202n=\230\365\300\275\006\246\247<\253k\244\274\313\2260=\326\036K\2767\004.\275\223\277\216<\241N\306<\256\363\320<\237}\220=\250\002n\275P\375\201\275\324\212\233<\035\261E\274\350\354t\275\215|\316=b\361\322\275\344\217\255=\225\204\206\275\322|\230=h\210%\273\357/\244<\006\rz\275\236B\316=\322\000M\274q~\004>\362\300\355;i(\3779\235\247\365<X_\227=6z\212<=\267\013\274\231[\251=/\233i\275\3739\251<\207)L\275\002\237\321\275\343S\262<\2021\333<\352g\364=u\306\345<k*\352\273k\373!=\330/\207<\202#t=/\264\250\274\026Sy<Hz\265\274\357V\211=\252\2161\275\316\210\352<\260?\241\275\223y\250\275\234\013A\275ZJ\325\273s\320i=\341~i=\017\024<\275Uz\003\274\315\324\000=\0139\013=W\206\243=W\276@<\220\025\016\2751@!=\0037\242=\023\003\320\274\313^\036\275\226\020\314=\236\370l\275+\272\351=\305\237\323\272\206\002W=\020\307\004\275\320\242\232=\n\032\303=\334\007\205\272\354^5=\307\253\213=.\236\214<g\274\003\274\357\002\254\275\025_\256\274\317\267\206<X\366\374\275E\321T\274\271\r\030=\210\014\371\274\325OA>U9$=\034\332\267\275\025\026\200=\013\3354=OC\203\275^\235\223\275;\216\275\275\314\264\326\275\347)\313=,\306\306<\213KL\275\244X\344:8\026\321=-7g=\025\255c\275c\254]\275\033\313\321<\237\311S<\031#\000\275\020\252\301\274\021\360\235\275\364\312\333\275Rr\321\275&\035E=\311-\033\275\2538_\275F\255,<_\214\242\275\342\027\000\274Mp\207=\007\301(\275\252\370\275<\210a\005\274\"\330\251\274\037\335\220<\232\211)\275\374\327Q<\330\034\224\275mK\203\275;AF\275\236U\255<\375kL\275\201\273\237;x,\365\274k\026\315\2746P\000<\033\226\201;!/\340<\271\262l=\216+\223\275$\354\203=\276(\216<hJ\215<\311\315o\275\224:\'\275J\230\253=\325z\322\274\224\354\222=v?\301\275q\267\246\274&\236I<\310\203\355\275\367\323\264\275r\263\314<h\345\353=P|\031=a\014\202=9V\360\275\r\355\236\275\302\321Q;\244\222\024\276.^\305\275\r\300\271<P\343\224\274\342\3648=\273\202\177\275N\354\316\272=\212\252:BJ\276\272\212\323t\275\332\177\203\275|\342\317=\355I\327\275\256\247\314=\370k\014\275\325mt<\001-\255=\374\010\312\274`\001\260\275\217\007\265<T\243\374<\017\306\211\275Q\361\305=\275\317\304\274Nl\224<)\212\373\2732~\217=\371S\337=\254\n\261\275\336\022^\275\376\262;=\035\323g;\207\302\023=N<\222\275O\201\315<\243\210\237\275\001\322A\274\330c\203<\226\241\202\275\326\000\271;\270q$\274b\220u=\2009\300<2\313\377\274\327L\202=\226\177\212\274\262\272\273\275\003\237\217\275=kv\275\211+\236=5_\245=\213\n\r\2761U\226=/\211\021=\204@\217=\277?\366\275\240\241\236<n\346\321=\305\2034\275\r:\345<\2453Y<\2020\027\274\247\330\351=\036\364\"\275\234\002\256\275l2\245=\376x\232\275\377\232}=VS+\275\214+6\274\013\333 \274{I\331;x\352\255=\275\350\353\274\220w6\275\266\"\022\276\243a:\273\372A\203\275\2000\263\275k\3546\275\307\372\032=\377\2048=\374\274\037=\217Fd=\030\337\275\275@4K\275\306\373\373=\335M\r:$\314\000=\335\226L<|\302\245\274\255*\020\274y;\204\275J\037\206\275\004\317\334\275\267\333!=\227hZ=\362\367`\274\345(\354<t\357\t\273\334\3036=Y\245x=\260\001\332\274\363\233\303\274g\023\014\274s\374\245=&\005\034\274n>\254\273)\013Y=+k\022>\252\2726\274\3776\361\274\273r\311\275\232\227\261<\002\336\333<\027I\356\275\002q\302=\346\003\313=\023p\241\275\031\235\377<4\352-\275\263WU=K\270_\275\366\224`\275\364\322\t\275\001\2425=\232AO=\210\306\300\274Uv\261\274_\324k;\006\337Z<\311|\241\275WvZ\273\367Jo\274\360~3\274d;\337\274\346\250\000\276\232\000n\274}cb=\242J\260=[\240\n<k\242\355=FG\003\276\202i\215=\271\037\276=\257\330\273=\031x)<Ci\355\275\221\014\020=\334\266\332:\242\377\357\275K%\232<\n\360\032>>\212\"=\352\222\201=W\021\311=FT\343\272\373\0143\274\301P\034=\237\024\342<\344C\340=\013\177\202\274\271c\233\274t\257\322=\244\361\352\274\201\213\231=\017\016\237\275>\030\304\275\364\024K<\257tf\275\007\303\323\275\302\204\034\273\333\377\232\274LJc<\320\234\006\275\273%?=8\252\343\274\022t\037<\375\016\033=Xp\340=\352\342\253\274\212n\025<\223\355n=~\337\035=E5\355<\230\"\273<U\316\325\275gB\323\275\346w\234;\223;w<kQ>\274\326\264N\275`\343 \275}\027\245<\330\365\341\274]\366S\275\027\334V\275\213\207\372\2742^\016\273B\240\277<\206\254\201=\322\321\361\274\3439\361\273\353\027\353\275S\367\242\274M\306\376<\274\235P=\333\031\243<\321\312%>\232;\211\273\027P\014\275\221\254\203=\3778\022=D\3644=\256\036\205\275\200*\220\274\346\216R\276T\0048=\271\235\375=B>\035\274\265y\261=\021G\362\275\372\214\246=\235\023\315\274\255\001\024\275R\347<\275\257\333\345=\t\335\206\275\264\233\271;\217e\244<\255%>\275dp\216=\34027\275\n\2358<0\nJ=U\313\013\275\242\315\274=\25468\275o^.\275/\216\252<ya\344\274\334\005\331<K\222\336=y\036\324\272\330\t\014\275\357\006\213<Q\263\035>\',w=\3630\030=\242\227\236\275Sw\214\275\353~\026\275\255a\006\275\203?;\274\345\226\004=\336\032\013=\230\353\257=X\330\350\274\360{v\275\033\213\257\275o\312\177\275\313\354\026::\320D=\332\026$=\311;\266\275=t\375:\243\205\314\275\325\205_\275\213\260$\275\210\017k\275\213rB=\244\322\256<\"GB=\247\031_<\325d\013\274P\257\373\275\235I\r\275>Sd\275\266\265\256<\277\030G\274\027\303h\274o6\247<\327\307\302=\341U\211=~\004\305=\253\245(\275\363W\264=\032N\306\275\004\355x\275\346\016\226=j\357\274\275`\320l=\235\002\354;\373w\354\274\002\373\021=\200\306\035\274T)\344=h\343\002>mW\216<\321\347x=J\370y=F\3313\274\345\347\271<aT\337=qH\323\273\260\315\331<\"{\277=\031\316o<\211m\234\275\223&x=\230i\245=am\347\275 \322\217=d\234\210<\240\372\252<\334z\324<\321P\376=j\031\231<V`\322\2747}\301=\262r\362\275\246\2055\275M\210\032=\340\354k\274-\313\255\275\tv\307\275<`\021=t\331\t=~\241\272=\226\270\233\275\341V\240=\365$\326=\246\000\213\275vsx\275\244W\036=\221j\243=\005F\206=9\261\276\275O\343\277\275\242\0245=}\036\376\275\272*\016<b\177\341\274\335\244\230\274T#\244=_\336#\276\241X\031\276\032\330\200=\370\244\r\275\032\022o=\215\320\242=\3618\'=\272U.=\244A\203\275K\t/=\200\326k\275\225\223\\\275\230\035\347\274\367\244\210\275i\rX\274\241\353\211=t\267M=\213\322\233\274\341\366\'\275$\257\326\274i\262r\2743\374\270\275\302\327\230\272\252xl\274\346M\244=p\337\231\273\304\005\316<85\262=&}\221\275@\234\244\274\326\343\034\275d\354$\274\230s\313\275\334W2=\201k\347<9\364<\274M\356.\275\350\306\333;\350\025\221\275\345\311:=\215|f\275\017\311\254\275D\345I\275d_\237=\363%\203\274\343Y\211=\316\332\005;\235\3138=R\267\221\2755u\221\275q>p\275\225\373\205=mI%\274U9`=k\270/\275\330\372\317=\204\357\234\275\337\030\263\274\303\357\250;\201\023\340=\331\271\237\275\032j\364\274Xx\004=\037\252\201\274T\022\324<q\344c=\016\313W\273\252\224\010\275|V\037=L\256f=U\262\210\274\300%\031\274\253\\\232\274@;\200=s\252\233\275\223|\010=\031\364\002=\363q\005\276\376\207\274;\2239\025\275\303\205\033=j]\003=\312M\034\275\234\337\241\275u\t&=\347\266/\275\247\007n=v\372v=}n\004\275\344\023\026\274x\247M\275\254K\265:\213\037\345=\243\214\017\275/;\315<\263[R\275\311\302\266\273\t|,\275Af\353\273\212\2202<\207\266\375\274\323~\255=Z\241&\275\270!\257=\263\241\200\274\343\022\232=\223\261\262=3\336\365<7\356\000\275c\277Q=7\362F\275d\322\345;<b\342<i\277\022\276\341G\306\270\367,E\273\027\335\204\275\365E\016=\225\237\245=Ut\227=\250\263\036\276\375c\226<\270K\"=\315\363\207\275-rY=\031\231\375\274\'\240\243\2725\263\307;\317,\244=f\251\266\275\312\220\017\275\243\267\212=\310\302w<r\003z;6\323\224\273\365\354\352\275h\217\271\275\372\3677<j`\005\275!\r\352<KSP=K\205?=A\362\'=r%\263\274\027+\222;K\342W94L\307<\235\231\334<\247\025\200\275\325s\002\275r\177\267\275:B\027=Q/\270<\'4G\274\253\n\341;s\331\022\276\023h\227=Z\260\025\2753w\250<\211\347\337;\376\241\251\272W\304H=)\230\367\275w7\275\273\276\266\237=\266P\323\275\375p\026\274\364\234\326<\222f\240<Hf\206\275)\177\023=\313A\242=\313\213[;\322\210Z\273\311 \205=\237^q\274\356A\033\276\r\201\267=!t\3509\272\372\317\274\363\224#>\245\316\231\275\337\221\000>\372\022\020>\203m\331\275N\301\304<4\000\356\274EY\237<\374\322M\275\202-\252=\004U\010\275\257\261\261=\002=\221\274\250\003\n\272\231\344\234\275\314\365B=D\367\267\274\313\177+<\251+D=*U\234\2758\213\304<&\007o\275\235\324\212\275\004q\353\274z\3417\275QX\273=L\002\031=\301\314\367\275K\004\211=\020\226\360=\236\3340\275fo\220;Q[\363\275\272\307\005=fkT<\345\336G\275\224u9\274\n\365d=OZh;V\n\257<\342%\200\275\212\003\214\272\017\210\004<\342\344\274\274\304\t+\276\372YU\275\020$\262\271\355\215\215=e\001\257\275c\314\202= \241\325\274\350\260.\275\204p\260\275\302\366\346<\213\3519=~!\220\275.\321\240<t\021\367\275#%\014= \022a\274\005m\327:\332\246\346\274\354\364#\275\335\303\330\272\025\375o=\003\225\n=y\341\216\274\242\006\207=\274\372P=y\215\222\275u\363#<\203\321.=&t{\275\267\037\356\274\207\231\t\275F\212\232\275\335\360\326=yW\003\276\016l*\275\235\21129aS\034>t\327\220\274\024;F<\205\351\272;\262.-=-\274\265<\3349\274\275\020\247\316\274\363X?\275\301\362\r\274K\177\n>\001\032\260\274Z\031\245\274\223\377\204\274\335\323\326=\300o\025\275\330\315\362=\037\237e\273\n\3037\275\026\321r\275\005\322O=h\234\346\274C\032\221\27517\255\275uL\264<\252MB=\317;7>\336\327\263\274#\004\360<\303\322\250=\347&S\275\214\244\003\275I\227\355<\204:\006>\217\302\\\2756[\325\274\0174\317\271\254\346G=*\2760\272\264/\t=\227w\323\274\036\2759=\302\254\207\275\333\000\211=\204U\205<\346\345\246\275\201$+=<\216O>m3\254<\205\2077=\373\000\016\275y\311\201<b\324\033\275\346i\252\274\270\'0>\305V\033\275ZM\351\274_\263&=\377v\257\274\275\315\252=!o\345\275w[\242<n\245\351\2754\374\000\275\320\037\364\274\361\n\226\274\3432X\273\364\016\261\275\240\t\263\275\207\225\371\274\321\'\315<\262,9=D\2479\273\271\037?=\313\000\233=\266\223=\275\315\353\217\274\221[5\275:\225\221\274F\254,\275\013\t\277;\\\2310<\332\2145\275\303\337\242\274\227\333\004\275X\267\257=\356}\337\274\202\220\300=\342b\010\275\347\006D=\375+5>\251%/=\311\206\270\274SC\213\274\221\006\006\275\002\322\313\274\325\212\237=\000i\031\275d*\315=e\313y=\341\234\327\275\260\351\016\274\253\262Q\275\025\326\223\275b\246`={\277\265\275\265SM\275\236\363\275=\366N\3059\342\205m<\312\226\215\275\006K$<\307^\027=A\314\310\275l\327g\275\t}B\275\314\225\327\274\260qQ=c\016\225=fl\240<F\303\336;@\036\272=]nR\275\357\362#\275-\350{<M\234\355\275\021\217J<\331|\275:-\271\235\274=^\362<\232\265\000=\246P\025=\334\247]=\273\370y\274c\000\252\274\323\250\201\275\010\033}\275R\337\305=\242`\320\274\220f3=h\242\022=V\207\223<\251+\272\274\311vy\275q\206^=\377c\r=\303 \234\275~\220r=8\365\346:s\032\337<\353\376\023=*\314W\275R*s\2756\211\020>\243\230\260\275\3100F=\274\252\365\275\353\013\352:\n>\216\2759<\254\275q\036\037\274\036\231\260\273\007I\320\274\023%H=\017\253\271\275\327\252.\275\231j\210=9\321\304=Bx\363\275\014\005\316\275m(=\273@\217\000>1v*=9\t\336\274\001\241\037\275%\227/\2733\353\362\274+\217\341\274\206\365\002=b-\322=\3361\347\272\305\202\317<\352\037\214\275Y\220\017\274gop=I\277S<O\267\277=D\364\235\274/\311\340=\240\366\002>\364\205\323<\274Z\250\274\215\275\363\274<\237(;%\375{\274\364a\030>H\004\021\275\270v\332\275\260\321\001\276\034\035a;~V\225=S\336\270;\022\003#\275l`\243=\352\373\213\275\023\202\203=\264\360\312=o}\013=\031\254\247=#\200&>)\277\'\274\223\260\301\273\361y\016=+\214;\275\327h\027\273\205T\250;\354\252R\2762\0367=F\363\001\275f]n\275\256\243\277\274\007\263G\274\026k\376<K\357\206<\225J\276=\021\010L<\177\227\235\274\274h7\274l\2371\276t}\001\275\"\2652\274\255<\203\275\t\177r=V+\302=M\310E\275\003\027R\275\276\275\002<ek.<\327 D=v\226)=\356\325n<\207O-=}V\346<\n\236\273\274\014\330\377<\240T\332<\347\227Q\275\204Vl\275\360\261\200\275#w\006\275\310\006\202=\227\261/=O\027\021=c\250\235;m\322-=\302j1=\276\303\324\275\276\2376<\227\360\305\273\306\316\345<\335\350\256\275\354\374==\274\220\024\274\206\336F\274\034\327#=\r\300\004=\255\332d=\nj#=g\363\246\275\366\201\314<tNt\275\204\305k\275KX\022\275]\251\230\273\017r\241\273(\245\316\275\201\226}\275\333\346\022<\277\000\306<\246\336\253<P\220\001>$i\002=5\220X=\211\017\023\275\036\2311=,\236\013\275\233\333\002\275!5\003\274\341\245\270\275o\211\232<\356\240\262\274-\325x=\320\210\261\275\250\211U=\232]G=O\264?\2741h\246=\305\376n\275\223g\036\275}\025\246=\014\'N\275CH\353\275\277\"\005>\353\331I\274\367\377\217=,Mm=\375|\262=Tq\207=\226\245\231=we\326=|\233\265:?\305\271\275\301\346S<&;\267\275\372\022\355\275\020\3249\275:\376w\274n\301\346=\213AH=\030\333\343\275\007\234K\275H?X\274\221k\312\274\334\206s\274)\340\212<3\014T\275\274\021.=x@\370\274\360\337W=\3527\226\275\227\202\361\274\213J8<\247\252\n\275\240\263\033>\331\365\033\275\354\t\n=\023\213\022\275\254W\255=\316\243I<\364\177\255\274!\n\274=H\037>=\306\311\231\275\320\220\233\271\275\300E=\325\354\363<ey\002\274=\351\033\274\203\331O\275\222D\226\273\357\333\230\275\207\335\004>\027:\033\276\210\261\214\274\217\344J\275\265$K\273\300\347\224\2750\273\224=k\267\307<\373\353F\2751\270\361\274\254Q\001\274\031k\025\276\301\"\257\275.\014\037\275\341n\362\275\356]\266\275\226\3206\275P5x=\025a\364<\321?\211\272|o\200\274@ \377;l\204\033>\261\303\250=\306\275\364\275\203b\266<\342\201\337<n\230\204\274E\027\016=R3\024\275\212\273\365<s\326\256\274\317\350\224\275e\037\262<\271Y\256\274\"6\013>\177\210\374;\261\"\036=7e?\275\002(\271=\216Y\030\273\247\033\"=\311\226o;\331\263,\275\272\230\244\275\237\342\201=\025\000\203=\363\263\025\275E\353G=\204A\312\275|\020\317=\2207\217;\331g\200<\006\022\305\274\010\027\006>\344\306\214\274\250\257\241=6Ge\272\370\363\276\274\014%\300;\310\n\007\275\236\362\005={a\313\275\017-\376\274\010\311\326\275\017\362\370\275\2679\023=)\277\010\276\212V\221<\343?\362\274fy\330\274\032\243\304=\241\",\275\006g\275=\342\336\203:\216\317\232\274\311+\234\274\226}\005\275u^\241\275\313j\240<T%\331<\342.\021=B\254a\275\216\r7<\030\327\323\275\247\001C\275l\227\377\274\330\022\246\273\017:\275=~\232\005=\026\033\217=|\013\210=S-\034<>W\267<\353_)<QD\336;@\242\201<\237\352\356\274\202B\3238\324e\216\2758lZ\275\336\340\017=\365\005\244\275\210lJ=\306\r\022\275\017\233\006=\362\265\021=|\327\025\274Z\206\240<\245Et\275kx\254=\210\321k;\214\212B\274\263\312\263\275\177\375\221=\225\321\234\275\211m\022\276\226\265\306=\227\250\r>\222\0062\273R\233I\274\273O\016=\253\242R<U\021\363=.2\203=\277\262o\275^ L\275p\010\240\275\335\231<\276\305\270Q=\333\336\003\276\214\234\033\275\025j\225<\247H\212\275]\3101\274p\360O=\251\206\315\274@\016\347\274C\226\310<\221\013\200\274#\010\020=\267v\331\274\302\332\233\274\2139\023=Q\232\203\275\251t\\\275a\023~<\2002\302=\003\r\020\276||\323\275\243]\224\274? \014\276\373s}\2755x \275b\252\013\275t\031\022\274\247<Y\274o\217\350<\236\327\367\2723+\207<\341g\303\2741%\023;\226\276A=\3650/=\252\303\264<m\356\304=\274\360\031\275`\321\300\275[\326\257\274O\224,\275\215\323-\275\0249\204=\225\273h=@\266i=X\212\207\275\"\236\240=\214\266\327<\236\341O=\316\270\256=\306H\347\275\245\000F\274HD\026\275\263\001\300=/\014\245\275\324\'\350\274+\244\304\2756?\302\273\200\344\341=\232\347S\275m3\215\273\206a\300=\221\275\226=\345Zf<e\245\274\275\373\232\351\275\314a\343\274\035\021\273<\262ta\274\212\220\241\275\311\353\352\273\336\000\230\275\034b\236=P\300\013=\232Xq\274\035\201\352\273\370\005\350\272\273\000\022=\005\350O\2764u\220<\2359\376\272\343\032\256\273Y\376\303\275\274\246\203\275\350\r\262<l\214o\275\327Bw\274,=8\274\321\200\315;M\231\231=O,\327=\367\005\023=\362\301\346=rU\242\274\356\263\245=\272@K=>{\337;t\235w\274\306\227\222\274,n2=\242H\017\276\026\352\235\275(\223\306\274ax\244\275~\000\021\275I\313h\275Vb\242;\006\335\347<\350@\256<\361`\354<r\243\233\275$$\325<c\227\312=\352\2026\275~1\\\275h\r\372\275\n\004\326=\036\357\331=\266\200[\273\017\344\344<Q\255\240=\3069\023=\377W\253\274[\307\251\275\327)b\274\3554w\275\347c\244\274)g3\275v\0005\274\243\037\230\275p\361\026\275\326\273\241<\346\330\350\275a\261\202\275\"\335J=\335c\337\274\357!\204\2752\360\013=z\031\346\274\027\023\001<\244\345\033=\314\322\343=.)\330<(\327\244\275m\031\244=\325\320y<\270\334\203=J\020\370<\272\025\371<\007^\352<\276ux\275r\225:=\037\313\026\275BA\212=\325\231S=\001\004l\273!\014C\275\335 \375=$\234\354<\027\303\002\273:\0173=\025\031\264\275\351\233\324\275\266h\310=@\027\"\273\323\253\035=\336w\360:\235?#<\264\3435=\326h-=\360\232\350<K\346P\275\344\216c=\333\202z\275\272\203\246=\326n)=NC\022\276|q\233\274\303\2753\275\2233\221=\201Z\337=\007X\272<\370\025\252\274x\310\215=W\301F=QK\261=rI\312=\233\302\214=\005\002\323=\005\354\035\274A\312\006<tc\033<\030\r\336\275\326\013\310\273\343\335H=\223\001_\275$\244\205\273\244@\203\275d\202\025\273a\371\321\274?\021\225=\232\257w=\001\237r\275\265\227\205;\220\340\322\273=z\335\275AB\364\274@p#=tx\200\275\266\024 \274\352Xz=\231`\004=\320\352C\273-w\355<\3562\246=\037%5<\275\365\373=\030|0\275E\253\027=\005\335{;\325\317y\275\352\271@=\006\373\'=\t\3722=\307F\210\275p\315&<p\013\371\274\032\210\352=4j\223;{K\233=\345\346\367\274\341\006\'\276\207\336\243<\nc\"<3\002\360\275NT\234=k\335q\274\262\321}\275\212_j=Lc\243;zbN<\022\272\202\275\025\255\351<:9\n\276\227\342\201<\315V\227\274\34661=\221\343\335\275\355\201\375=M\032\222<?;\032\275(h\232=\336\322\014=^\024\013\275#\233\031\275\2212\037<y\256\036\274JEd\275\244!\024=\235\024#<\004\365[\275\177\001\335\274\031\221\210<\305\272\347\275\226\023(\275\226\210\303\273\242\275\354\275\352\206\216=W\307\017\275\321\367\016\275\253s)\275\361\346\016\275@\304\224;\260~\020\275R\223\323\275\026\260\000=.\026\220<#\300f=aMU\275\014Z\257\275\340\352h\274IrW=q\022\223\275\350\227%\275\213\200\206=WJ\324=\no\330=\325\021\315=\213J\003=\211z\034\274\347y_<\300 #<\214\242\342\272\347\333\215\275:\253\326=\017\232\330=\251l\216<\302\243\3237e$O>p\322\362\275y\004\002=\254\216`=\364\255\016<\324\332\247\275(\346\245=U+,\275\374;&<%d\340=\375\0367=\005\013\204\274\004\323\233=\330\377L\275|\206\033\275`\'\n=h,\243\275I\271\002=\322\360\220=p8\341<\3235\205=\225\246\307=\213\350\026\274N3M\273ODO\274<\3330=\327TT<G}_=\r\017\271=\252\341\177<\3453\261\275Q\353\034<\004l\001=\310\037E=\212\\\251\274tq\360<\215f<=\033\000\300\275\244\250\261\275\360\323\311=\357\374\024\274\311\325\333\275*\312\312\2735\002\327<#[\243\275eh\200=\332\215\261<.dw;\254\204]<\346\334J\274\244\222d=\200\326\367;tE\361\272\000b\214\275$\'\212\275\032x\016=sz@=\"\3413=\247\326.=\024\341,\274\275\0160=\255Zf\271\310\237\331\274\206\031\311\275b+\260\274\376\000\017=\272\221\251\273\240/\016>[N\035=\021&)=U52\274\205t\\\275\327*m\275z\n\243=~\245W\275\035\224\226=\366\202+\275\320\367g\275\360\0056\274\266\247\356<|\310\250<\2767\t\274\307\237z=\343\371\026\276\224\016\003=\252}\210=\273\030x\274S\020\216\275c\205X\275a|:=\005\301\222<\223\205,\275\0367K\274TDo<x50=f\327T\275\301\031\221\275\224\204\034>\3242o<\240\003\"\275Nt\006<h\376\230=\007R\271\273.S\237=\036\267\312<\265\240\333\274\034\317\n\275\372\265\210\275\017\254\006>o\350M;\353R\227=z\245\020\275\025\357\347<\002\332\217\275c\226\376\274L\214c\275QH\202\275\267\210\203<\337\033!>\370\177\003=2\224\276\275|F\316=\005F\r\275\351\341\036\275\'\367\276<\373\267\317=\370\212\020\275\371\204\005\275\022m\262\275\226\334\272\275sn\335=\227s\031<i\351\031\276b\243&\275\275s\302<Q\3719\275\002-\315\275\217C\221;qP\220\275\247\304\"=\310q\274<h\261G\275:-\307<1\007c=_\204-\274\027\310\325\273\'\235\210<\035\271P=\020@\374\274l\211}\275\350\321*\275\207,\003\2761WH\275a\264-\275\221\233\225\275L0\226\275|\376i\275Q\375\271\273\310\326\026\275W\204\315\274%\312\000\275\002\275\253=5\301\217=\022\263\001>z\340\333;\022I\020=\360\335\027\276v\001\214;\204\0000\276\002\372b=\301\266\231\274/\350\203=\025 \372\273a\272\014\275*\334\216=\327\362\227\275O\263\000=\207\3755=(\024\236<\006\300\022=\325r\353\274\266\021\250\274\315\002\227<\005\210Y\274\022\237\331<\245\371\263<\004\352J=\242\257\325<\333\202P=K\030\266=\\\227\";U\257`:.g+=-\003\376<\247H\253;\014\231\2419\356\375\252<l\365\324\275Sx|\274\004V\025>u+\350;T\364\326\275\324\305U=\3703\256\274\357h \275\235\2536\273H\037\226\275\027\323A>\234\3528\274\231\202\220\274\"\213\271;\213\037\202=x+\023\275\212\031\326\275\356\240^\274b\2556=\376\266\014=D\023-=&x\232=t\263\374=\036X^<\024!\220\273\315 \202\275\371\307t<ai\364:\232\030\027=\220m==\233\345\004\275\357\006\246\274]7\037\275.\023(=\262\305\251=\360|\235\275]\rZ<\326\375*\273t\371g;\r.\243=\003\332\221=S\225,<\255\221\351\273\214\274\n\274\304\3249=\016jh<\306R(\274\271\302\214\274@\252\020=q\315\222=\331S\004=\"4$\276u\031\251\275\302N\271\275\260\004~\275\275\000\351<\244\334\210=\212\271\026\275\342\326H\275K\236\320<\350\361s\275\032?Y\275\353\243e<f\230\253=\"72=W\3760=T\305\"\274\024\"?=\330(!=q\330\023\275\203\376\206\272-\263t=\321\325\222<Z!\002\276u\202\321<\305A\036=[\272\363\274\200\036\316:\254\0307=\255\211E\275\344>\344\275\374\265\367=ET\267\274\243U\331\275\234\377\243=\262\310W<\366c\306\275\366\035d\275\227Y\334=\362\273\014\275vV\244\275\270\370x\275s\310\224\274\215\026\r<\345\270f=\351}\366\274<\231\'<\304C\023=\314.(\272\316\016\236<\311T\250\275\245\014f\275M[\233;\367\360\330\275\377\345\255=\006%M\274cd\347=\336\0278\274\204\2024\275\211?\271\273\034\316\211=\273\234b=\240h\020\276 \"\033=\351)B=\351\365q\275A\230\216\275\277Y$=\220M(\275/\027\266=\325\362\232\274@\353\223<\036\335@\275\274N}\275\376\361\t>\232Y\244\275p\205\035=@\025\231=\301\213\206=\0344\206=\r\370\\\276^*\023\274d \222\274\364V\272:j\355e;\240\362\271\272\210\230\362\273\361AA<\3270W\275\246\026\n=:9\342=F\354v\275BA\201;\356J\226\275\336\037x\273\355\332\220\275\254z\022\275\313\300D=c\356\366\274\377m\350\275m\204\372<`\347\210\274\035\237\202=(\205\311\274\277\261\303=\222\374\257;\372\256\236<.\335\223<\035\361\025=\337^\254\275a6\003;\360:\016=\316\337\245\275\263o\315<\312\233\241=\207\023z<\022JS<\274eG=\212MR\276\003\313n=|D\277\275\307y\217=\263\364\026<z\360\277\274\346+b=\006o8<\206\215\210\274;\3026=\306\361\273<\006\327\216=\301\375\'\275q\234\345=8\t\217=rf#>\352M\005\275h\216\204=.\334\002=\365b\345=\\6Q\274\212d\217\274`U\305\275/Y\034=\007a[=\257H\300<|\257\344<U7\235=A\0212\275Ta\344\275\270n\031\275\033}\255<\360\330\244=\220\025\264\275W\327/=\322\255\020;\217\317\256;\212\006\212\275\246\250\">\303\377\201\275\"&\033>\031\321\226=8\007\246<\314\035^;\3611R\274\347\271\033\275\335\3669\275\220\272t=\315\316\311=\364\037!=I\224c\275\300M\253=\277\311@\275\te\333=\023\266\206;\311W\236\275c\004\266\274\027\272\211<[\374\221:\376\021`\275\211\224\304<I\341\301=6\231*\274yN\231<\rS\360<\355\275y\274(w\217<l#\375<*W\303;M\356\222\275_\225\366<\312O\273=\027\004\343\272L\014\216=\374\351\252<\300\035\266=0\256\014\2756V\323\274\304\333V\275\206\236\371\275\314\027\313\273\021\021%<\021@\221\274\005\023.\275k\270\037=\207\302\010\275#l8=\2008\357=\304:\001>\325\206N<\305\025\210=\313\036\252\273\3254\327=\215\304\004\275g\340m\275\241.\222=\\\036k=\251|\273:\007\332f\275\210e\275\275=\017\205:~\263@\274\3437\212=0S\353\273\367b\n=[\205\036\274FMX=\212\276\034<\260\301p=\304s\232=!>\340<8,\346<\035\274\237=\010:\240\275p6W\275\0372u=D\036\320\274\371I:\275n\364\251\274i_2=\251\372\320\275\033CN\275\305\027\213\2759IL=\352|j=U\272\237\274\325\257\247\2751z\215\274q\241\317=\035\375\201=\272\251?=W\244\'\275\247y7\275\177\321\344<\261\213p<\256Ks<\nX@\275\243\264\033\275{\010\363\274\024\206\216\274\337\271\026;\327\205b=\305\226D=O\255\024\276\240FW\275\346\237\022=p\036U=u\007\345<B\0207=\007\2266<ar3\274\377\032\272;\266)\242=\215%\271<\214\206\260<L\331\352= \306\226\274\230MR\275\345\324D\274\367\320o<\356I\215=w\035\217<.t\205<v\320\226\275\\\031\215\275\207\333f=c\r\"\275\362t\204=\225Il<1\270\236\274*\024w<x\240d\275\3245\224=q\313\023\273\222\362\213==dw;\023\352\251<\373~|\276c\004\354:\265\n\230\275Y\3254\273\210\273\023\276=\005i\274U\223\320\275\014\350\207\274/u[\275\rd\242\274cV\013;=\227\324\275EW\222=\310\351\r\276\246\226\253=B\206\231=\260Hr\2746z\017=\'-\000\275tD\244\275\251G\203\270\306B=<\351\021\334<\363\200\311=aM\344=\362\265u\275\r\310Z\275\260\2648\275\035\t\241=\313\270\010\276\252\307o\273Y\241i\274O\270G\272\350K\022\276\023\347\305\274E\267.\275U\360I\275\240\370@=\255\r:=\245x\226<\005\007\021\275\306\201\331;J\320R=O6m<\320\301}<\246\242\325\273\236\350\317\275-\031\243\274\031L\230\275\336\327O\273\250\232q\275\341\256\266;oH\223\275a\021\022>i\300\036\273\255|\027\275\231\257\245=:O\036\275\376\222-\275 \365\221\275\303nx\275\232\346z\274\r\322\322\274MH^\275\240\273%\276I\250\323<\215\247\t\276h\211\232=k+&\275\300\242\r>\014.Z\275\303\356\n\275\000{\341=RfN\275\351d\n\275b\313\211=\317\252\2519\032N:\275\356\021\201;\234\252\311\274kD\370<\205\343\314=X\177\307=\271\310\021\275\352\023\227<\276\013_\274W\370~<\177hr=D`\332=\264\024B=\351\312\023\275\330\220\265=_\266>=S\360\366\274V\223\010\272\252.\r<q\376\275\275\006\005\204\275\256 \370<<\266\034\2750eJ=oh\325=\023\254-<\307\000\007>\006\340\326\274\342\215\241=\301\376\315=t\335D=\334d\010>1\350\r\275K\033[\273\321\330y;\010Y}<y\035\270\274\331\021\200\275\214\263X=TYg\275\345\301\024\275\270\303\304\274\263D\346\275\355_\030=1\n\206\275E\346\231\275\024!9:~S\221=\233\ri\274Q\000X\276\220r\025\275ZFy<\002\003\016=\010Z\252=\r\225\246=\373Y\203=\244\241\262=\216\373\177;\360\261\200=!m\237=\336,\216\275B\274\n\275\277\214)=e0\214<^\t\255;t&\275<\246tD\274\203h\266\2754\347\2559D\301\257\274\343c\250\274N\266k\274R\257\3769\005\204W=iK\376\273\351\313\274\274$j\206<\330\242\317\275gSD=x}\025;:\\\221\275d(\232\275\257\252}=&\247\250=v6\250=\3324\203\275\310T\256\274k\033\210\275=!\371\275\355\325Y\273\264 \017\276\177\362\253\275\311\244u\275\211v:;>V\003>h\026\215\275#\332\002\276\355H|=y\017&\275\350\016\322<p\204\022=\201\224\222=i\357\007\276\2001\373=\217\003\254=%\377\352\274\323 \366<\322\277\373\275\024\236\263\273\035\221,\275\306T\346\274\225\324\224\273G\267?=#\331H\275}\'\262=S+\212\274Q\231\324<\240\221\260<\216\326r\275\366\027\314<\222\233\216\274\177I\013\275\276\006O=\333r\327\274\217\311\253\274\353&\346\273\307\360\315=\206\216&\275\277\307\230\275\234\365\317\271c\006\233\275`\017a\275x\024\t<\177\037\213; \007\266\275\023\356S\275\323h\033=\200\t\272;\277R\r\275W\307\344<N\310\263=\355\347@=\206o\365\275\355\302\222\275\025\316\022\276!\340D=XT\013\275Tx\255\275\007\035o\274\275\357\220\275K\222\t=N\300G\274\252\321\315\275\310[\010=\344\036\271=\271\337d=C\335\275=|M\001>\261\010\203\275\030\331\350\273I\332&>b\303\312\275\350\375\004\275&\003\241\274X-\304\275A\246\337=\254\t\000\275F\256\200<\021\277\301=b%+=){\304\275\257b\244=\004@\240\275\353\001\204=\300`D\275\213}\\\275d\253\346\275\350Y2=\313\352\024=\312\225\027=\201\377r\275\306\002\025\275\207\362\334=\312}F<i\246\367\274h\330A=\364)\324\274\214\334L\275\021\351\243=\273\355J\275w\360\210\274\234X\226\274)$\004\275o\246}=\033\356\037=l\215\277<<\223\366\274\320f}\275\205\265\314=\342f\004=\257ZY\274\311\212\n=\020Q+<\215,\001\275\004\2545=\210\315\216=\260^\324\275\222\256\370=\256\017\307<\222\035\247\274\330_\234<\352\350\236=%\375\252\275\003Ks\275\2552\355\275=\301\010>\240\320\374\274\320\r\244=!7Y\275\366\240\222=\303\224{=\026\311\205;\177\246\251<\\\201\322\274\231\3413:\264E\231<\272\226E=\234D\200<\313\334\300\274&\307\262<\335\310\367<\367K\211<\270-`\275\251h\354=\203\246\244\272.\270!\275AH\301\2759\330k=\356\205T=\363$K\274\320\312k=6o`\274z\016\026\273\224\374<<Z\347c;\246\034,=n\274n=\345U\270<\306\351\244;\303r\"\275\214\263U=-\317l>\256Y==\203\236\220;\252L\r<\213\321\024>\304\372/=\204|j=\003\263\020<\254u\367<\253\221{\275\225\030\006=f\315\211\274\211\277v=\t\032\351=\3175\214\275\346\314/=\343\332\322\274\312h\220<\343\320\304\273a\251s\275o\313]\275\026\210\"\275\322\033\"\276,i\257=\tP\202<\213\276\312\274\014\273\025=\004,\013\276C\004w=\347\027\221<\031\333J=\244\312m\275\257\256T\275\\y(=\220\2164=-\275\320\273\016\335\265=\341:j\2740\246\357<\247\252\223=\324;?<\023\222{=\345{\n;\363\004:=\365\tL=AS\331\274r>L\275\347\362\351<\204\'+=Ul\330\274\3521_\2752\234d\275\206@\360<\237\000\213<\010\370C=\251\022\225\274\374\'\333\274\206\341!\275uof\275s\014\312<l\366<\275\201\235u=\017\027^\275\264\214\203=c\014\350\274@3\226\274\236\373\257\275\346\347\252\274i\013p\275Y\301k\275\226\260\243\275\032A9<D\202\267;\233Q\211=\341\312\247;\356M\r=\014\347\205=\306\207\207\274\367&Y<\244\374-\275C\313R\275p\256\270\275y\305\032<\343\363\031=A\205{\275X\355\252\275\242\n\030\274\035s\353<\354\322\212\274\377\006k=\273I\246\275\333n\373\273\325\311\274=|b\224<\362n\372\274\331a\353= h\002=/\035h\275,\026b\274\200\325[\275~-e=\234q(=sy\033=\336\273\204=\"\366\263=\314\353\372=\024*b\275\323\331\033\273\360\004\223\275F\027D<F\275\205=\252p\323\274\203\217\247<{\377\007\275\364\014\035\276Vo|=0\246\206\274\025\353\376\274\236W_=\323\277\370<[\250v\275E\241\207\274\374\247\214\275\311\034\347=\353C\216\275~\345W\275\315\301\033>!\017\210=\250\243\201=4\004\245=\022[(\274\244\214\335\275\374\270 =\20238\274\007t\242\273E\253\n\275`\215\353\274\307\263\017\275\014\344\245\273n\373\217;f\354\020=\326Dp\274\350\360\257\275~\232\331\273z\004\200\275\272\305\331\274\370bX\275\030\n\241\2754\237S=\321\332,=\307>M=\026\302\031\275\363\023I=\035\370b\274\035\213\203\275u\246\347<W\252\022\275i\324\274=\217\024\220\275\264*\014\274\273l\202=\346=\016\274)4\213=v\000\320\275K\251\202=kC\334\275=\323\030\275\177?\231\275\033?\020=\365!>\275\212\020Z\275q\235\222=1\005\013\275\335\204R=\013G\234\275\001\000\316=\215 \260=\240\262\310\275p\205\222\275\271\240\366\275\357A\023\275Kp\"=\220N\r=\037\347/<\317\242\276<J6F=C\226\334<rp\3437\020\326\271\274\021\274\307<\001\254L=\253\363\353\272\211\272F=\216)\252=+t[=}z\203=\372;\375\275\327H\300\274\240\306\001\275\373\001N=\003\355)>/\\\212\273no\225\275C+\000\275\311\020>=U{y\275\377\021\232=\374\204\340\2749N\340\275y\037\257\275\3747\377\274{\325\277\274\361\244\336=J\346\214\275\325\343\233<\332CK\275t\246\216\275Tg\326\273\240\233\201\275\033\\\214=\231\310\211=\235m\331<\306\350\244\275\002?\223<\204\r|=EQ\005<\235\330B\274\312\036\206=\341\036I=_\264\263<\007\255\032\2750\252\352=<%6\274n\314\244<\243=N=\005\315d\2758\024V=\311\233\330;m\\t<\214\375\363<\335\313\010<\224\233\362\274\376\200Z=\320\230\273\275.\317\211\275\2346\370\274\300\3154\275\317\216\'\276\345\355\237:\017\300\003\275\023\022\034>c\020r=\353\331\021\275\201^\305;^\234a\275\350\313\210\273\361\014\207\275\213\241-<]\206\253\275\370A\301=>p\357\274xM\215<M#\264\275\322\321\177\2751\373\273\274h)*\275\017\370\345=a\002\257=a\"?\275\256\357\301\275\275=\022=\245\253\203=b[\300=\211\221m\275\022\177\313=\266%\014\276`~\241\2758\225\224\275\301u\234\275\244\3551=\356\200\252\270\362\033C=\225\001s\275\372L\344\273O|v=6t7<B\205d=\272\365\325\273F\320\212=\rH\014=)i\337\274\321\\S\275\022M\333=P.\007<\361.\037>p\tQ\275\270\322Y\275L*\310<\003];=\265\215\253=@\037\222=\300|x\273\335\2365\275\003Y\362=\010>\243;\232g,=\250\'-=\200\301G\275H\252\217=2\177\n>@[\006\276;\027\374;\364s\222<9\024%=\332q\004\274\024*\261=#)3=\210\302\221\2732U\240\275\302\322@=\002pi=\241X\267\274\334\264\207;\036k\353<\326\366\217=\235YB\274\306z\306<YV2=o\246\220=\177\334\002=\315\227\273\275\034o\234=\371\014\272=\034\217\033<u=5=\224\347\331<g\001[=\256\261,=l\376P=2\303U\2746C\005\274Y\377\241\275\rt\356<J\377{=C6\346<\244e\214=\301\207(\275f5U=Z\312\220=\303\340\316<\236\263`\275\013]\017\276\373%\225\274M\332V<S=n;\377\322\233\274\326\270\335=\304\253B\275\346\323<\275\016\346\323\275*\353\340\275\341\003\351\275\351\313h\275\032-\211=~[k\275mW\224\274\001\003\314=\216^\346\274\267\271\222=\325]\367<\363\356i<~\"a<\3005K;\276\037\367\274\206\"w<y\371\231\275\344\230\372=\3578\201=U\304\325\275OT\274=\316\314Y\274\316\310\301\2755\340\254\275~9\311\274\365\202\202\274G}8\275\003\276\236<\311n\002=\023&0=n\236\200\274+\tb\275\354\023\300\274\016ov<\360\227\013>oh\013=_\300w\273\226u\016= \253h\275\022\220 =T\242`<;\246\2348\375T$\275\2055;;\302\251&\275u\202N\273\310j\352\272\324\206\304\274\254\202\"<\343n)\275s\366D=\344\250)\275,\311\205\275B}\264\275\351\036\013=\253\354\r<\316\001\326\275\227j\255<\201\3775=\025\314\201<\023\207#=\222u\033<YH\005\275n\000\331\274\344\352\367<\355\324\320\275\035\357\217\274\305\"\210\275\307t\204=I:!\276b\303\332;\364<\272\274B\257\346=\344\\\221<x$\002\275\373y\265\275\207!\323\275\261\325\276=a\315\271\274\354\232`\275\024\274\227:tz\013\276,\362J\275m\251\246=\377\177\325\274\242\312\343\274\310\013\212\274\235T\342=M\351\226\275\206\363\232\275,\344\031=\315\013a\275V\332\010\275\326s\254;\333\333\305\275\033\352\":\002\354\311=\023\020J\275\315\246\\<\241G\277=\020\2019=\325\265\330\274\361\270\037\276\004\244T\275\204\334\007=R\332\206<\235\016\343\275\'&\033\275J\007\326\275\270t\231=\323\'\205\274\373\244\232=\372\021\225\275\t1&=z\343\026;\357%\356<kS\265\273\200\270U\275\000\255\214\274\270\242\212=Xk\027=\270E\307=>\252\260\275\271\207\035\274\345O\223\274\222\337(\274\037\203\230=\230\305\334\274\245\242\001<]\215r=4\355\222=\3075\252\275\307Dz\275m0\360\273G\236\206<|Y\003=:\007\203=\317$\251<.\211\337\2754\206\232<5LD\275F~}=\324\006W\274g\373\256<\331\177-\275\231 s\275\000\235\256<\001\237Y=\366\357 \275\036\213\311=\351\267\336\275_?\004\275\246\003\234\275\212f\177=\024\360\337\274{\212>\275\344\355G\275\330a\034=F\357e<\352N\231\272WG8=8W\027\275\302>\276<W=\024\276\3520\006>y;D=\024Y\207=\227\005Q\274\320:^=\310\320W=\\\005p\273\243\277i\274\240\344\351:\'\300\275\274J&\272<\351\237\026\276\262\372\321\274$[@>\2717\231\274\320\206u\275\216\233\005<\202\353\375\275\227\352\006\275\024\203\263=\323\323\021=\204<\323;\366&\243=r\244\307;\217\364A>\355\275+\273!\214\304=\231z\205\275O\355Y=/\325\252\275\347\271\254\274\300\364\213=f\257\220\275:?\316\275\325y\037;\327O\273;\311\032\324\275\223\031\317:S\357\017>M\353\013\276\242\035\235=bv\254\274\314m\214=\030I(\275\263\t\014=\373\004\260\274\202\010\237\272\357\001e\275\r^\345\275/\331\243\275f\304\256=]_P\275\201\242n\275\326N#\275\340\001\224\275\031\301\262<\201\243\363<\205F\006\275\271\030%=\311\271\375\273\353.*<\253\246\003\275\032n\211<\032[\020<\333PH\274a\323\032\273\346\277\360<)<N<\317L\217\275n\016\016=\212\244\\\275.t\233=r\254\320\275\206h\234\274\326g.=\3564-\274\353\254\\\274\271\t`\274\334u(>\273\336\361\275\n\365\214\272C\354\252<f\264\321\275s\034#;b\210I=4\320\216\274\r\222:=\211zz\274r\275\310:@\305~\273\234 \302=\304\300\267\274\036\311\370<\322\335\305\274-&\241\274rc\265=Ik-\275\232\244z8T\326\235<\355J\025\275\234\3124\275\000Z \274\333\261\024=\254o\233\275\255\364J\274\306=\257<g\345<\276AnD<K\220\344\274\221\372k\274\211\031\370\274\332\361\003=\362\331\000=\353\370\007>\233\276\303=&\310\373\273\\\340(=@J\204\275\347d\022\274\365\202U\2755\2133=\211\377\222\274\"\222S=m:\005\274\377p\371\275xE\016>\270\362\245=\320m\206<\203\201\342\273w\373\200\274\233=\025>`k\204\275\336\320\206;\344\377\220=0]\260=@{\316\275:\016\261\275(fN;x}\006<\031\214\217=\004\030\035\275\216\371\256=\255Q\350\275u\315\246\275\346\220\230=\270:\213=r\334\242\275\020\324?\275\233)\253\275\263\322K\275\363\320\363=\005N\313\274j&U=\366\"\022\273\217\233\341\275\232\375\321=\300\343U=\335\334\265\275\277\255#\274\0243\020\274\365\256\247\275\226\313\253\274\312\217\320\275\005\013K<\305wO;\355\022\242\275\3733\300=mu\304\275\"\370\234;\232C\271\275\036\207\214\273v\264\022\275h\320\004;0\022G=\200\2030<;\307c\275\371@\275:VV\332<\311\204)\275\276fd<\360\356\353\275\357\003(<K\345\342\274f\322\025\273\226\350\215<\250\247\220=\231\026\320\2732c\005<\304h\030<\200`\260\275*\325\271;\265\204\021\275.\334\373\274\363\304\337<\351\317\250=b\032h\275\345\201\375<X\264E\274\233\361}=A,\001=4k+\275a_6=\325h\212\275\323Z\200=\034N\231<\017\330\211=S\277]\275\361Y\311<k\365\261\275\352\366\203\274\356\0249\274p\200\037=B\036\273\274\252?D=\345\266j\275#\311,;\r\226\305\274b\256\252=\3120\305<\353\216\327=\263\256F=\021\335\202;\250W\330=;\372\363\274e\305\352\274\377\032\202=\375\236\304=\030<\036\2769Mc\273D\007k<z\023p\275\364\335\222=-\351\200\274\215\014=\275\347\367\022\276\363\230\224\275\002\350\240=M\021F=\023\371\252\275z\326\261<dK\n\274\362M\241\274\275_\316;\377(;=\032kC\275n\371I\275\311n\220<sk\021\274\313\271\255\274\030\n\010\2762\304\302\274h&_\275\225\366\260=\350;\230\275\271q]=n\2346=\325\261\001\276\360\336\306\275\226\032\375<\303\250\302\274-A\366\274\347\243\307=Bx\275\274\337\323.=\331\312\214\2754\332#\2758\233\224=\031h\257<\211|T=<\030\306=\261F\014>\332:R\274\t\006\230\275\016\006Z\275W*(=\226h\024\275R8\026\275\027(\324<D\364*>\203;D\275\020m\027\275p/\030<\273B\030\275\325\254\007\276\r\337\\=t\355\274<\247Ex\275\260\013\035=s\346\302=N\207F\274\222\335L\275\275Q}\275\177?0<+\017\362=\365T\242;\315ML=\350Om=\367#\223\275\010\201Y\275\024_C=L\2002\275o\265_\274\203-\202\275\222\302\026=c\251\013>\255\363\227<\002r\235=r\010\320\274?\306\210=k~A\2751\306\363\274\223\177#=\220\034\235\272\263\354\016\275@\362\025\275\026\027\017\274~]\214=Je\203\272\227r\300=\355\320\037=\311x\260<\004\350\236=Tfp\275D\232\025\275\372\001\364\275\037\"\020=\366?\261\275\030\346\203\275\272d\212==L\332\275\026]Z=\200\320(<1\316\216=\031|\335\274\273\346c<\252g\225\275-\274\237=\024\244\035=X\266\273<\246N\373\275\273\204\221<h\025V\275\240\306\006\272\021\205\344\2749X\245\275y\254|<>\016\207\275\310\260~=\214\256\240:}\000U\275\013\232\210=\005\356\231=\230\004\220<\210\257s<\003\222\277;\273\217Q=\014\307/=\204\222\374:\251X\353=\2254\257\275^Ln=\355\\s\273+&\272<\231\364\r\275U\270\235\273u\2023\275\207\324\343=\206\327\231=;Gi=\340\302\322\274\366Ij=\312Ki\275/\371s\275\332*\034\273\2265\342;\257 \\=}A\'<6\313\366\275!\336\252\275\256\034\007=\223\202\235=\002\263\312\273\370\006\313=\227\336\020\275\3051z\275B}&\274wy\257\275\212\231\342\274Z%\275<\030\342\010=\351}q\275r\367\033=6\0011<\200\263D\275q\363\352\275\363%\262<^q3>$\242\010\275\201\316\332=\212\'\204<d\346\017=4F\250\274\372J\372;7\351Q<9\023e=]\261G<uK\245\275\334\nf;\255%\313\2743\201\014\275\362T$<]?\213=k(\004\275\342\376\302<\257\253\202=\304&\035\2756\354\367<\273\351\010=Ar\355:\351\215\224<\316\372\032\275\274&,\275\'#\354\274t\003`=\363\\M\274\361\271o\274e\325\036\274\004\341f\274Zo\034=Tg\376;\365J\363=!\026x\275\003\234b=D[6\2751\334\243\273\362\234O\275;dt\273\353\265i\275\210J\010\275\020\223\032<x\013\206<\262\215\201=\2707\262\274s\202\224=\374\213\006\276s\375\025\275\200\250\006=9\037\312=Z\321U<\016\255\023\2756T\367=\274\244w\274\274\361\375=\375\247\225\275\313\253\330\274\347\202\346<\205\364\220\275\243\222\005=@1h=h\304\340<\260\344\247; %M<\204\366d=[\252\254\275vTB=%\263f\274/\324E= %\221\273\230\353\200<L\025\014\275\311\014\352\275\022\345\204=%\241R\275\300\325\223\275\222\026V\275\271\000\305\274\203RF\2759\023\364\272\\M\360<\223\310a=\234~\347\274>\245|<0nq<p\024\323\274\262[\215\275m9\017\274\007D\263\275-B\241\275\247\034\230=TS\233=\350\344\007=\345\217\375\275\326\017Q\275\265oB\275\355>\364\273\234Hx=\264\262\335\275Q\222\t;<\356\225=\007\342\364=$\2100\275\331@\235\275\340\366\013\275\361\276\010\2756\036\'\275\310m\215<b\275\251=\346\020\320\275\370\377\342\275{\370\340<\217n\325\274\203\300\311\271\333\274V\275\260\030-\275\213]\320==\303\234;C\203K=\346\220\265=\272\375\003\275\034\277F=p\207\014\276\344\336\223<\313$v<\3149\233\275\372i\224=\321LZ:Z\377\251=O\365\035\275\240Z\370\274\277\305\364=\264\025\005\276ju\342<*\037\356\275\211\375\234=\'U\262\275j$\006=\203\237\216=\352\210\335\275\267#\277<\030x\271\275\351\332\322\275\030\033\226\274\265\312\367\2735\204\221<\3466\246=\005\033\014= \242\344\275\273F2\275\225g\351\275\220A\211\274\200X\235\274\212\335\255\275\331*o\275\377\275\273\275\"\312\310;\224\266\244\275S\376\275\275\377\275\220=5Z\306:\335\300\255=\035/\212=\350M\036\275\247\224\264;\217\336\204=X\321\024\275\276\257a\2756\230\246\274\317\205\022>\234VV\275\026\225\307\272\220S%\276\326\213\231=\3103\233\275f\203\306\275pt\314\275\300\257~=\217\036\273=\020\'\202=\304\215\264=\300\331,\275!\033\273=<\235\216=\361\007\014\275:\252\266;\025\210_\275$\244\215=\024@\306<9\345\220<\351D\021=\033\337\005=N\321\262\274\250\275\313<\024\247\356<\014\332\344\273.\303\242=Jl\223\275\\\017e\274\202\330\366\274B\265~=or+\275\261\234[\274\370\240\000=H}\010=\351\027i=\232\220\213=c\355\312=.\203\204\274n\242\353\275M\027\242<\331w\032=y\253J=\377iF\275\350\347\300\273oX\254\274\365\272o<l\363i\274\256\232\211\2759y\337\2738\310]:\324\375B\275\021i\232=\201\332\">\3319?=\254\325W<\265\345\"\275\312\262\"<E\256\247\275\201\032\213=\234\257\377;)\352.\275)\272\336<C\2474=\216E\000\276k[c;Y\212$\275\372C)\276N@c=\213\363\036=\241n)\276\"\303\025\275b(J\275x\313\275=\321\034L=u\2313={\316$>\334R\303\275Y\025\253\275\027\256\267\274\'GX\275\032\345\243\275g@B\275):L=\247\222\207=\363\251\330<\274[\352;\224q\357=\320:\017=\004:\232\274R\262\351\275d\365n\275\031\375G\273\214:\n\274\024\n\361;(3\'=\221\241\353=P\343\'\2758\214\017=#\336\205=)]\331\273]\373u\2757\301N=\242\227\361\274-G\232\275\362\244\025\275\323\306k\275\276$\270\2751e\031=\350\250\257\275f\300];\356y\272=\326\325\202\275F\2456<\363\244\347\275s\302m={\320`\275\377\254\307<\031\240\022=\242<\317\274_\306\313\274\204\331o=OG%\275#?\006>\037\244\314=mt7=z\221\231<\364w\275;h%\322<\275\276\215\272\210\001\261<\370D\243\275\364\263%=e\025g<b\023X\275d\235\301<`7\306\274qjP\274\372>\200\273A\200&\275M\352\033\274\033\260`\275Wq9=\037\030\325<\274\023\004\275L\323U\2731D\220=\220$\023;\007\201\304\2746\343)=\206\3535=\271\251J\275\321F_\275\367]\036\276C\367\025=1U\273<$\244E\273=\334\005\276\217\362.:\377\364\266\274D|\353=\\\357\261\274t\364\305=\327\211\222<\024#\276<l]E\274:\333\312\274\244\376\006\275\004\272E;\225\263\017\275vI\304<Y\300\374\2740\246I\275@\303\327=\377\371\330\274\311t\367=\026\235\014\275\0204\350\274\212\353\363<\230\362\276\275\027u]=c<\013\274\n+\002=\'\225\371\275oM\351=VV\222\275\215\353\257<\001\304\214<\033\204\323\275\225\341=<H\236X\275\026n\231=KM\254\274V\026w\273:79<:\034\217\275s\213\363\274\356\005l=uV\207<\262)\343<}\246*\275\361]x=tp>=_\375\251\273\234\217\037=\307\"C=T\211\237=9V\300=\307\343\366\274\t>\324\275{\266\233\273\321z%\276\221\024\322\275\270\246\352=\256S\203=p\275\316\275w\365(\275\302\336\000=\232\277\311<\214\206V=\326Cm\275\236\321\274\275(\202\225<\205\225h<\366P\274\275\217K\002=y9\334\274q\330o\273K\354\314\275\177\244\000=@\214\225=\017\035:=\225\250l=\306\373\337<\031FU\274,h\177\273^\271\257\275\333\340\251=\352\331\311\275.\323b<&\313\032=?\300\005\274\367\217\216<o\177\371<\261\363)>\275`n\273\270\000\362\274su\207\274\274\275\302\275R\374\267<\332\023[=\231\2558=\n/g\275\221\373\245\274\320o\307=\235O\002=\235 0=1?\243=\361\004\217\275W\200\230=AD\024<\330\374\225\275\r\343S\273\340.1\276,j]\275\245\216\201\275\244\367]\275\2019\251=\222q\314<\342\3164\2763\210\007\274\366R\331=\023M\020\275[\'\000>2\246\342=\364\335\177\275\311^\224\2748%\243=\276k9=6\322\351\273\327CG<J\212\210=\312\263\227<N{^= ]_<A\013\n=\'+\257\275\231\210\002\275\310&\006\275\343\300P\275\342\237\n\275Y\022\247\275`\217\247=}\302\323;\213\0032\275\010\204-=\232\006\221<\240\252\331<2\331A=\037A\013>d-\004\273a=7;>\372\345\275\331#\001\275\2760\306=\020\372\020\276\270\330\231\275{\263]\274\2547\360\275\317\023\225=\306`\016\273\274\023X<\373\024\230<\246\034\330<@\202\237\275\373\245\211=\031\003F\275q>J\275\327\206\005\275\006\240\214\275\223\241\216\274C\357\347<\2660\303\275\317\377\231=8-\360=j\3256\275D\205:\275\325\267b=n\360\246\275\205\005\231<y/\332\272\366\262\314\275T\300v<\301\025\341=\314\254\214=6\324<\274+{\025\275\222\220\215\275\023\335\243=\321\247\251\275=\226\375=\252\204\203=\214\305t=\222aK\275\000h\035\275\274q\221=\027\240\022=h\335U\275\345\340b\274h\346\256<h\177H:e`\276=\302\244{=\2300\200\275veY=\325\321\326=\377\360\301=\217\223\221\275N \310\273\260\345\014\276\311\177\027=(\237\330<\007\002\263=Pov\274\006\275\377\274\356\345\327<\016e\377\274\320%&\275\3358\235\2752\005\032\274|\373\327;\014L\264\274\344\357\246\275q\357%=1~F<\264!\027=\030xY\275Z\274\317\275\2406\035\275\325\277\013<<&\004\274,\205\025\275I\330\243\274g\014$;\261oq\275\350\333\003=\032X\036\275C\026\371\274bl\277\2747\243\333\275\334\315i\275*\221\250\275\360m\235=\234\302\336=M3\001>\242\336D<N\306\023\275_\310?\275\333\357\026<4\237$\275\014XU=\200\215\376\274\374\212A\275to\347<\200\303\204\275\026\324\353=\272\310t\275\323\312\014>\026\0378\275W\322\243<\240\324\266=\341\247\375<o\366u={\350}<1.\230<e\362/=\004\342\223;\241\367\016\2759\250\036<\215\000\317:o\002}=\372\240\223=\2166\270<\333`\007=\325\267\231=\257\320\240=\250\330\264\274B\315\033=\n\346\336;)k\366=^\346A\275T\212v\275<u\203=\257\350\255=\337\371\r\274\003\034\343<\222g\267=|L\331=\321\205\026\273\376 {\275\\/\201=\260\202?=X\037\367=\367o\225\275\335\301v<\002\302&\275@\251\314<X\237\267=\210\221Y=D+\331=\366\216f=\217\t.\275@\374\231\275\\m\201=\242\233\221\272\337*\246\275\030)\032>\273\275\351<\333\006`<\223\206D=-d6;[\362\000\276\305\227\343\272\241\021\023\274\233\332\260\273\352\336\216=\247D\357\274\372\356\226\275W\023w\275\010\365j\275\211\200 =i\252t\271\270\325\\\274\371N\202<\032\274#\275\221\333\221=\303}\256<\231d-<jpI\27404\330\275\230\345\371\275\014\315\231=\274\254\213\275(D\353\275%;\307\274\030\025\204<O\334\216\275$\256\033\275\025!\206=~\334\250=o\263R=\037\"X\2745\342\364\274 p\006=t\013\263:\373\002\274<\354\026\211\275\276l\216=qQ@\274\312\321\014<\324\352S;\366x^\275\000:\231\273:t\226<\312\361x\275x\2220=\316\372\003\276\204\311\316\275A/\264\2739\300?\274<\322\020\276\304\317\037=\262$\344\275\362b%=\236\005\200=\372V\026\275\311\234\007<\315\321{<\210\346F=\005@\245\274[\335I\275\260S\253=\233V\334=i\267\336\275\037M\275=\333\332\005<\341<\253\274\332\247\224\274g\203\263\275\320\t\264\274*\254&<}\232t<\330j\035\275Y\201\204\275\377\235\300<\254\316\267;\245\241U\275\347Pg<\327\213\230\275\202i.<\320\355Z=~\223\354\274\223`\333=PL+=\235 \215;\355pd\275\226\260{=;N2=\375\257I\275\224\276\263<\004\265\006\276p\017\207\275x\244\261\274\033\247\353\274\010Z\010=\330\215\325\274\252\0270\2759y[\275Q&I\275%A\267\275\357\311\177=$!\221\273\312\374,=\322\016G\275\361\263\352;|\231\327=\217\277\003\276\330\370\205\275\031\215O</\251\370\274)P&=\275\217\277=\304+\341=\356)]\274Z\317\335:{\262\024>\302E\"=s\213z=\023\267\r;\272\024\235=Ik\017\275)\376|\273\310#\254=\246\306\245=\033\277\\7_\\\205=\233\252\200\275\2764\247\275\343^1=\341\376\r>P\202\322<\177\234\004=\275\036\314<\241Z%\276p4\270<\027l+<\002\251U<\371W\315\2736\354\266\274\026m\013\275eB\032<\354L\t<\201\243,\275=^_\274\036?\360=\245\272\271\275\rb*\274\240\356`=O\234\347<\367a\336=\337\021\344<2\023\225\275\353h4=\211<\357\274\020u+\272\242t\336=c\270\026=\351o{\274\003\277\350<\263\300\240=\336OB=\333mK=`>y\274\227\360\217=\013\360E\275M\211\215<\250\305\370<%p\301\274\232\007t\275\2101@\275\347\007\235<\013\272\231=\241\014g\275\006\371\267;\326\364\360<.l\241;d\365\241\275\262\032>=Q\203\r\273\207[0;\361w\241\275d\016\221\275\220Ax=\300j\227\275V\353\306<\235\365\331\274\323M \274\367\331\242=O\244>=\344\224\273=\007\030\215=O3\337\275;z\340\275\272\301r\27585L9\362E\361=\032n==\301\022.=F_\010\275WY\370=#\026\245=Jx,=$\315\025\274\034\005+\275H\n\304=\330\366\262\275\367%h=[OY<Y\377H=\214A\231\275\\\334\274\275D\220\260\275\267M\341<\325\221\347<\227<\001=L\266>\275h%\330\275\251\215\262\275Y\033\034\276z\005\263<\r^\262\274\202\242\305\275.)\312;\250\362\241\275\340k\367<\237g\006=\366\351\237\274Y8\023\275\311\253\243\273\271c\215<\366\'\311;\023\374\256;\264JA\275\204\243\306<\250\273\335\273|\323@\275\332\350%\276\222\254p\273\366\343n\275\376\031\201\274a\253]\275c\355\232=\n\212\370;\215s\233\275\331Ua==\367\211<\221\221\034\276\212\010\207\274|\206\324\273r\032\356=\332\255\350=\376(\007=y\326e\273\002 \260\272\360\010\204\275\242\326\334\274N\330\034=\0233\241<m\277\255\275\t\272\267\274*\360\361\274T\217\247=:\257U\276\017N\347\274\345k =\276\261->\252\2047=3j\212=B\215J\274O\375\346<8&\035;\314#B\275\031\206\035\275d\347K=Y\r\364\275*:\026=?\375\240<-w\271=\014\205\331<\314\313\276\274B\256\306=\246\347\200\274\035\326\300\275\236UB\275X\221\246<\347\366\214=3Ql\275\020=\013\2755\226k\275\331\260\342<\000\271\005\275\320\016\253=\247\'\265=\241\024*\2741\373F\275\001\326\333;\213H^\275\032hj;\217J\223\274_Ca\275\240\225o\275\264\035\363\274\017\r/\276tOg<W=\323=\255\257\323=\244\354\376<\237\316L\274\366@N=\301#\225\274P\001\201\275\261\217\246\275X9\225\275\341u\322\273\005\243\360\275\227^\212;\234\213<=\334\325#=M\345\t=r\315S=G\223\014<n\331\003\275k\177\326<Ao\222:V\373Q=>R=\274\373\321\222\275\350\336\262\275<(|<$\334\244\273\025\316\247<:B\277=4\024M\275\3739\222<;\312b=\257\203U=x\371\205\275\343\253Q\275\321Oz\275PSq\275\333\273\366=\255\'\273\275\203^S<\"\'1\276H\022\330=\265\331\360=\347C\"=f\212/\273\347\206\223\275\223\270{<\234N\214=\320\252q<T#\361;/O\343\274\307\273\321=\230\214\017\275\031n\207=o&\323<\000a\262<a}\027\275\327x\243=9\274\314<\276gi\274XX9\275\r:\316<t\344\035\275R|\n=L\274\240=9\210c\274?`\002>\220\347\355\274\035l\206=\033\302\220\274ys\375<\347\3373\275W\177\023\275\243n3\275\214\014\270=F}y=\236\223\304<\322\235\004\276y\253\207;@\216Q\275\244\254\366\274\201P\213\275\204\266\341\275\210\t\'\275r\nf\274\275\'\255<\224\374`=H\017*\276\261r\235\275\263{\240\275\207\313_\273O\254\032\274\244\313\351=\357\014f\274\223\n\313\275\"DD\275T\204D<-3\314;\024\270\256\2746\204\304\274\233\324\257\274+&,>\344\'k=\336\345\t\275-OS;\347\260\314\274\254\377\010\275;\024\037\276e\223\301\2738f\265;W[T<\345@\017= WM<\023\313\032>\273\273(\276\327\372\343\274\224\201\260=\220{\267=\360\216\242\275\334\013A<\005WL<\256<\220<\341\216\223=\020\303\360<\312^z=Eg\315<\256\\O<0\305<=E\351\367<\016\314\215=\330\005\347\274\265\n\t\275\376a\262=\025y\014<&n\273;\r\374M=\246\373\244\275J@k\274aZ\202\275\231\256\307=\210\'\347<\267\206\321<\376\310\257=\265\177\230\275Dk\n\275\320v\214<\260\000f\275\257\362\263\274oZp\275\004\013w\273Z\314\206=\344\260\014<\nS\004=\212\244\301\2747\t.\273B\212G=\212X\322=\223\271\201=M\376y\2749<)=\351\273\213<\036\225H=94f=\035^\271\275\016F\353\273\236:J=$\314\340\274q/\327\275\024\016z=/\001\366\2744\376\003<\347\3107=\216I?<3G\006;\243\336\217=\353;\301=\2124\340\274\222M\316\275\320\021H=\263\241\242<\177\\\177\275z\230\275=\264&j\275o\354\207\275VP%<D#U\275~\376\236;B7\314< \216\335\275B\2577\275\334\261\331<=\341_\275\240D\255<\230N\376<\202D\267=\026\tz<\223\014\007=\367\221\206\274\302r\377\275X\270\231=#(\315=o\225\336\275\337\336\034=\013~\334\275\365?]\274o\315\000=_x\270\274\244\260\272\274r8n=6\271t\274\016l\036\276\343\372\201=G\205\274\275\341H\n=\330\007G<*!\213<K\272X\275\357)\247\273\325\365\034=\335\303\321\274t\275\017\274*\205\317<\335\007)<\340A\024\275u\320\376\274+\333\241=\270\331\266=\235\016\306=;W%\275\351@m\275\245\030\246=N\211\025\274\370\247\336;\265P\237=`\023\231=\016[A\275\n=\261=!\367\010\275\216\264\222\272\022P[=9^\220\2754f\033=?\350\233\275\202\020<=f\351\005<q\031\316=\366\371\372\275\300\250\344\273\325\355\215\275\260[\242<\226x\313<\205k\363\275\247\374\215=m\352\265=p\037\265\274o\215z\275\211\346A=!\267[\275\376v\014\275V\311\r\275&\242@\275\356\236o\274\301\253\265\275\"(\265\275\216T,\274[\2535>Nf\"<r\370\241\275\313\r*\275\307\271\277=\254W\273\273 .{<|\227\206\275~%?=\306c/="
      }
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "LSTM_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/read"
  op: "Identity"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Square"
  op: "Square"
  input: "LSTM_1/recurrent_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_1/mul"
  input: "LSTM_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_1/add/x"
  input: "LSTM_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/concat"
  op: "ConcatV2"
  input: "LSTM_1/Const"
  input: "LSTM_1/Const_1"
  input: "LSTM_1/Const_2"
  input: "LSTM_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/bias/Assign"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "LSTM_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/bias/read"
  op: "Identity"
  input: "LSTM_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Square"
  op: "Square"
  input: "LSTM_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_2/mul"
  input: "LSTM_1/weight_regularizer_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_2/add/x"
  input: "LSTM_1/weight_regularizer_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/zeros_like"
  op: "ZerosLike"
  input: "LSTM_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Sum"
  op: "Sum"
  input: "LSTM_1/zeros_like"
  input: "LSTM_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LSTM_1/ExpandDims"
  op: "ExpandDims"
  input: "LSTM_1/Sum"
  input: "LSTM_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile_1"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose"
  op: "Transpose"
  input: "LSTM_1_input"
  input: "LSTM_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12"
  op: "StridedSlice"
  input: "LSTM_1/Shape"
  input: "LSTM_1/strided_slice_12/stack"
  input: "LSTM_1/strided_slice_12/stack_1"
  input: "LSTM_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13"
  op: "StridedSlice"
  input: "LSTM_1/transpose"
  input: "LSTM_1/strided_slice_13/stack"
  input: "LSTM_1/strided_slice_13/stack_1"
  input: "LSTM_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/MatMul"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/MatMul"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_1"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_2"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_3"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add"
  op: "Add"
  input: "LSTM_1/BiasAdd"
  input: "LSTM_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul"
  op: "Mul"
  input: "LSTM_1/mul/x"
  input: "LSTM_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_1"
  op: "Add"
  input: "LSTM_1/mul"
  input: "LSTM_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_1"
  input: "LSTM_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/clip_by_value/Minimum"
  input: "LSTM_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_2"
  op: "Add"
  input: "LSTM_1/BiasAdd_1"
  input: "LSTM_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_1"
  op: "Mul"
  input: "LSTM_1/mul_1/x"
  input: "LSTM_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_3"
  op: "Add"
  input: "LSTM_1/mul_1"
  input: "LSTM_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_3"
  input: "LSTM_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_1/Minimum"
  input: "LSTM_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_2"
  op: "Mul"
  input: "LSTM_1/clip_by_value_1"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_4"
  op: "Add"
  input: "LSTM_1/BiasAdd_2"
  input: "LSTM_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh"
  op: "Tanh"
  input: "LSTM_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_3"
  op: "Mul"
  input: "LSTM_1/clip_by_value"
  input: "LSTM_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_5"
  op: "Add"
  input: "LSTM_1/mul_2"
  input: "LSTM_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_6"
  op: "Add"
  input: "LSTM_1/BiasAdd_3"
  input: "LSTM_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_4"
  op: "Mul"
  input: "LSTM_1/mul_4/x"
  input: "LSTM_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_7"
  op: "Add"
  input: "LSTM_1/mul_4"
  input: "LSTM_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_7"
  input: "LSTM_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_2/Minimum"
  input: "LSTM_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_5"
  op: "Mul"
  input: "LSTM_1/clip_by_value_2"
  input: "LSTM_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArray"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/TensorArrayUnstack/Shape"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayUnstack/range/start"
  input: "LSTM_1/TensorArrayUnstack/strided_slice"
  input: "LSTM_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "LSTM_1/TensorArray_1"
  input: "LSTM_1/TensorArrayUnstack/range"
  input: "LSTM_1/transpose"
  input: "LSTM_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose"
      }
    }
  }
}
node {
  name: "LSTM_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "LSTM_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Enter"
  op: "Enter"
  input: "LSTM_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_1"
  op: "Enter"
  input: "LSTM_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_2"
  op: "Enter"
  input: "LSTM_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_3"
  op: "Enter"
  input: "LSTM_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_4"
  op: "Enter"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Merge"
  op: "Merge"
  input: "LSTM_1/while/Enter"
  input: "LSTM_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_1"
  op: "Merge"
  input: "LSTM_1/while/Enter_1"
  input: "LSTM_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_2"
  op: "Merge"
  input: "LSTM_1/while/Enter_2"
  input: "LSTM_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_3"
  op: "Merge"
  input: "LSTM_1/while/Enter_3"
  input: "LSTM_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_4"
  op: "Merge"
  input: "LSTM_1/while/Enter_4"
  input: "LSTM_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Less"
  op: "Less"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less/Enter"
  op: "Enter"
  input: "LSTM_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1"
  op: "Less"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "LSTM_1/while/Less"
  input: "LSTM_1/while/Less_1"
}
node {
  name: "LSTM_1/while/LoopCond"
  op: "LoopCond"
  input: "LSTM_1/while/LogicalAnd"
}
node {
  name: "LSTM_1/while/Switch"
  op: "Switch"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_1"
  op: "Switch"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_2"
  op: "Switch"
  input: "LSTM_1/while/Merge_2"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_3"
  op: "Switch"
  input: "LSTM_1/while/Merge_3"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_4"
  op: "Switch"
  input: "LSTM_1/while/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Identity"
  op: "Identity"
  input: "LSTM_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_1"
  op: "Identity"
  input: "LSTM_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_2"
  op: "Identity"
  input: "LSTM_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_3"
  op: "Identity"
  input: "LSTM_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_4"
  op: "Identity"
  input: "LSTM_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add"
  op: "Add"
  input: "LSTM_1/while/Identity"
  input: "LSTM_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/while/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul"
  input: "LSTM_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_1"
  input: "LSTM_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_2"
  input: "LSTM_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_3"
  input: "LSTM_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_1"
  op: "Add"
  input: "LSTM_1/while/BiasAdd"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul"
  op: "Mul"
  input: "LSTM_1/while/mul/x"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_2"
  op: "Add"
  input: "LSTM_1/while/mul"
  input: "LSTM_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_1"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_2"
  input: "LSTM_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "LSTM_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_3"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_1"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_1/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_1"
  op: "Mul"
  input: "LSTM_1/while/mul_1/x"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_4/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_4"
  op: "Add"
  input: "LSTM_1/while/mul_1"
  input: "LSTM_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_2"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_3"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_4"
  input: "LSTM_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "LSTM_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_2"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_1"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_5"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_2"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh"
  op: "Tanh"
  input: "LSTM_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_3"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_6"
  op: "Add"
  input: "LSTM_1/while/mul_2"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_7"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_3"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_4/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_4"
  op: "Mul"
  input: "LSTM_1/while/mul_4/x"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_8/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_8"
  op: "Add"
  input: "LSTM_1/while/mul_4"
  input: "LSTM_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_4"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_5"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_8"
  input: "LSTM_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "LSTM_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_5"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_2"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/mul_5"
  input: "LSTM_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_9/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_9"
  op: "Add"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration"
  op: "NextIteration"
  input: "LSTM_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_1"
  op: "NextIteration"
  input: "LSTM_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_2"
  op: "NextIteration"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_3"
  op: "NextIteration"
  input: "LSTM_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_4"
  op: "NextIteration"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit"
  op: "Exit"
  input: "LSTM_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_1"
  op: "Exit"
  input: "LSTM_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_2"
  op: "Exit"
  input: "LSTM_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_3"
  op: "Exit"
  input: "LSTM_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_4"
  op: "Exit"
  input: "LSTM_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayStack/range/start"
  input: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  input: "LSTM_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/TensorArrayStack/range"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "LSTM_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/sub"
  op: "Sub"
  input: "LSTM_1/while/Exit_1"
  input: "LSTM_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/sub"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose_1"
  op: "Transpose"
  input: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_t"
  op: "Identity"
  input: "dropout_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_f"
  op: "Identity"
  input: "dropout_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/mul/y"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/mul"
  op: "Mul"
  input: "dropout_1/cond/mul/Switch:1"
  input: "dropout_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/mul/Switch"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/rate"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_1/cond/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1216862
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/random_uniform/max"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_1/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/cond/dropout/random_uniform/mul"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/sub/x"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_1/cond/dropout/truediv/x"
  input: "dropout_1/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_1/cond/dropout/random_uniform"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul"
  op: "Mul"
  input: "dropout_1/cond/mul"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_1/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_1/cond/dropout/mul"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/Switch_1"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "dropout_1/cond/Merge"
  op: "Merge"
  input: "dropout_1/cond/Switch_1"
  input: "dropout_1/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2347794
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/random_uniform/max"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\263\346;>\320V\250\275\"\221r>\216\211\274=&\262!=\022IW\2759\317\020<Yf\324\274\224;\226=\251\221\251=Y\227\231\275\211\225\203>\2660\017=c\302\342\275\031\225\255<\262\007)\275\203.1>\320\302\370\274\034\2110>J\272\260;#Fm=\302\246<=\034`C\276k\356\330<\272\264\007<\003\344\350\274D^r>\351\260\000>\276h\246=\340<J\274\204\242o>PU\021\276\322q\035\276+d\370\275ko\310\275\245\323(\276\302\314\t\276\357=D\275\237\264!>sPR>^\371+\275?q\275===Y\273\237\024\205\276=\004\020<\023\313\335;\033\231\363:bWS=\272?.>5k.=\366\277^<t\211\\\276\207m&=)\362I\276\n\200\346=}\022\262<*\r\247\275\273\252\317\274\246\362\027\276\320\222C=\236\334\021=|\206\206>\000\252\036\273\331\224s>\034\n\375=\352\026\351=\030\030\260\275\246\342\376=\273\204\273\274Q\271V\276\031XT=\014\377\002>\303\307:=\211\2712=7\215\327=\220iX\276\374\030\277<\214\274\335=\206P\271\273\014\301\317=+.\224=2\226O>|\212\235>\233\341\216=\373l\025>Uz1\276\017\321\337<p\021\037>S\023\027>\032k\210=\367\"\354=\032\032&\276l\330\t\275(\256w\276\020\032\351\275h\230\231\275\306\024\344=\"\257\276\275\'\213p\275\366\257\224\275\022k\256\275\t\327j\275\307\263\014>\177\376\244<\313?\026>@\372%\275a\334\211=\023\\\214<\276\353\322=et\277\275\225u\362=\006.\234=G\033C\276H8\321<\316\257;\275{\333\002\276L\326\217\2754&\221>Y\327\273=>|p>}\024\316<\343\242S>\345My=\266()\276\010\341\223\275w\344\033>\320\035c\275G\343\r<\224\306\207\276\240\304\331\275\220\205\276=\303a\340=\'\'\312\274\t\377\305<\230\n\032=L\367\236\275c\343\321\274\370;\023=r\256m>S\211\307\275:z\364=8\245+\275\327\370x=\311\232\270=f\340\020>\377o\221\275\'\027\240\275\257`q\276\231\210\351=ip\260;+\373\213\274\356\003\206\276\315$\373\275F0\024>\\\240\245\275\317o\303<\346<A\276\271\307\340=^\2431\276\224\216\206\276\215\306k>\317\3476=_(\274\275<G\344\275\303\217(>v\266,<\217g\\\275&Y\024\276\352\343\010>\010\r\247;Wx\212\275BX\202\276~,\254\275\305\350\024=\264Y\376=Z\007\313\275_\374\353=&\035\211=g!\033\276G|-\276\352D\304=\313\362s=:\245\201<N\314U\273?\231D\276\330\323\202=\333+ >\262$M=\302z\017=\023\261\031>\006\037\376\275\n.$<\3330$>\236\2362=\020\005\241\275\310j\000>6f\323\275\234\315\'=/\223L>\304\227\341\275r\343a=\032\t\326\275L\317\345=J\r=\275\265\233I>\036\330\340\273Du\025\272\364Z|\273\356j1\276\354\316X>q}\003=\253\355?\275\221n\312<\371\2551<\301!\243\275j\006\n=\267&\302\2759\302\352=\266\235\017>\316w\300=\377\006\242>^\324\226<\221/\274=\317\334^=\325\276A>\022a\025<\014>\307=\252\332\033\276 \306\266\275\212\357\333\275\001sm\276\217\331\334=^r\007\275\000\3704>\320bU=7\260\t=\302(\207\275\361\313\350=\305\017\010>\037\360\305;\335\000\334\275A/-=\324\330\003>R\245\r=\351II\275\177\030-=\356\343a\275\033S\210\276[j\322\275\304B\026\276qV\330=\231\372w>\376\3747\276|\313\004>\000\331-\276u\274r\276\366\033\210\275\372(\260=\244\343V\275\361\000Q>\227\224L>\252\010\222=6\322D\276\245\220U\274\3264\027>\303>\325=\254\007\034\276N\207h>\250?\r\275J\2667=r\030\250\275P$\002=\251xZ=\020\010\224>\n\205\250=\013\212s<\252R\002\276\373\223\211\275)\'\313\275=\224^\276,o\227\275/\305\206\273\007@\306=\224E9>\351Z\025\2767\312-\275\262l\252<\r\234\"\276\010\023\322\274\251/\023=\320\033\243=T\023*>:\207\007=\334\370\266=\332\205\220=\235\233\215=\021\246\r>3\367d\276\n\"g>#\332B\2750\3453=2\3554\274\000>W=\374vh=N\177&\2765\244\021=\037*\246\274Oc\026=\364\251\006\2765\240\327=\257e)\275\3035\222\276=\306\006>\265\204\217\275\224\000G>\013k\220=\037<4>\326\361\002\276\274a;\276\027X{=\316\305#\276\365,W\276\340W]=X\257\210=\223Z\013>O\230\r\274\013\270\235=E\276\210>o]\251=.\303\253=\340t\253=\324\310\222\274\323Qi=X\350j=\260F\022\275\033\325\r>\334cM\275\2239]\275stw=@\234\033\275\241\240\317=\0106&>+ \032\276\326\001%\275cj9\276\253\2711\276V$\234;S\374\020>\033\031\003\276\276$\315\275H\004X\276XF\t>\3037\236\275\225\345i\274hi\315=s\233I=#\204\003\276\346\301:>\\\245v=[\311\034>\315|\t>\370\343\000>[%\261\2748}\377=\244\313\303;\"{\204>|>%\276\024\226j=\016%4\276\265\331\027\276\212*\207=\213\263t\276\027S\003>\325\324\360\274\302v\033\275\032\223C\275\322\253@\274\016\337\371=\356\016\014\276\033g\266=\305\335\240\276\340\221\003\276U3\230:A\336\037\275%\007O<\251\230k=\325#\003\275;\231\000\276L\325\227\275\3346*\276\010\243\023>\n}\177\275M#\031=\216X\325=\365\251\231\275\215\274\342\274\257\250$>a\232s>\357\267\355=\222e\265\274\246d\035\275$+\251\276\317\277K\273>O\232>\347!\330\275jK7<t\362g\275\010\341\313=*\234\250\2763\231\372=^\210\232<px\234\275\335\340\232\275@\253G=\'IB=\321ba\275\371\204h=\221\020F\275\017\350o<A\201/=\247:^\274>\035\255\274\"\367\375\275\202(\177>\177a\204>{SQ\276r\"\030=\037m\010\276=\261\252\275Ik\213=j\036k>8~\035>\005T$=\317\203\214<\373\027\245=\370\335\017=iRf=Le-\276\367\\\353<\263F->\246\022\357=/\273\210\274X\303\345=\210+~:z(w<#I-\276\033+\316\275\230\033P\274\020\270\'\274\325\221\"\275f2\367\275%P\227\274\260\336\t\276c}\261\273\27200\275\336~\261=\212\0226\275Wb!<\211\'\207=\\\372\327=\013\276\014>\257\251\016=|L\232\275\247\0007>S@Z=\216\030\255\275\307\305D\276\025KQ<\370\333m\275\034\370)>\374\362R=\244\"q>&\236*>\212h\352\275\272.\270=\307~\302\2750\331\247\275jJ\000\276\343\022\276\274b\306<=fp\233;\307\013R>7\336\216>\374\341Q\272\373&\206\2762|(\276l\232\226=\022\0255=\214x\272=\003U\010\275\021\337\\\274\302\325\023\276<\030U\2738\"W>\336\357\034>\323t\006\276\"4H>\031\007 >o\204\021=\267\214\243\275o\253==4\266\234>\375\204\270\274\'\365Z\276\347Jv\275\255\360\221<\240,k\275{\241\364<\n\352\220>\233\362`\275A#\010>\243\3420=WuR>W\200\373\275J\001\001\276\022\270\003\275\305\340\206>0[\257=\024\340\351=\177\\\234=)\262&>\001\366V\274\326\200\027\276Od\2629i\030\256\276 \331\303\275\200\313\347:\247\373\327\275\233\025\005\276\017\334!\276\305&\034\276\370ty\276\006\316\323<\001\006\320<Je\343=v\\\265;\000*\330\273\353\376\231\275\3764d\275\023\271\216\272\014}\031>\322\3107\275u\204\355\275\275\031-=\234.\240>Gq3\276\374f\337\275\321\344\310\275\224n\225<\273\231\277\275\355!\301=\"6\274\274l3\034>\306_%=}-\226<h\264\230\275\215|L=:\242\013>4\246\247=5\302\315=\2222\010\276i\030\027>Z\276\">b\030\366\275\'\260)=,\307\020\275\365\360\370\275\202\222\177=I~U=\342\344Q;pp\233\275)\264:\275\261\330\224>\312~\023\275\376\216 \276H\0234;\t\200Y\276J\324\325=j\326\204\275\275Y\363=?V\n=4\027\336=\214\034\004>\227\2547=P\020\031>(\262.\276\375 \234\276\363 \324\275!L&=\2620\260<\"0\372\274\301,(\276]\231\037>-{\303<z\300\333<\276$U\274)\342\353=A\262W\276\362~\002>\371!\025=u\222\003\276\371\207U\276\037\322\305;\000\203o\276\360\222\361=\330\237\324=\201\307_=\377<#\275p+\030\276:.\274\275\227S\303=8\203\004\275<ZV\276?<\373=g\000\233<\340\024\352\274,\337\342<\212\327O=\376\324\327\275|\377\032>;\024\360\272\201>#;+\320\370<P\371\362\274P!\200>|\004\245\275\365=\211\275b5\245\276\230\365\331\275\212\205\202\274pM\000\276k\225Y=\272\364\316\275\374\273\203\275\250A\221>P\014\252=\201\261\252=$\200\177\275F\333\002<:\215v\275V\334\330:\260\325\212=\3676\221\275|\221|\275\207\233\213\275\346\333\3559=\272\272=\341tA\275\241\223\217=\324^\221>*c\313\274\217\002\252=\241\214*=\366_\003>[\036\200\275\005\374\351=\333\"+\276\365\261\022=M\354\246>%R\241\276N6s>\201a\313<\303T\322=\016|\324=\235\223\307=\n\235\252\275\236Y@\276\233H\212=\010[9>P\254H>3>\030\276\253\353Y\272\016}f\275\300}\003\275J\264p<f\374\235>g#\353\275\324a,>C\271%\276\020X\346= \262\367\275\374z\355\2744\314\214=\3530\220\276qq\320=\353dW\274a~5=\'\226\226\275\010\254)=z*\325=\037\022\017\276C\355<=\257k\322=\r\361\212\275\023\224c<\256\245o=OZ\314<Al\310\275\241\000B<W\030~\275\232\375i=\035\272\026\275\206\002\235=\nL\227\275\342\244\345=\332\216\345\275\354\343\002>pR,=\310\244\304\275\300\310\037\276?\333\376=T&\271\275Nz\224<x\342\235\274\020\335V=\021+\276<\377\314B<\376\003\230\275\273\233:>\027\215-\274!\037\365\275\2626\225\275\243Hh\2752\264\346:\224o\357\275(\336\343\275e\311\210\275\007\002\217\275Cd\021>]\357\227\276\353K\207=PK\355=\021\\X=\270\210\013\275\350\013C\276j\035\202\276\330qp=<\215\027\276\365\355E>K>\364\275\237\225\357<?$E>\004\ts\275\362\335B<\345\276\022\276\030\241\337=_\"c<\260\273\223=g\r\225\274\265\226)\276|\211\201>\355\315\204=\303:;>e\240\213\275\003o(\276\211\373\235<e\033\037\276D\301\362;\213\032\020<;k+\276\360\016\034>GR\203>^\010\340\275\356\271\007\276\373\227\003\273\242\250\211\276NxY\275%\023y\2759\273c\276\334\250\253\275\300{S\276BH\256\275\334s7>\013?\275\275>\361\225=\260&\027\276~\364\221=U\256\267\275\374\373d\274\223\002&>v\013\245\273\345[\351\275\360\205\323\274\006$\350\273<[\365\274\346DZ>\316\346\340\275\030\r\220=\343\036\265=\201\013\224>\256o\266=X\331\247=%![>D\026\205=\360$I<\n\026t\275\177\347i\274\220\312\346=\202Q\301\275E\207_\276lH\004\276\221\352!\276n\200\347\2752oI<VE\357=@\371e\276\303\312\324\275\004\300\013=\267r\302\274\031\020\324\275D\277$\276\354\316\240\274o\375\332=P\356\237=\003\227\233=\244\3349>s{N=A\006\346=_\217\254=\374@\023\276?\026\344\275oQ\353\273\204\t\007>\341\034\214;\035\355m>\217\375\244=\1774\210=Dv\030>7[\202\276D8G\275\0213*>/\352\341\274#\304.\276\001b\235=j\230\003>2PJ>\357\320\342\275\301\2016=#s\014>\2266,>\373AI\276\322Pb<!\250+;\330A\220\274\321=9\276\272a&<f\332\215=\272^#>aZ4\276J\\\036<xM\225\275ke:\276\236\200\253=\014G\036>C\332\214\2758\376N>\227\267\245\2748\373\242=W/3\274\250\225\215=\364\331\010\276\300\336N>\305\210Q>\376\253\230=\352\r\211\275I\307\277\275z\216\372\275gL\022\276\303\241\225\275@~r=IN\244\275\021>\204\274\202\243\217\275\026\360]\276\201\354\236=;7\225=\230\331#>\255\375\256<\300\213\260=w\3237\275\207\373\025>\235f\202\276\020\357\025>\367\241\220<%\030X\276F5+>\254\344U=\237\225\255=\013\013\006>Ua#\274G\201\311\275\252`\360<\334\321\252=\347\001\031<\234\331\231\276\264\375t=X\341\036\276V\014\342\274\034S\371=-\020\337=\206_\t\275\224&\374\275\240\026\201\276\274y\247=p\277Y>}\301J=A\374\006>,\261n\275\366{m\276\257\241n=\305I2\27627\023\276\341\217J\275\3174:\276\223W\354\274\005\354\230<\327+1\275\003\352\250\275o!@=\240\370\362=\366\244\177\275j\275\004\275x\'\264=\237|(=\343\022\">\242\234\002>\311\202\027>\204\305\035\276J\265\">D\375\336=R\177\224\275\370t\t\275\226\365\n\276\353\2375\276+\301\343\275\006<\201\275qR\224\2755lU\276\270\234\022>l\372K<\351e\277=\350@\360\2757_\345\275\376\226\243=\342i\217<M\177\374=b\034I\275x\026/\276\336\006\275=\202\030\254=~\330\034>W\363\006\2761VA\276;8\274\275_\235\314\275\327\013\024\276E\331t\276<\275c\276o\337\365<\'\321\000\276\2755\032\275)\252\250=\301\024\232\275\000g-\276!]D<M8`\276&\353\224>o\231a=BF\034\275:\357\023=>\270\235\275\311\367\023\276F\330\232\276,\216\037\275\244A\177\275/\356G>\224?m=\262MK>Y\266\t>\270\034\214=x\313\205\276\370\206y=E\032\211\275MP\271<6\031C\276U\332\010\274\314\361;\275#(\305=\251\2277\274\177\006\033\276V\373\231={\245\275\274\304\302#\273N\272\251\273\351\003\250\275\201\345\302\275>Q\206=\222\371\336=\271\263\371=o|\343<\225\261!\276|\376\233\275\303Wx\276F\250\255\270\341`\215=\354t\355=l7\007\276C\242\247\275\312Uy>\312\025\206>\302\363\246\275\363Tg=\252\240I>\233\016\335;\026$\017<\007E8\276\245\357\026\275\300?\243;\315\330\340=\203\023\264\275\372g\333\273\311\276\371;\rg\340\275\354+\001\276"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7268577
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/random_uniform/max"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\n\334w\276\365\021\034\275\3106\034>?N\t<77Y\276#\266`>\325\305W\276[\371\243\275Q\252\217<\242A\035\276~\0130\276E\300\202=-\345\033>\217\006\214\276+\204\247\275\325\321\247\275P\001\201=\256d\275=\317\355\370<\016\344\254\274\345\301a\276\263\000P\276\355\014\036\275\245)e\276_M\227=\363\247\343=8\355\000>~\357\023=\037\235\324\274V\371\221=\030\016\312<*\3745=\031\3279\276\002\377\'>\365\034\032=\177zU\275\253\236l\275\312\2749\275\342\3572=S\332k=Q\245\\=\221\363\031\276}@8\276O,\233=\002\243\001>\334\336\003\276\313\255Q=\231\310k\276\322\020\231=\307\346\363\273cf6>\\i7>J\235\227\275@\302\307=\323\233/\276\367\303\035=i\334V\275x\256\270<\374\370\224<\234]F\275\327R\321\274\224\306&\276\346\266$>R\215\206=\326\200\006=2\035\003\276\247\226\324\274\360\205\206=2\334\303=\"z\035\276\365\024\364\275VW\303\273\3212?\275\241T\302=\202\237!\275\024\032\312<\352\375\252=\336\255\201>G__=\342\352\212<P37\276t\320\260\275\001\234\213<\363\327\371=1\330!\275<t\274\274\245\2634=\000\216\261\276\352\213\222\275r\372U=h\364\275=&\326w\275\362\271$\276.\177@\275\321\241@\275\277\207~<\"\337\025>\025\334i\275\253\226\340=\3423\343\275\233\271\226>\310[\243\275\203P\270\275H\255\024\275?g\014\276p\306\016>\252f2\276 $\037\276\225\3157<\316\231C=\0272(>{\245t\276L\246^\275,\311\007\274\034\032i\275\201\355\303\274\374\271D\274\177\320?\275\317\204\246\274K\031\216\273d\214~>\211$)=,\0050>$\360\212\276+\022/\274N\222\224\276P\000+\274\0277\027\276=\004\362=\002\007\023=\263\017\n=>\331H;O\001\366\275,#\033\276\331\223\204\276\020\033\312\275n\332p\276\244Y\227<\037\217 \276\274\356\312\274\026\2242\275\216\026\250=\352\231x=\341\r2=\247T\000\276\221\364~\275\214,\255\275\325\353]:w5\177=\207\202\201<\202\233G\275\024\325\203\275J\245\330=\233\343\335<f\022\376\275T1\014\275\376\326R=\263\300\362<\276\326M\273\315\036\327\275\334\230\244\275\216i\030\275\257\235\330<J!\235>0\306&>\326\335@=\013\376%\276\365\375\014>dw\245=\211\355\252=,\345\230<$\030!\276U\323\">JC\037=B\215\277\276\035\212\356\275\270q\267=\320\234g>2S\014>E\334#\275\330\t\r=bL\014\276\356f\t\275T`w\276\351\034\202\275\277\370\304<\365\025\217=\327\317h>\373\367|=^\205\205\274G\356\000>\240\370v>x\250\357\274t\"\023\276\310\026\014>\322\207/=*\273\370\274\3377\314<\324\2733\275\262\353\304>k\026r>n\001\265\275\'\346\004\276\321\211+\274L\006\004\276\'!h\276\2603s=b\365;\273\002<\361\273Q\357\027=\3243\006\276/\335\t>\302x\267\273\003C\272<\344X5\276\315\374Q=\001\203\217\273\376\374\032=\211x\343\274\24535\276\256d\021>ftk=i\315\266\275\2546*<YE\276\275f\235\'\276\017\353\230\276\226\360\000\276)\327\340<\262m\336\275\031\331B\276\000\026\002\274F\200;=!\013\003>\246\224\302<&$h\276.\023@\276Ha\000=\260\221\000>\255K\260\275O.C<$\211T\271\313\354\032=\212\375\351=\266\232\006\276\002)\025\275\363\032\255=\334\254H\276P\031Y>7\324\211\272\3678T<2\245I\275\354\253\013>\371<\026>\204Pv\275B\371->\037U\005>\036\275\n\276\2062-><\357\244\275\025i\007\276\3269\035\276u\343\030\276\2406r\275\025\342m=u\304\215\274\032\"\305\275D\321\365<\335\245\211\276\275\260\216=\3007\262<\2024R>\315`\000>\323\021+=\271\323<>\323c\251=\342\244\277<\261]\020\276\010\017\325\275\251\005E=V\220\355\275\007\260>\275\321\023l=6\036P\275\305\241\004\276\307\261\036\276S\016N\276\325_{<\220\252\324\2742\260\217=\356\216\255\275\230\204\310\275\375\3156\275\263n7\276e7\020>\341\330\223\276\244c\377=\016c\236=\214\247{;\001\320\353=\244GN\275\265R*\276G\226\255\275\035&\203>\272\026$<\203\177{>\264\220\276<6$)\2749]\231=\246)\225\275\261e\025\274\242Q\242=F\310\037\276\031\330\336\274V\\\010=\032\336\025\276\240\362x\274\312\331\202\276)2\376\275\322\3700>\247}\256\276\300\254\230<\0102\316=\342x!>\n(m\276\255l\250\274\013\200A\275\260\022\376\275\210w\274=\017\002\030>\374\021\211\275O\016:\276Yi7=\016\365\323<w\364\271=\037)\261<AU\t\276\023\002\030\276%.\230\275\345,A=\254\'\215=V\361.\275\204\365o\273\241e\037\275\036\'}=\341\361F\275\220\245\367=}\035#>\204\221\276<\255\032\005\275$3\243\275M\005\025=\350tB=\035tk\276(\232^>\356\331\345=g\312O\276\225\317\001\276\200\244\r\276\230\204\273=\377K\203>\372\253\211=M\326V>\252\0275\275\373\337&=\016\376\362\275r\031\206=[5\026=\321\'T>&d\321\273\037Q\224\276Lb\216\275\301p\t\275\272#7=\t\373\366\2744k\326<Q:\004\275AG\013>B\265\342\275\323l\300\275\000p\326=\316\224\267<\014\232t\276r\357f\275\310\010\363\275\255\376\320=\205\306\177>\010z\204>\221\215H=\311\347\217<\345a\371\275~\267\212=\311\025T=\367\276\375\275nr\023=1`\227=\242\256\024<\300hI>1\277\237\275\035S>\275\201\366\370<FJ\006>\333W\020\276\t\030|\276\270\200\316\274\321\214\274=3+\300\275\327v\243=\252\241\016>,\320\"\275VQ\317\275B+\324\275\246?\251:&\n\212\275\375\330\032\276\372\255\325\2769V\024>\203\331{\275>\352\363=\327\366}\276\264\237V<\274\372\355\27522\016>&I\026=\322\250\245:70\020\275>8\351;\344\306\271<8\343\256=*q\204\275\305\336\023\275\205\226\230\274\010\270\217<\017\347&\276n\013\">8KB\276\307x\016>_\360\302=>\376~>+5\347\274?\307\373<\344FK>\302\335\000\274G\262\024=\342v\233\275Cv\220\275q}\263<g\344\201=fI\317<8\n\022>\233\324B=l\320\030\276\177\217\222<O\023p\276z2\001=R\345\204\274\253?\221=\251<\013>;*\341\275\326M\231=]\202Y>O\317\361=\315\231\375=\363#W;\354\246\320=Y`(\276\374\214\215=\264E\342\275nI\355\275k3\370=\030\362\250=\302\235.>B]\315\274\310\372Q=\207 \245\275\272Mg<?o\231<b;\243=\312 F\276\257\334^>\342\323\274=\366\203)\275\201\206\231=\021\221\375\275\356x&\276\007F\251\2767\316\177>s\037\003>\313\227\035=\256\357A\274\000\265*\275YW\251<\032\220L<\205:\032=\336\277\233;#\r\257\2752\360 \275\360p\201=\321B\323=\344\254n=u\202}\276\373\330\306\275\366$!;{\357\352\275\232h\252\275\257\tw=\007\363\350=4y\304\275T\343~>^w\035>%l\222>|\210\275\274-\205)\276\267\026\255\274\354g\302\275\216\326.>WXl=\351\034\234\2753\340N\273%\244\005>\270\277\337\274\022\332\257\276\0143p<\3559\315=\335\031\322=\007(\001=CU\233\275\020\212c>\371\326\200;U\3169>\262v{\276\217\"\355;~\233\336<\242\226%>\256\343\224\275\210\253\021=Yw\307\275\372\336\310=\253\325\377\2747\300,=\360G\032\276\010\215\207\274\277s\230\275\317%2=\256\234<=7\264\323\2751d\017>\267\325\315=\370\243f\275\331<\016\275\r`\361\275\272\224\"\276 \021\n=\270{\310\2752\342\010>\364\306`\276D{\237=\035?\206=\243\217\201\275\321\320D>\356.~\276\001\213T\273\330z;\275LZ\252=s\244!\276\023\255p\275^%\230\276\202\266?\275U\306B\276\345y\310\275\213\354\031\275\300\322\010\276/\360\017\276\023\300a\275U\016C>\351\357\227\275\226f<=7v\317<\310\256\277\275D\350\314\274\214Q\272=\214\035\303\2745\241c\276\314\247\347\275\016\306\361=s\030\206\276\235\2572>\311vt\276\355,*\275\"\200\317\274\035\271\306=\254k\275\275\327)S=\345Y\243=\026\313\264\273R\220\033>\000^\237\275\244\345{=\006p\367=@\331G\275\210eD\276y\007\244>\266$x<\330\374\022=\330\274\332<\373\334x\275\266\244\335<\020\013\013<%\235\006>y\345\202=\336IX\275\205\031\021\276R\225n=\353\203o\275\252\016\223=Y\256\003=\020\267\215\275\036s\007=\240\\\306=\2749\254\274\357z.\2753\034\023\276\367a%>\322\016+\276\253\272h=\216\305?>e\024\272\275\233d\242\276\321\216\364\275Q\312\361\274\353\307\023\2761t\350\274K\\-\276O^O>\225m\312<\001\251o>s\000\n\276\005N8>\223\r\217\275\255\227\262=\034Bq\275[\244\337\273\251K\255\275\372\277\302\270\343\236@\276\363Dn>\010\013\315\275\033n2\276\307\023\257=\364Q\266=U(\025\276NkV>b\021\022>y\001N=T\t/\2749@\205\275`8\335\275\224\326\363:\250\3149\276?F\312>V\346\3549\321\252\370=`\233\254\275o\005\341=\345\033a\275\331\343\333<\301\021\\\2763\304\376\275\232\333N=.\217\236\275\027x)=+\323\337=9\2200\275\337\264k=&\245_\273\033\210\203\275\203\246\'=\325En=Ttf=`3\343\275\032w\027\276\214\010\301\274\365y\362\27438\251\275YYE>\233o\020\276Fx\217\275k\364\247=\257\365\217\275\264\2017\273\255\373i>\225\365\207\276[V\n=j\201\035\275\362A\305=\007\230\242=\336\256\210\275-\225\335\275<9\222\273\204\321\006\2762\242F>\343\275\034>\210S6\276\206\026.\276\3210*>g\267\277<\022\356\330\275\227\365\361=\215]\225\275E\010\t\276\331\221\000>\356~\322=>\372r=\204\2044; \203 >\341\252\020\276\2614@>g\032Q=\255\031\367=b\020\001\276\243\264\272=\252\275\235<i;\033=\374\227\023\276f\3658\274\026\336&<:\340\247\276\250\327h\275\030\017~:3\344\374=\253\177.\276\227ef>Q~E\276o\273\273<\274\373\020\275\264\031\213=\336\t\214\276\330\224D>\002\243[\274\365\340U\273\345r\001\276z\036\252\274y_q\275*\363\214>\303=\032\274U)\235=\337\327\323\274\331\355\321\275\215\373]=\022\237\267\274\'\236\212=\371j\024>K\271\n>\341\231\t<\257G2>\262\330Z\276 \316\344;y;\265=\216\224\035\275\230\241\276\275J\217\226=Ve7\276&=B=\340Y>\276\376\256\346\2752\234\300\275\034x4\276e\360\257=!/\274\2748\005s\275\245\223\363=b\327\275=\340+\367=cT\221\275!\304\016\2763a\333;\3649s<\350\246\016\276!2\023\275\351\306|=_\310\302\275\001\242\241=i\343&\275j\301\312\275\311u\001\276\203\022V\276\264\035\226>\242\030\030\275\344p9>t\301v\273\024PE\276z[O\276~\323\214\275\226\300\374\275\274\016;\275O\245\246=\355\252\016\276\026 m\274\361-.<\363\205\360<|S\260\275\023F\276=\277\357J=%\357R\276\355(\003=@|\200>\246\346Q>\345\234!\276\240\250\\=\344\361\005\276\313,\007>\372T_\276A\360%\275\277W\037=\200\247\002\274i\n\220\275\266.I>\320\374a\275F0\230\275\210\217\346\274T\367\260\275\376\256\233=t\302|<,|\265\275\340!\247\275&\021;\276\360\271\203\276\311\027h=\027\305?>AEK>\3410/>\301]\266\275}=/\275\231gU=6\230\262\273\212>\274=\3406o\276\274\317\271\275\000\367\\=\202b\313\275\253\233\212\276w\310\252=\325\tw>~\336,>\226\232r\275~\206\363\274\303?\014>P\376\352=u\365`\275oDc<\217\000\\\275\206\036=>j\271z=BR\306=\004\375\010=\031\3074\275\363\352s\276l\242\320\273\253v~=\274\210\247\275\234 \252\275M!\243\274\322\034Q=f\217*\275\274O\t\276{dt=\301\330\035>\345a-\276\256\277\204\276\220G\235\275f\272\224<g\222\246=\302+4\276\361\r&\276\356N\022\276-\000\337\274\272\374-\276-\005,\276\303\236\230<\315\t\305\275\271u\346\275\2212\022\276\251\200\010\276xb\n>k\203\367=\3347\342\275\025B\274=\002\034\212\276\023t\201=+{\007\275FH\361\275\261\000\203=+\255F\275$~U=\005\310\034\274\020\323\205>\016\312\252\275miX\276q\204\375\275+o)>\025\202B\276w\"\323\275\346;\344=CQ\306=\335\341k=\t\0069>(\177e=\251C\210>\010\341\377\275\304b\207=\237\366\272=\240wF=\224ej=\210\300\211=\3069\267\275j}\250=\265[\022\2768\365->\213R\032\276\330\204\277=\222V\332=\351\3774>\230\233n>\310O<>\225d\322\2752\370\026=Q\224\321\274\356\353\343\275\330\366\023=\250\242\251=\206\336R\276\223\274~>\346\177;>v\247\224=C\322\215>\253\241\022\275\'\200d\275\333\231\224\2753[\335=\305p\310=r\003\311=\036\034\013<k\3419>|\226I\275A\312Z>\004]4\275\231\245\243\275~]\032<\231kt\275\367I\212\275\254MI=xP\212\275\366\t7\275o\363\003=F\276r=\347\217+>\214t\303=\263\224\265\275\217\252\303=\002Ez\275\371\3557\276RDI\276\361\204\315\275X\3337\276\363\351\245<\275\224&\276r(o\276\334\033f\273\003S\332=|\036:\276\007\007)>\017\'\'=\345\202\223=c\034\300<\242\222\250<\300\020\021>\314\214\177\275\312)\\\276\351\370\022>\351\256\216=&\363\026=\304w^\275u\232<\275\235\234m>\302<\251>\260\233\014>\027\212\302\275\026\273\200<FI\000>\255\211\306\275b(\317=\220\245\206=\262m\016\275T\t\212;8\250\362=\222\361&>\320&\231;K\213\002\276\t$\253<<c\031\276\027w\356\275\004\371\300\275,\020\313\274i\376\354=}\313a\276.\206\234\275\250\016\001\276|%D;\213\275\312=\320\274(\276\217\376;=\246\220=\275\331\\\334=\016\352\">3\031s\275\350\351\014\276K\240\177>\316v\252\274I<\225=FZk\275x]\'\276\344Dg=\205\214\016=\224&=\275"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "dropout_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "dropout_1/cond/Merge"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value/Minimum"
  input: "bidirectional_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "bidirectional_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while/Enter_4"
  input: "bidirectional_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1"
  op: "Less"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while/Less"
  input: "bidirectional_1/while/Less_1"
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/LogicalAnd"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while/Merge_4"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_2"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "bidirectional_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_4"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "bidirectional_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_8"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "bidirectional_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_9"
  op: "Add"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit_1"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "dropout_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "dropout_1/cond/Merge"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_3/Minimum"
  input: "bidirectional_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_4/Minimum"
  input: "bidirectional_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_5/Minimum"
  input: "bidirectional_1/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_4"
  input: "bidirectional_1/while_1/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1"
  op: "Less"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while_1/Less"
  input: "bidirectional_1/while_1/Less_1"
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/LogicalAnd"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_4"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_2"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "bidirectional_1/while_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_4"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/while_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_8"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/while_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9"
  op: "Add"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit_1"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_3"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice"
  op: "StridedSlice"
  input: "Flatten/Shape"
  input: "Flatten/strided_slice/stack"
  input: "Flatten/strided_slice/stack_1"
  input: "Flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/Prod"
  op: "Prod"
  input: "Flatten/strided_slice"
  input: "Flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Flatten/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Flatten/stack"
  op: "Pack"
  input: "Flatten/stack/0"
  input: "Flatten/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Reshape"
  op: "Reshape"
  input: "bidirectional_1/concat"
  input: "Flatten/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.042874645441770554
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.042874645441770554
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8251242
    }
  }
}
node {
  name: "Dense_1/random_uniform/sub"
  op: "Sub"
  input: "Dense_1/random_uniform/max"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform/mul"
  op: "Mul"
  input: "Dense_1/random_uniform/RandomUniform"
  input: "Dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform"
  op: "Add"
  input: "Dense_1/random_uniform/mul"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/kernel/Assign"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "Dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/kernel/read"
  op: "Identity"
  input: "Dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Square"
  op: "Square"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer/mul"
  input: "Dense_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add"
  op: "Add"
  input: "Dense_1/weight_regularizer/add/x"
  input: "Dense_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/bias/Assign"
  op: "Assign"
  input: "Dense_1/bias"
  input: "Dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/bias/read"
  op: "Identity"
  input: "Dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer_1/mul"
  input: "Dense_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_1/weight_regularizer_1/add/x"
  input: "Dense_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/MatMul"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/BiasAdd"
  op: "BiasAdd"
  input: "Dense_1/MatMul"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_1/Relu"
  op: "Relu"
  input: "Dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29925280809402466
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29925280809402466
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1977819
    }
  }
}
node {
  name: "Dense_2/random_uniform/sub"
  op: "Sub"
  input: "Dense_2/random_uniform/max"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/mul"
  op: "Mul"
  input: "Dense_2/random_uniform/RandomUniform"
  input: "Dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform"
  op: "Add"
  input: "Dense_2/random_uniform/mul"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/kernel/Assign"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "Dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/kernel/read"
  op: "Identity"
  input: "Dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Square"
  op: "Square"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer/mul"
  input: "Dense_2/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add"
  op: "Add"
  input: "Dense_2/weight_regularizer/add/x"
  input: "Dense_2/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/bias/Assign"
  op: "Assign"
  input: "Dense_2/bias"
  input: "Dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/bias/read"
  op: "Identity"
  input: "Dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer_1/mul"
  input: "Dense_2/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_2/weight_regularizer_1/add/x"
  input: "Dense_2/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/MatMul"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/BiasAdd"
  op: "BiasAdd"
  input: "Dense_2/MatMul"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_2/Softmax"
  op: "Softmax"
  input: "Dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "Dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum"
  op: "Sum"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv"
  op: "RealDiv"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub"
  op: "Sub"
  input: "loss/Dense_2_loss/sub/x"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Log"
  op: "Log"
  input: "loss/Dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul"
  op: "Mul"
  input: "Dense_2_target"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/Dense_2_loss/mul"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean"
  op: "Mean"
  input: "loss/Dense_2_loss/Neg"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "Dense_2_sample_weights"
  input: "loss/Dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Cast"
  op: "Cast"
  input: "loss/Dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/Dense_2_loss/Cast"
  input: "loss/Dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/Dense_2_loss/mul_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/Dense_2_loss/truediv_1"
  input: "loss/Dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/mul"
  input: "LSTM_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "LSTM_1/weight_regularizer_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/add_1"
  input: "Dense_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3"
  op: "Add"
  input: "loss/add_2"
  input: "Dense_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4"
  op: "Add"
  input: "loss/add_3"
  input: "LSTM_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5"
  op: "Add"
  input: "loss/add_4"
  input: "Dense_2/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_6"
  op: "Add"
  input: "loss/add_5"
  input: "Dense_2/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "Dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "Dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/Shape"
  input: "training/RMSprop/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge"
  op: "Merge"
  input: "training/RMSprop/gradients/f_count_1"
  input: "training/RMSprop/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add"
  op: "Add"
  input: "training/RMSprop/gradients/Switch:1"
  input: "training/RMSprop/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Add"
  input: "^training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_2"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_1"
  op: "Merge"
  input: "training/RMSprop/gradients/b_count_1"
  input: "training/RMSprop/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_2"
  op: "LoopCond"
  input: "training/RMSprop/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_1"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Sub"
  op: "Sub"
  input: "training/RMSprop/gradients/Switch_1:1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Sub"
  input: "^training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_3"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_4"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_2"
  op: "Merge"
  input: "training/RMSprop/gradients/f_count_4"
  input: "training/RMSprop/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_2"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add_1"
  op: "Add"
  input: "training/RMSprop/gradients/Switch_2:1"
  input: "training/RMSprop/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Add_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_5"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_5"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_3"
  op: "Merge"
  input: "training/RMSprop/gradients/b_count_5"
  input: "training/RMSprop/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/Merge_3"
  input: "training/RMSprop/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_6"
  op: "LoopCond"
  input: "training/RMSprop/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_3"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_3"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Sub_1"
  op: "Sub"
  input: "training/RMSprop/gradients/Switch_3:1"
  input: "training/RMSprop/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Sub_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_7"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_7"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_4"
  op: "Merge"
  input: "training/RMSprop/gradients/f_count_7"
  input: "training/RMSprop/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_4"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add_2"
  op: "Add"
  input: "training/RMSprop/gradients/Switch_4:1"
  input: "training/RMSprop/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Add_2"
  input: "^training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_8"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_9"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_5"
  op: "Merge"
  input: "training/RMSprop/gradients/b_count_9"
  input: "training/RMSprop/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/Merge_5"
  input: "training/RMSprop/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_10"
  op: "LoopCond"
  input: "training/RMSprop/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_5"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_5"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Sub_2"
  op: "Sub"
  input: "training/RMSprop/gradients/Switch_5:1"
  input: "training/RMSprop/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Sub_2"
  input: "^training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_11"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/bias/read"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/kernel/read"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/bias/read"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Fill"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/kernel/read"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/bias/read"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/kernel/read"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/add"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Size"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/range"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/mod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "Dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2_target"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/Dense_2_loss/clip_by_value"
  input: "^training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/mul"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/add"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Size"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/range"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/mod"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN"
  op: "AddN"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  input: "training/RMSprop/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/AddN"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/mul"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/RMSprop/gradients/AddN"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/sub"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/mul_1"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "training/RMSprop/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_1"
  op: "AddN"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/RMSprop/gradients/Dense_2/MatMul_grad/MatMul"
  input: "Dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_2"
  op: "AddN"
  input: "training/RMSprop/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/Dense_1/Relu_grad/ReluGrad"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/Dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "training/RMSprop/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_3"
  op: "AddN"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/Dense_1/MatMul_grad/MatMul"
  input: "training/RMSprop/gradients/Flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_4"
  op: "AddN"
  input: "training/RMSprop/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/Dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional_1/concat/axis"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/mod"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/ShapeN"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/Slice"
  op: "Slice"
  input: "training/RMSprop/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/ConcatOffset"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/concat_grad/Slice_1"
  op: "Slice"
  input: "training/RMSprop/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/ConcatOffset:1"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/Slice"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/RMSprop/gradients/bidirectional_1/concat_grad/Slice_1"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while/Exit_2"
  input: "^training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_1_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_3_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while_1/Exit_2"
  input: "^training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_3_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile/multiples"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/stack"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/range/start"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Size"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_1/multiples"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/stack"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/range/start"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Size"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_5"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_3_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/AddN_5"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_6"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/AddN_6"
  input: "training/RMSprop/gradients/bidirectional_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_2/multiples"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/stack"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/range/start"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Size"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_3/multiples"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/stack"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/range/start"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Size"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum/reduction_indices"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/add"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/range/start"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Size"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Shape_1"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/range"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/mod"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_7"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_3_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/AddN_7"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_8"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/Tile_3_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/AddN_8"
  input: "training/RMSprop/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_8"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_9"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while/Merge_4_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_9"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_9"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum_1/reduction_indices"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/add"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/range"
  op: "Range"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/range/start"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Size"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/range"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/mod"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while/Identity_4"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_8"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_10"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Merge_4_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_10"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_10"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while/add_7"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Identity_4"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_4"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_7"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/Identity_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_4"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_2"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while/add_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  input: "bidirectional_1/while/add_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/Identity_3"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_3"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Shape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_11"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_12"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/AddN_12"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_13"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_14"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_15"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_16"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/RMSprop/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/AddN_16"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_1"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_17"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_18"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_19"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_3"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_20"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/RMSprop/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/bidirectional_1/transpose_2_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_21"
  op: "AddN"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_grad/transpose"
  input: "training/RMSprop/gradients/bidirectional_1/transpose_2_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "training/RMSprop/gradients/AddN_21"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_6"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Identity"
  op: "Identity"
  input: "training/RMSprop/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Shape_1"
  op: "Shape"
  input: "training/RMSprop/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/Shape_1"
  input: "training/RMSprop/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "training/RMSprop/gradients/dropout_1/cond/Merge_grad/cond_grad"
  input: "training/RMSprop/gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "dropout_1/cond/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/dropout_1/cond/Merge_grad/cond_grad:1"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/dropout/mul"
  input: "training/RMSprop/gradients/dropout_1/cond/Merge_grad/cond_grad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_1/cond/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Mul"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/mul"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Shape"
  op: "Shape"
  input: "dropout_1/cond/mul/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Shape"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  input: "dropout_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Mul"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/mul/Switch:1"
  input: "training/RMSprop/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_7"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Identity_1"
  op: "Identity"
  input: "training/RMSprop/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_1"
  op: "Fill"
  input: "training/RMSprop/gradients/Shape_2"
  input: "training/RMSprop/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/dropout_1/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "training/RMSprop/gradients/zeros_1"
  input: "training/RMSprop/gradients/dropout_1/cond/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_22"
  op: "AddN"
  input: "training/RMSprop/gradients/dropout_1/cond/Switch_1_grad/cond_grad"
  input: "training/RMSprop/gradients/dropout_1/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/RMSprop/gradients/AddN_22"
  input: "training/RMSprop/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "LSTM_1/while/Exit_2"
  input: "^training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "LSTM_1/TensorArrayStack/range"
  input: "training/RMSprop/gradients/LSTM_1/transpose_1_grad/transpose"
  input: "training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  input: "training/RMSprop/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  input: "training/RMSprop/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  input: "training/RMSprop/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  input: "^training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_23"
  op: "AddN"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_3_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/AddN_23"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_2"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_8"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_24"
  op: "AddN"
  input: "training/RMSprop/gradients/LSTM_1/while/Merge_4_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_24"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_24"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  input: "LSTM_1/while/Identity_4"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  input: "LSTM_1/while/add_7"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/LSTM_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_4"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_2"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "LSTM_1/while/Identity_3"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  input: "LSTM_1/while/add_3"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/LSTM_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Shape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  input: "LSTM_1/while/add_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/LSTM_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_11_grad/Shape"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_7_grad/Shape"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_10_grad/Shape"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_6_grad/Shape"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_3_grad/Shape"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_2_grad/Shape"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_25"
  op: "AddN"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_9_grad/Shape"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_5_grad/Shape"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_8_grad/Shape"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_4_grad/Shape"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_1_grad/Shape"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_grad/Shape"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  input: "training/RMSprop/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_26"
  op: "AddN"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_27"
  op: "AddN"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_28"
  op: "AddN"
  input: "training/RMSprop/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros"
  op: "Fill"
  input: "training/RMSprop/zeros/shape_as_tensor"
  input: "training/RMSprop/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable/read"
  op: "Identity"
  input: "training/RMSprop/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1"
  op: "Fill"
  input: "training/RMSprop/zeros_1/shape_as_tensor"
  input: "training/RMSprop/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/read"
  op: "Identity"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/read"
  op: "Identity"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_3"
  op: "Fill"
  input: "training/RMSprop/zeros_3/shape_as_tensor"
  input: "training/RMSprop/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/read"
  op: "Identity"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_4"
  op: "Fill"
  input: "training/RMSprop/zeros_4/shape_as_tensor"
  input: "training/RMSprop/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/read"
  op: "Identity"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_5/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_5"
  input: "training/RMSprop/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_5/read"
  op: "Identity"
  input: "training/RMSprop/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_6"
  op: "Fill"
  input: "training/RMSprop/zeros_6/shape_as_tensor"
  input: "training/RMSprop/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_6/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_6"
  input: "training/RMSprop/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_6/read"
  op: "Identity"
  input: "training/RMSprop/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_7"
  op: "Fill"
  input: "training/RMSprop/zeros_7/shape_as_tensor"
  input: "training/RMSprop/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_7/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_7"
  input: "training/RMSprop/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_7/read"
  op: "Identity"
  input: "training/RMSprop/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_8/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_8"
  input: "training/RMSprop/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_8/read"
  op: "Identity"
  input: "training/RMSprop/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_9"
  op: "Fill"
  input: "training/RMSprop/zeros_9/shape_as_tensor"
  input: "training/RMSprop/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_9/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_9"
  input: "training/RMSprop/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_9/read"
  op: "Identity"
  input: "training/RMSprop/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_9"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_10/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_10"
  input: "training/RMSprop/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_10/read"
  op: "Identity"
  input: "training/RMSprop/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_10"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_11/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_11"
  input: "training/RMSprop/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_11/read"
  op: "Identity"
  input: "training/RMSprop/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_11"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_12/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_12"
  input: "training/RMSprop/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_12/read"
  op: "Identity"
  input: "training/RMSprop/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_12"
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd"
  op: "AssignAdd"
  input: "RMSprop/iterations"
  input: "training/RMSprop/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/mul"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub"
  op: "Sub"
  input: "training/RMSprop/sub/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_1"
  op: "Mul"
  input: "training/RMSprop/sub"
  input: "training/RMSprop/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add"
  op: "Add"
  input: "training/RMSprop/mul"
  input: "training/RMSprop/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_2"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add"
  input: "training/RMSprop/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value/Minimum"
  input: "training/RMSprop/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_1"
  op: "Add"
  input: "training/RMSprop/Sqrt"
  input: "training/RMSprop/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv"
  op: "RealDiv"
  input: "training/RMSprop/mul_2"
  input: "training/RMSprop/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_1"
  op: "Sub"
  input: "LSTM_1/kernel/read"
  input: "training/RMSprop/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_1"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "training/RMSprop/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_3"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_2"
  op: "Sub"
  input: "training/RMSprop/sub_2/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_1"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_4"
  op: "Mul"
  input: "training/RMSprop/sub_2"
  input: "training/RMSprop/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_2"
  op: "Add"
  input: "training/RMSprop/mul_3"
  input: "training/RMSprop/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_2"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_5"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_2"
  input: "training/RMSprop/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_1/Minimum"
  input: "training/RMSprop/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_1"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_3"
  op: "Add"
  input: "training/RMSprop/Sqrt_1"
  input: "training/RMSprop/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_1"
  op: "RealDiv"
  input: "training/RMSprop/mul_5"
  input: "training/RMSprop/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_3"
  op: "Sub"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/RMSprop/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_3"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "training/RMSprop/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_6"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_4"
  op: "Sub"
  input: "training/RMSprop/sub_4/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_2"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_7"
  op: "Mul"
  input: "training/RMSprop/sub_4"
  input: "training/RMSprop/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_4"
  op: "Add"
  input: "training/RMSprop/mul_6"
  input: "training/RMSprop/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_4"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_8"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_4"
  input: "training/RMSprop/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_2/Minimum"
  input: "training/RMSprop/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_2"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_5"
  op: "Add"
  input: "training/RMSprop/Sqrt_2"
  input: "training/RMSprop/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_2"
  op: "RealDiv"
  input: "training/RMSprop/mul_8"
  input: "training/RMSprop/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_5"
  op: "Sub"
  input: "LSTM_1/bias/read"
  input: "training/RMSprop/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_5"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "training/RMSprop/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_9"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_6"
  op: "Sub"
  input: "training/RMSprop/sub_6/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_3"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_10"
  op: "Mul"
  input: "training/RMSprop/sub_6"
  input: "training/RMSprop/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_6"
  op: "Add"
  input: "training/RMSprop/mul_9"
  input: "training/RMSprop/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_11"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_6"
  input: "training/RMSprop/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_3/Minimum"
  input: "training/RMSprop/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_3"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_7"
  op: "Add"
  input: "training/RMSprop/Sqrt_3"
  input: "training/RMSprop/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_3"
  op: "RealDiv"
  input: "training/RMSprop/mul_11"
  input: "training/RMSprop/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_7"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "training/RMSprop/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_7"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "training/RMSprop/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_12"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_8"
  op: "Sub"
  input: "training/RMSprop/sub_8/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_4"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_13"
  op: "Mul"
  input: "training/RMSprop/sub_8"
  input: "training/RMSprop/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_8"
  op: "Add"
  input: "training/RMSprop/mul_12"
  input: "training/RMSprop/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_14"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_8"
  input: "training/RMSprop/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_4/Minimum"
  input: "training/RMSprop/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_4"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_9"
  op: "Add"
  input: "training/RMSprop/Sqrt_4"
  input: "training/RMSprop/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_4"
  op: "RealDiv"
  input: "training/RMSprop/mul_14"
  input: "training/RMSprop/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_9"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "training/RMSprop/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_9"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "training/RMSprop/sub_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_15"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_10"
  op: "Sub"
  input: "training/RMSprop/sub_10/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_5"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_16"
  op: "Mul"
  input: "training/RMSprop/sub_10"
  input: "training/RMSprop/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_10"
  op: "Add"
  input: "training/RMSprop/mul_15"
  input: "training/RMSprop/mul_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_10"
  op: "Assign"
  input: "training/RMSprop/Variable_5"
  input: "training/RMSprop/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_17"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_10"
  input: "training/RMSprop/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_5"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_5/Minimum"
  input: "training/RMSprop/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_5"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_11"
  op: "Add"
  input: "training/RMSprop/Sqrt_5"
  input: "training/RMSprop/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_5"
  op: "RealDiv"
  input: "training/RMSprop/mul_17"
  input: "training/RMSprop/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_11"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "training/RMSprop/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_11"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "training/RMSprop/sub_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_18"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_12"
  op: "Sub"
  input: "training/RMSprop/sub_12/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_6"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_19"
  op: "Mul"
  input: "training/RMSprop/sub_12"
  input: "training/RMSprop/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_12"
  op: "Add"
  input: "training/RMSprop/mul_18"
  input: "training/RMSprop/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_12"
  op: "Assign"
  input: "training/RMSprop/Variable_6"
  input: "training/RMSprop/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_20"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_12"
  input: "training/RMSprop/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_6"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_6/Minimum"
  input: "training/RMSprop/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_6"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_13/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_13"
  op: "Add"
  input: "training/RMSprop/Sqrt_6"
  input: "training/RMSprop/add_13/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_6"
  op: "RealDiv"
  input: "training/RMSprop/mul_20"
  input: "training/RMSprop/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_13"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "training/RMSprop/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_13"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "training/RMSprop/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_21"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_14"
  op: "Sub"
  input: "training/RMSprop/sub_14/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_7"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_22"
  op: "Mul"
  input: "training/RMSprop/sub_14"
  input: "training/RMSprop/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_14"
  op: "Add"
  input: "training/RMSprop/mul_21"
  input: "training/RMSprop/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_14"
  op: "Assign"
  input: "training/RMSprop/Variable_7"
  input: "training/RMSprop/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_23"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_14"
  input: "training/RMSprop/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_7"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_7/Minimum"
  input: "training/RMSprop/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_7"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_15"
  op: "Add"
  input: "training/RMSprop/Sqrt_7"
  input: "training/RMSprop/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_7"
  op: "RealDiv"
  input: "training/RMSprop/mul_23"
  input: "training/RMSprop/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_15"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "training/RMSprop/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_15"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "training/RMSprop/sub_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_24"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_16/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_16"
  op: "Sub"
  input: "training/RMSprop/sub_16/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_8"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_25"
  op: "Mul"
  input: "training/RMSprop/sub_16"
  input: "training/RMSprop/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_16"
  op: "Add"
  input: "training/RMSprop/mul_24"
  input: "training/RMSprop/mul_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_16"
  op: "Assign"
  input: "training/RMSprop/Variable_8"
  input: "training/RMSprop/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_26"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_16"
  input: "training/RMSprop/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_8"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_8/Minimum"
  input: "training/RMSprop/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_8"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_17/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_17"
  op: "Add"
  input: "training/RMSprop/Sqrt_8"
  input: "training/RMSprop/add_17/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_8"
  op: "RealDiv"
  input: "training/RMSprop/mul_26"
  input: "training/RMSprop/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_17"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "training/RMSprop/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_17"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "training/RMSprop/sub_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_27"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_18"
  op: "Sub"
  input: "training/RMSprop/sub_18/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_9"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_28"
  op: "Mul"
  input: "training/RMSprop/sub_18"
  input: "training/RMSprop/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_18"
  op: "Add"
  input: "training/RMSprop/mul_27"
  input: "training/RMSprop/mul_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_18"
  op: "Assign"
  input: "training/RMSprop/Variable_9"
  input: "training/RMSprop/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_29"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_18"
  input: "training/RMSprop/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_9"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_9/Minimum"
  input: "training/RMSprop/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_9"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_19/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_19"
  op: "Add"
  input: "training/RMSprop/Sqrt_9"
  input: "training/RMSprop/add_19/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_9"
  op: "RealDiv"
  input: "training/RMSprop/mul_29"
  input: "training/RMSprop/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_19"
  op: "Sub"
  input: "Dense_1/kernel/read"
  input: "training/RMSprop/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_19"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "training/RMSprop/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_30"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_20"
  op: "Sub"
  input: "training/RMSprop/sub_20/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_10"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_31"
  op: "Mul"
  input: "training/RMSprop/sub_20"
  input: "training/RMSprop/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_20"
  op: "Add"
  input: "training/RMSprop/mul_30"
  input: "training/RMSprop/mul_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_20"
  op: "Assign"
  input: "training/RMSprop/Variable_10"
  input: "training/RMSprop/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_32"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_20"
  input: "training/RMSprop/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_10"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_10/Minimum"
  input: "training/RMSprop/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_10"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_21"
  op: "Add"
  input: "training/RMSprop/Sqrt_10"
  input: "training/RMSprop/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_10"
  op: "RealDiv"
  input: "training/RMSprop/mul_32"
  input: "training/RMSprop/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_21"
  op: "Sub"
  input: "Dense_1/bias/read"
  input: "training/RMSprop/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_21"
  op: "Assign"
  input: "Dense_1/bias"
  input: "training/RMSprop/sub_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_33"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_22/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_22"
  op: "Sub"
  input: "training/RMSprop/sub_22/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_11"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_34"
  op: "Mul"
  input: "training/RMSprop/sub_22"
  input: "training/RMSprop/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_22"
  op: "Add"
  input: "training/RMSprop/mul_33"
  input: "training/RMSprop/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_22"
  op: "Assign"
  input: "training/RMSprop/Variable_11"
  input: "training/RMSprop/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_35"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_22"
  input: "training/RMSprop/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_11"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_11/Minimum"
  input: "training/RMSprop/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_11"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_23/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_23"
  op: "Add"
  input: "training/RMSprop/Sqrt_11"
  input: "training/RMSprop/add_23/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_11"
  op: "RealDiv"
  input: "training/RMSprop/mul_35"
  input: "training/RMSprop/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_23"
  op: "Sub"
  input: "Dense_2/kernel/read"
  input: "training/RMSprop/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_23"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "training/RMSprop/sub_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_36"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_24"
  op: "Sub"
  input: "training/RMSprop/sub_24/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_12"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_37"
  op: "Mul"
  input: "training/RMSprop/sub_24"
  input: "training/RMSprop/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_24"
  op: "Add"
  input: "training/RMSprop/mul_36"
  input: "training/RMSprop/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_24"
  op: "Assign"
  input: "training/RMSprop/Variable_12"
  input: "training/RMSprop/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_38"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_24"
  input: "training/RMSprop/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_12"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_12/Minimum"
  input: "training/RMSprop/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_12"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_25/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_25"
  op: "Add"
  input: "training/RMSprop/Sqrt_12"
  input: "training/RMSprop/add_25/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_12"
  op: "RealDiv"
  input: "training/RMSprop/mul_38"
  input: "training/RMSprop/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_25"
  op: "Sub"
  input: "Dense_2/bias/read"
  input: "training/RMSprop/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_25"
  op: "Assign"
  input: "Dense_2/bias"
  input: "training/RMSprop/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
  input: "^training/RMSprop/Assign"
  input: "^training/RMSprop/AssignAdd"
  input: "^training/RMSprop/Assign_1"
  input: "^training/RMSprop/Assign_10"
  input: "^training/RMSprop/Assign_11"
  input: "^training/RMSprop/Assign_12"
  input: "^training/RMSprop/Assign_13"
  input: "^training/RMSprop/Assign_14"
  input: "^training/RMSprop/Assign_15"
  input: "^training/RMSprop/Assign_16"
  input: "^training/RMSprop/Assign_17"
  input: "^training/RMSprop/Assign_18"
  input: "^training/RMSprop/Assign_19"
  input: "^training/RMSprop/Assign_2"
  input: "^training/RMSprop/Assign_20"
  input: "^training/RMSprop/Assign_21"
  input: "^training/RMSprop/Assign_22"
  input: "^training/RMSprop/Assign_23"
  input: "^training/RMSprop/Assign_24"
  input: "^training/RMSprop/Assign_25"
  input: "^training/RMSprop/Assign_3"
  input: "^training/RMSprop/Assign_4"
  input: "^training/RMSprop/Assign_5"
  input: "^training/RMSprop/Assign_6"
  input: "^training/RMSprop/Assign_7"
  input: "^training/RMSprop/Assign_8"
  input: "^training/RMSprop/Assign_9"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "LSTM_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "LSTM_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Dense_1/bias/Assign"
  input: "^Dense_1/kernel/Assign"
  input: "^Dense_2/bias/Assign"
  input: "^Dense_2/kernel/Assign"
  input: "^LSTM_1/bias/Assign"
  input: "^LSTM_1/kernel/Assign"
  input: "^LSTM_1/recurrent_kernel/Assign"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^training/RMSprop/Variable/Assign"
  input: "^training/RMSprop/Variable_1/Assign"
  input: "^training/RMSprop/Variable_10/Assign"
  input: "^training/RMSprop/Variable_11/Assign"
  input: "^training/RMSprop/Variable_12/Assign"
  input: "^training/RMSprop/Variable_2/Assign"
  input: "^training/RMSprop/Variable_3/Assign"
  input: "^training/RMSprop/Variable_4/Assign"
  input: "^training/RMSprop/Variable_5/Assign"
  input: "^training/RMSprop/Variable_6/Assign"
  input: "^training/RMSprop/Variable_7/Assign"
  input: "^training/RMSprop/Variable_8/Assign"
  input: "^training/RMSprop/Variable_9/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^Dense_2/Softmax"
}
versions {
  producer: 38
}
